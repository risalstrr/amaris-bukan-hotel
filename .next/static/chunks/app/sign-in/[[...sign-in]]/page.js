/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
(self["webpackChunk_N_E"] = self["webpackChunk_N_E"] || []).push([["app/sign-in/[[...sign-in]]/page"],{

/***/ "(app-pages-browser)/./node_modules/next/dist/build/webpack/loaders/next-flight-client-entry-loader.js?modules=%2FUsers%2Frisalestari%2FDocuments%2Fgaruda%2Fsrc%2Fapp%2Fsign-in%2F%5B%5B...sign-in%5D%5D%2Fpage.tsx&server=false!":
/*!*********************************************************************************************************************************************************************************************************************!*\
  !*** ./node_modules/next/dist/build/webpack/loaders/next-flight-client-entry-loader.js?modules=%2FUsers%2Frisalestari%2FDocuments%2Fgaruda%2Fsrc%2Fapp%2Fsign-in%2F%5B%5B...sign-in%5D%5D%2Fpage.tsx&server=false! ***!
  \*********************************************************************************************************************************************************************************************************************/
/***/ (function(__unused_webpack_module, __unused_webpack_exports, __webpack_require__) {

eval(__webpack_require__.ts("Promise.resolve(/*! import() eager */).then(__webpack_require__.bind(__webpack_require__, /*! ./src/app/sign-in/[[...sign-in]]/page.tsx */ \"(app-pages-browser)/./src/app/sign-in/[[...sign-in]]/page.tsx\"))//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL25vZGVfbW9kdWxlcy9uZXh0L2Rpc3QvYnVpbGQvd2VicGFjay9sb2FkZXJzL25leHQtZmxpZ2h0LWNsaWVudC1lbnRyeS1sb2FkZXIuanM/bW9kdWxlcz0lMkZVc2VycyUyRnJpc2FsZXN0YXJpJTJGRG9jdW1lbnRzJTJGZ2FydWRhJTJGc3JjJTJGYXBwJTJGc2lnbi1pbiUyRiU1QiU1Qi4uLnNpZ24taW4lNUQlNUQlMkZwYWdlLnRzeCZzZXJ2ZXI9ZmFsc2UhIiwibWFwcGluZ3MiOiJBQUFBIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vX05fRS8/NjEzMCJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQoLyogd2VicGFja01vZGU6IFwiZWFnZXJcIiAqLyBcIi9Vc2Vycy9yaXNhbGVzdGFyaS9Eb2N1bWVudHMvZ2FydWRhL3NyYy9hcHAvc2lnbi1pbi9bWy4uLnNpZ24taW5dXS9wYWdlLnRzeFwiKSJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/next/dist/build/webpack/loaders/next-flight-client-entry-loader.js?modules=%2FUsers%2Frisalestari%2FDocuments%2Fgaruda%2Fsrc%2Fapp%2Fsign-in%2F%5B%5B...sign-in%5D%5D%2Fpage.tsx&server=false!\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/@clerk/clerk-react/dist/esm/chunk-3W5G4CYI.js":
/*!********************************************************************!*\
  !*** ./node_modules/@clerk/clerk-react/dist/esm/chunk-3W5G4CYI.js ***!
  \********************************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   __privateAdd: function() { return /* binding */ __privateAdd; },\n/* harmony export */   __privateGet: function() { return /* binding */ __privateGet; },\n/* harmony export */   __privateSet: function() { return /* binding */ __privateSet; }\n/* harmony export */ });\nvar __accessCheck = (obj, member, msg)=>{\n    if (!member.has(obj)) throw TypeError(\"Cannot \" + msg);\n};\nvar __privateGet = (obj, member, getter)=>{\n    __accessCheck(obj, member, \"read from private field\");\n    return getter ? getter.call(obj) : member.get(obj);\n};\nvar __privateAdd = (obj, member, value)=>{\n    if (member.has(obj)) throw TypeError(\"Cannot add the same private member more than once\");\n    member instanceof WeakSet ? member.add(obj) : member.set(obj, value);\n};\nvar __privateSet = (obj, member, value, setter)=>{\n    __accessCheck(obj, member, \"write to private field\");\n    setter ? setter.call(obj, value) : member.set(obj, value);\n    return value;\n};\n //# sourceMappingURL=chunk-3W5G4CYI.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL25vZGVfbW9kdWxlcy9AY2xlcmsvY2xlcmstcmVhY3QvZGlzdC9lc20vY2h1bmstM1c1RzRDWUkuanMiLCJtYXBwaW5ncyI6Ijs7Ozs7O0FBQUEsSUFBSUEsZ0JBQWdCLENBQUNDLEtBQUtDLFFBQVFDO0lBQ2hDLElBQUksQ0FBQ0QsT0FBT0UsR0FBRyxDQUFDSCxNQUNkLE1BQU1JLFVBQVUsWUFBWUY7QUFDaEM7QUFDQSxJQUFJRyxlQUFlLENBQUNMLEtBQUtDLFFBQVFLO0lBQy9CUCxjQUFjQyxLQUFLQyxRQUFRO0lBQzNCLE9BQU9LLFNBQVNBLE9BQU9DLElBQUksQ0FBQ1AsT0FBT0MsT0FBT08sR0FBRyxDQUFDUjtBQUNoRDtBQUNBLElBQUlTLGVBQWUsQ0FBQ1QsS0FBS0MsUUFBUVM7SUFDL0IsSUFBSVQsT0FBT0UsR0FBRyxDQUFDSCxNQUNiLE1BQU1JLFVBQVU7SUFDbEJILGtCQUFrQlUsVUFBVVYsT0FBT1csR0FBRyxDQUFDWixPQUFPQyxPQUFPWSxHQUFHLENBQUNiLEtBQUtVO0FBQ2hFO0FBQ0EsSUFBSUksZUFBZSxDQUFDZCxLQUFLQyxRQUFRUyxPQUFPSztJQUN0Q2hCLGNBQWNDLEtBQUtDLFFBQVE7SUFDM0JjLFNBQVNBLE9BQU9SLElBQUksQ0FBQ1AsS0FBS1UsU0FBU1QsT0FBT1ksR0FBRyxDQUFDYixLQUFLVTtJQUNuRCxPQUFPQTtBQUNUO0FBTUUsQ0FDRiwwQ0FBMEMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9fTl9FLy4vbm9kZV9tb2R1bGVzL0BjbGVyay9jbGVyay1yZWFjdC9kaXN0L2VzbS9jaHVuay0zVzVHNENZSS5qcz8wY2U5Il0sInNvdXJjZXNDb250ZW50IjpbInZhciBfX2FjY2Vzc0NoZWNrID0gKG9iaiwgbWVtYmVyLCBtc2cpID0+IHtcbiAgaWYgKCFtZW1iZXIuaGFzKG9iaikpXG4gICAgdGhyb3cgVHlwZUVycm9yKFwiQ2Fubm90IFwiICsgbXNnKTtcbn07XG52YXIgX19wcml2YXRlR2V0ID0gKG9iaiwgbWVtYmVyLCBnZXR0ZXIpID0+IHtcbiAgX19hY2Nlc3NDaGVjayhvYmosIG1lbWJlciwgXCJyZWFkIGZyb20gcHJpdmF0ZSBmaWVsZFwiKTtcbiAgcmV0dXJuIGdldHRlciA/IGdldHRlci5jYWxsKG9iaikgOiBtZW1iZXIuZ2V0KG9iaik7XG59O1xudmFyIF9fcHJpdmF0ZUFkZCA9IChvYmosIG1lbWJlciwgdmFsdWUpID0+IHtcbiAgaWYgKG1lbWJlci5oYXMob2JqKSlcbiAgICB0aHJvdyBUeXBlRXJyb3IoXCJDYW5ub3QgYWRkIHRoZSBzYW1lIHByaXZhdGUgbWVtYmVyIG1vcmUgdGhhbiBvbmNlXCIpO1xuICBtZW1iZXIgaW5zdGFuY2VvZiBXZWFrU2V0ID8gbWVtYmVyLmFkZChvYmopIDogbWVtYmVyLnNldChvYmosIHZhbHVlKTtcbn07XG52YXIgX19wcml2YXRlU2V0ID0gKG9iaiwgbWVtYmVyLCB2YWx1ZSwgc2V0dGVyKSA9PiB7XG4gIF9fYWNjZXNzQ2hlY2sob2JqLCBtZW1iZXIsIFwid3JpdGUgdG8gcHJpdmF0ZSBmaWVsZFwiKTtcbiAgc2V0dGVyID8gc2V0dGVyLmNhbGwob2JqLCB2YWx1ZSkgOiBtZW1iZXIuc2V0KG9iaiwgdmFsdWUpO1xuICByZXR1cm4gdmFsdWU7XG59O1xuXG5leHBvcnQge1xuICBfX3ByaXZhdGVHZXQsXG4gIF9fcHJpdmF0ZUFkZCxcbiAgX19wcml2YXRlU2V0XG59O1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9Y2h1bmstM1c1RzRDWUkuanMubWFwIl0sIm5hbWVzIjpbIl9fYWNjZXNzQ2hlY2siLCJvYmoiLCJtZW1iZXIiLCJtc2ciLCJoYXMiLCJUeXBlRXJyb3IiLCJfX3ByaXZhdGVHZXQiLCJnZXR0ZXIiLCJjYWxsIiwiZ2V0IiwiX19wcml2YXRlQWRkIiwidmFsdWUiLCJXZWFrU2V0IiwiYWRkIiwic2V0IiwiX19wcml2YXRlU2V0Iiwic2V0dGVyIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/@clerk/clerk-react/dist/esm/chunk-3W5G4CYI.js\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/@clerk/clerk-react/dist/esm/components/SignInButton.js":
/*!*****************************************************************************!*\
  !*** ./node_modules/@clerk/clerk-react/dist/esm/components/SignInButton.js ***!
  \*****************************************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   SignInButton: function() { return /* binding */ SignInButton; }\n/* harmony export */ });\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react */ \"(app-pages-browser)/./node_modules/next/dist/compiled/react/index.js\");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var _utils__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../utils */ \"(app-pages-browser)/./node_modules/@clerk/clerk-react/dist/esm/utils/childrenUtils.js\");\n/* harmony import */ var _withClerk__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./withClerk */ \"(app-pages-browser)/./node_modules/@clerk/clerk-react/dist/esm/components/withClerk.js\");\n\n\n\n\nconst SignInButton = (0,_withClerk__WEBPACK_IMPORTED_MODULE_1__.withClerk)(_c = (param)=>{\n    let { clerk, children, ...props } = param;\n    const { afterSignInUrl, afterSignUpUrl, redirectUrl, mode, ...rest } = props;\n    children = (0,_utils__WEBPACK_IMPORTED_MODULE_2__.normalizeWithDefaultValue)(children, \"Sign in\");\n    const child = (0,_utils__WEBPACK_IMPORTED_MODULE_2__.assertSingleChild)(children)(\"SignInButton\");\n    const clickHandler = ()=>{\n        const opts = {\n            afterSignInUrl,\n            afterSignUpUrl,\n            redirectUrl\n        };\n        if (mode === \"modal\") {\n            return clerk.openSignIn(opts);\n        }\n        return clerk.redirectToSignIn(opts);\n    };\n    const wrappedChildClickHandler = async (e)=>{\n        await (0,_utils__WEBPACK_IMPORTED_MODULE_2__.safeExecute)(child.props.onClick)(e);\n        return clickHandler();\n    };\n    const childProps = {\n        ...rest,\n        onClick: wrappedChildClickHandler\n    };\n    return /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0___default().cloneElement(child, childProps);\n}, \"SignInButton\");\n_c1 = SignInButton;\n //# sourceMappingURL=SignInButton.js.map\nvar _c, _c1;\n$RefreshReg$(_c, \"SignInButton$withClerk\");\n$RefreshReg$(_c1, \"SignInButton\");\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL25vZGVfbW9kdWxlcy9AY2xlcmsvY2xlcmstcmVhY3QvZGlzdC9lc20vY29tcG9uZW50cy9TaWduSW5CdXR0b24uanMiLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7QUFBOEI7QUFDSjtBQUMyRDtBQUM3QztBQUN4QyxNQUFNSyxlQUFlRCxxREFBU0EsTUFBQztRQUFDLEVBQUVFLEtBQUssRUFBRUMsUUFBUSxFQUFFLEdBQUdDLE9BQU87SUFDM0QsTUFBTSxFQUFFQyxjQUFjLEVBQUVDLGNBQWMsRUFBRUMsV0FBVyxFQUFFQyxJQUFJLEVBQUUsR0FBR0MsTUFBTSxHQUFHTDtJQUN2RUQsV0FBV0wsaUVBQXlCQSxDQUFDSyxVQUFVO0lBQy9DLE1BQU1PLFFBQVFiLHlEQUFpQkEsQ0FBQ00sVUFBVTtJQUMxQyxNQUFNUSxlQUFlO1FBQ25CLE1BQU1DLE9BQU87WUFBRVA7WUFBZ0JDO1lBQWdCQztRQUFZO1FBQzNELElBQUlDLFNBQVMsU0FBUztZQUNwQixPQUFPTixNQUFNVyxVQUFVLENBQUNEO1FBQzFCO1FBQ0EsT0FBT1YsTUFBTVksZ0JBQWdCLENBQUNGO0lBQ2hDO0lBQ0EsTUFBTUcsMkJBQTJCLE9BQU9DO1FBQ3RDLE1BQU1qQixtREFBV0EsQ0FBQ1csTUFBTU4sS0FBSyxDQUFDYSxPQUFPLEVBQUVEO1FBQ3ZDLE9BQU9MO0lBQ1Q7SUFDQSxNQUFNTyxhQUFhO1FBQUUsR0FBR1QsSUFBSTtRQUFFUSxTQUFTRjtJQUF5QjtJQUNoRSxxQkFBT25CLHlEQUFrQixDQUFDYyxPQUFPUTtBQUNuQyxHQUFHOztBQUdELENBQ0Ysd0NBQXdDIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vX05fRS8uL25vZGVfbW9kdWxlcy9AY2xlcmsvY2xlcmstcmVhY3QvZGlzdC9lc20vY29tcG9uZW50cy9TaWduSW5CdXR0b24uanM/NTkxNSJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgXCIuLi9jaHVuay0zVzVHNENZSS5qc1wiO1xuaW1wb3J0IFJlYWN0IGZyb20gXCJyZWFjdFwiO1xuaW1wb3J0IHsgYXNzZXJ0U2luZ2xlQ2hpbGQsIG5vcm1hbGl6ZVdpdGhEZWZhdWx0VmFsdWUsIHNhZmVFeGVjdXRlIH0gZnJvbSBcIi4uL3V0aWxzXCI7XG5pbXBvcnQgeyB3aXRoQ2xlcmsgfSBmcm9tIFwiLi93aXRoQ2xlcmtcIjtcbmNvbnN0IFNpZ25JbkJ1dHRvbiA9IHdpdGhDbGVyaygoeyBjbGVyaywgY2hpbGRyZW4sIC4uLnByb3BzIH0pID0+IHtcbiAgY29uc3QgeyBhZnRlclNpZ25JblVybCwgYWZ0ZXJTaWduVXBVcmwsIHJlZGlyZWN0VXJsLCBtb2RlLCAuLi5yZXN0IH0gPSBwcm9wcztcbiAgY2hpbGRyZW4gPSBub3JtYWxpemVXaXRoRGVmYXVsdFZhbHVlKGNoaWxkcmVuLCBcIlNpZ24gaW5cIik7XG4gIGNvbnN0IGNoaWxkID0gYXNzZXJ0U2luZ2xlQ2hpbGQoY2hpbGRyZW4pKFwiU2lnbkluQnV0dG9uXCIpO1xuICBjb25zdCBjbGlja0hhbmRsZXIgPSAoKSA9PiB7XG4gICAgY29uc3Qgb3B0cyA9IHsgYWZ0ZXJTaWduSW5VcmwsIGFmdGVyU2lnblVwVXJsLCByZWRpcmVjdFVybCB9O1xuICAgIGlmIChtb2RlID09PSBcIm1vZGFsXCIpIHtcbiAgICAgIHJldHVybiBjbGVyay5vcGVuU2lnbkluKG9wdHMpO1xuICAgIH1cbiAgICByZXR1cm4gY2xlcmsucmVkaXJlY3RUb1NpZ25JbihvcHRzKTtcbiAgfTtcbiAgY29uc3Qgd3JhcHBlZENoaWxkQ2xpY2tIYW5kbGVyID0gYXN5bmMgKGUpID0+IHtcbiAgICBhd2FpdCBzYWZlRXhlY3V0ZShjaGlsZC5wcm9wcy5vbkNsaWNrKShlKTtcbiAgICByZXR1cm4gY2xpY2tIYW5kbGVyKCk7XG4gIH07XG4gIGNvbnN0IGNoaWxkUHJvcHMgPSB7IC4uLnJlc3QsIG9uQ2xpY2s6IHdyYXBwZWRDaGlsZENsaWNrSGFuZGxlciB9O1xuICByZXR1cm4gUmVhY3QuY2xvbmVFbGVtZW50KGNoaWxkLCBjaGlsZFByb3BzKTtcbn0sIFwiU2lnbkluQnV0dG9uXCIpO1xuZXhwb3J0IHtcbiAgU2lnbkluQnV0dG9uXG59O1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9U2lnbkluQnV0dG9uLmpzLm1hcCJdLCJuYW1lcyI6WyJSZWFjdCIsImFzc2VydFNpbmdsZUNoaWxkIiwibm9ybWFsaXplV2l0aERlZmF1bHRWYWx1ZSIsInNhZmVFeGVjdXRlIiwid2l0aENsZXJrIiwiU2lnbkluQnV0dG9uIiwiY2xlcmsiLCJjaGlsZHJlbiIsInByb3BzIiwiYWZ0ZXJTaWduSW5VcmwiLCJhZnRlclNpZ25VcFVybCIsInJlZGlyZWN0VXJsIiwibW9kZSIsInJlc3QiLCJjaGlsZCIsImNsaWNrSGFuZGxlciIsIm9wdHMiLCJvcGVuU2lnbkluIiwicmVkaXJlY3RUb1NpZ25JbiIsIndyYXBwZWRDaGlsZENsaWNrSGFuZGxlciIsImUiLCJvbkNsaWNrIiwiY2hpbGRQcm9wcyIsImNsb25lRWxlbWVudCJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/@clerk/clerk-react/dist/esm/components/SignInButton.js\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/@clerk/clerk-react/dist/esm/components/SignInWithMetamaskButton.js":
/*!*****************************************************************************************!*\
  !*** ./node_modules/@clerk/clerk-react/dist/esm/components/SignInWithMetamaskButton.js ***!
  \*****************************************************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   SignInWithMetamaskButton: function() { return /* binding */ SignInWithMetamaskButton; }\n/* harmony export */ });\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react */ \"(app-pages-browser)/./node_modules/next/dist/compiled/react/index.js\");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var _utils__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../utils */ \"(app-pages-browser)/./node_modules/@clerk/clerk-react/dist/esm/utils/childrenUtils.js\");\n/* harmony import */ var _withClerk__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./withClerk */ \"(app-pages-browser)/./node_modules/@clerk/clerk-react/dist/esm/components/withClerk.js\");\n\n\n\n\nconst SignInWithMetamaskButton = (0,_withClerk__WEBPACK_IMPORTED_MODULE_1__.withClerk)(_c = (param)=>{\n    let { clerk, children, ...props } = param;\n    const { redirectUrl, ...rest } = props;\n    children = (0,_utils__WEBPACK_IMPORTED_MODULE_2__.normalizeWithDefaultValue)(children, \"Sign in with Metamask\");\n    const child = (0,_utils__WEBPACK_IMPORTED_MODULE_2__.assertSingleChild)(children)(\"SignInWithMetamaskButton\");\n    const clickHandler = async ()=>{\n        async function authenticate() {\n            await clerk.authenticateWithMetamask({\n                redirectUrl\n            });\n        }\n        void authenticate();\n    };\n    const wrappedChildClickHandler = async (e)=>{\n        await (0,_utils__WEBPACK_IMPORTED_MODULE_2__.safeExecute)(child.props.onClick)(e);\n        return clickHandler();\n    };\n    const childProps = {\n        ...rest,\n        onClick: wrappedChildClickHandler\n    };\n    return /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0___default().cloneElement(child, childProps);\n}, \"SignInWithMetamask\");\n_c1 = SignInWithMetamaskButton;\n //# sourceMappingURL=SignInWithMetamaskButton.js.map\nvar _c, _c1;\n$RefreshReg$(_c, \"SignInWithMetamaskButton$withClerk\");\n$RefreshReg$(_c1, \"SignInWithMetamaskButton\");\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL25vZGVfbW9kdWxlcy9AY2xlcmsvY2xlcmstcmVhY3QvZGlzdC9lc20vY29tcG9uZW50cy9TaWduSW5XaXRoTWV0YW1hc2tCdXR0b24uanMiLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7QUFBOEI7QUFDSjtBQUMyRDtBQUM3QztBQUN4QyxNQUFNSywyQkFBMkJELHFEQUFTQSxNQUN4QztRQUFDLEVBQUVFLEtBQUssRUFBRUMsUUFBUSxFQUFFLEdBQUdDLE9BQU87SUFDNUIsTUFBTSxFQUFFQyxXQUFXLEVBQUUsR0FBR0MsTUFBTSxHQUFHRjtJQUNqQ0QsV0FBV0wsaUVBQXlCQSxDQUFDSyxVQUFVO0lBQy9DLE1BQU1JLFFBQVFWLHlEQUFpQkEsQ0FBQ00sVUFBVTtJQUMxQyxNQUFNSyxlQUFlO1FBQ25CLGVBQWVDO1lBQ2IsTUFBTVAsTUFBTVEsd0JBQXdCLENBQUM7Z0JBQUVMO1lBQVk7UUFDckQ7UUFDQSxLQUFLSTtJQUNQO0lBQ0EsTUFBTUUsMkJBQTJCLE9BQU9DO1FBQ3RDLE1BQU1iLG1EQUFXQSxDQUFDUSxNQUFNSCxLQUFLLENBQUNTLE9BQU8sRUFBRUQ7UUFDdkMsT0FBT0o7SUFDVDtJQUNBLE1BQU1NLGFBQWE7UUFBRSxHQUFHUixJQUFJO1FBQUVPLFNBQVNGO0lBQXlCO0lBQ2hFLHFCQUFPZix5REFBa0IsQ0FBQ1csT0FBT087QUFDbkMsR0FDQTs7QUFJQSxDQUNGLG9EQUFvRCIsInNvdXJjZXMiOlsid2VicGFjazovL19OX0UvLi9ub2RlX21vZHVsZXMvQGNsZXJrL2NsZXJrLXJlYWN0L2Rpc3QvZXNtL2NvbXBvbmVudHMvU2lnbkluV2l0aE1ldGFtYXNrQnV0dG9uLmpzP2M0OTUiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IFwiLi4vY2h1bmstM1c1RzRDWUkuanNcIjtcbmltcG9ydCBSZWFjdCBmcm9tIFwicmVhY3RcIjtcbmltcG9ydCB7IGFzc2VydFNpbmdsZUNoaWxkLCBub3JtYWxpemVXaXRoRGVmYXVsdFZhbHVlLCBzYWZlRXhlY3V0ZSB9IGZyb20gXCIuLi91dGlsc1wiO1xuaW1wb3J0IHsgd2l0aENsZXJrIH0gZnJvbSBcIi4vd2l0aENsZXJrXCI7XG5jb25zdCBTaWduSW5XaXRoTWV0YW1hc2tCdXR0b24gPSB3aXRoQ2xlcmsoXG4gICh7IGNsZXJrLCBjaGlsZHJlbiwgLi4ucHJvcHMgfSkgPT4ge1xuICAgIGNvbnN0IHsgcmVkaXJlY3RVcmwsIC4uLnJlc3QgfSA9IHByb3BzO1xuICAgIGNoaWxkcmVuID0gbm9ybWFsaXplV2l0aERlZmF1bHRWYWx1ZShjaGlsZHJlbiwgXCJTaWduIGluIHdpdGggTWV0YW1hc2tcIik7XG4gICAgY29uc3QgY2hpbGQgPSBhc3NlcnRTaW5nbGVDaGlsZChjaGlsZHJlbikoXCJTaWduSW5XaXRoTWV0YW1hc2tCdXR0b25cIik7XG4gICAgY29uc3QgY2xpY2tIYW5kbGVyID0gYXN5bmMgKCkgPT4ge1xuICAgICAgYXN5bmMgZnVuY3Rpb24gYXV0aGVudGljYXRlKCkge1xuICAgICAgICBhd2FpdCBjbGVyay5hdXRoZW50aWNhdGVXaXRoTWV0YW1hc2soeyByZWRpcmVjdFVybCB9KTtcbiAgICAgIH1cbiAgICAgIHZvaWQgYXV0aGVudGljYXRlKCk7XG4gICAgfTtcbiAgICBjb25zdCB3cmFwcGVkQ2hpbGRDbGlja0hhbmRsZXIgPSBhc3luYyAoZSkgPT4ge1xuICAgICAgYXdhaXQgc2FmZUV4ZWN1dGUoY2hpbGQucHJvcHMub25DbGljaykoZSk7XG4gICAgICByZXR1cm4gY2xpY2tIYW5kbGVyKCk7XG4gICAgfTtcbiAgICBjb25zdCBjaGlsZFByb3BzID0geyAuLi5yZXN0LCBvbkNsaWNrOiB3cmFwcGVkQ2hpbGRDbGlja0hhbmRsZXIgfTtcbiAgICByZXR1cm4gUmVhY3QuY2xvbmVFbGVtZW50KGNoaWxkLCBjaGlsZFByb3BzKTtcbiAgfSxcbiAgXCJTaWduSW5XaXRoTWV0YW1hc2tcIlxuKTtcbmV4cG9ydCB7XG4gIFNpZ25JbldpdGhNZXRhbWFza0J1dHRvblxufTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPVNpZ25JbldpdGhNZXRhbWFza0J1dHRvbi5qcy5tYXAiXSwibmFtZXMiOlsiUmVhY3QiLCJhc3NlcnRTaW5nbGVDaGlsZCIsIm5vcm1hbGl6ZVdpdGhEZWZhdWx0VmFsdWUiLCJzYWZlRXhlY3V0ZSIsIndpdGhDbGVyayIsIlNpZ25JbldpdGhNZXRhbWFza0J1dHRvbiIsImNsZXJrIiwiY2hpbGRyZW4iLCJwcm9wcyIsInJlZGlyZWN0VXJsIiwicmVzdCIsImNoaWxkIiwiY2xpY2tIYW5kbGVyIiwiYXV0aGVudGljYXRlIiwiYXV0aGVudGljYXRlV2l0aE1ldGFtYXNrIiwid3JhcHBlZENoaWxkQ2xpY2tIYW5kbGVyIiwiZSIsIm9uQ2xpY2siLCJjaGlsZFByb3BzIiwiY2xvbmVFbGVtZW50Il0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/@clerk/clerk-react/dist/esm/components/SignInWithMetamaskButton.js\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/@clerk/clerk-react/dist/esm/components/SignOutButton.js":
/*!******************************************************************************!*\
  !*** ./node_modules/@clerk/clerk-react/dist/esm/components/SignOutButton.js ***!
  \******************************************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   SignOutButton: function() { return /* binding */ SignOutButton; }\n/* harmony export */ });\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react */ \"(app-pages-browser)/./node_modules/next/dist/compiled/react/index.js\");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var _utils__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../utils */ \"(app-pages-browser)/./node_modules/@clerk/clerk-react/dist/esm/utils/childrenUtils.js\");\n/* harmony import */ var _withClerk__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./withClerk */ \"(app-pages-browser)/./node_modules/@clerk/clerk-react/dist/esm/components/withClerk.js\");\n\n\n\n\nconst SignOutButton = (0,_withClerk__WEBPACK_IMPORTED_MODULE_1__.withClerk)(_c = (param)=>{\n    let { clerk, children, ...props } = param;\n    const { signOutCallback, signOutOptions, ...rest } = props;\n    children = (0,_utils__WEBPACK_IMPORTED_MODULE_2__.normalizeWithDefaultValue)(children, \"Sign out\");\n    const child = (0,_utils__WEBPACK_IMPORTED_MODULE_2__.assertSingleChild)(children)(\"SignOutButton\");\n    const clickHandler = ()=>{\n        return clerk.signOut(signOutCallback, signOutOptions);\n    };\n    const wrappedChildClickHandler = async (e)=>{\n        await (0,_utils__WEBPACK_IMPORTED_MODULE_2__.safeExecute)(child.props.onClick)(e);\n        return clickHandler();\n    };\n    const childProps = {\n        ...rest,\n        onClick: wrappedChildClickHandler\n    };\n    return /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0___default().cloneElement(child, childProps);\n}, \"SignOutButton\");\n_c1 = SignOutButton;\n //# sourceMappingURL=SignOutButton.js.map\nvar _c, _c1;\n$RefreshReg$(_c, \"SignOutButton$withClerk\");\n$RefreshReg$(_c1, \"SignOutButton\");\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL25vZGVfbW9kdWxlcy9AY2xlcmsvY2xlcmstcmVhY3QvZGlzdC9lc20vY29tcG9uZW50cy9TaWduT3V0QnV0dG9uLmpzIiwibWFwcGluZ3MiOiI7Ozs7Ozs7O0FBQThCO0FBQ0o7QUFDMkQ7QUFDN0M7QUFDeEMsTUFBTUssZ0JBQWdCRCxxREFBU0EsTUFDN0I7UUFBQyxFQUFFRSxLQUFLLEVBQUVDLFFBQVEsRUFBRSxHQUFHQyxPQUFPO0lBQzVCLE1BQU0sRUFBRUMsZUFBZSxFQUFFQyxjQUFjLEVBQUUsR0FBR0MsTUFBTSxHQUFHSDtJQUNyREQsV0FBV0wsaUVBQXlCQSxDQUFDSyxVQUFVO0lBQy9DLE1BQU1LLFFBQVFYLHlEQUFpQkEsQ0FBQ00sVUFBVTtJQUMxQyxNQUFNTSxlQUFlO1FBQ25CLE9BQU9QLE1BQU1RLE9BQU8sQ0FBQ0wsaUJBQWlCQztJQUN4QztJQUNBLE1BQU1LLDJCQUEyQixPQUFPQztRQUN0QyxNQUFNYixtREFBV0EsQ0FBQ1MsTUFBTUosS0FBSyxDQUFDUyxPQUFPLEVBQUVEO1FBQ3ZDLE9BQU9IO0lBQ1Q7SUFDQSxNQUFNSyxhQUFhO1FBQUUsR0FBR1AsSUFBSTtRQUFFTSxTQUFTRjtJQUF5QjtJQUNoRSxxQkFBT2YseURBQWtCLENBQUNZLE9BQU9NO0FBQ25DLEdBQ0E7O0FBSUEsQ0FDRix5Q0FBeUMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9fTl9FLy4vbm9kZV9tb2R1bGVzL0BjbGVyay9jbGVyay1yZWFjdC9kaXN0L2VzbS9jb21wb25lbnRzL1NpZ25PdXRCdXR0b24uanM/ZWU2OCJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgXCIuLi9jaHVuay0zVzVHNENZSS5qc1wiO1xuaW1wb3J0IFJlYWN0IGZyb20gXCJyZWFjdFwiO1xuaW1wb3J0IHsgYXNzZXJ0U2luZ2xlQ2hpbGQsIG5vcm1hbGl6ZVdpdGhEZWZhdWx0VmFsdWUsIHNhZmVFeGVjdXRlIH0gZnJvbSBcIi4uL3V0aWxzXCI7XG5pbXBvcnQgeyB3aXRoQ2xlcmsgfSBmcm9tIFwiLi93aXRoQ2xlcmtcIjtcbmNvbnN0IFNpZ25PdXRCdXR0b24gPSB3aXRoQ2xlcmsoXG4gICh7IGNsZXJrLCBjaGlsZHJlbiwgLi4ucHJvcHMgfSkgPT4ge1xuICAgIGNvbnN0IHsgc2lnbk91dENhbGxiYWNrLCBzaWduT3V0T3B0aW9ucywgLi4ucmVzdCB9ID0gcHJvcHM7XG4gICAgY2hpbGRyZW4gPSBub3JtYWxpemVXaXRoRGVmYXVsdFZhbHVlKGNoaWxkcmVuLCBcIlNpZ24gb3V0XCIpO1xuICAgIGNvbnN0IGNoaWxkID0gYXNzZXJ0U2luZ2xlQ2hpbGQoY2hpbGRyZW4pKFwiU2lnbk91dEJ1dHRvblwiKTtcbiAgICBjb25zdCBjbGlja0hhbmRsZXIgPSAoKSA9PiB7XG4gICAgICByZXR1cm4gY2xlcmsuc2lnbk91dChzaWduT3V0Q2FsbGJhY2ssIHNpZ25PdXRPcHRpb25zKTtcbiAgICB9O1xuICAgIGNvbnN0IHdyYXBwZWRDaGlsZENsaWNrSGFuZGxlciA9IGFzeW5jIChlKSA9PiB7XG4gICAgICBhd2FpdCBzYWZlRXhlY3V0ZShjaGlsZC5wcm9wcy5vbkNsaWNrKShlKTtcbiAgICAgIHJldHVybiBjbGlja0hhbmRsZXIoKTtcbiAgICB9O1xuICAgIGNvbnN0IGNoaWxkUHJvcHMgPSB7IC4uLnJlc3QsIG9uQ2xpY2s6IHdyYXBwZWRDaGlsZENsaWNrSGFuZGxlciB9O1xuICAgIHJldHVybiBSZWFjdC5jbG9uZUVsZW1lbnQoY2hpbGQsIGNoaWxkUHJvcHMpO1xuICB9LFxuICBcIlNpZ25PdXRCdXR0b25cIlxuKTtcbmV4cG9ydCB7XG4gIFNpZ25PdXRCdXR0b25cbn07XG4vLyMgc291cmNlTWFwcGluZ1VSTD1TaWduT3V0QnV0dG9uLmpzLm1hcCJdLCJuYW1lcyI6WyJSZWFjdCIsImFzc2VydFNpbmdsZUNoaWxkIiwibm9ybWFsaXplV2l0aERlZmF1bHRWYWx1ZSIsInNhZmVFeGVjdXRlIiwid2l0aENsZXJrIiwiU2lnbk91dEJ1dHRvbiIsImNsZXJrIiwiY2hpbGRyZW4iLCJwcm9wcyIsInNpZ25PdXRDYWxsYmFjayIsInNpZ25PdXRPcHRpb25zIiwicmVzdCIsImNoaWxkIiwiY2xpY2tIYW5kbGVyIiwic2lnbk91dCIsIndyYXBwZWRDaGlsZENsaWNrSGFuZGxlciIsImUiLCJvbkNsaWNrIiwiY2hpbGRQcm9wcyIsImNsb25lRWxlbWVudCJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/@clerk/clerk-react/dist/esm/components/SignOutButton.js\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/@clerk/clerk-react/dist/esm/components/SignUpButton.js":
/*!*****************************************************************************!*\
  !*** ./node_modules/@clerk/clerk-react/dist/esm/components/SignUpButton.js ***!
  \*****************************************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   SignUpButton: function() { return /* binding */ SignUpButton; }\n/* harmony export */ });\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react */ \"(app-pages-browser)/./node_modules/next/dist/compiled/react/index.js\");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var _utils__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../utils */ \"(app-pages-browser)/./node_modules/@clerk/clerk-react/dist/esm/utils/childrenUtils.js\");\n/* harmony import */ var _withClerk__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./withClerk */ \"(app-pages-browser)/./node_modules/@clerk/clerk-react/dist/esm/components/withClerk.js\");\n\n\n\n\nconst SignUpButton = (0,_withClerk__WEBPACK_IMPORTED_MODULE_1__.withClerk)(_c = (param)=>{\n    let { clerk, children, ...props } = param;\n    const { afterSignInUrl, afterSignUpUrl, redirectUrl, mode, unsafeMetadata, ...rest } = props;\n    children = (0,_utils__WEBPACK_IMPORTED_MODULE_2__.normalizeWithDefaultValue)(children, \"Sign up\");\n    const child = (0,_utils__WEBPACK_IMPORTED_MODULE_2__.assertSingleChild)(children)(\"SignUpButton\");\n    const clickHandler = ()=>{\n        const opts = {\n            afterSignInUrl,\n            afterSignUpUrl,\n            redirectUrl,\n            unsafeMetadata\n        };\n        if (mode === \"modal\") {\n            return clerk.openSignUp(opts);\n        }\n        return clerk.redirectToSignUp(opts);\n    };\n    const wrappedChildClickHandler = async (e)=>{\n        await (0,_utils__WEBPACK_IMPORTED_MODULE_2__.safeExecute)(child.props.onClick)(e);\n        return clickHandler();\n    };\n    const childProps = {\n        ...rest,\n        onClick: wrappedChildClickHandler\n    };\n    return /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0___default().cloneElement(child, childProps);\n}, \"SignUpButton\");\n_c1 = SignUpButton;\n //# sourceMappingURL=SignUpButton.js.map\nvar _c, _c1;\n$RefreshReg$(_c, \"SignUpButton$withClerk\");\n$RefreshReg$(_c1, \"SignUpButton\");\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL25vZGVfbW9kdWxlcy9AY2xlcmsvY2xlcmstcmVhY3QvZGlzdC9lc20vY29tcG9uZW50cy9TaWduVXBCdXR0b24uanMiLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7QUFBOEI7QUFDSjtBQUMyRDtBQUM3QztBQUN4QyxNQUFNSyxlQUFlRCxxREFBU0EsTUFBQztRQUFDLEVBQUVFLEtBQUssRUFBRUMsUUFBUSxFQUFFLEdBQUdDLE9BQU87SUFDM0QsTUFBTSxFQUFFQyxjQUFjLEVBQUVDLGNBQWMsRUFBRUMsV0FBVyxFQUFFQyxJQUFJLEVBQUVDLGNBQWMsRUFBRSxHQUFHQyxNQUFNLEdBQUdOO0lBQ3ZGRCxXQUFXTCxpRUFBeUJBLENBQUNLLFVBQVU7SUFDL0MsTUFBTVEsUUFBUWQseURBQWlCQSxDQUFDTSxVQUFVO0lBQzFDLE1BQU1TLGVBQWU7UUFDbkIsTUFBTUMsT0FBTztZQUFFUjtZQUFnQkM7WUFBZ0JDO1lBQWFFO1FBQWU7UUFDM0UsSUFBSUQsU0FBUyxTQUFTO1lBQ3BCLE9BQU9OLE1BQU1ZLFVBQVUsQ0FBQ0Q7UUFDMUI7UUFDQSxPQUFPWCxNQUFNYSxnQkFBZ0IsQ0FBQ0Y7SUFDaEM7SUFDQSxNQUFNRywyQkFBMkIsT0FBT0M7UUFDdEMsTUFBTWxCLG1EQUFXQSxDQUFDWSxNQUFNUCxLQUFLLENBQUNjLE9BQU8sRUFBRUQ7UUFDdkMsT0FBT0w7SUFDVDtJQUNBLE1BQU1PLGFBQWE7UUFBRSxHQUFHVCxJQUFJO1FBQUVRLFNBQVNGO0lBQXlCO0lBQ2hFLHFCQUFPcEIseURBQWtCLENBQUNlLE9BQU9RO0FBQ25DLEdBQUc7O0FBR0QsQ0FDRix3Q0FBd0MiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9fTl9FLy4vbm9kZV9tb2R1bGVzL0BjbGVyay9jbGVyay1yZWFjdC9kaXN0L2VzbS9jb21wb25lbnRzL1NpZ25VcEJ1dHRvbi5qcz8zMGI0Il0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBcIi4uL2NodW5rLTNXNUc0Q1lJLmpzXCI7XG5pbXBvcnQgUmVhY3QgZnJvbSBcInJlYWN0XCI7XG5pbXBvcnQgeyBhc3NlcnRTaW5nbGVDaGlsZCwgbm9ybWFsaXplV2l0aERlZmF1bHRWYWx1ZSwgc2FmZUV4ZWN1dGUgfSBmcm9tIFwiLi4vdXRpbHNcIjtcbmltcG9ydCB7IHdpdGhDbGVyayB9IGZyb20gXCIuL3dpdGhDbGVya1wiO1xuY29uc3QgU2lnblVwQnV0dG9uID0gd2l0aENsZXJrKCh7IGNsZXJrLCBjaGlsZHJlbiwgLi4ucHJvcHMgfSkgPT4ge1xuICBjb25zdCB7IGFmdGVyU2lnbkluVXJsLCBhZnRlclNpZ25VcFVybCwgcmVkaXJlY3RVcmwsIG1vZGUsIHVuc2FmZU1ldGFkYXRhLCAuLi5yZXN0IH0gPSBwcm9wcztcbiAgY2hpbGRyZW4gPSBub3JtYWxpemVXaXRoRGVmYXVsdFZhbHVlKGNoaWxkcmVuLCBcIlNpZ24gdXBcIik7XG4gIGNvbnN0IGNoaWxkID0gYXNzZXJ0U2luZ2xlQ2hpbGQoY2hpbGRyZW4pKFwiU2lnblVwQnV0dG9uXCIpO1xuICBjb25zdCBjbGlja0hhbmRsZXIgPSAoKSA9PiB7XG4gICAgY29uc3Qgb3B0cyA9IHsgYWZ0ZXJTaWduSW5VcmwsIGFmdGVyU2lnblVwVXJsLCByZWRpcmVjdFVybCwgdW5zYWZlTWV0YWRhdGEgfTtcbiAgICBpZiAobW9kZSA9PT0gXCJtb2RhbFwiKSB7XG4gICAgICByZXR1cm4gY2xlcmsub3BlblNpZ25VcChvcHRzKTtcbiAgICB9XG4gICAgcmV0dXJuIGNsZXJrLnJlZGlyZWN0VG9TaWduVXAob3B0cyk7XG4gIH07XG4gIGNvbnN0IHdyYXBwZWRDaGlsZENsaWNrSGFuZGxlciA9IGFzeW5jIChlKSA9PiB7XG4gICAgYXdhaXQgc2FmZUV4ZWN1dGUoY2hpbGQucHJvcHMub25DbGljaykoZSk7XG4gICAgcmV0dXJuIGNsaWNrSGFuZGxlcigpO1xuICB9O1xuICBjb25zdCBjaGlsZFByb3BzID0geyAuLi5yZXN0LCBvbkNsaWNrOiB3cmFwcGVkQ2hpbGRDbGlja0hhbmRsZXIgfTtcbiAgcmV0dXJuIFJlYWN0LmNsb25lRWxlbWVudChjaGlsZCwgY2hpbGRQcm9wcyk7XG59LCBcIlNpZ25VcEJ1dHRvblwiKTtcbmV4cG9ydCB7XG4gIFNpZ25VcEJ1dHRvblxufTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPVNpZ25VcEJ1dHRvbi5qcy5tYXAiXSwibmFtZXMiOlsiUmVhY3QiLCJhc3NlcnRTaW5nbGVDaGlsZCIsIm5vcm1hbGl6ZVdpdGhEZWZhdWx0VmFsdWUiLCJzYWZlRXhlY3V0ZSIsIndpdGhDbGVyayIsIlNpZ25VcEJ1dHRvbiIsImNsZXJrIiwiY2hpbGRyZW4iLCJwcm9wcyIsImFmdGVyU2lnbkluVXJsIiwiYWZ0ZXJTaWduVXBVcmwiLCJyZWRpcmVjdFVybCIsIm1vZGUiLCJ1bnNhZmVNZXRhZGF0YSIsInJlc3QiLCJjaGlsZCIsImNsaWNrSGFuZGxlciIsIm9wdHMiLCJvcGVuU2lnblVwIiwicmVkaXJlY3RUb1NpZ25VcCIsIndyYXBwZWRDaGlsZENsaWNrSGFuZGxlciIsImUiLCJvbkNsaWNrIiwiY2hpbGRQcm9wcyIsImNsb25lRWxlbWVudCJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/@clerk/clerk-react/dist/esm/components/SignUpButton.js\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/@clerk/clerk-react/dist/esm/components/controlComponents.js":
/*!**********************************************************************************!*\
  !*** ./node_modules/@clerk/clerk-react/dist/esm/components/controlComponents.js ***!
  \**********************************************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   AuthenticateWithRedirectCallback: function() { return /* binding */ AuthenticateWithRedirectCallback; },\n/* harmony export */   ClerkLoaded: function() { return /* binding */ ClerkLoaded; },\n/* harmony export */   ClerkLoading: function() { return /* binding */ ClerkLoading; },\n/* harmony export */   MultisessionAppSupport: function() { return /* binding */ MultisessionAppSupport; },\n/* harmony export */   Protect: function() { return /* binding */ Protect; },\n/* harmony export */   RedirectToCreateOrganization: function() { return /* binding */ RedirectToCreateOrganization; },\n/* harmony export */   RedirectToOrganizationProfile: function() { return /* binding */ RedirectToOrganizationProfile; },\n/* harmony export */   RedirectToSignIn: function() { return /* binding */ RedirectToSignIn; },\n/* harmony export */   RedirectToSignUp: function() { return /* binding */ RedirectToSignUp; },\n/* harmony export */   RedirectToUserProfile: function() { return /* binding */ RedirectToUserProfile; },\n/* harmony export */   SignedIn: function() { return /* binding */ SignedIn; },\n/* harmony export */   SignedOut: function() { return /* binding */ SignedOut; }\n/* harmony export */ });\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react */ \"(app-pages-browser)/./node_modules/next/dist/compiled/react/index.js\");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var _contexts_AuthContext__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../contexts/AuthContext */ \"(app-pages-browser)/./node_modules/@clerk/clerk-react/dist/esm/contexts/AuthContext.js\");\n/* harmony import */ var _contexts_IsomorphicClerkContext__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../contexts/IsomorphicClerkContext */ \"(app-pages-browser)/./node_modules/@clerk/clerk-react/dist/esm/contexts/IsomorphicClerkContext.js\");\n/* harmony import */ var _contexts_SessionContext__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../contexts/SessionContext */ \"(app-pages-browser)/./node_modules/@clerk/shared/dist/react/index.mjs\");\n/* harmony import */ var _contexts_StructureContext__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../contexts/StructureContext */ \"(app-pages-browser)/./node_modules/@clerk/clerk-react/dist/esm/contexts/StructureContext.js\");\n/* harmony import */ var _hooks__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../hooks */ \"(app-pages-browser)/./node_modules/@clerk/clerk-react/dist/esm/hooks/useAuth.js\");\n/* harmony import */ var _withClerk__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./withClerk */ \"(app-pages-browser)/./node_modules/@clerk/clerk-react/dist/esm/components/withClerk.js\");\nvar _s = $RefreshSig$(), _s1 = $RefreshSig$(), _s2 = $RefreshSig$(), _s3 = $RefreshSig$(), _s4 = $RefreshSig$(), _s5 = $RefreshSig$(), _s6 = $RefreshSig$(), _s7 = $RefreshSig$(), _s8 = $RefreshSig$(), _s9 = $RefreshSig$(), _s10 = $RefreshSig$(), _s11 = $RefreshSig$();\n\n\n\n\n\n\n\n\nconst SignedIn = (param)=>{\n    let { children } = param;\n    _s();\n    const { userId } = (0,_contexts_AuthContext__WEBPACK_IMPORTED_MODULE_1__.useAuthContext)();\n    if (userId) {\n        return /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0___default().createElement((react__WEBPACK_IMPORTED_MODULE_0___default().Fragment), null, children);\n    }\n    return null;\n};\n_s(SignedIn, \"ixKbC0dT8a/BvVSU6TLufmqc5hw=\", false, function() {\n    return [\n        _contexts_AuthContext__WEBPACK_IMPORTED_MODULE_1__.useAuthContext\n    ];\n});\n_c = SignedIn;\nconst SignedOut = (param)=>{\n    let { children } = param;\n    _s1();\n    const { userId } = (0,_contexts_AuthContext__WEBPACK_IMPORTED_MODULE_1__.useAuthContext)();\n    if (userId === null) {\n        return /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0___default().createElement((react__WEBPACK_IMPORTED_MODULE_0___default().Fragment), null, children);\n    }\n    return null;\n};\n_s1(SignedOut, \"ixKbC0dT8a/BvVSU6TLufmqc5hw=\", false, function() {\n    return [\n        _contexts_AuthContext__WEBPACK_IMPORTED_MODULE_1__.useAuthContext\n    ];\n});\n_c1 = SignedOut;\nconst ClerkLoaded = (param)=>{\n    let { children } = param;\n    _s2();\n    const isomorphicClerk = (0,_contexts_IsomorphicClerkContext__WEBPACK_IMPORTED_MODULE_2__.useIsomorphicClerkContext)();\n    if (!isomorphicClerk.loaded) {\n        return null;\n    }\n    return /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0___default().createElement(_contexts_StructureContext__WEBPACK_IMPORTED_MODULE_3__.LoadedGuarantee, null, children);\n};\n_s2(ClerkLoaded, \"9S3w854Xa9SZQNrdxFCER3+2BeA=\", false, function() {\n    return [\n        _contexts_IsomorphicClerkContext__WEBPACK_IMPORTED_MODULE_2__.useIsomorphicClerkContext\n    ];\n});\n_c2 = ClerkLoaded;\nconst ClerkLoading = (param)=>{\n    let { children } = param;\n    _s3();\n    const isomorphicClerk = (0,_contexts_IsomorphicClerkContext__WEBPACK_IMPORTED_MODULE_2__.useIsomorphicClerkContext)();\n    if (isomorphicClerk.loaded) {\n        return null;\n    }\n    return /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0___default().createElement((react__WEBPACK_IMPORTED_MODULE_0___default().Fragment), null, children);\n};\n_s3(ClerkLoading, \"9S3w854Xa9SZQNrdxFCER3+2BeA=\", false, function() {\n    return [\n        _contexts_IsomorphicClerkContext__WEBPACK_IMPORTED_MODULE_2__.useIsomorphicClerkContext\n    ];\n});\n_c3 = ClerkLoading;\nconst Protect = (param)=>{\n    let { children, fallback, ...restAuthorizedParams } = param;\n    _s4();\n    const { isLoaded, has, userId } = (0,_hooks__WEBPACK_IMPORTED_MODULE_4__.useAuth)();\n    if (!isLoaded) {\n        return null;\n    }\n    const unauthorized = /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0___default().createElement((react__WEBPACK_IMPORTED_MODULE_0___default().Fragment), null, fallback !== null && fallback !== void 0 ? fallback : null);\n    const authorized = /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0___default().createElement((react__WEBPACK_IMPORTED_MODULE_0___default().Fragment), null, children);\n    if (!userId) {\n        return unauthorized;\n    }\n    if (typeof restAuthorizedParams.condition === \"function\") {\n        if (restAuthorizedParams.condition(has)) {\n            return authorized;\n        }\n        return unauthorized;\n    }\n    if (restAuthorizedParams.role || restAuthorizedParams.permission) {\n        if (has(restAuthorizedParams)) {\n            return authorized;\n        }\n        return unauthorized;\n    }\n    return authorized;\n};\n_s4(Protect, \"8upx6FPDHO17XApF/ucyb9/WxS4=\", false, function() {\n    return [\n        _hooks__WEBPACK_IMPORTED_MODULE_4__.useAuth\n    ];\n});\n_c4 = Protect;\nconst RedirectToSignIn = _s5((0,_withClerk__WEBPACK_IMPORTED_MODULE_5__.withClerk)(_c5 = _s5((param)=>{\n    let { clerk, ...props } = param;\n    _s5();\n    const { client, session } = clerk;\n    const { __unstable__environment } = clerk;\n    const hasActiveSessions = client.activeSessions && client.activeSessions.length > 0;\n    react__WEBPACK_IMPORTED_MODULE_0___default().useEffect(()=>{\n        if (session === null && hasActiveSessions && __unstable__environment) {\n            const { afterSignOutOneUrl } = __unstable__environment.displayConfig;\n            void clerk.navigate(afterSignOutOneUrl);\n        } else {\n            void clerk.redirectToSignIn(props);\n        }\n    }, []);\n    return null;\n}, \"OD7bBpZva5O2jO+Puf00hKivP7c=\"), \"RedirectToSignIn\"), \"OD7bBpZva5O2jO+Puf00hKivP7c=\");\n_c6 = RedirectToSignIn;\nconst RedirectToSignUp = _s6((0,_withClerk__WEBPACK_IMPORTED_MODULE_5__.withClerk)(_c7 = _s6((param)=>{\n    let { clerk, ...props } = param;\n    _s6();\n    react__WEBPACK_IMPORTED_MODULE_0___default().useEffect(()=>{\n        void clerk.redirectToSignUp(props);\n    }, []);\n    return null;\n}, \"OD7bBpZva5O2jO+Puf00hKivP7c=\"), \"RedirectToSignUp\"), \"OD7bBpZva5O2jO+Puf00hKivP7c=\");\n_c8 = RedirectToSignUp;\nconst RedirectToUserProfile = _s7((0,_withClerk__WEBPACK_IMPORTED_MODULE_5__.withClerk)(_c9 = _s7((param)=>{\n    let { clerk } = param;\n    _s7();\n    react__WEBPACK_IMPORTED_MODULE_0___default().useEffect(()=>{\n        clerk.redirectToUserProfile();\n    }, []);\n    return null;\n}, \"OD7bBpZva5O2jO+Puf00hKivP7c=\"), \"RedirectToUserProfile\"), \"OD7bBpZva5O2jO+Puf00hKivP7c=\");\n_c10 = RedirectToUserProfile;\nconst RedirectToOrganizationProfile = _s8((0,_withClerk__WEBPACK_IMPORTED_MODULE_5__.withClerk)(_c11 = _s8((param)=>{\n    let { clerk } = param;\n    _s8();\n    react__WEBPACK_IMPORTED_MODULE_0___default().useEffect(()=>{\n        clerk.redirectToOrganizationProfile();\n    }, []);\n    return null;\n}, \"OD7bBpZva5O2jO+Puf00hKivP7c=\"), \"RedirectToOrganizationProfile\"), \"OD7bBpZva5O2jO+Puf00hKivP7c=\");\n_c12 = RedirectToOrganizationProfile;\nconst RedirectToCreateOrganization = _s9((0,_withClerk__WEBPACK_IMPORTED_MODULE_5__.withClerk)(_c13 = _s9((param)=>{\n    let { clerk } = param;\n    _s9();\n    react__WEBPACK_IMPORTED_MODULE_0___default().useEffect(()=>{\n        clerk.redirectToCreateOrganization();\n    }, []);\n    return null;\n}, \"OD7bBpZva5O2jO+Puf00hKivP7c=\"), \"RedirectToCreateOrganization\"), \"OD7bBpZva5O2jO+Puf00hKivP7c=\");\n_c14 = RedirectToCreateOrganization;\nconst AuthenticateWithRedirectCallback = _s10((0,_withClerk__WEBPACK_IMPORTED_MODULE_5__.withClerk)(_c15 = _s10((param)=>{\n    let { clerk, ...handleRedirectCallbackParams } = param;\n    _s10();\n    react__WEBPACK_IMPORTED_MODULE_0___default().useEffect(()=>{\n        void clerk.handleRedirectCallback(handleRedirectCallbackParams);\n    }, []);\n    return null;\n}, \"OD7bBpZva5O2jO+Puf00hKivP7c=\"), \"AuthenticateWithRedirectCallback\"), \"OD7bBpZva5O2jO+Puf00hKivP7c=\");\n_c16 = AuthenticateWithRedirectCallback;\nconst MultisessionAppSupport = (param)=>{\n    let { children } = param;\n    _s11();\n    const session = (0,_contexts_SessionContext__WEBPACK_IMPORTED_MODULE_6__.useSessionContext)();\n    return /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0___default().createElement((react__WEBPACK_IMPORTED_MODULE_0___default().Fragment), {\n        key: session ? session.id : \"no-users\"\n    }, children);\n};\n_s11(MultisessionAppSupport, \"V9UNg+dfDJ4HPaIg8L+3vPuTNr4=\", false, function() {\n    return [\n        _contexts_SessionContext__WEBPACK_IMPORTED_MODULE_6__.useSessionContext\n    ];\n});\n_c17 = MultisessionAppSupport;\n //# sourceMappingURL=controlComponents.js.map\nvar _c, _c1, _c2, _c3, _c4, _c5, _c6, _c7, _c8, _c9, _c10, _c11, _c12, _c13, _c14, _c15, _c16, _c17;\n$RefreshReg$(_c, \"SignedIn\");\n$RefreshReg$(_c1, \"SignedOut\");\n$RefreshReg$(_c2, \"ClerkLoaded\");\n$RefreshReg$(_c3, \"ClerkLoading\");\n$RefreshReg$(_c4, \"Protect\");\n$RefreshReg$(_c5, \"RedirectToSignIn$withClerk\");\n$RefreshReg$(_c6, \"RedirectToSignIn\");\n$RefreshReg$(_c7, \"RedirectToSignUp$withClerk\");\n$RefreshReg$(_c8, \"RedirectToSignUp\");\n$RefreshReg$(_c9, \"RedirectToUserProfile$withClerk\");\n$RefreshReg$(_c10, \"RedirectToUserProfile\");\n$RefreshReg$(_c11, \"RedirectToOrganizationProfile$withClerk\");\n$RefreshReg$(_c12, \"RedirectToOrganizationProfile\");\n$RefreshReg$(_c13, \"RedirectToCreateOrganization$withClerk\");\n$RefreshReg$(_c14, \"RedirectToCreateOrganization\");\n$RefreshReg$(_c15, \"AuthenticateWithRedirectCallback$withClerk\");\n$RefreshReg$(_c16, \"AuthenticateWithRedirectCallback\");\n$RefreshReg$(_c17, \"MultisessionAppSupport\");\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/@clerk/clerk-react/dist/esm/components/controlComponents.js\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/@clerk/clerk-react/dist/esm/components/index.js":
/*!**********************************************************************!*\
  !*** ./node_modules/@clerk/clerk-react/dist/esm/components/index.js ***!
  \**********************************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   AuthenticateWithRedirectCallback: function() { return /* reexport safe */ _controlComponents__WEBPACK_IMPORTED_MODULE_7__.AuthenticateWithRedirectCallback; },\n/* harmony export */   ClerkLoaded: function() { return /* reexport safe */ _controlComponents__WEBPACK_IMPORTED_MODULE_7__.ClerkLoaded; },\n/* harmony export */   ClerkLoading: function() { return /* reexport safe */ _controlComponents__WEBPACK_IMPORTED_MODULE_7__.ClerkLoading; },\n/* harmony export */   CreateOrganization: function() { return /* reexport safe */ _uiComponents__WEBPACK_IMPORTED_MODULE_8__.CreateOrganization; },\n/* harmony export */   MultisessionAppSupport: function() { return /* reexport safe */ _controlComponents__WEBPACK_IMPORTED_MODULE_7__.MultisessionAppSupport; },\n/* harmony export */   OrganizationList: function() { return /* reexport safe */ _uiComponents__WEBPACK_IMPORTED_MODULE_8__.OrganizationList; },\n/* harmony export */   OrganizationProfile: function() { return /* reexport safe */ _uiComponents__WEBPACK_IMPORTED_MODULE_8__.OrganizationProfile; },\n/* harmony export */   OrganizationSwitcher: function() { return /* reexport safe */ _uiComponents__WEBPACK_IMPORTED_MODULE_8__.OrganizationSwitcher; },\n/* harmony export */   Protect: function() { return /* reexport safe */ _controlComponents__WEBPACK_IMPORTED_MODULE_7__.Protect; },\n/* harmony export */   RedirectToCreateOrganization: function() { return /* reexport safe */ _controlComponents__WEBPACK_IMPORTED_MODULE_7__.RedirectToCreateOrganization; },\n/* harmony export */   RedirectToOrganizationProfile: function() { return /* reexport safe */ _controlComponents__WEBPACK_IMPORTED_MODULE_7__.RedirectToOrganizationProfile; },\n/* harmony export */   RedirectToSignIn: function() { return /* reexport safe */ _controlComponents__WEBPACK_IMPORTED_MODULE_7__.RedirectToSignIn; },\n/* harmony export */   RedirectToSignUp: function() { return /* reexport safe */ _controlComponents__WEBPACK_IMPORTED_MODULE_7__.RedirectToSignUp; },\n/* harmony export */   RedirectToUserProfile: function() { return /* reexport safe */ _controlComponents__WEBPACK_IMPORTED_MODULE_7__.RedirectToUserProfile; },\n/* harmony export */   SignIn: function() { return /* reexport safe */ _uiComponents__WEBPACK_IMPORTED_MODULE_8__.SignIn; },\n/* harmony export */   SignInButton: function() { return /* reexport safe */ _SignInButton__WEBPACK_IMPORTED_MODULE_3__.SignInButton; },\n/* harmony export */   SignInWithMetamaskButton: function() { return /* reexport safe */ _SignInWithMetamaskButton__WEBPACK_IMPORTED_MODULE_6__.SignInWithMetamaskButton; },\n/* harmony export */   SignOutButton: function() { return /* reexport safe */ _SignOutButton__WEBPACK_IMPORTED_MODULE_5__.SignOutButton; },\n/* harmony export */   SignUp: function() { return /* reexport safe */ _uiComponents__WEBPACK_IMPORTED_MODULE_8__.SignUp; },\n/* harmony export */   SignUpButton: function() { return /* reexport safe */ _SignUpButton__WEBPACK_IMPORTED_MODULE_4__.SignUpButton; },\n/* harmony export */   SignedIn: function() { return /* reexport safe */ _controlComponents__WEBPACK_IMPORTED_MODULE_7__.SignedIn; },\n/* harmony export */   SignedOut: function() { return /* reexport safe */ _controlComponents__WEBPACK_IMPORTED_MODULE_7__.SignedOut; },\n/* harmony export */   UserButton: function() { return /* reexport safe */ _uiComponents__WEBPACK_IMPORTED_MODULE_8__.UserButton; },\n/* harmony export */   UserProfile: function() { return /* reexport safe */ _uiComponents__WEBPACK_IMPORTED_MODULE_8__.UserProfile; },\n/* harmony export */   WithClerk: function() { return /* reexport safe */ _withClerk__WEBPACK_IMPORTED_MODULE_0__.WithClerk; },\n/* harmony export */   WithSession: function() { return /* reexport safe */ _withSession__WEBPACK_IMPORTED_MODULE_2__.WithSession; },\n/* harmony export */   WithUser: function() { return /* reexport safe */ _withUser__WEBPACK_IMPORTED_MODULE_1__.WithUser; },\n/* harmony export */   withClerk: function() { return /* reexport safe */ _withClerk__WEBPACK_IMPORTED_MODULE_0__.withClerk; },\n/* harmony export */   withSession: function() { return /* reexport safe */ _withSession__WEBPACK_IMPORTED_MODULE_2__.withSession; },\n/* harmony export */   withUser: function() { return /* reexport safe */ _withUser__WEBPACK_IMPORTED_MODULE_1__.withUser; }\n/* harmony export */ });\n/* harmony import */ var _uiComponents__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ./uiComponents */ \"(app-pages-browser)/./node_modules/@clerk/clerk-react/dist/esm/components/uiComponents.js\");\n/* harmony import */ var _controlComponents__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./controlComponents */ \"(app-pages-browser)/./node_modules/@clerk/clerk-react/dist/esm/components/controlComponents.js\");\n/* harmony import */ var _withClerk__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./withClerk */ \"(app-pages-browser)/./node_modules/@clerk/clerk-react/dist/esm/components/withClerk.js\");\n/* harmony import */ var _withUser__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./withUser */ \"(app-pages-browser)/./node_modules/@clerk/clerk-react/dist/esm/components/withUser.js\");\n/* harmony import */ var _withSession__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./withSession */ \"(app-pages-browser)/./node_modules/@clerk/clerk-react/dist/esm/components/withSession.js\");\n/* harmony import */ var _SignInButton__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./SignInButton */ \"(app-pages-browser)/./node_modules/@clerk/clerk-react/dist/esm/components/SignInButton.js\");\n/* harmony import */ var _SignUpButton__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./SignUpButton */ \"(app-pages-browser)/./node_modules/@clerk/clerk-react/dist/esm/components/SignUpButton.js\");\n/* harmony import */ var _SignOutButton__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./SignOutButton */ \"(app-pages-browser)/./node_modules/@clerk/clerk-react/dist/esm/components/SignOutButton.js\");\n/* harmony import */ var _SignInWithMetamaskButton__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./SignInWithMetamaskButton */ \"(app-pages-browser)/./node_modules/@clerk/clerk-react/dist/esm/components/SignInWithMetamaskButton.js\");\n\n\n\n\n\n\n\n\n\n\n //# sourceMappingURL=index.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL25vZGVfbW9kdWxlcy9AY2xlcmsvY2xlcmstcmVhY3QvZGlzdC9lc20vY29tcG9uZW50cy9pbmRleC5qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7QUFBOEI7QUFVTjtBQWNLO0FBQ0Q7QUFDRDtBQUNHO0FBQ0M7QUFDQTtBQUNDO0FBQ1c7QUFzQnpDLENBQ0YsaUNBQWlDIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vX05fRS8uL25vZGVfbW9kdWxlcy9AY2xlcmsvY2xlcmstcmVhY3QvZGlzdC9lc20vY29tcG9uZW50cy9pbmRleC5qcz85YTFiIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBcIi4uL2NodW5rLTNXNUc0Q1lJLmpzXCI7XG5pbXBvcnQge1xuICBTaWduVXAsXG4gIFNpZ25JbixcbiAgVXNlclByb2ZpbGUsXG4gIFVzZXJCdXR0b24sXG4gIE9yZ2FuaXphdGlvblN3aXRjaGVyLFxuICBPcmdhbml6YXRpb25Qcm9maWxlLFxuICBDcmVhdGVPcmdhbml6YXRpb24sXG4gIE9yZ2FuaXphdGlvbkxpc3Rcbn0gZnJvbSBcIi4vdWlDb21wb25lbnRzXCI7XG5pbXBvcnQge1xuICBDbGVya0xvYWRlZCxcbiAgQ2xlcmtMb2FkaW5nLFxuICBTaWduZWRPdXQsXG4gIFNpZ25lZEluLFxuICBQcm90ZWN0LFxuICBSZWRpcmVjdFRvU2lnbkluLFxuICBSZWRpcmVjdFRvU2lnblVwLFxuICBSZWRpcmVjdFRvVXNlclByb2ZpbGUsXG4gIEF1dGhlbnRpY2F0ZVdpdGhSZWRpcmVjdENhbGxiYWNrLFxuICBNdWx0aXNlc3Npb25BcHBTdXBwb3J0LFxuICBSZWRpcmVjdFRvQ3JlYXRlT3JnYW5pemF0aW9uLFxuICBSZWRpcmVjdFRvT3JnYW5pemF0aW9uUHJvZmlsZVxufSBmcm9tIFwiLi9jb250cm9sQ29tcG9uZW50c1wiO1xuZXhwb3J0ICogZnJvbSBcIi4vd2l0aENsZXJrXCI7XG5leHBvcnQgKiBmcm9tIFwiLi93aXRoVXNlclwiO1xuZXhwb3J0ICogZnJvbSBcIi4vd2l0aFNlc3Npb25cIjtcbmV4cG9ydCAqIGZyb20gXCIuL1NpZ25JbkJ1dHRvblwiO1xuZXhwb3J0ICogZnJvbSBcIi4vU2lnblVwQnV0dG9uXCI7XG5leHBvcnQgKiBmcm9tIFwiLi9TaWduT3V0QnV0dG9uXCI7XG5leHBvcnQgKiBmcm9tIFwiLi9TaWduSW5XaXRoTWV0YW1hc2tCdXR0b25cIjtcbmV4cG9ydCB7XG4gIEF1dGhlbnRpY2F0ZVdpdGhSZWRpcmVjdENhbGxiYWNrLFxuICBDbGVya0xvYWRlZCxcbiAgQ2xlcmtMb2FkaW5nLFxuICBDcmVhdGVPcmdhbml6YXRpb24sXG4gIE11bHRpc2Vzc2lvbkFwcFN1cHBvcnQsXG4gIE9yZ2FuaXphdGlvbkxpc3QsXG4gIE9yZ2FuaXphdGlvblByb2ZpbGUsXG4gIE9yZ2FuaXphdGlvblN3aXRjaGVyLFxuICBQcm90ZWN0LFxuICBSZWRpcmVjdFRvQ3JlYXRlT3JnYW5pemF0aW9uLFxuICBSZWRpcmVjdFRvT3JnYW5pemF0aW9uUHJvZmlsZSxcbiAgUmVkaXJlY3RUb1NpZ25JbixcbiAgUmVkaXJlY3RUb1NpZ25VcCxcbiAgUmVkaXJlY3RUb1VzZXJQcm9maWxlLFxuICBTaWduSW4sXG4gIFNpZ25VcCxcbiAgU2lnbmVkSW4sXG4gIFNpZ25lZE91dCxcbiAgVXNlckJ1dHRvbixcbiAgVXNlclByb2ZpbGVcbn07XG4vLyMgc291cmNlTWFwcGluZ1VSTD1pbmRleC5qcy5tYXAiXSwibmFtZXMiOlsiU2lnblVwIiwiU2lnbkluIiwiVXNlclByb2ZpbGUiLCJVc2VyQnV0dG9uIiwiT3JnYW5pemF0aW9uU3dpdGNoZXIiLCJPcmdhbml6YXRpb25Qcm9maWxlIiwiQ3JlYXRlT3JnYW5pemF0aW9uIiwiT3JnYW5pemF0aW9uTGlzdCIsIkNsZXJrTG9hZGVkIiwiQ2xlcmtMb2FkaW5nIiwiU2lnbmVkT3V0IiwiU2lnbmVkSW4iLCJQcm90ZWN0IiwiUmVkaXJlY3RUb1NpZ25JbiIsIlJlZGlyZWN0VG9TaWduVXAiLCJSZWRpcmVjdFRvVXNlclByb2ZpbGUiLCJBdXRoZW50aWNhdGVXaXRoUmVkaXJlY3RDYWxsYmFjayIsIk11bHRpc2Vzc2lvbkFwcFN1cHBvcnQiLCJSZWRpcmVjdFRvQ3JlYXRlT3JnYW5pemF0aW9uIiwiUmVkaXJlY3RUb09yZ2FuaXphdGlvblByb2ZpbGUiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/@clerk/clerk-react/dist/esm/components/index.js\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/@clerk/clerk-react/dist/esm/components/uiComponents.js":
/*!*****************************************************************************!*\
  !*** ./node_modules/@clerk/clerk-react/dist/esm/components/uiComponents.js ***!
  \*****************************************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   CreateOrganization: function() { return /* binding */ CreateOrganization; },\n/* harmony export */   OrganizationList: function() { return /* binding */ OrganizationList; },\n/* harmony export */   OrganizationProfile: function() { return /* binding */ OrganizationProfile; },\n/* harmony export */   OrganizationProfileLink: function() { return /* binding */ OrganizationProfileLink; },\n/* harmony export */   OrganizationProfilePage: function() { return /* binding */ OrganizationProfilePage; },\n/* harmony export */   OrganizationSwitcher: function() { return /* binding */ OrganizationSwitcher; },\n/* harmony export */   SignIn: function() { return /* binding */ SignIn; },\n/* harmony export */   SignUp: function() { return /* binding */ SignUp; },\n/* harmony export */   UserButton: function() { return /* binding */ UserButton; },\n/* harmony export */   UserProfile: function() { return /* binding */ UserProfile; },\n/* harmony export */   UserProfileLink: function() { return /* binding */ UserProfileLink; },\n/* harmony export */   UserProfilePage: function() { return /* binding */ UserProfilePage; }\n/* harmony export */ });\n/* harmony import */ var _clerk_shared__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @clerk/shared */ \"(app-pages-browser)/./node_modules/@clerk/shared/dist/index.mjs\");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! react */ \"(app-pages-browser)/./node_modules/next/dist/compiled/react/index.js\");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_1__);\n/* harmony import */ var _errors__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../errors */ \"(app-pages-browser)/./node_modules/@clerk/clerk-react/dist/esm/errors.js\");\n/* harmony import */ var _utils__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../utils */ \"(app-pages-browser)/./node_modules/@clerk/clerk-react/dist/esm/utils/useCustomPages.js\");\n/* harmony import */ var _withClerk__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./withClerk */ \"(app-pages-browser)/./node_modules/@clerk/clerk-react/dist/esm/components/withClerk.js\");\nvar _s = $RefreshSig$(), _s1 = $RefreshSig$(), _s2 = $RefreshSig$(), _s3 = $RefreshSig$();\n\n\n\n\n\n\nclass Portal extends (react__WEBPACK_IMPORTED_MODULE_1___default().PureComponent) {\n    componentDidUpdate(prevProps) {\n        var _prevProps_props_customPages, _prevProps_props, _this_props_props_customPages, _this_props_props;\n        if (prevProps.props.appearance !== this.props.props.appearance || ((_prevProps_props = prevProps.props) === null || _prevProps_props === void 0 ? void 0 : (_prevProps_props_customPages = _prevProps_props.customPages) === null || _prevProps_props_customPages === void 0 ? void 0 : _prevProps_props_customPages.length) !== ((_this_props_props = this.props.props) === null || _this_props_props === void 0 ? void 0 : (_this_props_props_customPages = _this_props_props.customPages) === null || _this_props_props_customPages === void 0 ? void 0 : _this_props_props_customPages.length)) {\n            this.props.updateProps({\n                node: this.portalRef.current,\n                props: this.props.props\n            });\n        }\n    }\n    componentDidMount() {\n        if (this.portalRef.current) {\n            this.props.mount(this.portalRef.current, this.props.props);\n        }\n    }\n    componentWillUnmount() {\n        if (this.portalRef.current) {\n            this.props.unmount(this.portalRef.current);\n        }\n    }\n    render() {\n        var _this_props_customPagesPortals, _this_props;\n        return /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1___default().createElement((react__WEBPACK_IMPORTED_MODULE_1___default().Fragment), null, /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1___default().createElement(\"div\", {\n            ref: this.portalRef\n        }), (_this_props = this.props) === null || _this_props === void 0 ? void 0 : (_this_props_customPagesPortals = _this_props.customPagesPortals) === null || _this_props_customPagesPortals === void 0 ? void 0 : _this_props_customPagesPortals.map((portal, index)=>/*#__PURE__*/ (0,react__WEBPACK_IMPORTED_MODULE_1__.createElement)(portal, {\n                key: index\n            })));\n    }\n    constructor(){\n        super(...arguments);\n        this.portalRef = /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1___default().createRef();\n    }\n}\nconst SignIn = (0,_withClerk__WEBPACK_IMPORTED_MODULE_2__.withClerk)(_c = (param)=>{\n    let { clerk, ...props } = param;\n    return /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1___default().createElement(Portal, {\n        mount: clerk.mountSignIn,\n        unmount: clerk.unmountSignIn,\n        updateProps: clerk.__unstable__updateProps,\n        props\n    });\n}, \"SignIn\");\n_c1 = SignIn;\nconst SignUp = (0,_withClerk__WEBPACK_IMPORTED_MODULE_2__.withClerk)(_c2 = (param)=>{\n    let { clerk, ...props } = param;\n    return /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1___default().createElement(Portal, {\n        mount: clerk.mountSignUp,\n        unmount: clerk.unmountSignUp,\n        updateProps: clerk.__unstable__updateProps,\n        props\n    });\n}, \"SignUp\");\n_c3 = SignUp;\nfunction UserProfilePage(param) {\n    let { children } = param;\n    (0,_clerk_shared__WEBPACK_IMPORTED_MODULE_0__.logErrorInDevMode)(_errors__WEBPACK_IMPORTED_MODULE_3__.userProfilePageRenderedError);\n    return /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1___default().createElement((react__WEBPACK_IMPORTED_MODULE_1___default().Fragment), null, children);\n}\n_c4 = UserProfilePage;\nfunction UserProfileLink(param) {\n    let { children } = param;\n    (0,_clerk_shared__WEBPACK_IMPORTED_MODULE_0__.logErrorInDevMode)(_errors__WEBPACK_IMPORTED_MODULE_3__.userProfileLinkRenderedError);\n    return /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1___default().createElement((react__WEBPACK_IMPORTED_MODULE_1___default().Fragment), null, children);\n}\n_c5 = UserProfileLink;\nconst _UserProfile = (0,_withClerk__WEBPACK_IMPORTED_MODULE_2__.withClerk)(_s((param)=>{\n    let { clerk, ...props } = param;\n    _s();\n    const { customPages, customPagesPortals } = (0,_utils__WEBPACK_IMPORTED_MODULE_4__.useUserProfileCustomPages)(props.children);\n    return /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1___default().createElement(Portal, {\n        mount: clerk.mountUserProfile,\n        unmount: clerk.unmountUserProfile,\n        updateProps: clerk.__unstable__updateProps,\n        props: {\n            ...props,\n            customPages\n        },\n        customPagesPortals\n    });\n}, \"vDLx68PGpqDCYb77AUpwCK+KvPI=\", false, function() {\n    return [\n        _utils__WEBPACK_IMPORTED_MODULE_4__.useUserProfileCustomPages\n    ];\n}), \"UserProfile\");\nconst UserProfile = Object.assign(_UserProfile, {\n    Page: UserProfilePage,\n    Link: UserProfileLink\n});\nconst _UserButton = (0,_withClerk__WEBPACK_IMPORTED_MODULE_2__.withClerk)(_s1((param)=>{\n    let { clerk, ...props } = param;\n    _s1();\n    const { customPages, customPagesPortals } = (0,_utils__WEBPACK_IMPORTED_MODULE_4__.useUserProfileCustomPages)(props.children);\n    const userProfileProps = Object.assign(props.userProfileProps || {}, {\n        customPages\n    });\n    return /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1___default().createElement(Portal, {\n        mount: clerk.mountUserButton,\n        unmount: clerk.unmountUserButton,\n        updateProps: clerk.__unstable__updateProps,\n        props: {\n            ...props,\n            userProfileProps\n        },\n        customPagesPortals\n    });\n}, \"vDLx68PGpqDCYb77AUpwCK+KvPI=\", false, function() {\n    return [\n        _utils__WEBPACK_IMPORTED_MODULE_4__.useUserProfileCustomPages\n    ];\n}), \"UserButton\");\nconst UserButton = Object.assign(_UserButton, {\n    UserProfilePage,\n    UserProfileLink\n});\nfunction OrganizationProfilePage(param) {\n    let { children } = param;\n    (0,_clerk_shared__WEBPACK_IMPORTED_MODULE_0__.logErrorInDevMode)(_errors__WEBPACK_IMPORTED_MODULE_3__.organizationProfilePageRenderedError);\n    return /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1___default().createElement((react__WEBPACK_IMPORTED_MODULE_1___default().Fragment), null, children);\n}\n_c6 = OrganizationProfilePage;\nfunction OrganizationProfileLink(param) {\n    let { children } = param;\n    (0,_clerk_shared__WEBPACK_IMPORTED_MODULE_0__.logErrorInDevMode)(_errors__WEBPACK_IMPORTED_MODULE_3__.organizationProfileLinkRenderedError);\n    return /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1___default().createElement((react__WEBPACK_IMPORTED_MODULE_1___default().Fragment), null, children);\n}\n_c7 = OrganizationProfileLink;\nconst _OrganizationProfile = (0,_withClerk__WEBPACK_IMPORTED_MODULE_2__.withClerk)(_s2((param)=>{\n    let { clerk, ...props } = param;\n    _s2();\n    const { customPages, customPagesPortals } = (0,_utils__WEBPACK_IMPORTED_MODULE_4__.useOrganizationProfileCustomPages)(props.children);\n    return /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1___default().createElement(Portal, {\n        mount: clerk.mountOrganizationProfile,\n        unmount: clerk.unmountOrganizationProfile,\n        updateProps: clerk.__unstable__updateProps,\n        props: {\n            ...props,\n            customPages\n        },\n        customPagesPortals\n    });\n}, \"S4wFeQv9EXkPDLmrf1xkexCNJ9k=\", false, function() {\n    return [\n        _utils__WEBPACK_IMPORTED_MODULE_4__.useOrganizationProfileCustomPages\n    ];\n}), \"OrganizationProfile\");\nconst OrganizationProfile = Object.assign(_OrganizationProfile, {\n    Page: OrganizationProfilePage,\n    Link: OrganizationProfileLink\n});\nconst CreateOrganization = (0,_withClerk__WEBPACK_IMPORTED_MODULE_2__.withClerk)(_c8 = (param)=>{\n    let { clerk, ...props } = param;\n    return /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1___default().createElement(Portal, {\n        mount: clerk.mountCreateOrganization,\n        unmount: clerk.unmountCreateOrganization,\n        updateProps: clerk.__unstable__updateProps,\n        props\n    });\n}, \"CreateOrganization\");\n_c9 = CreateOrganization;\nconst _OrganizationSwitcher = (0,_withClerk__WEBPACK_IMPORTED_MODULE_2__.withClerk)(_s3((param)=>{\n    let { clerk, ...props } = param;\n    _s3();\n    const { customPages, customPagesPortals } = (0,_utils__WEBPACK_IMPORTED_MODULE_4__.useOrganizationProfileCustomPages)(props.children);\n    const organizationProfileProps = Object.assign(props.organizationProfileProps || {}, {\n        customPages\n    });\n    return /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1___default().createElement(Portal, {\n        mount: clerk.mountOrganizationSwitcher,\n        unmount: clerk.unmountOrganizationSwitcher,\n        updateProps: clerk.__unstable__updateProps,\n        props: {\n            ...props,\n            organizationProfileProps\n        },\n        customPagesPortals\n    });\n}, \"S4wFeQv9EXkPDLmrf1xkexCNJ9k=\", false, function() {\n    return [\n        _utils__WEBPACK_IMPORTED_MODULE_4__.useOrganizationProfileCustomPages\n    ];\n}), \"OrganizationSwitcher\");\nconst OrganizationSwitcher = Object.assign(_OrganizationSwitcher, {\n    OrganizationProfilePage,\n    OrganizationProfileLink\n});\nconst OrganizationList = (0,_withClerk__WEBPACK_IMPORTED_MODULE_2__.withClerk)(_c10 = (param)=>{\n    let { clerk, ...props } = param;\n    return /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1___default().createElement(Portal, {\n        mount: clerk.mountOrganizationList,\n        unmount: clerk.unmountOrganizationList,\n        updateProps: clerk.__unstable__updateProps,\n        props\n    });\n}, \"OrganizationList\");\n_c11 = OrganizationList;\n //# sourceMappingURL=uiComponents.js.map\nvar _c, _c1, _c2, _c3, _c4, _c5, _c6, _c7, _c8, _c9, _c10, _c11;\n$RefreshReg$(_c, \"SignIn$withClerk\");\n$RefreshReg$(_c1, \"SignIn\");\n$RefreshReg$(_c2, \"SignUp$withClerk\");\n$RefreshReg$(_c3, \"SignUp\");\n$RefreshReg$(_c4, \"UserProfilePage\");\n$RefreshReg$(_c5, \"UserProfileLink\");\n$RefreshReg$(_c6, \"OrganizationProfilePage\");\n$RefreshReg$(_c7, \"OrganizationProfileLink\");\n$RefreshReg$(_c8, \"CreateOrganization$withClerk\");\n$RefreshReg$(_c9, \"CreateOrganization\");\n$RefreshReg$(_c10, \"OrganizationList$withClerk\");\n$RefreshReg$(_c11, \"OrganizationList\");\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/@clerk/clerk-react/dist/esm/components/uiComponents.js\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/@clerk/clerk-react/dist/esm/components/withClerk.js":
/*!**************************************************************************!*\
  !*** ./node_modules/@clerk/clerk-react/dist/esm/components/withClerk.js ***!
  \**************************************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   WithClerk: function() { return /* binding */ WithClerk; },\n/* harmony export */   withClerk: function() { return /* binding */ withClerk; }\n/* harmony export */ });\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react */ \"(app-pages-browser)/./node_modules/next/dist/compiled/react/index.js\");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var _contexts_IsomorphicClerkContext__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../contexts/IsomorphicClerkContext */ \"(app-pages-browser)/./node_modules/@clerk/clerk-react/dist/esm/contexts/IsomorphicClerkContext.js\");\n/* harmony import */ var _contexts_StructureContext__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../contexts/StructureContext */ \"(app-pages-browser)/./node_modules/@clerk/clerk-react/dist/esm/contexts/StructureContext.js\");\n/* harmony import */ var _errors__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../errors */ \"(app-pages-browser)/./node_modules/@clerk/clerk-react/dist/esm/errors.js\");\nvar _s = $RefreshSig$();\n\n\n\n\n\nconst withClerk = (Component, displayName)=>{\n    var _s = $RefreshSig$();\n    displayName = displayName || Component.displayName || Component.name || \"Component\";\n    Component.displayName = displayName;\n    const HOC = (props)=>{\n        _s();\n        const clerk = (0,_contexts_IsomorphicClerkContext__WEBPACK_IMPORTED_MODULE_1__.useIsomorphicClerkContext)();\n        if (!clerk.loaded) {\n            return null;\n        }\n        return /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0___default().createElement(_contexts_StructureContext__WEBPACK_IMPORTED_MODULE_2__.LoadedGuarantee, null, /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0___default().createElement(Component, {\n            ...props,\n            clerk\n        }));\n    };\n    _s(HOC, \"B5o8JclhB4eOLeY7N8yIbNIkqyo=\", false, function() {\n        return [\n            _contexts_IsomorphicClerkContext__WEBPACK_IMPORTED_MODULE_1__.useIsomorphicClerkContext\n        ];\n    });\n    HOC.displayName = \"withClerk(\".concat(displayName, \")\");\n    return HOC;\n};\nconst WithClerk = (param)=>{\n    let { children } = param;\n    _s();\n    const clerk = (0,_contexts_IsomorphicClerkContext__WEBPACK_IMPORTED_MODULE_1__.useIsomorphicClerkContext)();\n    if (typeof children !== \"function\") {\n        throw new Error(_errors__WEBPACK_IMPORTED_MODULE_3__.hocChildrenNotAFunctionError);\n    }\n    if (!clerk.loaded) {\n        return null;\n    }\n    return /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0___default().createElement(_contexts_StructureContext__WEBPACK_IMPORTED_MODULE_2__.LoadedGuarantee, null, children(clerk));\n};\n_s(WithClerk, \"B5o8JclhB4eOLeY7N8yIbNIkqyo=\", false, function() {\n    return [\n        _contexts_IsomorphicClerkContext__WEBPACK_IMPORTED_MODULE_1__.useIsomorphicClerkContext\n    ];\n});\n_c = WithClerk;\n //# sourceMappingURL=withClerk.js.map\nvar _c;\n$RefreshReg$(_c, \"WithClerk\");\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL25vZGVfbW9kdWxlcy9AY2xlcmsvY2xlcmstcmVhY3QvZGlzdC9lc20vY29tcG9uZW50cy93aXRoQ2xlcmsuanMiLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7QUFBOEI7QUFDSjtBQUNxRDtBQUNoQjtBQUNOO0FBQ3pELE1BQU1JLFlBQVksQ0FBQ0MsV0FBV0M7O0lBQzVCQSxjQUFjQSxlQUFlRCxVQUFVQyxXQUFXLElBQUlELFVBQVVFLElBQUksSUFBSTtJQUN4RUYsVUFBVUMsV0FBVyxHQUFHQTtJQUN4QixNQUFNRSxNQUFNLENBQUNDOztRQUNYLE1BQU1DLFFBQVFULDJGQUF5QkE7UUFDdkMsSUFBSSxDQUFDUyxNQUFNQyxNQUFNLEVBQUU7WUFDakIsT0FBTztRQUNUO1FBQ0EsT0FBTyxhQUFhLGlCQUFHWCwwREFBbUIsQ0FBQ0UsdUVBQWVBLEVBQUUsTUFBTSxhQUFhLGlCQUFHRiwwREFBbUIsQ0FDbkdLLFdBQ0E7WUFDRSxHQUFHSSxLQUFLO1lBQ1JDO1FBQ0Y7SUFFSjtPQVpNRjs7WUFDVVAsdUZBQXlCQTs7O0lBWXpDTyxJQUFJRixXQUFXLEdBQUcsYUFBeUIsT0FBWkEsYUFBWTtJQUMzQyxPQUFPRTtBQUNUO0FBQ0EsTUFBTUssWUFBWTtRQUFDLEVBQUVDLFFBQVEsRUFBRTs7SUFDN0IsTUFBTUosUUFBUVQsMkZBQXlCQTtJQUN2QyxJQUFJLE9BQU9hLGFBQWEsWUFBWTtRQUNsQyxNQUFNLElBQUlDLE1BQU1aLGlFQUE0QkE7SUFDOUM7SUFDQSxJQUFJLENBQUNPLE1BQU1DLE1BQU0sRUFBRTtRQUNqQixPQUFPO0lBQ1Q7SUFDQSxPQUFPLGFBQWEsaUJBQUdYLDBEQUFtQixDQUFDRSx1RUFBZUEsRUFBRSxNQUFNWSxTQUFTSjtBQUM3RTtHQVRNRzs7UUFDVVosdUZBQXlCQTs7O0tBRG5DWTtBQWFKLENBQ0YscUNBQXFDIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vX05fRS8uL25vZGVfbW9kdWxlcy9AY2xlcmsvY2xlcmstcmVhY3QvZGlzdC9lc20vY29tcG9uZW50cy93aXRoQ2xlcmsuanM/YmNiMiJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgXCIuLi9jaHVuay0zVzVHNENZSS5qc1wiO1xuaW1wb3J0IFJlYWN0IGZyb20gXCJyZWFjdFwiO1xuaW1wb3J0IHsgdXNlSXNvbW9ycGhpY0NsZXJrQ29udGV4dCB9IGZyb20gXCIuLi9jb250ZXh0cy9Jc29tb3JwaGljQ2xlcmtDb250ZXh0XCI7XG5pbXBvcnQgeyBMb2FkZWRHdWFyYW50ZWUgfSBmcm9tIFwiLi4vY29udGV4dHMvU3RydWN0dXJlQ29udGV4dFwiO1xuaW1wb3J0IHsgaG9jQ2hpbGRyZW5Ob3RBRnVuY3Rpb25FcnJvciB9IGZyb20gXCIuLi9lcnJvcnNcIjtcbmNvbnN0IHdpdGhDbGVyayA9IChDb21wb25lbnQsIGRpc3BsYXlOYW1lKSA9PiB7XG4gIGRpc3BsYXlOYW1lID0gZGlzcGxheU5hbWUgfHwgQ29tcG9uZW50LmRpc3BsYXlOYW1lIHx8IENvbXBvbmVudC5uYW1lIHx8IFwiQ29tcG9uZW50XCI7XG4gIENvbXBvbmVudC5kaXNwbGF5TmFtZSA9IGRpc3BsYXlOYW1lO1xuICBjb25zdCBIT0MgPSAocHJvcHMpID0+IHtcbiAgICBjb25zdCBjbGVyayA9IHVzZUlzb21vcnBoaWNDbGVya0NvbnRleHQoKTtcbiAgICBpZiAoIWNsZXJrLmxvYWRlZCkge1xuICAgICAgcmV0dXJuIG51bGw7XG4gICAgfVxuICAgIHJldHVybiAvKiBAX19QVVJFX18gKi8gUmVhY3QuY3JlYXRlRWxlbWVudChMb2FkZWRHdWFyYW50ZWUsIG51bGwsIC8qIEBfX1BVUkVfXyAqLyBSZWFjdC5jcmVhdGVFbGVtZW50KFxuICAgICAgQ29tcG9uZW50LFxuICAgICAge1xuICAgICAgICAuLi5wcm9wcyxcbiAgICAgICAgY2xlcmtcbiAgICAgIH1cbiAgICApKTtcbiAgfTtcbiAgSE9DLmRpc3BsYXlOYW1lID0gYHdpdGhDbGVyaygke2Rpc3BsYXlOYW1lfSlgO1xuICByZXR1cm4gSE9DO1xufTtcbmNvbnN0IFdpdGhDbGVyayA9ICh7IGNoaWxkcmVuIH0pID0+IHtcbiAgY29uc3QgY2xlcmsgPSB1c2VJc29tb3JwaGljQ2xlcmtDb250ZXh0KCk7XG4gIGlmICh0eXBlb2YgY2hpbGRyZW4gIT09IFwiZnVuY3Rpb25cIikge1xuICAgIHRocm93IG5ldyBFcnJvcihob2NDaGlsZHJlbk5vdEFGdW5jdGlvbkVycm9yKTtcbiAgfVxuICBpZiAoIWNsZXJrLmxvYWRlZCkge1xuICAgIHJldHVybiBudWxsO1xuICB9XG4gIHJldHVybiAvKiBAX19QVVJFX18gKi8gUmVhY3QuY3JlYXRlRWxlbWVudChMb2FkZWRHdWFyYW50ZWUsIG51bGwsIGNoaWxkcmVuKGNsZXJrKSk7XG59O1xuZXhwb3J0IHtcbiAgV2l0aENsZXJrLFxuICB3aXRoQ2xlcmtcbn07XG4vLyMgc291cmNlTWFwcGluZ1VSTD13aXRoQ2xlcmsuanMubWFwIl0sIm5hbWVzIjpbIlJlYWN0IiwidXNlSXNvbW9ycGhpY0NsZXJrQ29udGV4dCIsIkxvYWRlZEd1YXJhbnRlZSIsImhvY0NoaWxkcmVuTm90QUZ1bmN0aW9uRXJyb3IiLCJ3aXRoQ2xlcmsiLCJDb21wb25lbnQiLCJkaXNwbGF5TmFtZSIsIm5hbWUiLCJIT0MiLCJwcm9wcyIsImNsZXJrIiwibG9hZGVkIiwiY3JlYXRlRWxlbWVudCIsIldpdGhDbGVyayIsImNoaWxkcmVuIiwiRXJyb3IiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/@clerk/clerk-react/dist/esm/components/withClerk.js\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/@clerk/clerk-react/dist/esm/components/withSession.js":
/*!****************************************************************************!*\
  !*** ./node_modules/@clerk/clerk-react/dist/esm/components/withSession.js ***!
  \****************************************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   WithSession: function() { return /* binding */ WithSession; },\n/* harmony export */   withSession: function() { return /* binding */ withSession; }\n/* harmony export */ });\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react */ \"(app-pages-browser)/./node_modules/next/dist/compiled/react/index.js\");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var _contexts_SessionContext__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../contexts/SessionContext */ \"(app-pages-browser)/./node_modules/@clerk/shared/dist/react/index.mjs\");\n/* harmony import */ var _errors__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../errors */ \"(app-pages-browser)/./node_modules/@clerk/clerk-react/dist/esm/errors.js\");\nvar _s = $RefreshSig$();\n\n\n\n\nconst withSession = (Component, displayName)=>{\n    var _s = $RefreshSig$();\n    displayName = displayName || Component.displayName || Component.name || \"Component\";\n    Component.displayName = displayName;\n    const HOC = (props)=>{\n        _s();\n        const session = (0,_contexts_SessionContext__WEBPACK_IMPORTED_MODULE_1__.useSessionContext)();\n        if (!session) {\n            return null;\n        }\n        return /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0___default().createElement(Component, {\n            ...props,\n            session\n        });\n    };\n    _s(HOC, \"V9UNg+dfDJ4HPaIg8L+3vPuTNr4=\", false, function() {\n        return [\n            _contexts_SessionContext__WEBPACK_IMPORTED_MODULE_1__.useSessionContext\n        ];\n    });\n    HOC.displayName = \"withSession(\".concat(displayName, \")\");\n    return HOC;\n};\nconst WithSession = (param)=>{\n    let { children } = param;\n    _s();\n    const session = (0,_contexts_SessionContext__WEBPACK_IMPORTED_MODULE_1__.useSessionContext)();\n    if (typeof children !== \"function\") {\n        throw new Error(_errors__WEBPACK_IMPORTED_MODULE_2__.hocChildrenNotAFunctionError);\n    }\n    if (!session) {\n        return null;\n    }\n    return /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0___default().createElement((react__WEBPACK_IMPORTED_MODULE_0___default().Fragment), null, children(session));\n};\n_s(WithSession, \"V9UNg+dfDJ4HPaIg8L+3vPuTNr4=\", false, function() {\n    return [\n        _contexts_SessionContext__WEBPACK_IMPORTED_MODULE_1__.useSessionContext\n    ];\n});\n_c = WithSession;\n //# sourceMappingURL=withSession.js.map\nvar _c;\n$RefreshReg$(_c, \"WithSession\");\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL25vZGVfbW9kdWxlcy9AY2xlcmsvY2xlcmstcmVhY3QvZGlzdC9lc20vY29tcG9uZW50cy93aXRoU2Vzc2lvbi5qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7O0FBQThCO0FBQ0o7QUFDcUM7QUFDTjtBQUN6RCxNQUFNRyxjQUFjLENBQUNDLFdBQVdDOztJQUM5QkEsY0FBY0EsZUFBZUQsVUFBVUMsV0FBVyxJQUFJRCxVQUFVRSxJQUFJLElBQUk7SUFDeEVGLFVBQVVDLFdBQVcsR0FBR0E7SUFDeEIsTUFBTUUsTUFBTSxDQUFDQzs7UUFDWCxNQUFNQyxVQUFVUiwyRUFBaUJBO1FBQ2pDLElBQUksQ0FBQ1EsU0FBUztZQUNaLE9BQU87UUFDVDtRQUNBLE9BQU8sYUFBYSxpQkFBR1QsMERBQW1CLENBQ3hDSSxXQUNBO1lBQ0UsR0FBR0ksS0FBSztZQUNSQztRQUNGO0lBRUo7T0FaTUY7O1lBQ1lOLHVFQUFpQkE7OztJQVluQ00sSUFBSUYsV0FBVyxHQUFHLGVBQTJCLE9BQVpBLGFBQVk7SUFDN0MsT0FBT0U7QUFDVDtBQUNBLE1BQU1JLGNBQWM7UUFBQyxFQUFFQyxRQUFRLEVBQUU7O0lBQy9CLE1BQU1ILFVBQVVSLDJFQUFpQkE7SUFDakMsSUFBSSxPQUFPVyxhQUFhLFlBQVk7UUFDbEMsTUFBTSxJQUFJQyxNQUFNWCxpRUFBNEJBO0lBQzlDO0lBQ0EsSUFBSSxDQUFDTyxTQUFTO1FBQ1osT0FBTztJQUNUO0lBQ0EsT0FBTyxhQUFhLGlCQUFHVCwwREFBbUIsQ0FBQ0EsdURBQWMsRUFBRSxNQUFNWSxTQUFTSDtBQUM1RTtHQVRNRTs7UUFDWVYsdUVBQWlCQTs7O0tBRDdCVTtBQWFKLENBQ0YsdUNBQXVDIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vX05fRS8uL25vZGVfbW9kdWxlcy9AY2xlcmsvY2xlcmstcmVhY3QvZGlzdC9lc20vY29tcG9uZW50cy93aXRoU2Vzc2lvbi5qcz9iMzcwIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBcIi4uL2NodW5rLTNXNUc0Q1lJLmpzXCI7XG5pbXBvcnQgUmVhY3QgZnJvbSBcInJlYWN0XCI7XG5pbXBvcnQgeyB1c2VTZXNzaW9uQ29udGV4dCB9IGZyb20gXCIuLi9jb250ZXh0cy9TZXNzaW9uQ29udGV4dFwiO1xuaW1wb3J0IHsgaG9jQ2hpbGRyZW5Ob3RBRnVuY3Rpb25FcnJvciB9IGZyb20gXCIuLi9lcnJvcnNcIjtcbmNvbnN0IHdpdGhTZXNzaW9uID0gKENvbXBvbmVudCwgZGlzcGxheU5hbWUpID0+IHtcbiAgZGlzcGxheU5hbWUgPSBkaXNwbGF5TmFtZSB8fCBDb21wb25lbnQuZGlzcGxheU5hbWUgfHwgQ29tcG9uZW50Lm5hbWUgfHwgXCJDb21wb25lbnRcIjtcbiAgQ29tcG9uZW50LmRpc3BsYXlOYW1lID0gZGlzcGxheU5hbWU7XG4gIGNvbnN0IEhPQyA9IChwcm9wcykgPT4ge1xuICAgIGNvbnN0IHNlc3Npb24gPSB1c2VTZXNzaW9uQ29udGV4dCgpO1xuICAgIGlmICghc2Vzc2lvbikge1xuICAgICAgcmV0dXJuIG51bGw7XG4gICAgfVxuICAgIHJldHVybiAvKiBAX19QVVJFX18gKi8gUmVhY3QuY3JlYXRlRWxlbWVudChcbiAgICAgIENvbXBvbmVudCxcbiAgICAgIHtcbiAgICAgICAgLi4ucHJvcHMsXG4gICAgICAgIHNlc3Npb25cbiAgICAgIH1cbiAgICApO1xuICB9O1xuICBIT0MuZGlzcGxheU5hbWUgPSBgd2l0aFNlc3Npb24oJHtkaXNwbGF5TmFtZX0pYDtcbiAgcmV0dXJuIEhPQztcbn07XG5jb25zdCBXaXRoU2Vzc2lvbiA9ICh7IGNoaWxkcmVuIH0pID0+IHtcbiAgY29uc3Qgc2Vzc2lvbiA9IHVzZVNlc3Npb25Db250ZXh0KCk7XG4gIGlmICh0eXBlb2YgY2hpbGRyZW4gIT09IFwiZnVuY3Rpb25cIikge1xuICAgIHRocm93IG5ldyBFcnJvcihob2NDaGlsZHJlbk5vdEFGdW5jdGlvbkVycm9yKTtcbiAgfVxuICBpZiAoIXNlc3Npb24pIHtcbiAgICByZXR1cm4gbnVsbDtcbiAgfVxuICByZXR1cm4gLyogQF9fUFVSRV9fICovIFJlYWN0LmNyZWF0ZUVsZW1lbnQoUmVhY3QuRnJhZ21lbnQsIG51bGwsIGNoaWxkcmVuKHNlc3Npb24pKTtcbn07XG5leHBvcnQge1xuICBXaXRoU2Vzc2lvbixcbiAgd2l0aFNlc3Npb25cbn07XG4vLyMgc291cmNlTWFwcGluZ1VSTD13aXRoU2Vzc2lvbi5qcy5tYXAiXSwibmFtZXMiOlsiUmVhY3QiLCJ1c2VTZXNzaW9uQ29udGV4dCIsImhvY0NoaWxkcmVuTm90QUZ1bmN0aW9uRXJyb3IiLCJ3aXRoU2Vzc2lvbiIsIkNvbXBvbmVudCIsImRpc3BsYXlOYW1lIiwibmFtZSIsIkhPQyIsInByb3BzIiwic2Vzc2lvbiIsImNyZWF0ZUVsZW1lbnQiLCJXaXRoU2Vzc2lvbiIsImNoaWxkcmVuIiwiRXJyb3IiLCJGcmFnbWVudCJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/@clerk/clerk-react/dist/esm/components/withSession.js\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/@clerk/clerk-react/dist/esm/components/withUser.js":
/*!*************************************************************************!*\
  !*** ./node_modules/@clerk/clerk-react/dist/esm/components/withUser.js ***!
  \*************************************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   WithUser: function() { return /* binding */ WithUser; },\n/* harmony export */   withUser: function() { return /* binding */ withUser; }\n/* harmony export */ });\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react */ \"(app-pages-browser)/./node_modules/next/dist/compiled/react/index.js\");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var _contexts_UserContext__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../contexts/UserContext */ \"(app-pages-browser)/./node_modules/@clerk/shared/dist/react/index.mjs\");\n/* harmony import */ var _errors__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../errors */ \"(app-pages-browser)/./node_modules/@clerk/clerk-react/dist/esm/errors.js\");\nvar _s = $RefreshSig$();\n\n\n\n\nconst withUser = (Component, displayName)=>{\n    var _s = $RefreshSig$();\n    displayName = displayName || Component.displayName || Component.name || \"Component\";\n    Component.displayName = displayName;\n    const HOC = (props)=>{\n        _s();\n        const user = (0,_contexts_UserContext__WEBPACK_IMPORTED_MODULE_1__.useUserContext)();\n        if (!user) {\n            return null;\n        }\n        return /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0___default().createElement(Component, {\n            ...props,\n            user\n        });\n    };\n    _s(HOC, \"DoaH9XpqsIs0xeWZfn2uVEei7mw=\", false, function() {\n        return [\n            _contexts_UserContext__WEBPACK_IMPORTED_MODULE_1__.useUserContext\n        ];\n    });\n    HOC.displayName = \"withUser(\".concat(displayName, \")\");\n    return HOC;\n};\nconst WithUser = (param)=>{\n    let { children } = param;\n    _s();\n    const user = (0,_contexts_UserContext__WEBPACK_IMPORTED_MODULE_1__.useUserContext)();\n    if (typeof children !== \"function\") {\n        throw new Error(_errors__WEBPACK_IMPORTED_MODULE_2__.hocChildrenNotAFunctionError);\n    }\n    if (!user) {\n        return null;\n    }\n    return /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0___default().createElement((react__WEBPACK_IMPORTED_MODULE_0___default().Fragment), null, children(user));\n};\n_s(WithUser, \"DoaH9XpqsIs0xeWZfn2uVEei7mw=\", false, function() {\n    return [\n        _contexts_UserContext__WEBPACK_IMPORTED_MODULE_1__.useUserContext\n    ];\n});\n_c = WithUser;\n //# sourceMappingURL=withUser.js.map\nvar _c;\n$RefreshReg$(_c, \"WithUser\");\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL25vZGVfbW9kdWxlcy9AY2xlcmsvY2xlcmstcmVhY3QvZGlzdC9lc20vY29tcG9uZW50cy93aXRoVXNlci5qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7O0FBQThCO0FBQ0o7QUFDK0I7QUFDQTtBQUN6RCxNQUFNRyxXQUFXLENBQUNDLFdBQVdDOztJQUMzQkEsY0FBY0EsZUFBZUQsVUFBVUMsV0FBVyxJQUFJRCxVQUFVRSxJQUFJLElBQUk7SUFDeEVGLFVBQVVDLFdBQVcsR0FBR0E7SUFDeEIsTUFBTUUsTUFBTSxDQUFDQzs7UUFDWCxNQUFNQyxPQUFPUixxRUFBY0E7UUFDM0IsSUFBSSxDQUFDUSxNQUFNO1lBQ1QsT0FBTztRQUNUO1FBQ0EsT0FBTyxhQUFhLGlCQUFHVCwwREFBbUIsQ0FDeENJLFdBQ0E7WUFDRSxHQUFHSSxLQUFLO1lBQ1JDO1FBQ0Y7SUFFSjtPQVpNRjs7WUFDU04saUVBQWNBOzs7SUFZN0JNLElBQUlGLFdBQVcsR0FBRyxZQUF3QixPQUFaQSxhQUFZO0lBQzFDLE9BQU9FO0FBQ1Q7QUFDQSxNQUFNSSxXQUFXO1FBQUMsRUFBRUMsUUFBUSxFQUFFOztJQUM1QixNQUFNSCxPQUFPUixxRUFBY0E7SUFDM0IsSUFBSSxPQUFPVyxhQUFhLFlBQVk7UUFDbEMsTUFBTSxJQUFJQyxNQUFNWCxpRUFBNEJBO0lBQzlDO0lBQ0EsSUFBSSxDQUFDTyxNQUFNO1FBQ1QsT0FBTztJQUNUO0lBQ0EsT0FBTyxhQUFhLGlCQUFHVCwwREFBbUIsQ0FBQ0EsdURBQWMsRUFBRSxNQUFNWSxTQUFTSDtBQUM1RTtHQVRNRTs7UUFDU1YsaUVBQWNBOzs7S0FEdkJVO0FBYUosQ0FDRixvQ0FBb0MiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9fTl9FLy4vbm9kZV9tb2R1bGVzL0BjbGVyay9jbGVyay1yZWFjdC9kaXN0L2VzbS9jb21wb25lbnRzL3dpdGhVc2VyLmpzPzUwMTMiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IFwiLi4vY2h1bmstM1c1RzRDWUkuanNcIjtcbmltcG9ydCBSZWFjdCBmcm9tIFwicmVhY3RcIjtcbmltcG9ydCB7IHVzZVVzZXJDb250ZXh0IH0gZnJvbSBcIi4uL2NvbnRleHRzL1VzZXJDb250ZXh0XCI7XG5pbXBvcnQgeyBob2NDaGlsZHJlbk5vdEFGdW5jdGlvbkVycm9yIH0gZnJvbSBcIi4uL2Vycm9yc1wiO1xuY29uc3Qgd2l0aFVzZXIgPSAoQ29tcG9uZW50LCBkaXNwbGF5TmFtZSkgPT4ge1xuICBkaXNwbGF5TmFtZSA9IGRpc3BsYXlOYW1lIHx8IENvbXBvbmVudC5kaXNwbGF5TmFtZSB8fCBDb21wb25lbnQubmFtZSB8fCBcIkNvbXBvbmVudFwiO1xuICBDb21wb25lbnQuZGlzcGxheU5hbWUgPSBkaXNwbGF5TmFtZTtcbiAgY29uc3QgSE9DID0gKHByb3BzKSA9PiB7XG4gICAgY29uc3QgdXNlciA9IHVzZVVzZXJDb250ZXh0KCk7XG4gICAgaWYgKCF1c2VyKSB7XG4gICAgICByZXR1cm4gbnVsbDtcbiAgICB9XG4gICAgcmV0dXJuIC8qIEBfX1BVUkVfXyAqLyBSZWFjdC5jcmVhdGVFbGVtZW50KFxuICAgICAgQ29tcG9uZW50LFxuICAgICAge1xuICAgICAgICAuLi5wcm9wcyxcbiAgICAgICAgdXNlclxuICAgICAgfVxuICAgICk7XG4gIH07XG4gIEhPQy5kaXNwbGF5TmFtZSA9IGB3aXRoVXNlcigke2Rpc3BsYXlOYW1lfSlgO1xuICByZXR1cm4gSE9DO1xufTtcbmNvbnN0IFdpdGhVc2VyID0gKHsgY2hpbGRyZW4gfSkgPT4ge1xuICBjb25zdCB1c2VyID0gdXNlVXNlckNvbnRleHQoKTtcbiAgaWYgKHR5cGVvZiBjaGlsZHJlbiAhPT0gXCJmdW5jdGlvblwiKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKGhvY0NoaWxkcmVuTm90QUZ1bmN0aW9uRXJyb3IpO1xuICB9XG4gIGlmICghdXNlcikge1xuICAgIHJldHVybiBudWxsO1xuICB9XG4gIHJldHVybiAvKiBAX19QVVJFX18gKi8gUmVhY3QuY3JlYXRlRWxlbWVudChSZWFjdC5GcmFnbWVudCwgbnVsbCwgY2hpbGRyZW4odXNlcikpO1xufTtcbmV4cG9ydCB7XG4gIFdpdGhVc2VyLFxuICB3aXRoVXNlclxufTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXdpdGhVc2VyLmpzLm1hcCJdLCJuYW1lcyI6WyJSZWFjdCIsInVzZVVzZXJDb250ZXh0IiwiaG9jQ2hpbGRyZW5Ob3RBRnVuY3Rpb25FcnJvciIsIndpdGhVc2VyIiwiQ29tcG9uZW50IiwiZGlzcGxheU5hbWUiLCJuYW1lIiwiSE9DIiwicHJvcHMiLCJ1c2VyIiwiY3JlYXRlRWxlbWVudCIsIldpdGhVc2VyIiwiY2hpbGRyZW4iLCJFcnJvciIsIkZyYWdtZW50Il0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/@clerk/clerk-react/dist/esm/components/withUser.js\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/@clerk/clerk-react/dist/esm/contexts/AuthContext.js":
/*!**************************************************************************!*\
  !*** ./node_modules/@clerk/clerk-react/dist/esm/contexts/AuthContext.js ***!
  \**************************************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   AuthContext: function() { return /* binding */ AuthContext; },\n/* harmony export */   useAuthContext: function() { return /* binding */ useAuthContext; }\n/* harmony export */ });\n/* harmony import */ var _clerk_shared_react__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @clerk/shared/react */ \"(app-pages-browser)/./node_modules/@clerk/shared/dist/react/index.mjs\");\n\n\nconst [AuthContext, useAuthContext] = (0,_clerk_shared_react__WEBPACK_IMPORTED_MODULE_0__.createContextAndHook)(\"AuthContext\");\n //# sourceMappingURL=AuthContext.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL25vZGVfbW9kdWxlcy9AY2xlcmsvY2xlcmstcmVhY3QvZGlzdC9lc20vY29udGV4dHMvQXV0aENvbnRleHQuanMiLCJtYXBwaW5ncyI6Ijs7Ozs7O0FBQThCO0FBQzZCO0FBQzNELE1BQU0sQ0FBQ0MsYUFBYUMsZUFBZSxHQUFHRix5RUFBb0JBLENBQUM7QUFJekQsQ0FDRix1Q0FBdUMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9fTl9FLy4vbm9kZV9tb2R1bGVzL0BjbGVyay9jbGVyay1yZWFjdC9kaXN0L2VzbS9jb250ZXh0cy9BdXRoQ29udGV4dC5qcz80NzAwIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBcIi4uL2NodW5rLTNXNUc0Q1lJLmpzXCI7XG5pbXBvcnQgeyBjcmVhdGVDb250ZXh0QW5kSG9vayB9IGZyb20gXCJAY2xlcmsvc2hhcmVkL3JlYWN0XCI7XG5jb25zdCBbQXV0aENvbnRleHQsIHVzZUF1dGhDb250ZXh0XSA9IGNyZWF0ZUNvbnRleHRBbmRIb29rKFwiQXV0aENvbnRleHRcIik7XG5leHBvcnQge1xuICBBdXRoQ29udGV4dCxcbiAgdXNlQXV0aENvbnRleHRcbn07XG4vLyMgc291cmNlTWFwcGluZ1VSTD1BdXRoQ29udGV4dC5qcy5tYXAiXSwibmFtZXMiOlsiY3JlYXRlQ29udGV4dEFuZEhvb2siLCJBdXRoQ29udGV4dCIsInVzZUF1dGhDb250ZXh0Il0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/@clerk/clerk-react/dist/esm/contexts/AuthContext.js\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/@clerk/clerk-react/dist/esm/contexts/ClerkContextProvider.js":
/*!***********************************************************************************!*\
  !*** ./node_modules/@clerk/clerk-react/dist/esm/contexts/ClerkContextProvider.js ***!
  \***********************************************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   ClerkContextProvider: function() { return /* binding */ ClerkContextProvider; }\n/* harmony export */ });\n/* harmony import */ var _clerk_shared_deprecated__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @clerk/shared/deprecated */ \"(app-pages-browser)/./node_modules/@clerk/shared/dist/deprecated.mjs\");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! react */ \"(app-pages-browser)/./node_modules/next/dist/compiled/react/index.js\");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_1__);\n/* harmony import */ var _isomorphicClerk__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../isomorphicClerk */ \"(app-pages-browser)/./node_modules/@clerk/clerk-react/dist/esm/isomorphicClerk.js\");\n/* harmony import */ var _utils_deriveState__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../utils/deriveState */ \"(app-pages-browser)/./node_modules/@clerk/clerk-react/dist/esm/utils/deriveState.js\");\n/* harmony import */ var _AuthContext__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./AuthContext */ \"(app-pages-browser)/./node_modules/@clerk/clerk-react/dist/esm/contexts/AuthContext.js\");\n/* harmony import */ var _ClientContext__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./UserContext */ \"(app-pages-browser)/./node_modules/@clerk/shared/dist/react/index.mjs\");\n/* harmony import */ var _IsomorphicClerkContext__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./IsomorphicClerkContext */ \"(app-pages-browser)/./node_modules/@clerk/clerk-react/dist/esm/contexts/IsomorphicClerkContext.js\");\nvar _s = $RefreshSig$(), _s1 = $RefreshSig$();\n\n\n\n\n\n\n\n\n\n\n\nfunction ClerkContextProvider(props) {\n    _s();\n    const { isomorphicClerkOptions, initialState, children } = props;\n    const { isomorphicClerk: clerk, loaded: clerkLoaded } = useLoadedIsomorphicClerk(isomorphicClerkOptions);\n    if (isomorphicClerkOptions.frontendApi) {\n        (0,_clerk_shared_deprecated__WEBPACK_IMPORTED_MODULE_0__.deprecated)(\"frontendApi\", \"Use `publishableKey` instead.\");\n    }\n    const [state, setState] = react__WEBPACK_IMPORTED_MODULE_1___default().useState({\n        client: clerk.client,\n        session: clerk.session,\n        user: clerk.user,\n        organization: clerk.organization,\n        lastOrganizationInvitation: null,\n        lastOrganizationMember: null\n    });\n    react__WEBPACK_IMPORTED_MODULE_1___default().useEffect(()=>{\n        return clerk.addListener((e)=>setState({\n                ...e\n            }));\n    }, []);\n    const derivedState = (0,_utils_deriveState__WEBPACK_IMPORTED_MODULE_2__.deriveState)(clerkLoaded, state, initialState);\n    const clerkCtx = react__WEBPACK_IMPORTED_MODULE_1___default().useMemo(()=>({\n            value: clerk\n        }), [\n        clerkLoaded\n    ]);\n    const clientCtx = react__WEBPACK_IMPORTED_MODULE_1___default().useMemo(()=>({\n            value: state.client\n        }), [\n        state.client\n    ]);\n    const { sessionId, session, userId, user, orgId, actor, lastOrganizationInvitation, lastOrganizationMember, organization, orgRole, orgSlug, orgPermissions } = derivedState;\n    const authCtx = react__WEBPACK_IMPORTED_MODULE_1___default().useMemo(()=>{\n        const value = {\n            sessionId,\n            userId,\n            actor,\n            orgId,\n            orgRole,\n            orgSlug,\n            orgPermissions\n        };\n        return {\n            value\n        };\n    }, [\n        sessionId,\n        userId,\n        actor,\n        orgId,\n        orgRole,\n        orgSlug\n    ]);\n    const userCtx = react__WEBPACK_IMPORTED_MODULE_1___default().useMemo(()=>({\n            value: user\n        }), [\n        userId,\n        user\n    ]);\n    const sessionCtx = react__WEBPACK_IMPORTED_MODULE_1___default().useMemo(()=>({\n            value: session\n        }), [\n        sessionId,\n        session\n    ]);\n    const organizationCtx = react__WEBPACK_IMPORTED_MODULE_1___default().useMemo(()=>{\n        const value = {\n            organization,\n            lastOrganizationInvitation,\n            lastOrganizationMember\n        };\n        return {\n            value\n        };\n    }, [\n        orgId,\n        organization,\n        lastOrganizationInvitation,\n        lastOrganizationMember\n    ]);\n    return(// @ts-expect-error value passed is of type IsomorphicClerk where the context expects LoadedClerk\n    /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1___default().createElement(_IsomorphicClerkContext__WEBPACK_IMPORTED_MODULE_3__.IsomorphicClerkContext.Provider, {\n        value: clerkCtx\n    }, /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1___default().createElement(_ClientContext__WEBPACK_IMPORTED_MODULE_4__.ClientContext.Provider, {\n        value: clientCtx\n    }, /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1___default().createElement(_ClientContext__WEBPACK_IMPORTED_MODULE_4__.SessionContext.Provider, {\n        value: sessionCtx\n    }, /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1___default().createElement(_ClientContext__WEBPACK_IMPORTED_MODULE_4__.OrganizationProvider, {\n        ...organizationCtx.value\n    }, /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1___default().createElement(_AuthContext__WEBPACK_IMPORTED_MODULE_5__.AuthContext.Provider, {\n        value: authCtx\n    }, /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1___default().createElement(_ClientContext__WEBPACK_IMPORTED_MODULE_4__.UserContext.Provider, {\n        value: userCtx\n    }, children)))))));\n}\n_s(ClerkContextProvider, \"BPyRVXsVBcnu1uEirQmMxlmBdaI=\", false, function() {\n    return [\n        useLoadedIsomorphicClerk\n    ];\n});\n_c = ClerkContextProvider;\nconst useLoadedIsomorphicClerk = (options)=>{\n    _s1();\n    const [loaded, setLoaded] = react__WEBPACK_IMPORTED_MODULE_1___default().useState(false);\n    const isomorphicClerk = react__WEBPACK_IMPORTED_MODULE_1___default().useMemo(()=>_isomorphicClerk__WEBPACK_IMPORTED_MODULE_6__[\"default\"].getOrCreateInstance(options), []);\n    react__WEBPACK_IMPORTED_MODULE_1___default().useEffect(()=>{\n        isomorphicClerk.__unstable__updateProps({\n            appearance: options.appearance\n        });\n    }, [\n        options.appearance\n    ]);\n    react__WEBPACK_IMPORTED_MODULE_1___default().useEffect(()=>{\n        isomorphicClerk.__unstable__updateProps({\n            options\n        });\n    }, [\n        options.localization\n    ]);\n    react__WEBPACK_IMPORTED_MODULE_1___default().useEffect(()=>{\n        isomorphicClerk.addOnLoaded(()=>setLoaded(true));\n    }, []);\n    return {\n        isomorphicClerk,\n        loaded\n    };\n};\n_s1(useLoadedIsomorphicClerk, \"kNMu3IVCBVrEnElEZIITRud4B7E=\");\n //# sourceMappingURL=ClerkContextProvider.js.map\nvar _c;\n$RefreshReg$(_c, \"ClerkContextProvider\");\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/@clerk/clerk-react/dist/esm/contexts/ClerkContextProvider.js\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/@clerk/clerk-react/dist/esm/contexts/ClerkProvider.js":
/*!****************************************************************************!*\
  !*** ./node_modules/@clerk/clerk-react/dist/esm/contexts/ClerkProvider.js ***!
  \****************************************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   ClerkProvider: function() { return /* binding */ ClerkProvider; },\n/* harmony export */   __internal__setErrorThrowerOptions: function() { return /* reexport safe */ _utils__WEBPACK_IMPORTED_MODULE_2__.__internal__setErrorThrowerOptions; }\n/* harmony export */ });\n/* harmony import */ var _clerk_shared_keys__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @clerk/shared/keys */ \"(app-pages-browser)/./node_modules/@clerk/shared/dist/keys.mjs\");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! react */ \"(app-pages-browser)/./node_modules/next/dist/compiled/react/index.js\");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_1__);\n/* harmony import */ var _errors__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../errors */ \"(app-pages-browser)/./node_modules/@clerk/clerk-react/dist/esm/errors.js\");\n/* harmony import */ var _utils__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../utils */ \"(app-pages-browser)/./node_modules/@clerk/clerk-react/dist/esm/utils/errorThrower.js\");\n/* harmony import */ var _utils__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../utils */ \"(app-pages-browser)/./node_modules/@clerk/clerk-react/dist/esm/utils/useMaxAllowedInstancesGuard.js\");\n/* harmony import */ var _ClerkContextProvider__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./ClerkContextProvider */ \"(app-pages-browser)/./node_modules/@clerk/clerk-react/dist/esm/contexts/ClerkContextProvider.js\");\n/* harmony import */ var _StructureContext__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./StructureContext */ \"(app-pages-browser)/./node_modules/@clerk/clerk-react/dist/esm/contexts/StructureContext.js\");\n\n\n\n\n\n\n\n(0,_utils__WEBPACK_IMPORTED_MODULE_2__.__internal__setErrorThrowerOptions)({\n    packageName: \"@clerk/clerk-react\"\n});\nfunction ClerkProviderBase(props) {\n    const { initialState, children, ...restIsomorphicClerkOptions } = props;\n    const { frontendApi = \"\", publishableKey = \"\", Clerk: userInitialisedClerk } = restIsomorphicClerkOptions;\n    if (!userInitialisedClerk) {\n        if (!publishableKey && !frontendApi) {\n            _utils__WEBPACK_IMPORTED_MODULE_2__.errorThrower.throwMissingPublishableKeyError();\n        } else if (publishableKey && !(0,_clerk_shared_keys__WEBPACK_IMPORTED_MODULE_0__.isPublishableKey)(publishableKey)) {\n            _utils__WEBPACK_IMPORTED_MODULE_2__.errorThrower.throwInvalidPublishableKeyError({\n                key: publishableKey\n            });\n        } else if (!publishableKey && frontendApi && !(0,_clerk_shared_keys__WEBPACK_IMPORTED_MODULE_0__.isLegacyFrontendApiKey)(frontendApi)) {\n            _utils__WEBPACK_IMPORTED_MODULE_2__.errorThrower.throwInvalidFrontendApiError({\n                key: frontendApi\n            });\n        }\n    }\n    return /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1___default().createElement(_StructureContext__WEBPACK_IMPORTED_MODULE_3__.StructureContext.Provider, {\n        value: _StructureContext__WEBPACK_IMPORTED_MODULE_3__.StructureContextStates.noGuarantees\n    }, /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1___default().createElement(_ClerkContextProvider__WEBPACK_IMPORTED_MODULE_4__.ClerkContextProvider, {\n        initialState,\n        isomorphicClerkOptions: restIsomorphicClerkOptions\n    }, children));\n}\n_c = ClerkProviderBase;\nconst ClerkProvider = (0,_utils__WEBPACK_IMPORTED_MODULE_5__.withMaxAllowedInstancesGuard)(ClerkProviderBase, \"ClerkProvider\", _errors__WEBPACK_IMPORTED_MODULE_6__.multipleClerkProvidersError);\n_c1 = ClerkProvider;\nClerkProvider.displayName = \"ClerkProvider\";\n //# sourceMappingURL=ClerkProvider.js.map\nvar _c, _c1;\n$RefreshReg$(_c, \"ClerkProviderBase\");\n$RefreshReg$(_c1, \"ClerkProvider\");\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL25vZGVfbW9kdWxlcy9AY2xlcmsvY2xlcmstcmVhY3QvZGlzdC9lc20vY29udGV4dHMvQ2xlcmtQcm92aWRlci5qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7O0FBQThCO0FBQ2dEO0FBQ3BEO0FBQzhCO0FBQ2tEO0FBQzVDO0FBQ2dCO0FBQzlFSSwwRUFBa0NBLENBQUM7SUFDakNNLGFBQWE7QUFDZjtBQUNBLFNBQVNDLGtCQUFrQkMsS0FBSztJQUM5QixNQUFNLEVBQUVDLFlBQVksRUFBRUMsUUFBUSxFQUFFLEdBQUdDLDRCQUE0QixHQUFHSDtJQUNsRSxNQUFNLEVBQUVJLGNBQWMsRUFBRSxFQUFFQyxpQkFBaUIsRUFBRSxFQUFFQyxPQUFPQyxvQkFBb0IsRUFBRSxHQUFHSjtJQUMvRSxJQUFJLENBQUNJLHNCQUFzQjtRQUN6QixJQUFJLENBQUNGLGtCQUFrQixDQUFDRCxhQUFhO1lBQ25DWCxnREFBWUEsQ0FBQ2UsK0JBQStCO1FBQzlDLE9BQU8sSUFBSUgsa0JBQWtCLENBQUNoQixvRUFBZ0JBLENBQUNnQixpQkFBaUI7WUFDOURaLGdEQUFZQSxDQUFDZ0IsK0JBQStCLENBQUM7Z0JBQUVDLEtBQUtMO1lBQWU7UUFDckUsT0FBTyxJQUFJLENBQUNBLGtCQUFrQkQsZUFBZSxDQUFDaEIsMEVBQXNCQSxDQUFDZ0IsY0FBYztZQUNqRlgsZ0RBQVlBLENBQUNrQiw0QkFBNEIsQ0FBQztnQkFBRUQsS0FBS047WUFBWTtRQUMvRDtJQUNGO0lBQ0EsT0FBTyxhQUFhLGlCQUFHZCwwREFBbUIsQ0FBQ00sK0RBQWdCQSxDQUFDaUIsUUFBUSxFQUFFO1FBQUVDLE9BQU9qQixxRUFBc0JBLENBQUNrQixZQUFZO0lBQUMsR0FBRyxhQUFhLGlCQUFHekIsMERBQW1CLENBQ3ZKSyx1RUFBb0JBLEVBQ3BCO1FBQ0VNO1FBQ0FlLHdCQUF3QmI7SUFDMUIsR0FDQUQ7QUFFSjtLQXBCU0g7QUFxQlQsTUFBTWtCLGdCQUFnQnZCLG9FQUE0QkEsQ0FBQ0ssbUJBQW1CLGlCQUFpQlIsZ0VBQTJCQTs7QUFDbEgwQixjQUFjQyxXQUFXLEdBQUc7QUFJMUIsQ0FDRix5Q0FBeUMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9fTl9FLy4vbm9kZV9tb2R1bGVzL0BjbGVyay9jbGVyay1yZWFjdC9kaXN0L2VzbS9jb250ZXh0cy9DbGVya1Byb3ZpZGVyLmpzPzFkMTEiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IFwiLi4vY2h1bmstM1c1RzRDWUkuanNcIjtcbmltcG9ydCB7IGlzTGVnYWN5RnJvbnRlbmRBcGlLZXksIGlzUHVibGlzaGFibGVLZXkgfSBmcm9tIFwiQGNsZXJrL3NoYXJlZC9rZXlzXCI7XG5pbXBvcnQgUmVhY3QgZnJvbSBcInJlYWN0XCI7XG5pbXBvcnQgeyBtdWx0aXBsZUNsZXJrUHJvdmlkZXJzRXJyb3IgfSBmcm9tIFwiLi4vZXJyb3JzXCI7XG5pbXBvcnQgeyBfX2ludGVybmFsX19zZXRFcnJvclRocm93ZXJPcHRpb25zLCBlcnJvclRocm93ZXIsIHdpdGhNYXhBbGxvd2VkSW5zdGFuY2VzR3VhcmQgfSBmcm9tIFwiLi4vdXRpbHNcIjtcbmltcG9ydCB7IENsZXJrQ29udGV4dFByb3ZpZGVyIH0gZnJvbSBcIi4vQ2xlcmtDb250ZXh0UHJvdmlkZXJcIjtcbmltcG9ydCB7IFN0cnVjdHVyZUNvbnRleHQsIFN0cnVjdHVyZUNvbnRleHRTdGF0ZXMgfSBmcm9tIFwiLi9TdHJ1Y3R1cmVDb250ZXh0XCI7XG5fX2ludGVybmFsX19zZXRFcnJvclRocm93ZXJPcHRpb25zKHtcbiAgcGFja2FnZU5hbWU6IFwiQGNsZXJrL2NsZXJrLXJlYWN0XCJcbn0pO1xuZnVuY3Rpb24gQ2xlcmtQcm92aWRlckJhc2UocHJvcHMpIHtcbiAgY29uc3QgeyBpbml0aWFsU3RhdGUsIGNoaWxkcmVuLCAuLi5yZXN0SXNvbW9ycGhpY0NsZXJrT3B0aW9ucyB9ID0gcHJvcHM7XG4gIGNvbnN0IHsgZnJvbnRlbmRBcGkgPSBcIlwiLCBwdWJsaXNoYWJsZUtleSA9IFwiXCIsIENsZXJrOiB1c2VySW5pdGlhbGlzZWRDbGVyayB9ID0gcmVzdElzb21vcnBoaWNDbGVya09wdGlvbnM7XG4gIGlmICghdXNlckluaXRpYWxpc2VkQ2xlcmspIHtcbiAgICBpZiAoIXB1Ymxpc2hhYmxlS2V5ICYmICFmcm9udGVuZEFwaSkge1xuICAgICAgZXJyb3JUaHJvd2VyLnRocm93TWlzc2luZ1B1Ymxpc2hhYmxlS2V5RXJyb3IoKTtcbiAgICB9IGVsc2UgaWYgKHB1Ymxpc2hhYmxlS2V5ICYmICFpc1B1Ymxpc2hhYmxlS2V5KHB1Ymxpc2hhYmxlS2V5KSkge1xuICAgICAgZXJyb3JUaHJvd2VyLnRocm93SW52YWxpZFB1Ymxpc2hhYmxlS2V5RXJyb3IoeyBrZXk6IHB1Ymxpc2hhYmxlS2V5IH0pO1xuICAgIH0gZWxzZSBpZiAoIXB1Ymxpc2hhYmxlS2V5ICYmIGZyb250ZW5kQXBpICYmICFpc0xlZ2FjeUZyb250ZW5kQXBpS2V5KGZyb250ZW5kQXBpKSkge1xuICAgICAgZXJyb3JUaHJvd2VyLnRocm93SW52YWxpZEZyb250ZW5kQXBpRXJyb3IoeyBrZXk6IGZyb250ZW5kQXBpIH0pO1xuICAgIH1cbiAgfVxuICByZXR1cm4gLyogQF9fUFVSRV9fICovIFJlYWN0LmNyZWF0ZUVsZW1lbnQoU3RydWN0dXJlQ29udGV4dC5Qcm92aWRlciwgeyB2YWx1ZTogU3RydWN0dXJlQ29udGV4dFN0YXRlcy5ub0d1YXJhbnRlZXMgfSwgLyogQF9fUFVSRV9fICovIFJlYWN0LmNyZWF0ZUVsZW1lbnQoXG4gICAgQ2xlcmtDb250ZXh0UHJvdmlkZXIsXG4gICAge1xuICAgICAgaW5pdGlhbFN0YXRlLFxuICAgICAgaXNvbW9ycGhpY0NsZXJrT3B0aW9uczogcmVzdElzb21vcnBoaWNDbGVya09wdGlvbnNcbiAgICB9LFxuICAgIGNoaWxkcmVuXG4gICkpO1xufVxuY29uc3QgQ2xlcmtQcm92aWRlciA9IHdpdGhNYXhBbGxvd2VkSW5zdGFuY2VzR3VhcmQoQ2xlcmtQcm92aWRlckJhc2UsIFwiQ2xlcmtQcm92aWRlclwiLCBtdWx0aXBsZUNsZXJrUHJvdmlkZXJzRXJyb3IpO1xuQ2xlcmtQcm92aWRlci5kaXNwbGF5TmFtZSA9IFwiQ2xlcmtQcm92aWRlclwiO1xuZXhwb3J0IHtcbiAgQ2xlcmtQcm92aWRlcixcbiAgX19pbnRlcm5hbF9fc2V0RXJyb3JUaHJvd2VyT3B0aW9uc1xufTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPUNsZXJrUHJvdmlkZXIuanMubWFwIl0sIm5hbWVzIjpbImlzTGVnYWN5RnJvbnRlbmRBcGlLZXkiLCJpc1B1Ymxpc2hhYmxlS2V5IiwiUmVhY3QiLCJtdWx0aXBsZUNsZXJrUHJvdmlkZXJzRXJyb3IiLCJfX2ludGVybmFsX19zZXRFcnJvclRocm93ZXJPcHRpb25zIiwiZXJyb3JUaHJvd2VyIiwid2l0aE1heEFsbG93ZWRJbnN0YW5jZXNHdWFyZCIsIkNsZXJrQ29udGV4dFByb3ZpZGVyIiwiU3RydWN0dXJlQ29udGV4dCIsIlN0cnVjdHVyZUNvbnRleHRTdGF0ZXMiLCJwYWNrYWdlTmFtZSIsIkNsZXJrUHJvdmlkZXJCYXNlIiwicHJvcHMiLCJpbml0aWFsU3RhdGUiLCJjaGlsZHJlbiIsInJlc3RJc29tb3JwaGljQ2xlcmtPcHRpb25zIiwiZnJvbnRlbmRBcGkiLCJwdWJsaXNoYWJsZUtleSIsIkNsZXJrIiwidXNlckluaXRpYWxpc2VkQ2xlcmsiLCJ0aHJvd01pc3NpbmdQdWJsaXNoYWJsZUtleUVycm9yIiwidGhyb3dJbnZhbGlkUHVibGlzaGFibGVLZXlFcnJvciIsImtleSIsInRocm93SW52YWxpZEZyb250ZW5kQXBpRXJyb3IiLCJjcmVhdGVFbGVtZW50IiwiUHJvdmlkZXIiLCJ2YWx1ZSIsIm5vR3VhcmFudGVlcyIsImlzb21vcnBoaWNDbGVya09wdGlvbnMiLCJDbGVya1Byb3ZpZGVyIiwiZGlzcGxheU5hbWUiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/@clerk/clerk-react/dist/esm/contexts/ClerkProvider.js\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/@clerk/clerk-react/dist/esm/contexts/IsomorphicClerkContext.js":
/*!*************************************************************************************!*\
  !*** ./node_modules/@clerk/clerk-react/dist/esm/contexts/IsomorphicClerkContext.js ***!
  \*************************************************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   IsomorphicClerkContext: function() { return /* binding */ IsomorphicClerkContext; },\n/* harmony export */   useIsomorphicClerkContext: function() { return /* binding */ useIsomorphicClerkContext; }\n/* harmony export */ });\n/* harmony import */ var _clerk_shared_react__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @clerk/shared/react */ \"(app-pages-browser)/./node_modules/@clerk/shared/dist/react/index.mjs\");\n\n\nconst [IsomorphicClerkContext, useIsomorphicClerkContext] = [\n    _clerk_shared_react__WEBPACK_IMPORTED_MODULE_0__.ClerkInstanceContext,\n    _clerk_shared_react__WEBPACK_IMPORTED_MODULE_0__.useClerkInstanceContext\n];\n //# sourceMappingURL=IsomorphicClerkContext.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL25vZGVfbW9kdWxlcy9AY2xlcmsvY2xlcmstcmVhY3QvZGlzdC9lc20vY29udGV4dHMvSXNvbW9ycGhpY0NsZXJrQ29udGV4dC5qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7QUFBOEI7QUFDc0Q7QUFDcEYsTUFBTSxDQUFDRSx3QkFBd0JDLDBCQUEwQixHQUFHO0lBQUNILHFFQUFvQkE7SUFBRUMsd0VBQXVCQTtDQUFDO0FBSXpHLENBQ0Ysa0RBQWtEIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vX05fRS8uL25vZGVfbW9kdWxlcy9AY2xlcmsvY2xlcmstcmVhY3QvZGlzdC9lc20vY29udGV4dHMvSXNvbW9ycGhpY0NsZXJrQ29udGV4dC5qcz8yNDdmIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBcIi4uL2NodW5rLTNXNUc0Q1lJLmpzXCI7XG5pbXBvcnQgeyBDbGVya0luc3RhbmNlQ29udGV4dCwgdXNlQ2xlcmtJbnN0YW5jZUNvbnRleHQgfSBmcm9tIFwiQGNsZXJrL3NoYXJlZC9yZWFjdFwiO1xuY29uc3QgW0lzb21vcnBoaWNDbGVya0NvbnRleHQsIHVzZUlzb21vcnBoaWNDbGVya0NvbnRleHRdID0gW0NsZXJrSW5zdGFuY2VDb250ZXh0LCB1c2VDbGVya0luc3RhbmNlQ29udGV4dF07XG5leHBvcnQge1xuICBJc29tb3JwaGljQ2xlcmtDb250ZXh0LFxuICB1c2VJc29tb3JwaGljQ2xlcmtDb250ZXh0XG59O1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9SXNvbW9ycGhpY0NsZXJrQ29udGV4dC5qcy5tYXAiXSwibmFtZXMiOlsiQ2xlcmtJbnN0YW5jZUNvbnRleHQiLCJ1c2VDbGVya0luc3RhbmNlQ29udGV4dCIsIklzb21vcnBoaWNDbGVya0NvbnRleHQiLCJ1c2VJc29tb3JwaGljQ2xlcmtDb250ZXh0Il0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/@clerk/clerk-react/dist/esm/contexts/IsomorphicClerkContext.js\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/@clerk/clerk-react/dist/esm/contexts/StructureContext.js":
/*!*******************************************************************************!*\
  !*** ./node_modules/@clerk/clerk-react/dist/esm/contexts/StructureContext.js ***!
  \*******************************************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   LoadedGuarantee: function() { return /* binding */ LoadedGuarantee; },\n/* harmony export */   StructureContext: function() { return /* binding */ StructureContext; },\n/* harmony export */   StructureContextStates: function() { return /* binding */ StructureContextStates; }\n/* harmony export */ });\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react */ \"(app-pages-browser)/./node_modules/next/dist/compiled/react/index.js\");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var _assertHelpers__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./assertHelpers */ \"(app-pages-browser)/./node_modules/@clerk/clerk-react/dist/esm/contexts/assertHelpers.js\");\nvar _s = $RefreshSig$(), _s1 = $RefreshSig$();\n\n\n\nconst StructureContextStates = Object.freeze({\n    noGuarantees: Object.freeze({\n        guaranteedLoaded: false\n    }),\n    guaranteedLoaded: Object.freeze({\n        guaranteedLoaded: true\n    })\n});\nconst StructureContext = /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0___default().createContext(void 0);\nStructureContext.displayName = \"StructureContext\";\nconst useStructureContext = ()=>{\n    _s();\n    const structureCtx = react__WEBPACK_IMPORTED_MODULE_0___default().useContext(StructureContext);\n    (0,_assertHelpers__WEBPACK_IMPORTED_MODULE_1__.assertWrappedByClerkProvider)(structureCtx);\n    return structureCtx;\n};\n_s(useStructureContext, \"IUxD/HNcov0AHjQ394Oy/3MIj0A=\");\nconst LoadedGuarantee = (param)=>{\n    let { children } = param;\n    _s1();\n    const structure = useStructureContext();\n    if (structure.guaranteedLoaded) {\n        return /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0___default().createElement((react__WEBPACK_IMPORTED_MODULE_0___default().Fragment), null, children);\n    }\n    return /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0___default().createElement(StructureContext.Provider, {\n        value: StructureContextStates.guaranteedLoaded\n    }, children);\n};\n_s1(LoadedGuarantee, \"u4G3bH20RiRIjgBg7JAtbTOojl8=\", false, function() {\n    return [\n        useStructureContext\n    ];\n});\n_c = LoadedGuarantee;\n //# sourceMappingURL=StructureContext.js.map\nvar _c;\n$RefreshReg$(_c, \"LoadedGuarantee\");\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL25vZGVfbW9kdWxlcy9AY2xlcmsvY2xlcmstcmVhY3QvZGlzdC9lc20vY29udGV4dHMvU3RydWN0dXJlQ29udGV4dC5qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7O0FBQThCO0FBQ0o7QUFDcUM7QUFDL0QsTUFBTUUseUJBQXlCQyxPQUFPQyxNQUFNLENBQUM7SUFDM0NDLGNBQWNGLE9BQU9DLE1BQU0sQ0FBQztRQUMxQkUsa0JBQWtCO0lBQ3BCO0lBQ0FBLGtCQUFrQkgsT0FBT0MsTUFBTSxDQUFDO1FBQzlCRSxrQkFBa0I7SUFDcEI7QUFDRjtBQUNBLE1BQU1DLGlDQUFtQlAsMERBQW1CLENBQUMsS0FBSztBQUNsRE8saUJBQWlCRSxXQUFXLEdBQUc7QUFDL0IsTUFBTUMsc0JBQXNCOztJQUMxQixNQUFNQyxlQUFlWCx1REFBZ0IsQ0FBQ087SUFDdENOLDRFQUE0QkEsQ0FBQ1U7SUFDN0IsT0FBT0E7QUFDVDtHQUpNRDtBQUtOLE1BQU1HLGtCQUFrQjtRQUFDLEVBQUVDLFFBQVEsRUFBRTs7SUFDbkMsTUFBTUMsWUFBWUw7SUFDbEIsSUFBSUssVUFBVVQsZ0JBQWdCLEVBQUU7UUFDOUIsT0FBTyxhQUFhLGlCQUFHTiwwREFBbUIsQ0FBQ0EsdURBQWMsRUFBRSxNQUFNYztJQUNuRTtJQUNBLE9BQU8sYUFBYSxpQkFBR2QsMERBQW1CLENBQUNPLGlCQUFpQlcsUUFBUSxFQUFFO1FBQUVDLE9BQU9qQix1QkFBdUJJLGdCQUFnQjtJQUFDLEdBQUdRO0FBQzVIO0lBTk1EOztRQUNjSDs7O0tBRGRHO0FBV0osQ0FDRiw0Q0FBNEMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9fTl9FLy4vbm9kZV9tb2R1bGVzL0BjbGVyay9jbGVyay1yZWFjdC9kaXN0L2VzbS9jb250ZXh0cy9TdHJ1Y3R1cmVDb250ZXh0LmpzP2E2NGEiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IFwiLi4vY2h1bmstM1c1RzRDWUkuanNcIjtcbmltcG9ydCBSZWFjdCBmcm9tIFwicmVhY3RcIjtcbmltcG9ydCB7IGFzc2VydFdyYXBwZWRCeUNsZXJrUHJvdmlkZXIgfSBmcm9tIFwiLi9hc3NlcnRIZWxwZXJzXCI7XG5jb25zdCBTdHJ1Y3R1cmVDb250ZXh0U3RhdGVzID0gT2JqZWN0LmZyZWV6ZSh7XG4gIG5vR3VhcmFudGVlczogT2JqZWN0LmZyZWV6ZSh7XG4gICAgZ3VhcmFudGVlZExvYWRlZDogZmFsc2VcbiAgfSksXG4gIGd1YXJhbnRlZWRMb2FkZWQ6IE9iamVjdC5mcmVlemUoe1xuICAgIGd1YXJhbnRlZWRMb2FkZWQ6IHRydWVcbiAgfSlcbn0pO1xuY29uc3QgU3RydWN0dXJlQ29udGV4dCA9IFJlYWN0LmNyZWF0ZUNvbnRleHQodm9pZCAwKTtcblN0cnVjdHVyZUNvbnRleHQuZGlzcGxheU5hbWUgPSBcIlN0cnVjdHVyZUNvbnRleHRcIjtcbmNvbnN0IHVzZVN0cnVjdHVyZUNvbnRleHQgPSAoKSA9PiB7XG4gIGNvbnN0IHN0cnVjdHVyZUN0eCA9IFJlYWN0LnVzZUNvbnRleHQoU3RydWN0dXJlQ29udGV4dCk7XG4gIGFzc2VydFdyYXBwZWRCeUNsZXJrUHJvdmlkZXIoc3RydWN0dXJlQ3R4KTtcbiAgcmV0dXJuIHN0cnVjdHVyZUN0eDtcbn07XG5jb25zdCBMb2FkZWRHdWFyYW50ZWUgPSAoeyBjaGlsZHJlbiB9KSA9PiB7XG4gIGNvbnN0IHN0cnVjdHVyZSA9IHVzZVN0cnVjdHVyZUNvbnRleHQoKTtcbiAgaWYgKHN0cnVjdHVyZS5ndWFyYW50ZWVkTG9hZGVkKSB7XG4gICAgcmV0dXJuIC8qIEBfX1BVUkVfXyAqLyBSZWFjdC5jcmVhdGVFbGVtZW50KFJlYWN0LkZyYWdtZW50LCBudWxsLCBjaGlsZHJlbik7XG4gIH1cbiAgcmV0dXJuIC8qIEBfX1BVUkVfXyAqLyBSZWFjdC5jcmVhdGVFbGVtZW50KFN0cnVjdHVyZUNvbnRleHQuUHJvdmlkZXIsIHsgdmFsdWU6IFN0cnVjdHVyZUNvbnRleHRTdGF0ZXMuZ3VhcmFudGVlZExvYWRlZCB9LCBjaGlsZHJlbik7XG59O1xuZXhwb3J0IHtcbiAgTG9hZGVkR3VhcmFudGVlLFxuICBTdHJ1Y3R1cmVDb250ZXh0LFxuICBTdHJ1Y3R1cmVDb250ZXh0U3RhdGVzXG59O1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9U3RydWN0dXJlQ29udGV4dC5qcy5tYXAiXSwibmFtZXMiOlsiUmVhY3QiLCJhc3NlcnRXcmFwcGVkQnlDbGVya1Byb3ZpZGVyIiwiU3RydWN0dXJlQ29udGV4dFN0YXRlcyIsIk9iamVjdCIsImZyZWV6ZSIsIm5vR3VhcmFudGVlcyIsImd1YXJhbnRlZWRMb2FkZWQiLCJTdHJ1Y3R1cmVDb250ZXh0IiwiY3JlYXRlQ29udGV4dCIsImRpc3BsYXlOYW1lIiwidXNlU3RydWN0dXJlQ29udGV4dCIsInN0cnVjdHVyZUN0eCIsInVzZUNvbnRleHQiLCJMb2FkZWRHdWFyYW50ZWUiLCJjaGlsZHJlbiIsInN0cnVjdHVyZSIsImNyZWF0ZUVsZW1lbnQiLCJGcmFnbWVudCIsIlByb3ZpZGVyIiwidmFsdWUiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/@clerk/clerk-react/dist/esm/contexts/StructureContext.js\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/@clerk/clerk-react/dist/esm/contexts/assertHelpers.js":
/*!****************************************************************************!*\
  !*** ./node_modules/@clerk/clerk-react/dist/esm/contexts/assertHelpers.js ***!
  \****************************************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   assertClerkLoadedGuarantee: function() { return /* binding */ assertClerkLoadedGuarantee; },\n/* harmony export */   assertWrappedByClerkProvider: function() { return /* binding */ assertWrappedByClerkProvider; }\n/* harmony export */ });\n/* harmony import */ var _errors__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../errors */ \"(app-pages-browser)/./node_modules/@clerk/clerk-react/dist/esm/errors.js\");\n\n\nfunction assertWrappedByClerkProvider(contextVal) {\n    if (!contextVal) {\n        throw new Error(_errors__WEBPACK_IMPORTED_MODULE_0__.noClerkProviderError);\n    }\n}\nfunction assertClerkLoadedGuarantee(guarantee, hookName) {\n    if (!guarantee) {\n        throw new Error((0,_errors__WEBPACK_IMPORTED_MODULE_0__.noGuaranteedLoadedError)(hookName));\n    }\n}\n //# sourceMappingURL=assertHelpers.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL25vZGVfbW9kdWxlcy9AY2xlcmsvY2xlcmstcmVhY3QvZGlzdC9lc20vY29udGV4dHMvYXNzZXJ0SGVscGVycy5qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7QUFBOEI7QUFDNEM7QUFDMUUsU0FBU0UsNkJBQTZCQyxVQUFVO0lBQzlDLElBQUksQ0FBQ0EsWUFBWTtRQUNmLE1BQU0sSUFBSUMsTUFBTUoseURBQW9CQTtJQUN0QztBQUNGO0FBQ0EsU0FBU0ssMkJBQTJCQyxTQUFTLEVBQUVDLFFBQVE7SUFDckQsSUFBSSxDQUFDRCxXQUFXO1FBQ2QsTUFBTSxJQUFJRixNQUFNSCxnRUFBdUJBLENBQUNNO0lBQzFDO0FBQ0Y7QUFJRSxDQUNGLHlDQUF5QyIsInNvdXJjZXMiOlsid2VicGFjazovL19OX0UvLi9ub2RlX21vZHVsZXMvQGNsZXJrL2NsZXJrLXJlYWN0L2Rpc3QvZXNtL2NvbnRleHRzL2Fzc2VydEhlbHBlcnMuanM/MzQ5MSJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgXCIuLi9jaHVuay0zVzVHNENZSS5qc1wiO1xuaW1wb3J0IHsgbm9DbGVya1Byb3ZpZGVyRXJyb3IsIG5vR3VhcmFudGVlZExvYWRlZEVycm9yIH0gZnJvbSBcIi4uL2Vycm9yc1wiO1xuZnVuY3Rpb24gYXNzZXJ0V3JhcHBlZEJ5Q2xlcmtQcm92aWRlcihjb250ZXh0VmFsKSB7XG4gIGlmICghY29udGV4dFZhbCkge1xuICAgIHRocm93IG5ldyBFcnJvcihub0NsZXJrUHJvdmlkZXJFcnJvcik7XG4gIH1cbn1cbmZ1bmN0aW9uIGFzc2VydENsZXJrTG9hZGVkR3VhcmFudGVlKGd1YXJhbnRlZSwgaG9va05hbWUpIHtcbiAgaWYgKCFndWFyYW50ZWUpIHtcbiAgICB0aHJvdyBuZXcgRXJyb3Iobm9HdWFyYW50ZWVkTG9hZGVkRXJyb3IoaG9va05hbWUpKTtcbiAgfVxufVxuZXhwb3J0IHtcbiAgYXNzZXJ0Q2xlcmtMb2FkZWRHdWFyYW50ZWUsXG4gIGFzc2VydFdyYXBwZWRCeUNsZXJrUHJvdmlkZXJcbn07XG4vLyMgc291cmNlTWFwcGluZ1VSTD1hc3NlcnRIZWxwZXJzLmpzLm1hcCJdLCJuYW1lcyI6WyJub0NsZXJrUHJvdmlkZXJFcnJvciIsIm5vR3VhcmFudGVlZExvYWRlZEVycm9yIiwiYXNzZXJ0V3JhcHBlZEJ5Q2xlcmtQcm92aWRlciIsImNvbnRleHRWYWwiLCJFcnJvciIsImFzc2VydENsZXJrTG9hZGVkR3VhcmFudGVlIiwiZ3VhcmFudGVlIiwiaG9va05hbWUiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/@clerk/clerk-react/dist/esm/contexts/assertHelpers.js\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/@clerk/clerk-react/dist/esm/contexts/index.js":
/*!********************************************************************!*\
  !*** ./node_modules/@clerk/clerk-react/dist/esm/contexts/index.js ***!
  \********************************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   ClerkProvider: function() { return /* reexport safe */ _ClerkProvider__WEBPACK_IMPORTED_MODULE_0__.ClerkProvider; },\n/* harmony export */   __internal__setErrorThrowerOptions: function() { return /* reexport safe */ _ClerkProvider__WEBPACK_IMPORTED_MODULE_1__.__internal__setErrorThrowerOptions; }\n/* harmony export */ });\n/* harmony import */ var _ClerkProvider__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./ClerkProvider */ \"(app-pages-browser)/./node_modules/@clerk/clerk-react/dist/esm/contexts/ClerkProvider.js\");\n/* harmony import */ var _ClerkProvider__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./ClerkProvider */ \"(app-pages-browser)/./node_modules/@clerk/clerk-react/dist/esm/utils/errorThrower.js\");\n\n\n //# sourceMappingURL=index.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL25vZGVfbW9kdWxlcy9AY2xlcmsvY2xlcmstcmVhY3QvZGlzdC9lc20vY29udGV4dHMvaW5kZXguanMiLCJtYXBwaW5ncyI6Ijs7Ozs7OztBQUE4QjtBQUNzRDtBQUlsRixDQUNGLGlDQUFpQyIsInNvdXJjZXMiOlsid2VicGFjazovL19OX0UvLi9ub2RlX21vZHVsZXMvQGNsZXJrL2NsZXJrLXJlYWN0L2Rpc3QvZXNtL2NvbnRleHRzL2luZGV4LmpzPzFiMDIiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IFwiLi4vY2h1bmstM1c1RzRDWUkuanNcIjtcbmltcG9ydCB7IENsZXJrUHJvdmlkZXIsIF9faW50ZXJuYWxfX3NldEVycm9yVGhyb3dlck9wdGlvbnMgfSBmcm9tIFwiLi9DbGVya1Byb3ZpZGVyXCI7XG5leHBvcnQge1xuICBDbGVya1Byb3ZpZGVyLFxuICBfX2ludGVybmFsX19zZXRFcnJvclRocm93ZXJPcHRpb25zXG59O1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9aW5kZXguanMubWFwIl0sIm5hbWVzIjpbIkNsZXJrUHJvdmlkZXIiLCJfX2ludGVybmFsX19zZXRFcnJvclRocm93ZXJPcHRpb25zIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/@clerk/clerk-react/dist/esm/contexts/index.js\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/@clerk/clerk-react/dist/esm/errors.js":
/*!************************************************************!*\
  !*** ./node_modules/@clerk/clerk-react/dist/esm/errors.js ***!
  \************************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   EmailLinkErrorCode: function() { return /* reexport safe */ _clerk_shared_error__WEBPACK_IMPORTED_MODULE_0__.EmailLinkErrorCode; },\n/* harmony export */   MagicLinkErrorCode: function() { return /* reexport safe */ _clerk_shared_error__WEBPACK_IMPORTED_MODULE_0__.MagicLinkErrorCode; },\n/* harmony export */   customLinkWrongProps: function() { return /* binding */ customLinkWrongProps; },\n/* harmony export */   customPageWrongProps: function() { return /* binding */ customPageWrongProps; },\n/* harmony export */   customPagesIgnoredComponent: function() { return /* binding */ customPagesIgnoredComponent; },\n/* harmony export */   hocChildrenNotAFunctionError: function() { return /* binding */ hocChildrenNotAFunctionError; },\n/* harmony export */   invalidStateError: function() { return /* binding */ invalidStateError; },\n/* harmony export */   isClerkAPIResponseError: function() { return /* reexport safe */ _clerk_shared_error__WEBPACK_IMPORTED_MODULE_0__.isClerkAPIResponseError; },\n/* harmony export */   isEmailLinkError: function() { return /* reexport safe */ _clerk_shared_error__WEBPACK_IMPORTED_MODULE_0__.isEmailLinkError; },\n/* harmony export */   isKnownError: function() { return /* reexport safe */ _clerk_shared_error__WEBPACK_IMPORTED_MODULE_0__.isKnownError; },\n/* harmony export */   isMagicLinkError: function() { return /* reexport safe */ _clerk_shared_error__WEBPACK_IMPORTED_MODULE_0__.isMagicLinkError; },\n/* harmony export */   isMetamaskError: function() { return /* reexport safe */ _clerk_shared_error__WEBPACK_IMPORTED_MODULE_0__.isMetamaskError; },\n/* harmony export */   multipleChildrenInButtonComponent: function() { return /* binding */ multipleChildrenInButtonComponent; },\n/* harmony export */   multipleClerkProvidersError: function() { return /* binding */ multipleClerkProvidersError; },\n/* harmony export */   noClerkProviderError: function() { return /* binding */ noClerkProviderError; },\n/* harmony export */   noFrontendApiError: function() { return /* binding */ noFrontendApiError; },\n/* harmony export */   noGuaranteedLoadedError: function() { return /* binding */ noGuaranteedLoadedError; },\n/* harmony export */   noGuaranteedUserError: function() { return /* binding */ noGuaranteedUserError; },\n/* harmony export */   organizationProfileLinkRenderedError: function() { return /* binding */ organizationProfileLinkRenderedError; },\n/* harmony export */   organizationProfilePageRenderedError: function() { return /* binding */ organizationProfilePageRenderedError; },\n/* harmony export */   unsupportedNonBrowserDomainOrProxyUrlFunction: function() { return /* binding */ unsupportedNonBrowserDomainOrProxyUrlFunction; },\n/* harmony export */   useAuthHasRequiresRoleOrPermission: function() { return /* binding */ useAuthHasRequiresRoleOrPermission; },\n/* harmony export */   userProfileLinkRenderedError: function() { return /* binding */ userProfileLinkRenderedError; },\n/* harmony export */   userProfilePageRenderedError: function() { return /* binding */ userProfilePageRenderedError; }\n/* harmony export */ });\n/* harmony import */ var _clerk_shared_error__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @clerk/shared/error */ \"(app-pages-browser)/./node_modules/@clerk/shared/dist/error.mjs\");\n\n\nconst noFrontendApiError = \"Clerk: You must add the frontendApi prop to your <ClerkProvider>\";\nconst noClerkProviderError = \"Clerk: You must wrap your application in a <ClerkProvider> component.\";\nconst noGuaranteedLoadedError = (hookName)=>\"Clerk: You're calling \".concat(hookName, \" before there's a guarantee the client has been loaded. Call \").concat(hookName, \" from a child of <SignedIn>, <SignedOut>, or <ClerkLoaded>, or use the withClerk() HOC.\");\nconst noGuaranteedUserError = (hookName)=>\"Clerk: You're calling \".concat(hookName, \" before there's a guarantee there's an active user. Call \").concat(hookName, \" from a child of <SignedIn> or use the withUser() HOC.\");\nconst multipleClerkProvidersError = \"Clerk: You've added multiple <ClerkProvider> components in your React component tree. Wrap your components in a single <ClerkProvider>.\";\nconst hocChildrenNotAFunctionError = \"Clerk: Child of WithClerk must be a function.\";\nconst multipleChildrenInButtonComponent = (name)=>\"Clerk: You've passed multiple children components to <\".concat(name, \"/>. You can only pass a single child component or text.\");\nconst invalidStateError = \"Clerk: Invalid state. Feel free to submit a bug or reach out to support here: https://clerk.com/support\";\nconst unsupportedNonBrowserDomainOrProxyUrlFunction = \"Clerk: Unsupported usage of isSatellite, domain or proxyUrl. The usage of isSatellite, domain or proxyUrl as function is not supported in non-browser environments.\";\nconst userProfilePageRenderedError = \"Clerk: <UserProfile.Page /> component needs to be a direct child of `<UserProfile />` or `<UserButton />`.\";\nconst userProfileLinkRenderedError = \"Clerk: <UserProfile.Link /> component needs to be a direct child of `<UserProfile />` or `<UserButton />`.\";\nconst organizationProfilePageRenderedError = \"Clerk: <OrganizationProfile.Page /> component needs to be a direct child of `<OrganizationProfile />` or `<OrganizationSwitcher />`.\";\nconst organizationProfileLinkRenderedError = \"Clerk: <OrganizationProfile.Link /> component needs to be a direct child of `<OrganizationProfile />` or `<OrganizationSwitcher />`.\";\nconst customPagesIgnoredComponent = (componentName)=>\"Clerk: <\".concat(componentName, \" /> can only accept <\").concat(componentName, \".Page /> and <\").concat(componentName, \".Link /> as its children. Any other provided component will be ignored.\");\nconst customPageWrongProps = (componentName)=>\"Clerk: Missing props. <\".concat(componentName, \".Page /> component requires the following props: url, label, labelIcon, alongside with children to be rendered inside the page.\");\nconst customLinkWrongProps = (componentName)=>\"Clerk: Missing props. <\".concat(componentName, \".Link /> component requires the following props: url, label and labelIcon.\");\nconst useAuthHasRequiresRoleOrPermission = 'Clerk: Missing parameters. `has` from `useAuth` requires a permission or role key to be passed. Example usage: `has({permission: \"org:posts:edit\"`';\n //# sourceMappingURL=errors.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL25vZGVfbW9kdWxlcy9AY2xlcmsvY2xlcmstcmVhY3QvZGlzdC9lc20vZXJyb3JzLmpzIiwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7QUFBNkI7QUFTQTtBQUM3QixNQUFNTyxxQkFBcUI7QUFDM0IsTUFBTUMsdUJBQXVCO0FBQzdCLE1BQU1DLDBCQUEwQixDQUFDQyxXQUFhLHlCQUFpR0EsT0FBeEVBLFVBQVMsaUVBQXdFLE9BQVRBLFVBQVM7QUFDeEosTUFBTUMsd0JBQXdCLENBQUNELFdBQWEseUJBQTZGQSxPQUFwRUEsVUFBUyw2REFBb0UsT0FBVEEsVUFBUztBQUNsSixNQUFNRSw4QkFBOEI7QUFDcEMsTUFBTUMsK0JBQStCO0FBQ3JDLE1BQU1DLG9DQUFvQyxDQUFDQyxPQUFTLHlEQUE4RCxPQUFMQSxNQUFLO0FBQ2xILE1BQU1DLG9CQUFvQjtBQUMxQixNQUFNQyxnREFBZ0Q7QUFDdEQsTUFBTUMsK0JBQStCO0FBQ3JDLE1BQU1DLCtCQUErQjtBQUNyQyxNQUFNQyx1Q0FBdUM7QUFDN0MsTUFBTUMsdUNBQXVDO0FBQzdDLE1BQU1DLDhCQUE4QixDQUFDQyxnQkFBa0IsV0FBZ0RBLE9BQXJDQSxlQUFjLHlCQUFxREEsT0FBOUJBLGVBQWMsa0JBQThCLE9BQWRBLGVBQWM7QUFDbkosTUFBTUMsdUJBQXVCLENBQUNELGdCQUFrQiwwQkFBd0MsT0FBZEEsZUFBYztBQUN4RixNQUFNRSx1QkFBdUIsQ0FBQ0YsZ0JBQWtCLDBCQUF3QyxPQUFkQSxlQUFjO0FBQ3hGLE1BQU1HLHFDQUFxQztBQTBCekMsQ0FDRixrQ0FBa0MiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9fTl9FLy4vbm9kZV9tb2R1bGVzL0BjbGVyay9jbGVyay1yZWFjdC9kaXN0L2VzbS9lcnJvcnMuanM/ZmY2NiJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgXCIuL2NodW5rLTNXNUc0Q1lJLmpzXCI7XG5pbXBvcnQge1xuICBNYWdpY0xpbmtFcnJvckNvZGUsXG4gIEVtYWlsTGlua0Vycm9yQ29kZSxcbiAgaXNDbGVya0FQSVJlc3BvbnNlRXJyb3IsXG4gIGlzS25vd25FcnJvcixcbiAgaXNNZXRhbWFza0Vycm9yLFxuICBpc01hZ2ljTGlua0Vycm9yLFxuICBpc0VtYWlsTGlua0Vycm9yXG59IGZyb20gXCJAY2xlcmsvc2hhcmVkL2Vycm9yXCI7XG5jb25zdCBub0Zyb250ZW5kQXBpRXJyb3IgPSBcIkNsZXJrOiBZb3UgbXVzdCBhZGQgdGhlIGZyb250ZW5kQXBpIHByb3AgdG8geW91ciA8Q2xlcmtQcm92aWRlcj5cIjtcbmNvbnN0IG5vQ2xlcmtQcm92aWRlckVycm9yID0gXCJDbGVyazogWW91IG11c3Qgd3JhcCB5b3VyIGFwcGxpY2F0aW9uIGluIGEgPENsZXJrUHJvdmlkZXI+IGNvbXBvbmVudC5cIjtcbmNvbnN0IG5vR3VhcmFudGVlZExvYWRlZEVycm9yID0gKGhvb2tOYW1lKSA9PiBgQ2xlcms6IFlvdSdyZSBjYWxsaW5nICR7aG9va05hbWV9IGJlZm9yZSB0aGVyZSdzIGEgZ3VhcmFudGVlIHRoZSBjbGllbnQgaGFzIGJlZW4gbG9hZGVkLiBDYWxsICR7aG9va05hbWV9IGZyb20gYSBjaGlsZCBvZiA8U2lnbmVkSW4+LCA8U2lnbmVkT3V0Piwgb3IgPENsZXJrTG9hZGVkPiwgb3IgdXNlIHRoZSB3aXRoQ2xlcmsoKSBIT0MuYDtcbmNvbnN0IG5vR3VhcmFudGVlZFVzZXJFcnJvciA9IChob29rTmFtZSkgPT4gYENsZXJrOiBZb3UncmUgY2FsbGluZyAke2hvb2tOYW1lfSBiZWZvcmUgdGhlcmUncyBhIGd1YXJhbnRlZSB0aGVyZSdzIGFuIGFjdGl2ZSB1c2VyLiBDYWxsICR7aG9va05hbWV9IGZyb20gYSBjaGlsZCBvZiA8U2lnbmVkSW4+IG9yIHVzZSB0aGUgd2l0aFVzZXIoKSBIT0MuYDtcbmNvbnN0IG11bHRpcGxlQ2xlcmtQcm92aWRlcnNFcnJvciA9IFwiQ2xlcms6IFlvdSd2ZSBhZGRlZCBtdWx0aXBsZSA8Q2xlcmtQcm92aWRlcj4gY29tcG9uZW50cyBpbiB5b3VyIFJlYWN0IGNvbXBvbmVudCB0cmVlLiBXcmFwIHlvdXIgY29tcG9uZW50cyBpbiBhIHNpbmdsZSA8Q2xlcmtQcm92aWRlcj4uXCI7XG5jb25zdCBob2NDaGlsZHJlbk5vdEFGdW5jdGlvbkVycm9yID0gXCJDbGVyazogQ2hpbGQgb2YgV2l0aENsZXJrIG11c3QgYmUgYSBmdW5jdGlvbi5cIjtcbmNvbnN0IG11bHRpcGxlQ2hpbGRyZW5JbkJ1dHRvbkNvbXBvbmVudCA9IChuYW1lKSA9PiBgQ2xlcms6IFlvdSd2ZSBwYXNzZWQgbXVsdGlwbGUgY2hpbGRyZW4gY29tcG9uZW50cyB0byA8JHtuYW1lfS8+LiBZb3UgY2FuIG9ubHkgcGFzcyBhIHNpbmdsZSBjaGlsZCBjb21wb25lbnQgb3IgdGV4dC5gO1xuY29uc3QgaW52YWxpZFN0YXRlRXJyb3IgPSBcIkNsZXJrOiBJbnZhbGlkIHN0YXRlLiBGZWVsIGZyZWUgdG8gc3VibWl0IGEgYnVnIG9yIHJlYWNoIG91dCB0byBzdXBwb3J0IGhlcmU6IGh0dHBzOi8vY2xlcmsuY29tL3N1cHBvcnRcIjtcbmNvbnN0IHVuc3VwcG9ydGVkTm9uQnJvd3NlckRvbWFpbk9yUHJveHlVcmxGdW5jdGlvbiA9IFwiQ2xlcms6IFVuc3VwcG9ydGVkIHVzYWdlIG9mIGlzU2F0ZWxsaXRlLCBkb21haW4gb3IgcHJveHlVcmwuIFRoZSB1c2FnZSBvZiBpc1NhdGVsbGl0ZSwgZG9tYWluIG9yIHByb3h5VXJsIGFzIGZ1bmN0aW9uIGlzIG5vdCBzdXBwb3J0ZWQgaW4gbm9uLWJyb3dzZXIgZW52aXJvbm1lbnRzLlwiO1xuY29uc3QgdXNlclByb2ZpbGVQYWdlUmVuZGVyZWRFcnJvciA9IFwiQ2xlcms6IDxVc2VyUHJvZmlsZS5QYWdlIC8+IGNvbXBvbmVudCBuZWVkcyB0byBiZSBhIGRpcmVjdCBjaGlsZCBvZiBgPFVzZXJQcm9maWxlIC8+YCBvciBgPFVzZXJCdXR0b24gLz5gLlwiO1xuY29uc3QgdXNlclByb2ZpbGVMaW5rUmVuZGVyZWRFcnJvciA9IFwiQ2xlcms6IDxVc2VyUHJvZmlsZS5MaW5rIC8+IGNvbXBvbmVudCBuZWVkcyB0byBiZSBhIGRpcmVjdCBjaGlsZCBvZiBgPFVzZXJQcm9maWxlIC8+YCBvciBgPFVzZXJCdXR0b24gLz5gLlwiO1xuY29uc3Qgb3JnYW5pemF0aW9uUHJvZmlsZVBhZ2VSZW5kZXJlZEVycm9yID0gXCJDbGVyazogPE9yZ2FuaXphdGlvblByb2ZpbGUuUGFnZSAvPiBjb21wb25lbnQgbmVlZHMgdG8gYmUgYSBkaXJlY3QgY2hpbGQgb2YgYDxPcmdhbml6YXRpb25Qcm9maWxlIC8+YCBvciBgPE9yZ2FuaXphdGlvblN3aXRjaGVyIC8+YC5cIjtcbmNvbnN0IG9yZ2FuaXphdGlvblByb2ZpbGVMaW5rUmVuZGVyZWRFcnJvciA9IFwiQ2xlcms6IDxPcmdhbml6YXRpb25Qcm9maWxlLkxpbmsgLz4gY29tcG9uZW50IG5lZWRzIHRvIGJlIGEgZGlyZWN0IGNoaWxkIG9mIGA8T3JnYW5pemF0aW9uUHJvZmlsZSAvPmAgb3IgYDxPcmdhbml6YXRpb25Td2l0Y2hlciAvPmAuXCI7XG5jb25zdCBjdXN0b21QYWdlc0lnbm9yZWRDb21wb25lbnQgPSAoY29tcG9uZW50TmFtZSkgPT4gYENsZXJrOiA8JHtjb21wb25lbnROYW1lfSAvPiBjYW4gb25seSBhY2NlcHQgPCR7Y29tcG9uZW50TmFtZX0uUGFnZSAvPiBhbmQgPCR7Y29tcG9uZW50TmFtZX0uTGluayAvPiBhcyBpdHMgY2hpbGRyZW4uIEFueSBvdGhlciBwcm92aWRlZCBjb21wb25lbnQgd2lsbCBiZSBpZ25vcmVkLmA7XG5jb25zdCBjdXN0b21QYWdlV3JvbmdQcm9wcyA9IChjb21wb25lbnROYW1lKSA9PiBgQ2xlcms6IE1pc3NpbmcgcHJvcHMuIDwke2NvbXBvbmVudE5hbWV9LlBhZ2UgLz4gY29tcG9uZW50IHJlcXVpcmVzIHRoZSBmb2xsb3dpbmcgcHJvcHM6IHVybCwgbGFiZWwsIGxhYmVsSWNvbiwgYWxvbmdzaWRlIHdpdGggY2hpbGRyZW4gdG8gYmUgcmVuZGVyZWQgaW5zaWRlIHRoZSBwYWdlLmA7XG5jb25zdCBjdXN0b21MaW5rV3JvbmdQcm9wcyA9IChjb21wb25lbnROYW1lKSA9PiBgQ2xlcms6IE1pc3NpbmcgcHJvcHMuIDwke2NvbXBvbmVudE5hbWV9LkxpbmsgLz4gY29tcG9uZW50IHJlcXVpcmVzIHRoZSBmb2xsb3dpbmcgcHJvcHM6IHVybCwgbGFiZWwgYW5kIGxhYmVsSWNvbi5gO1xuY29uc3QgdXNlQXV0aEhhc1JlcXVpcmVzUm9sZU9yUGVybWlzc2lvbiA9ICdDbGVyazogTWlzc2luZyBwYXJhbWV0ZXJzLiBgaGFzYCBmcm9tIGB1c2VBdXRoYCByZXF1aXJlcyBhIHBlcm1pc3Npb24gb3Igcm9sZSBrZXkgdG8gYmUgcGFzc2VkLiBFeGFtcGxlIHVzYWdlOiBgaGFzKHtwZXJtaXNzaW9uOiBcIm9yZzpwb3N0czplZGl0XCJgJztcbmV4cG9ydCB7XG4gIEVtYWlsTGlua0Vycm9yQ29kZSxcbiAgTWFnaWNMaW5rRXJyb3JDb2RlLFxuICBjdXN0b21MaW5rV3JvbmdQcm9wcyxcbiAgY3VzdG9tUGFnZVdyb25nUHJvcHMsXG4gIGN1c3RvbVBhZ2VzSWdub3JlZENvbXBvbmVudCxcbiAgaG9jQ2hpbGRyZW5Ob3RBRnVuY3Rpb25FcnJvcixcbiAgaW52YWxpZFN0YXRlRXJyb3IsXG4gIGlzQ2xlcmtBUElSZXNwb25zZUVycm9yLFxuICBpc0VtYWlsTGlua0Vycm9yLFxuICBpc0tub3duRXJyb3IsXG4gIGlzTWFnaWNMaW5rRXJyb3IsXG4gIGlzTWV0YW1hc2tFcnJvcixcbiAgbXVsdGlwbGVDaGlsZHJlbkluQnV0dG9uQ29tcG9uZW50LFxuICBtdWx0aXBsZUNsZXJrUHJvdmlkZXJzRXJyb3IsXG4gIG5vQ2xlcmtQcm92aWRlckVycm9yLFxuICBub0Zyb250ZW5kQXBpRXJyb3IsXG4gIG5vR3VhcmFudGVlZExvYWRlZEVycm9yLFxuICBub0d1YXJhbnRlZWRVc2VyRXJyb3IsXG4gIG9yZ2FuaXphdGlvblByb2ZpbGVMaW5rUmVuZGVyZWRFcnJvcixcbiAgb3JnYW5pemF0aW9uUHJvZmlsZVBhZ2VSZW5kZXJlZEVycm9yLFxuICB1bnN1cHBvcnRlZE5vbkJyb3dzZXJEb21haW5PclByb3h5VXJsRnVuY3Rpb24sXG4gIHVzZUF1dGhIYXNSZXF1aXJlc1JvbGVPclBlcm1pc3Npb24sXG4gIHVzZXJQcm9maWxlTGlua1JlbmRlcmVkRXJyb3IsXG4gIHVzZXJQcm9maWxlUGFnZVJlbmRlcmVkRXJyb3Jcbn07XG4vLyMgc291cmNlTWFwcGluZ1VSTD1lcnJvcnMuanMubWFwIl0sIm5hbWVzIjpbIk1hZ2ljTGlua0Vycm9yQ29kZSIsIkVtYWlsTGlua0Vycm9yQ29kZSIsImlzQ2xlcmtBUElSZXNwb25zZUVycm9yIiwiaXNLbm93bkVycm9yIiwiaXNNZXRhbWFza0Vycm9yIiwiaXNNYWdpY0xpbmtFcnJvciIsImlzRW1haWxMaW5rRXJyb3IiLCJub0Zyb250ZW5kQXBpRXJyb3IiLCJub0NsZXJrUHJvdmlkZXJFcnJvciIsIm5vR3VhcmFudGVlZExvYWRlZEVycm9yIiwiaG9va05hbWUiLCJub0d1YXJhbnRlZWRVc2VyRXJyb3IiLCJtdWx0aXBsZUNsZXJrUHJvdmlkZXJzRXJyb3IiLCJob2NDaGlsZHJlbk5vdEFGdW5jdGlvbkVycm9yIiwibXVsdGlwbGVDaGlsZHJlbkluQnV0dG9uQ29tcG9uZW50IiwibmFtZSIsImludmFsaWRTdGF0ZUVycm9yIiwidW5zdXBwb3J0ZWROb25Ccm93c2VyRG9tYWluT3JQcm94eVVybEZ1bmN0aW9uIiwidXNlclByb2ZpbGVQYWdlUmVuZGVyZWRFcnJvciIsInVzZXJQcm9maWxlTGlua1JlbmRlcmVkRXJyb3IiLCJvcmdhbml6YXRpb25Qcm9maWxlUGFnZVJlbmRlcmVkRXJyb3IiLCJvcmdhbml6YXRpb25Qcm9maWxlTGlua1JlbmRlcmVkRXJyb3IiLCJjdXN0b21QYWdlc0lnbm9yZWRDb21wb25lbnQiLCJjb21wb25lbnROYW1lIiwiY3VzdG9tUGFnZVdyb25nUHJvcHMiLCJjdXN0b21MaW5rV3JvbmdQcm9wcyIsInVzZUF1dGhIYXNSZXF1aXJlc1JvbGVPclBlcm1pc3Npb24iXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/@clerk/clerk-react/dist/esm/errors.js\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/@clerk/clerk-react/dist/esm/hooks/index.js":
/*!*****************************************************************!*\
  !*** ./node_modules/@clerk/clerk-react/dist/esm/hooks/index.js ***!
  \*****************************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   useAuth: function() { return /* reexport safe */ _useAuth__WEBPACK_IMPORTED_MODULE_0__.useAuth; },\n/* harmony export */   useClerk: function() { return /* reexport safe */ _useClerk__WEBPACK_IMPORTED_MODULE_1__.useClerk; },\n/* harmony export */   useEmailLink: function() { return /* reexport safe */ _useEmailLink__WEBPACK_IMPORTED_MODULE_2__.useEmailLink; },\n/* harmony export */   useMagicLink: function() { return /* reexport safe */ _useMagicLink__WEBPACK_IMPORTED_MODULE_3__.useMagicLink; },\n/* harmony export */   useOrganization: function() { return /* reexport safe */ _useOrganization__WEBPACK_IMPORTED_MODULE_4__.useOrganization; },\n/* harmony export */   useOrganizationList: function() { return /* reexport safe */ _useOrganization__WEBPACK_IMPORTED_MODULE_4__.useOrganizationList; },\n/* harmony export */   useOrganizations: function() { return /* reexport safe */ _useOrganization__WEBPACK_IMPORTED_MODULE_4__.useOrganizations; },\n/* harmony export */   useSession: function() { return /* reexport safe */ _useSession__WEBPACK_IMPORTED_MODULE_5__.useSession; },\n/* harmony export */   useSessionList: function() { return /* reexport safe */ _useSessionList__WEBPACK_IMPORTED_MODULE_6__.useSessionList; },\n/* harmony export */   useSignIn: function() { return /* reexport safe */ _useSignIn__WEBPACK_IMPORTED_MODULE_7__.useSignIn; },\n/* harmony export */   useSignUp: function() { return /* reexport safe */ _useSignUp__WEBPACK_IMPORTED_MODULE_8__.useSignUp; },\n/* harmony export */   useUser: function() { return /* reexport safe */ _useUser__WEBPACK_IMPORTED_MODULE_9__.useUser; }\n/* harmony export */ });\n/* harmony import */ var _useUser__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ./useUser */ \"(app-pages-browser)/./node_modules/@clerk/clerk-react/dist/esm/hooks/useUser.js\");\n/* harmony import */ var _useAuth__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./useAuth */ \"(app-pages-browser)/./node_modules/@clerk/clerk-react/dist/esm/hooks/useAuth.js\");\n/* harmony import */ var _useSession__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./useSession */ \"(app-pages-browser)/./node_modules/@clerk/clerk-react/dist/esm/hooks/useSession.js\");\n/* harmony import */ var _useClerk__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./useClerk */ \"(app-pages-browser)/./node_modules/@clerk/clerk-react/dist/esm/hooks/useClerk.js\");\n/* harmony import */ var _useSignIn__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./useSignIn */ \"(app-pages-browser)/./node_modules/@clerk/clerk-react/dist/esm/hooks/useSignIn.js\");\n/* harmony import */ var _useSignUp__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ./useSignUp */ \"(app-pages-browser)/./node_modules/@clerk/clerk-react/dist/esm/hooks/useSignUp.js\");\n/* harmony import */ var _useSessionList__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./useSessionList */ \"(app-pages-browser)/./node_modules/@clerk/clerk-react/dist/esm/hooks/useSessionList.js\");\n/* harmony import */ var _useOrganization__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./useOrganizations */ \"(app-pages-browser)/./node_modules/@clerk/shared/dist/react/index.mjs\");\n/* harmony import */ var _useMagicLink__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./useMagicLink */ \"(app-pages-browser)/./node_modules/@clerk/clerk-react/dist/esm/hooks/useMagicLink.js\");\n/* harmony import */ var _useEmailLink__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./useEmailLink */ \"(app-pages-browser)/./node_modules/@clerk/clerk-react/dist/esm/hooks/useEmailLink.js\");\n\n\n\n\n\n\n\n\n\n\n\n\n\n //# sourceMappingURL=index.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL25vZGVfbW9kdWxlcy9AY2xlcmsvY2xlcmstcmVhY3QvZGlzdC9lc20vaG9va3MvaW5kZXguanMiLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztBQUE4QjtBQUNNO0FBQ0E7QUFDTTtBQUNKO0FBQ0U7QUFDQTtBQUNVO0FBQ0U7QUFDUTtBQUNOO0FBQ1I7QUFDQTtBQWM1QyxDQUNGLGlDQUFpQyIsInNvdXJjZXMiOlsid2VicGFjazovL19OX0UvLi9ub2RlX21vZHVsZXMvQGNsZXJrL2NsZXJrLXJlYWN0L2Rpc3QvZXNtL2hvb2tzL2luZGV4LmpzP2MxNDAiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IFwiLi4vY2h1bmstM1c1RzRDWUkuanNcIjtcbmltcG9ydCB7IHVzZVVzZXIgfSBmcm9tIFwiLi91c2VVc2VyXCI7XG5pbXBvcnQgeyB1c2VBdXRoIH0gZnJvbSBcIi4vdXNlQXV0aFwiO1xuaW1wb3J0IHsgdXNlU2Vzc2lvbiB9IGZyb20gXCIuL3VzZVNlc3Npb25cIjtcbmltcG9ydCB7IHVzZUNsZXJrIH0gZnJvbSBcIi4vdXNlQ2xlcmtcIjtcbmltcG9ydCB7IHVzZVNpZ25JbiB9IGZyb20gXCIuL3VzZVNpZ25JblwiO1xuaW1wb3J0IHsgdXNlU2lnblVwIH0gZnJvbSBcIi4vdXNlU2lnblVwXCI7XG5pbXBvcnQgeyB1c2VTZXNzaW9uTGlzdCB9IGZyb20gXCIuL3VzZVNlc3Npb25MaXN0XCI7XG5pbXBvcnQgeyB1c2VPcmdhbml6YXRpb24gfSBmcm9tIFwiLi91c2VPcmdhbml6YXRpb25cIjtcbmltcG9ydCB7IHVzZU9yZ2FuaXphdGlvbkxpc3QgfSBmcm9tIFwiLi91c2VPcmdhbml6YXRpb25MaXN0XCI7XG5pbXBvcnQgeyB1c2VPcmdhbml6YXRpb25zIH0gZnJvbSBcIi4vdXNlT3JnYW5pemF0aW9uc1wiO1xuaW1wb3J0IHsgdXNlTWFnaWNMaW5rIH0gZnJvbSBcIi4vdXNlTWFnaWNMaW5rXCI7XG5pbXBvcnQgeyB1c2VFbWFpbExpbmsgfSBmcm9tIFwiLi91c2VFbWFpbExpbmtcIjtcbmV4cG9ydCB7XG4gIHVzZUF1dGgsXG4gIHVzZUNsZXJrLFxuICB1c2VFbWFpbExpbmssXG4gIHVzZU1hZ2ljTGluayxcbiAgdXNlT3JnYW5pemF0aW9uLFxuICB1c2VPcmdhbml6YXRpb25MaXN0LFxuICB1c2VPcmdhbml6YXRpb25zLFxuICB1c2VTZXNzaW9uLFxuICB1c2VTZXNzaW9uTGlzdCxcbiAgdXNlU2lnbkluLFxuICB1c2VTaWduVXAsXG4gIHVzZVVzZXJcbn07XG4vLyMgc291cmNlTWFwcGluZ1VSTD1pbmRleC5qcy5tYXAiXSwibmFtZXMiOlsidXNlVXNlciIsInVzZUF1dGgiLCJ1c2VTZXNzaW9uIiwidXNlQ2xlcmsiLCJ1c2VTaWduSW4iLCJ1c2VTaWduVXAiLCJ1c2VTZXNzaW9uTGlzdCIsInVzZU9yZ2FuaXphdGlvbiIsInVzZU9yZ2FuaXphdGlvbkxpc3QiLCJ1c2VPcmdhbml6YXRpb25zIiwidXNlTWFnaWNMaW5rIiwidXNlRW1haWxMaW5rIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/@clerk/clerk-react/dist/esm/hooks/index.js\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/@clerk/clerk-react/dist/esm/hooks/useAuth.js":
/*!*******************************************************************!*\
  !*** ./node_modules/@clerk/clerk-react/dist/esm/hooks/useAuth.js ***!
  \*******************************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   useAuth: function() { return /* binding */ useAuth; }\n/* harmony export */ });\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react */ \"(app-pages-browser)/./node_modules/next/dist/compiled/react/index.js\");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var _contexts_AuthContext__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../contexts/AuthContext */ \"(app-pages-browser)/./node_modules/@clerk/clerk-react/dist/esm/contexts/AuthContext.js\");\n/* harmony import */ var _contexts_IsomorphicClerkContext__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../contexts/IsomorphicClerkContext */ \"(app-pages-browser)/./node_modules/@clerk/clerk-react/dist/esm/contexts/IsomorphicClerkContext.js\");\n/* harmony import */ var _errors__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../errors */ \"(app-pages-browser)/./node_modules/@clerk/clerk-react/dist/esm/errors.js\");\n/* harmony import */ var _utils__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./utils */ \"(app-pages-browser)/./node_modules/@clerk/clerk-react/dist/esm/hooks/utils.js\");\nvar _s = $RefreshSig$();\n\n\n\n\n\n\nconst useAuth = ()=>{\n    _s();\n    const { sessionId, userId, actor, orgId, orgRole, orgSlug, orgPermissions } = (0,_contexts_AuthContext__WEBPACK_IMPORTED_MODULE_1__.useAuthContext)();\n    const isomorphicClerk = (0,_contexts_IsomorphicClerkContext__WEBPACK_IMPORTED_MODULE_2__.useIsomorphicClerkContext)();\n    const getToken = (0,react__WEBPACK_IMPORTED_MODULE_0__.useCallback)((0,_utils__WEBPACK_IMPORTED_MODULE_3__.createGetToken)(isomorphicClerk), [\n        isomorphicClerk\n    ]);\n    const signOut = (0,react__WEBPACK_IMPORTED_MODULE_0__.useCallback)((0,_utils__WEBPACK_IMPORTED_MODULE_3__.createSignOut)(isomorphicClerk), [\n        isomorphicClerk\n    ]);\n    const has = (0,react__WEBPACK_IMPORTED_MODULE_0__.useCallback)((params)=>{\n        if (!(params === null || params === void 0 ? void 0 : params.permission) && !(params === null || params === void 0 ? void 0 : params.role)) {\n            throw new Error(_errors__WEBPACK_IMPORTED_MODULE_4__.useAuthHasRequiresRoleOrPermission);\n        }\n        if (!orgId || !userId || !orgRole || !orgPermissions) {\n            return false;\n        }\n        if (params.permission) {\n            return orgPermissions.includes(params.permission);\n        }\n        if (params.role) {\n            return orgRole === params.role;\n        }\n        return false;\n    }, [\n        orgId,\n        orgRole,\n        userId,\n        orgPermissions\n    ]);\n    if (sessionId === void 0 && userId === void 0) {\n        return {\n            isLoaded: false,\n            isSignedIn: void 0,\n            sessionId,\n            userId,\n            actor: void 0,\n            orgId: void 0,\n            orgRole: void 0,\n            orgSlug: void 0,\n            has: void 0,\n            signOut,\n            getToken\n        };\n    }\n    if (sessionId === null && userId === null) {\n        return {\n            isLoaded: true,\n            isSignedIn: false,\n            sessionId,\n            userId,\n            actor: null,\n            orgId: null,\n            orgRole: null,\n            orgSlug: null,\n            has: ()=>false,\n            signOut,\n            getToken\n        };\n    }\n    if (!!sessionId && !!userId && !!orgId && !!orgRole) {\n        return {\n            isLoaded: true,\n            isSignedIn: true,\n            sessionId,\n            userId,\n            actor: actor || null,\n            orgId,\n            orgRole,\n            orgSlug: orgSlug || null,\n            has,\n            signOut,\n            getToken\n        };\n    }\n    if (!!sessionId && !!userId && !orgId) {\n        return {\n            isLoaded: true,\n            isSignedIn: true,\n            sessionId,\n            userId,\n            actor: actor || null,\n            orgId: null,\n            orgRole: null,\n            orgSlug: null,\n            has: ()=>false,\n            signOut,\n            getToken\n        };\n    }\n    throw new Error(_errors__WEBPACK_IMPORTED_MODULE_4__.invalidStateError);\n};\n_s(useAuth, \"aS+q8KnbZn19+AZlcJ3YfQL9mw4=\", false, function() {\n    return [\n        _contexts_AuthContext__WEBPACK_IMPORTED_MODULE_1__.useAuthContext,\n        _contexts_IsomorphicClerkContext__WEBPACK_IMPORTED_MODULE_2__.useIsomorphicClerkContext\n    ];\n});\n //# sourceMappingURL=useAuth.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL25vZGVfbW9kdWxlcy9AY2xlcmsvY2xlcmstcmVhY3QvZGlzdC9lc20vaG9va3MvdXNlQXV0aC5qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7OztBQUE4QjtBQUNNO0FBQ3FCO0FBQ3NCO0FBQ0c7QUFDMUI7QUFDeEQsTUFBTU8sVUFBVTs7SUFDZCxNQUFNLEVBQUVDLFNBQVMsRUFBRUMsTUFBTSxFQUFFQyxLQUFLLEVBQUVDLEtBQUssRUFBRUMsT0FBTyxFQUFFQyxPQUFPLEVBQUVDLGNBQWMsRUFBRSxHQUFHYixxRUFBY0E7SUFDNUYsTUFBTWMsa0JBQWtCYiwyRkFBeUJBO0lBQ2pELE1BQU1jLFdBQVdoQixrREFBV0EsQ0FBQ0ssc0RBQWNBLENBQUNVLGtCQUFrQjtRQUFDQTtLQUFnQjtJQUMvRSxNQUFNRSxVQUFVakIsa0RBQVdBLENBQUNNLHFEQUFhQSxDQUFDUyxrQkFBa0I7UUFBQ0E7S0FBZ0I7SUFDN0UsTUFBTUcsTUFBTWxCLGtEQUFXQSxDQUNyQixDQUFDbUI7UUFDQyxJQUFJLEVBQUNBLG1CQUFBQSw2QkFBQUEsT0FBUUMsVUFBVSxLQUFJLEVBQUNELG1CQUFBQSw2QkFBQUEsT0FBUUUsSUFBSSxHQUFFO1lBQ3hDLE1BQU0sSUFBSUMsTUFBTWxCLHVFQUFrQ0E7UUFDcEQ7UUFDQSxJQUFJLENBQUNPLFNBQVMsQ0FBQ0YsVUFBVSxDQUFDRyxXQUFXLENBQUNFLGdCQUFnQjtZQUNwRCxPQUFPO1FBQ1Q7UUFDQSxJQUFJSyxPQUFPQyxVQUFVLEVBQUU7WUFDckIsT0FBT04sZUFBZVMsUUFBUSxDQUFDSixPQUFPQyxVQUFVO1FBQ2xEO1FBQ0EsSUFBSUQsT0FBT0UsSUFBSSxFQUFFO1lBQ2YsT0FBT1QsWUFBWU8sT0FBT0UsSUFBSTtRQUNoQztRQUNBLE9BQU87SUFDVCxHQUNBO1FBQUNWO1FBQU9DO1FBQVNIO1FBQVFLO0tBQWU7SUFFMUMsSUFBSU4sY0FBYyxLQUFLLEtBQUtDLFdBQVcsS0FBSyxHQUFHO1FBQzdDLE9BQU87WUFDTGUsVUFBVTtZQUNWQyxZQUFZLEtBQUs7WUFDakJqQjtZQUNBQztZQUNBQyxPQUFPLEtBQUs7WUFDWkMsT0FBTyxLQUFLO1lBQ1pDLFNBQVMsS0FBSztZQUNkQyxTQUFTLEtBQUs7WUFDZEssS0FBSyxLQUFLO1lBQ1ZEO1lBQ0FEO1FBQ0Y7SUFDRjtJQUNBLElBQUlSLGNBQWMsUUFBUUMsV0FBVyxNQUFNO1FBQ3pDLE9BQU87WUFDTGUsVUFBVTtZQUNWQyxZQUFZO1lBQ1pqQjtZQUNBQztZQUNBQyxPQUFPO1lBQ1BDLE9BQU87WUFDUEMsU0FBUztZQUNUQyxTQUFTO1lBQ1RLLEtBQUssSUFBTTtZQUNYRDtZQUNBRDtRQUNGO0lBQ0Y7SUFDQSxJQUFJLENBQUMsQ0FBQ1IsYUFBYSxDQUFDLENBQUNDLFVBQVUsQ0FBQyxDQUFDRSxTQUFTLENBQUMsQ0FBQ0MsU0FBUztRQUNuRCxPQUFPO1lBQ0xZLFVBQVU7WUFDVkMsWUFBWTtZQUNaakI7WUFDQUM7WUFDQUMsT0FBT0EsU0FBUztZQUNoQkM7WUFDQUM7WUFDQUMsU0FBU0EsV0FBVztZQUNwQks7WUFDQUQ7WUFDQUQ7UUFDRjtJQUNGO0lBQ0EsSUFBSSxDQUFDLENBQUNSLGFBQWEsQ0FBQyxDQUFDQyxVQUFVLENBQUNFLE9BQU87UUFDckMsT0FBTztZQUNMYSxVQUFVO1lBQ1ZDLFlBQVk7WUFDWmpCO1lBQ0FDO1lBQ0FDLE9BQU9BLFNBQVM7WUFDaEJDLE9BQU87WUFDUEMsU0FBUztZQUNUQyxTQUFTO1lBQ1RLLEtBQUssSUFBTTtZQUNYRDtZQUNBRDtRQUNGO0lBQ0Y7SUFDQSxNQUFNLElBQUlNLE1BQU1uQixzREFBaUJBO0FBQ25DO0dBcEZNSTs7UUFDMEVOLGlFQUFjQTtRQUNwRUMsdUZBQXlCQTs7O0FBcUZqRCxDQUNGLG1DQUFtQyIsInNvdXJjZXMiOlsid2VicGFjazovL19OX0UvLi9ub2RlX21vZHVsZXMvQGNsZXJrL2NsZXJrLXJlYWN0L2Rpc3QvZXNtL2hvb2tzL3VzZUF1dGguanM/NTNhYiJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgXCIuLi9jaHVuay0zVzVHNENZSS5qc1wiO1xuaW1wb3J0IHsgdXNlQ2FsbGJhY2sgfSBmcm9tIFwicmVhY3RcIjtcbmltcG9ydCB7IHVzZUF1dGhDb250ZXh0IH0gZnJvbSBcIi4uL2NvbnRleHRzL0F1dGhDb250ZXh0XCI7XG5pbXBvcnQgeyB1c2VJc29tb3JwaGljQ2xlcmtDb250ZXh0IH0gZnJvbSBcIi4uL2NvbnRleHRzL0lzb21vcnBoaWNDbGVya0NvbnRleHRcIjtcbmltcG9ydCB7IGludmFsaWRTdGF0ZUVycm9yLCB1c2VBdXRoSGFzUmVxdWlyZXNSb2xlT3JQZXJtaXNzaW9uIH0gZnJvbSBcIi4uL2Vycm9yc1wiO1xuaW1wb3J0IHsgY3JlYXRlR2V0VG9rZW4sIGNyZWF0ZVNpZ25PdXQgfSBmcm9tIFwiLi91dGlsc1wiO1xuY29uc3QgdXNlQXV0aCA9ICgpID0+IHtcbiAgY29uc3QgeyBzZXNzaW9uSWQsIHVzZXJJZCwgYWN0b3IsIG9yZ0lkLCBvcmdSb2xlLCBvcmdTbHVnLCBvcmdQZXJtaXNzaW9ucyB9ID0gdXNlQXV0aENvbnRleHQoKTtcbiAgY29uc3QgaXNvbW9ycGhpY0NsZXJrID0gdXNlSXNvbW9ycGhpY0NsZXJrQ29udGV4dCgpO1xuICBjb25zdCBnZXRUb2tlbiA9IHVzZUNhbGxiYWNrKGNyZWF0ZUdldFRva2VuKGlzb21vcnBoaWNDbGVyayksIFtpc29tb3JwaGljQ2xlcmtdKTtcbiAgY29uc3Qgc2lnbk91dCA9IHVzZUNhbGxiYWNrKGNyZWF0ZVNpZ25PdXQoaXNvbW9ycGhpY0NsZXJrKSwgW2lzb21vcnBoaWNDbGVya10pO1xuICBjb25zdCBoYXMgPSB1c2VDYWxsYmFjayhcbiAgICAocGFyYW1zKSA9PiB7XG4gICAgICBpZiAoIXBhcmFtcz8ucGVybWlzc2lvbiAmJiAhcGFyYW1zPy5yb2xlKSB7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcih1c2VBdXRoSGFzUmVxdWlyZXNSb2xlT3JQZXJtaXNzaW9uKTtcbiAgICAgIH1cbiAgICAgIGlmICghb3JnSWQgfHwgIXVzZXJJZCB8fCAhb3JnUm9sZSB8fCAhb3JnUGVybWlzc2lvbnMpIHtcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgfVxuICAgICAgaWYgKHBhcmFtcy5wZXJtaXNzaW9uKSB7XG4gICAgICAgIHJldHVybiBvcmdQZXJtaXNzaW9ucy5pbmNsdWRlcyhwYXJhbXMucGVybWlzc2lvbik7XG4gICAgICB9XG4gICAgICBpZiAocGFyYW1zLnJvbGUpIHtcbiAgICAgICAgcmV0dXJuIG9yZ1JvbGUgPT09IHBhcmFtcy5yb2xlO1xuICAgICAgfVxuICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH0sXG4gICAgW29yZ0lkLCBvcmdSb2xlLCB1c2VySWQsIG9yZ1Blcm1pc3Npb25zXVxuICApO1xuICBpZiAoc2Vzc2lvbklkID09PSB2b2lkIDAgJiYgdXNlcklkID09PSB2b2lkIDApIHtcbiAgICByZXR1cm4ge1xuICAgICAgaXNMb2FkZWQ6IGZhbHNlLFxuICAgICAgaXNTaWduZWRJbjogdm9pZCAwLFxuICAgICAgc2Vzc2lvbklkLFxuICAgICAgdXNlcklkLFxuICAgICAgYWN0b3I6IHZvaWQgMCxcbiAgICAgIG9yZ0lkOiB2b2lkIDAsXG4gICAgICBvcmdSb2xlOiB2b2lkIDAsXG4gICAgICBvcmdTbHVnOiB2b2lkIDAsXG4gICAgICBoYXM6IHZvaWQgMCxcbiAgICAgIHNpZ25PdXQsXG4gICAgICBnZXRUb2tlblxuICAgIH07XG4gIH1cbiAgaWYgKHNlc3Npb25JZCA9PT0gbnVsbCAmJiB1c2VySWQgPT09IG51bGwpIHtcbiAgICByZXR1cm4ge1xuICAgICAgaXNMb2FkZWQ6IHRydWUsXG4gICAgICBpc1NpZ25lZEluOiBmYWxzZSxcbiAgICAgIHNlc3Npb25JZCxcbiAgICAgIHVzZXJJZCxcbiAgICAgIGFjdG9yOiBudWxsLFxuICAgICAgb3JnSWQ6IG51bGwsXG4gICAgICBvcmdSb2xlOiBudWxsLFxuICAgICAgb3JnU2x1ZzogbnVsbCxcbiAgICAgIGhhczogKCkgPT4gZmFsc2UsXG4gICAgICBzaWduT3V0LFxuICAgICAgZ2V0VG9rZW5cbiAgICB9O1xuICB9XG4gIGlmICghIXNlc3Npb25JZCAmJiAhIXVzZXJJZCAmJiAhIW9yZ0lkICYmICEhb3JnUm9sZSkge1xuICAgIHJldHVybiB7XG4gICAgICBpc0xvYWRlZDogdHJ1ZSxcbiAgICAgIGlzU2lnbmVkSW46IHRydWUsXG4gICAgICBzZXNzaW9uSWQsXG4gICAgICB1c2VySWQsXG4gICAgICBhY3RvcjogYWN0b3IgfHwgbnVsbCxcbiAgICAgIG9yZ0lkLFxuICAgICAgb3JnUm9sZSxcbiAgICAgIG9yZ1NsdWc6IG9yZ1NsdWcgfHwgbnVsbCxcbiAgICAgIGhhcyxcbiAgICAgIHNpZ25PdXQsXG4gICAgICBnZXRUb2tlblxuICAgIH07XG4gIH1cbiAgaWYgKCEhc2Vzc2lvbklkICYmICEhdXNlcklkICYmICFvcmdJZCkge1xuICAgIHJldHVybiB7XG4gICAgICBpc0xvYWRlZDogdHJ1ZSxcbiAgICAgIGlzU2lnbmVkSW46IHRydWUsXG4gICAgICBzZXNzaW9uSWQsXG4gICAgICB1c2VySWQsXG4gICAgICBhY3RvcjogYWN0b3IgfHwgbnVsbCxcbiAgICAgIG9yZ0lkOiBudWxsLFxuICAgICAgb3JnUm9sZTogbnVsbCxcbiAgICAgIG9yZ1NsdWc6IG51bGwsXG4gICAgICBoYXM6ICgpID0+IGZhbHNlLFxuICAgICAgc2lnbk91dCxcbiAgICAgIGdldFRva2VuXG4gICAgfTtcbiAgfVxuICB0aHJvdyBuZXcgRXJyb3IoaW52YWxpZFN0YXRlRXJyb3IpO1xufTtcbmV4cG9ydCB7XG4gIHVzZUF1dGhcbn07XG4vLyMgc291cmNlTWFwcGluZ1VSTD11c2VBdXRoLmpzLm1hcCJdLCJuYW1lcyI6WyJ1c2VDYWxsYmFjayIsInVzZUF1dGhDb250ZXh0IiwidXNlSXNvbW9ycGhpY0NsZXJrQ29udGV4dCIsImludmFsaWRTdGF0ZUVycm9yIiwidXNlQXV0aEhhc1JlcXVpcmVzUm9sZU9yUGVybWlzc2lvbiIsImNyZWF0ZUdldFRva2VuIiwiY3JlYXRlU2lnbk91dCIsInVzZUF1dGgiLCJzZXNzaW9uSWQiLCJ1c2VySWQiLCJhY3RvciIsIm9yZ0lkIiwib3JnUm9sZSIsIm9yZ1NsdWciLCJvcmdQZXJtaXNzaW9ucyIsImlzb21vcnBoaWNDbGVyayIsImdldFRva2VuIiwic2lnbk91dCIsImhhcyIsInBhcmFtcyIsInBlcm1pc3Npb24iLCJyb2xlIiwiRXJyb3IiLCJpbmNsdWRlcyIsImlzTG9hZGVkIiwiaXNTaWduZWRJbiJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/@clerk/clerk-react/dist/esm/hooks/useAuth.js\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/@clerk/clerk-react/dist/esm/hooks/useClerk.js":
/*!********************************************************************!*\
  !*** ./node_modules/@clerk/clerk-react/dist/esm/hooks/useClerk.js ***!
  \********************************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   useClerk: function() { return /* binding */ useClerk; }\n/* harmony export */ });\n/* harmony import */ var _contexts_IsomorphicClerkContext__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../contexts/IsomorphicClerkContext */ \"(app-pages-browser)/./node_modules/@clerk/clerk-react/dist/esm/contexts/IsomorphicClerkContext.js\");\nvar _s = $RefreshSig$();\n\n\nconst useClerk = ()=>{\n    _s();\n    const isomorphicClerk = (0,_contexts_IsomorphicClerkContext__WEBPACK_IMPORTED_MODULE_0__.useIsomorphicClerkContext)();\n    return isomorphicClerk;\n};\n_s(useClerk, \"9S3w854Xa9SZQNrdxFCER3+2BeA=\", false, function() {\n    return [\n        _contexts_IsomorphicClerkContext__WEBPACK_IMPORTED_MODULE_0__.useIsomorphicClerkContext\n    ];\n});\n //# sourceMappingURL=useClerk.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL25vZGVfbW9kdWxlcy9AY2xlcmsvY2xlcmstcmVhY3QvZGlzdC9lc20vaG9va3MvdXNlQ2xlcmsuanMiLCJtYXBwaW5ncyI6Ijs7Ozs7O0FBQThCO0FBQ2lEO0FBQy9FLE1BQU1DLFdBQVc7O0lBQ2YsTUFBTUMsa0JBQWtCRiwyRkFBeUJBO0lBQ2pELE9BQU9FO0FBQ1Q7R0FITUQ7O1FBQ29CRCx1RkFBeUJBOzs7QUFLakQsQ0FDRixvQ0FBb0MiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9fTl9FLy4vbm9kZV9tb2R1bGVzL0BjbGVyay9jbGVyay1yZWFjdC9kaXN0L2VzbS9ob29rcy91c2VDbGVyay5qcz9mY2IyIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBcIi4uL2NodW5rLTNXNUc0Q1lJLmpzXCI7XG5pbXBvcnQgeyB1c2VJc29tb3JwaGljQ2xlcmtDb250ZXh0IH0gZnJvbSBcIi4uL2NvbnRleHRzL0lzb21vcnBoaWNDbGVya0NvbnRleHRcIjtcbmNvbnN0IHVzZUNsZXJrID0gKCkgPT4ge1xuICBjb25zdCBpc29tb3JwaGljQ2xlcmsgPSB1c2VJc29tb3JwaGljQ2xlcmtDb250ZXh0KCk7XG4gIHJldHVybiBpc29tb3JwaGljQ2xlcms7XG59O1xuZXhwb3J0IHtcbiAgdXNlQ2xlcmtcbn07XG4vLyMgc291cmNlTWFwcGluZ1VSTD11c2VDbGVyay5qcy5tYXAiXSwibmFtZXMiOlsidXNlSXNvbW9ycGhpY0NsZXJrQ29udGV4dCIsInVzZUNsZXJrIiwiaXNvbW9ycGhpY0NsZXJrIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/@clerk/clerk-react/dist/esm/hooks/useClerk.js\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/@clerk/clerk-react/dist/esm/hooks/useEmailLink.js":
/*!************************************************************************!*\
  !*** ./node_modules/@clerk/clerk-react/dist/esm/hooks/useEmailLink.js ***!
  \************************************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   useEmailLink: function() { return /* binding */ useEmailLink; }\n/* harmony export */ });\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react */ \"(app-pages-browser)/./node_modules/next/dist/compiled/react/index.js\");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_0__);\nvar _s = $RefreshSig$();\n\n\nfunction useEmailLink(resource) {\n    _s();\n    const { startEmailLinkFlow, cancelEmailLinkFlow } = react__WEBPACK_IMPORTED_MODULE_0___default().useMemo(()=>resource.createEmailLinkFlow(), [\n        resource\n    ]);\n    react__WEBPACK_IMPORTED_MODULE_0___default().useEffect(()=>{\n        return cancelEmailLinkFlow;\n    }, []);\n    return {\n        startEmailLinkFlow,\n        cancelEmailLinkFlow\n    };\n}\n_s(useEmailLink, \"UcP63ciL12XNYTvgKT1jc6DV3P4=\");\n //# sourceMappingURL=useEmailLink.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL25vZGVfbW9kdWxlcy9AY2xlcmsvY2xlcmstcmVhY3QvZGlzdC9lc20vaG9va3MvdXNlRW1haWxMaW5rLmpzIiwibWFwcGluZ3MiOiI7Ozs7Ozs7QUFBOEI7QUFDSjtBQUMxQixTQUFTQyxhQUFhQyxRQUFROztJQUM1QixNQUFNLEVBQUVDLGtCQUFrQixFQUFFQyxtQkFBbUIsRUFBRSxHQUFHSixvREFBYSxDQUFDLElBQU1FLFNBQVNJLG1CQUFtQixJQUFJO1FBQUNKO0tBQVM7SUFDbEhGLHNEQUFlLENBQUM7UUFDZCxPQUFPSTtJQUNULEdBQUcsRUFBRTtJQUNMLE9BQU87UUFDTEQ7UUFDQUM7SUFDRjtBQUNGO0dBVFNIO0FBWVAsQ0FDRix3Q0FBd0MiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9fTl9FLy4vbm9kZV9tb2R1bGVzL0BjbGVyay9jbGVyay1yZWFjdC9kaXN0L2VzbS9ob29rcy91c2VFbWFpbExpbmsuanM/ZGNjMSJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgXCIuLi9jaHVuay0zVzVHNENZSS5qc1wiO1xuaW1wb3J0IFJlYWN0IGZyb20gXCJyZWFjdFwiO1xuZnVuY3Rpb24gdXNlRW1haWxMaW5rKHJlc291cmNlKSB7XG4gIGNvbnN0IHsgc3RhcnRFbWFpbExpbmtGbG93LCBjYW5jZWxFbWFpbExpbmtGbG93IH0gPSBSZWFjdC51c2VNZW1vKCgpID0+IHJlc291cmNlLmNyZWF0ZUVtYWlsTGlua0Zsb3coKSwgW3Jlc291cmNlXSk7XG4gIFJlYWN0LnVzZUVmZmVjdCgoKSA9PiB7XG4gICAgcmV0dXJuIGNhbmNlbEVtYWlsTGlua0Zsb3c7XG4gIH0sIFtdKTtcbiAgcmV0dXJuIHtcbiAgICBzdGFydEVtYWlsTGlua0Zsb3csXG4gICAgY2FuY2VsRW1haWxMaW5rRmxvd1xuICB9O1xufVxuZXhwb3J0IHtcbiAgdXNlRW1haWxMaW5rXG59O1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9dXNlRW1haWxMaW5rLmpzLm1hcCJdLCJuYW1lcyI6WyJSZWFjdCIsInVzZUVtYWlsTGluayIsInJlc291cmNlIiwic3RhcnRFbWFpbExpbmtGbG93IiwiY2FuY2VsRW1haWxMaW5rRmxvdyIsInVzZU1lbW8iLCJjcmVhdGVFbWFpbExpbmtGbG93IiwidXNlRWZmZWN0Il0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/@clerk/clerk-react/dist/esm/hooks/useEmailLink.js\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/@clerk/clerk-react/dist/esm/hooks/useMagicLink.js":
/*!************************************************************************!*\
  !*** ./node_modules/@clerk/clerk-react/dist/esm/hooks/useMagicLink.js ***!
  \************************************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   useMagicLink: function() { return /* binding */ useMagicLink; }\n/* harmony export */ });\n/* harmony import */ var _clerk_shared_deprecated__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @clerk/shared/deprecated */ \"(app-pages-browser)/./node_modules/@clerk/shared/dist/deprecated.mjs\");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! react */ \"(app-pages-browser)/./node_modules/next/dist/compiled/react/index.js\");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_1__);\nvar _s = $RefreshSig$();\n\n\n\nfunction useMagicLink(resource) {\n    _s();\n    (0,_clerk_shared_deprecated__WEBPACK_IMPORTED_MODULE_0__.deprecated)(\"useMagicLink\", \"Use `useEmailLink` instead.\");\n    const { startMagicLinkFlow, cancelMagicLinkFlow } = react__WEBPACK_IMPORTED_MODULE_1___default().useMemo(()=>resource.createMagicLinkFlow(), [\n        resource\n    ]);\n    react__WEBPACK_IMPORTED_MODULE_1___default().useEffect(()=>{\n        return cancelMagicLinkFlow;\n    }, []);\n    return {\n        startMagicLinkFlow,\n        cancelMagicLinkFlow\n    };\n}\n_s(useMagicLink, \"4kwy8MCXJyx0JDfr3pTfY2YDibk=\");\n //# sourceMappingURL=useMagicLink.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL25vZGVfbW9kdWxlcy9AY2xlcmsvY2xlcmstcmVhY3QvZGlzdC9lc20vaG9va3MvdXNlTWFnaWNMaW5rLmpzIiwibWFwcGluZ3MiOiI7Ozs7Ozs7O0FBQThCO0FBQ3dCO0FBQzVCO0FBQzFCLFNBQVNFLGFBQWFDLFFBQVE7O0lBQzVCSCxvRUFBVUEsQ0FBQyxnQkFBZ0I7SUFDM0IsTUFBTSxFQUFFSSxrQkFBa0IsRUFBRUMsbUJBQW1CLEVBQUUsR0FBR0osb0RBQWEsQ0FBQyxJQUFNRSxTQUFTSSxtQkFBbUIsSUFBSTtRQUFDSjtLQUFTO0lBQ2xIRixzREFBZSxDQUFDO1FBQ2QsT0FBT0k7SUFDVCxHQUFHLEVBQUU7SUFDTCxPQUFPO1FBQ0xEO1FBQ0FDO0lBQ0Y7QUFDRjtHQVZTSDtBQWFQLENBQ0Ysd0NBQXdDIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vX05fRS8uL25vZGVfbW9kdWxlcy9AY2xlcmsvY2xlcmstcmVhY3QvZGlzdC9lc20vaG9va3MvdXNlTWFnaWNMaW5rLmpzPzg5YzAiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IFwiLi4vY2h1bmstM1c1RzRDWUkuanNcIjtcbmltcG9ydCB7IGRlcHJlY2F0ZWQgfSBmcm9tIFwiQGNsZXJrL3NoYXJlZC9kZXByZWNhdGVkXCI7XG5pbXBvcnQgUmVhY3QgZnJvbSBcInJlYWN0XCI7XG5mdW5jdGlvbiB1c2VNYWdpY0xpbmsocmVzb3VyY2UpIHtcbiAgZGVwcmVjYXRlZChcInVzZU1hZ2ljTGlua1wiLCBcIlVzZSBgdXNlRW1haWxMaW5rYCBpbnN0ZWFkLlwiKTtcbiAgY29uc3QgeyBzdGFydE1hZ2ljTGlua0Zsb3csIGNhbmNlbE1hZ2ljTGlua0Zsb3cgfSA9IFJlYWN0LnVzZU1lbW8oKCkgPT4gcmVzb3VyY2UuY3JlYXRlTWFnaWNMaW5rRmxvdygpLCBbcmVzb3VyY2VdKTtcbiAgUmVhY3QudXNlRWZmZWN0KCgpID0+IHtcbiAgICByZXR1cm4gY2FuY2VsTWFnaWNMaW5rRmxvdztcbiAgfSwgW10pO1xuICByZXR1cm4ge1xuICAgIHN0YXJ0TWFnaWNMaW5rRmxvdyxcbiAgICBjYW5jZWxNYWdpY0xpbmtGbG93XG4gIH07XG59XG5leHBvcnQge1xuICB1c2VNYWdpY0xpbmtcbn07XG4vLyMgc291cmNlTWFwcGluZ1VSTD11c2VNYWdpY0xpbmsuanMubWFwIl0sIm5hbWVzIjpbImRlcHJlY2F0ZWQiLCJSZWFjdCIsInVzZU1hZ2ljTGluayIsInJlc291cmNlIiwic3RhcnRNYWdpY0xpbmtGbG93IiwiY2FuY2VsTWFnaWNMaW5rRmxvdyIsInVzZU1lbW8iLCJjcmVhdGVNYWdpY0xpbmtGbG93IiwidXNlRWZmZWN0Il0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/@clerk/clerk-react/dist/esm/hooks/useMagicLink.js\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/@clerk/clerk-react/dist/esm/hooks/useSession.js":
/*!**********************************************************************!*\
  !*** ./node_modules/@clerk/clerk-react/dist/esm/hooks/useSession.js ***!
  \**********************************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   useSession: function() { return /* binding */ useSession; }\n/* harmony export */ });\n/* harmony import */ var _contexts_SessionContext__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../contexts/SessionContext */ \"(app-pages-browser)/./node_modules/@clerk/shared/dist/react/index.mjs\");\nvar _s = $RefreshSig$();\n\n\nconst useSession = ()=>{\n    _s();\n    const session = (0,_contexts_SessionContext__WEBPACK_IMPORTED_MODULE_0__.useSessionContext)();\n    if (session === void 0) {\n        return {\n            isLoaded: false,\n            isSignedIn: void 0,\n            session: void 0\n        };\n    }\n    if (session === null) {\n        return {\n            isLoaded: true,\n            isSignedIn: false,\n            session: null\n        };\n    }\n    return {\n        isLoaded: true,\n        isSignedIn: true,\n        session\n    };\n};\n_s(useSession, \"V9UNg+dfDJ4HPaIg8L+3vPuTNr4=\", false, function() {\n    return [\n        _contexts_SessionContext__WEBPACK_IMPORTED_MODULE_0__.useSessionContext\n    ];\n});\n //# sourceMappingURL=useSession.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL25vZGVfbW9kdWxlcy9AY2xlcmsvY2xlcmstcmVhY3QvZGlzdC9lc20vaG9va3MvdXNlU2Vzc2lvbi5qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7QUFBOEI7QUFDaUM7QUFDL0QsTUFBTUMsYUFBYTs7SUFDakIsTUFBTUMsVUFBVUYsMkVBQWlCQTtJQUNqQyxJQUFJRSxZQUFZLEtBQUssR0FBRztRQUN0QixPQUFPO1lBQUVDLFVBQVU7WUFBT0MsWUFBWSxLQUFLO1lBQUdGLFNBQVMsS0FBSztRQUFFO0lBQ2hFO0lBQ0EsSUFBSUEsWUFBWSxNQUFNO1FBQ3BCLE9BQU87WUFBRUMsVUFBVTtZQUFNQyxZQUFZO1lBQU9GLFNBQVM7UUFBSztJQUM1RDtJQUNBLE9BQU87UUFBRUMsVUFBVTtRQUFNQyxZQUFZO1FBQU1GO0lBQVE7QUFDckQ7R0FUTUQ7O1FBQ1lELHVFQUFpQkE7OztBQVdqQyxDQUNGLHNDQUFzQyIsInNvdXJjZXMiOlsid2VicGFjazovL19OX0UvLi9ub2RlX21vZHVsZXMvQGNsZXJrL2NsZXJrLXJlYWN0L2Rpc3QvZXNtL2hvb2tzL3VzZVNlc3Npb24uanM/ZDE1YiJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgXCIuLi9jaHVuay0zVzVHNENZSS5qc1wiO1xuaW1wb3J0IHsgdXNlU2Vzc2lvbkNvbnRleHQgfSBmcm9tIFwiLi4vY29udGV4dHMvU2Vzc2lvbkNvbnRleHRcIjtcbmNvbnN0IHVzZVNlc3Npb24gPSAoKSA9PiB7XG4gIGNvbnN0IHNlc3Npb24gPSB1c2VTZXNzaW9uQ29udGV4dCgpO1xuICBpZiAoc2Vzc2lvbiA9PT0gdm9pZCAwKSB7XG4gICAgcmV0dXJuIHsgaXNMb2FkZWQ6IGZhbHNlLCBpc1NpZ25lZEluOiB2b2lkIDAsIHNlc3Npb246IHZvaWQgMCB9O1xuICB9XG4gIGlmIChzZXNzaW9uID09PSBudWxsKSB7XG4gICAgcmV0dXJuIHsgaXNMb2FkZWQ6IHRydWUsIGlzU2lnbmVkSW46IGZhbHNlLCBzZXNzaW9uOiBudWxsIH07XG4gIH1cbiAgcmV0dXJuIHsgaXNMb2FkZWQ6IHRydWUsIGlzU2lnbmVkSW46IHRydWUsIHNlc3Npb24gfTtcbn07XG5leHBvcnQge1xuICB1c2VTZXNzaW9uXG59O1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9dXNlU2Vzc2lvbi5qcy5tYXAiXSwibmFtZXMiOlsidXNlU2Vzc2lvbkNvbnRleHQiLCJ1c2VTZXNzaW9uIiwic2Vzc2lvbiIsImlzTG9hZGVkIiwiaXNTaWduZWRJbiJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/@clerk/clerk-react/dist/esm/hooks/useSession.js\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/@clerk/clerk-react/dist/esm/hooks/useSessionList.js":
/*!**************************************************************************!*\
  !*** ./node_modules/@clerk/clerk-react/dist/esm/hooks/useSessionList.js ***!
  \**************************************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   useSessionList: function() { return /* binding */ useSessionList; }\n/* harmony export */ });\n/* harmony import */ var _contexts_ClientContext__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../contexts/ClientContext */ \"(app-pages-browser)/./node_modules/@clerk/shared/dist/react/index.mjs\");\n/* harmony import */ var _contexts_IsomorphicClerkContext__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../contexts/IsomorphicClerkContext */ \"(app-pages-browser)/./node_modules/@clerk/clerk-react/dist/esm/contexts/IsomorphicClerkContext.js\");\nvar _s = $RefreshSig$();\n\n\n\nconst useSessionList = ()=>{\n    _s();\n    const isomorphicClerk = (0,_contexts_IsomorphicClerkContext__WEBPACK_IMPORTED_MODULE_0__.useIsomorphicClerkContext)();\n    const client = (0,_contexts_ClientContext__WEBPACK_IMPORTED_MODULE_1__.useClientContext)();\n    if (!client) {\n        return {\n            isLoaded: false,\n            sessions: void 0,\n            setSession: void 0,\n            setActive: void 0\n        };\n    }\n    return {\n        isLoaded: true,\n        sessions: client.sessions,\n        setSession: isomorphicClerk.setSession,\n        setActive: isomorphicClerk.setActive\n    };\n};\n_s(useSessionList, \"b5E3cv3ydzmFiTsNSuTGUCFb3lE=\", false, function() {\n    return [\n        _contexts_IsomorphicClerkContext__WEBPACK_IMPORTED_MODULE_0__.useIsomorphicClerkContext,\n        _contexts_ClientContext__WEBPACK_IMPORTED_MODULE_1__.useClientContext\n    ];\n});\n //# sourceMappingURL=useSessionList.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL25vZGVfbW9kdWxlcy9AY2xlcmsvY2xlcmstcmVhY3QvZGlzdC9lc20vaG9va3MvdXNlU2Vzc2lvbkxpc3QuanMiLCJtYXBwaW5ncyI6Ijs7Ozs7OztBQUE4QjtBQUMrQjtBQUNrQjtBQUMvRSxNQUFNRSxpQkFBaUI7O0lBQ3JCLE1BQU1DLGtCQUFrQkYsMkZBQXlCQTtJQUNqRCxNQUFNRyxTQUFTSix5RUFBZ0JBO0lBQy9CLElBQUksQ0FBQ0ksUUFBUTtRQUNYLE9BQU87WUFBRUMsVUFBVTtZQUFPQyxVQUFVLEtBQUs7WUFBR0MsWUFBWSxLQUFLO1lBQUdDLFdBQVcsS0FBSztRQUFFO0lBQ3BGO0lBQ0EsT0FBTztRQUNMSCxVQUFVO1FBQ1ZDLFVBQVVGLE9BQU9FLFFBQVE7UUFDekJDLFlBQVlKLGdCQUFnQkksVUFBVTtRQUN0Q0MsV0FBV0wsZ0JBQWdCSyxTQUFTO0lBQ3RDO0FBQ0Y7R0FaTU47O1FBQ29CRCx1RkFBeUJBO1FBQ2xDRCxxRUFBZ0JBOzs7QUFhL0IsQ0FDRiwwQ0FBMEMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9fTl9FLy4vbm9kZV9tb2R1bGVzL0BjbGVyay9jbGVyay1yZWFjdC9kaXN0L2VzbS9ob29rcy91c2VTZXNzaW9uTGlzdC5qcz81NWViIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBcIi4uL2NodW5rLTNXNUc0Q1lJLmpzXCI7XG5pbXBvcnQgeyB1c2VDbGllbnRDb250ZXh0IH0gZnJvbSBcIi4uL2NvbnRleHRzL0NsaWVudENvbnRleHRcIjtcbmltcG9ydCB7IHVzZUlzb21vcnBoaWNDbGVya0NvbnRleHQgfSBmcm9tIFwiLi4vY29udGV4dHMvSXNvbW9ycGhpY0NsZXJrQ29udGV4dFwiO1xuY29uc3QgdXNlU2Vzc2lvbkxpc3QgPSAoKSA9PiB7XG4gIGNvbnN0IGlzb21vcnBoaWNDbGVyayA9IHVzZUlzb21vcnBoaWNDbGVya0NvbnRleHQoKTtcbiAgY29uc3QgY2xpZW50ID0gdXNlQ2xpZW50Q29udGV4dCgpO1xuICBpZiAoIWNsaWVudCkge1xuICAgIHJldHVybiB7IGlzTG9hZGVkOiBmYWxzZSwgc2Vzc2lvbnM6IHZvaWQgMCwgc2V0U2Vzc2lvbjogdm9pZCAwLCBzZXRBY3RpdmU6IHZvaWQgMCB9O1xuICB9XG4gIHJldHVybiB7XG4gICAgaXNMb2FkZWQ6IHRydWUsXG4gICAgc2Vzc2lvbnM6IGNsaWVudC5zZXNzaW9ucyxcbiAgICBzZXRTZXNzaW9uOiBpc29tb3JwaGljQ2xlcmsuc2V0U2Vzc2lvbixcbiAgICBzZXRBY3RpdmU6IGlzb21vcnBoaWNDbGVyay5zZXRBY3RpdmVcbiAgfTtcbn07XG5leHBvcnQge1xuICB1c2VTZXNzaW9uTGlzdFxufTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXVzZVNlc3Npb25MaXN0LmpzLm1hcCJdLCJuYW1lcyI6WyJ1c2VDbGllbnRDb250ZXh0IiwidXNlSXNvbW9ycGhpY0NsZXJrQ29udGV4dCIsInVzZVNlc3Npb25MaXN0IiwiaXNvbW9ycGhpY0NsZXJrIiwiY2xpZW50IiwiaXNMb2FkZWQiLCJzZXNzaW9ucyIsInNldFNlc3Npb24iLCJzZXRBY3RpdmUiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/@clerk/clerk-react/dist/esm/hooks/useSessionList.js\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/@clerk/clerk-react/dist/esm/hooks/useSignIn.js":
/*!*********************************************************************!*\
  !*** ./node_modules/@clerk/clerk-react/dist/esm/hooks/useSignIn.js ***!
  \*********************************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   useSignIn: function() { return /* binding */ useSignIn; }\n/* harmony export */ });\n/* harmony import */ var _contexts_ClientContext__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../contexts/ClientContext */ \"(app-pages-browser)/./node_modules/@clerk/shared/dist/react/index.mjs\");\n/* harmony import */ var _contexts_IsomorphicClerkContext__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../contexts/IsomorphicClerkContext */ \"(app-pages-browser)/./node_modules/@clerk/clerk-react/dist/esm/contexts/IsomorphicClerkContext.js\");\nvar _s = $RefreshSig$();\n\n\n\nconst useSignIn = ()=>{\n    _s();\n    const isomorphicClerk = (0,_contexts_IsomorphicClerkContext__WEBPACK_IMPORTED_MODULE_0__.useIsomorphicClerkContext)();\n    const client = (0,_contexts_ClientContext__WEBPACK_IMPORTED_MODULE_1__.useClientContext)();\n    if (!client) {\n        return {\n            isLoaded: false,\n            signIn: void 0,\n            setSession: void 0,\n            setActive: void 0\n        };\n    }\n    return {\n        isLoaded: true,\n        signIn: client.signIn,\n        setSession: isomorphicClerk.setSession,\n        setActive: isomorphicClerk.setActive\n    };\n};\n_s(useSignIn, \"b5E3cv3ydzmFiTsNSuTGUCFb3lE=\", false, function() {\n    return [\n        _contexts_IsomorphicClerkContext__WEBPACK_IMPORTED_MODULE_0__.useIsomorphicClerkContext,\n        _contexts_ClientContext__WEBPACK_IMPORTED_MODULE_1__.useClientContext\n    ];\n});\n //# sourceMappingURL=useSignIn.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL25vZGVfbW9kdWxlcy9AY2xlcmsvY2xlcmstcmVhY3QvZGlzdC9lc20vaG9va3MvdXNlU2lnbkluLmpzIiwibWFwcGluZ3MiOiI7Ozs7Ozs7QUFBOEI7QUFDK0I7QUFDa0I7QUFDL0UsTUFBTUUsWUFBWTs7SUFDaEIsTUFBTUMsa0JBQWtCRiwyRkFBeUJBO0lBQ2pELE1BQU1HLFNBQVNKLHlFQUFnQkE7SUFDL0IsSUFBSSxDQUFDSSxRQUFRO1FBQ1gsT0FBTztZQUFFQyxVQUFVO1lBQU9DLFFBQVEsS0FBSztZQUFHQyxZQUFZLEtBQUs7WUFBR0MsV0FBVyxLQUFLO1FBQUU7SUFDbEY7SUFDQSxPQUFPO1FBQ0xILFVBQVU7UUFDVkMsUUFBUUYsT0FBT0UsTUFBTTtRQUNyQkMsWUFBWUosZ0JBQWdCSSxVQUFVO1FBQ3RDQyxXQUFXTCxnQkFBZ0JLLFNBQVM7SUFDdEM7QUFDRjtHQVpNTjs7UUFDb0JELHVGQUF5QkE7UUFDbENELHFFQUFnQkE7OztBQWEvQixDQUNGLHFDQUFxQyIsInNvdXJjZXMiOlsid2VicGFjazovL19OX0UvLi9ub2RlX21vZHVsZXMvQGNsZXJrL2NsZXJrLXJlYWN0L2Rpc3QvZXNtL2hvb2tzL3VzZVNpZ25Jbi5qcz8wM2MwIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBcIi4uL2NodW5rLTNXNUc0Q1lJLmpzXCI7XG5pbXBvcnQgeyB1c2VDbGllbnRDb250ZXh0IH0gZnJvbSBcIi4uL2NvbnRleHRzL0NsaWVudENvbnRleHRcIjtcbmltcG9ydCB7IHVzZUlzb21vcnBoaWNDbGVya0NvbnRleHQgfSBmcm9tIFwiLi4vY29udGV4dHMvSXNvbW9ycGhpY0NsZXJrQ29udGV4dFwiO1xuY29uc3QgdXNlU2lnbkluID0gKCkgPT4ge1xuICBjb25zdCBpc29tb3JwaGljQ2xlcmsgPSB1c2VJc29tb3JwaGljQ2xlcmtDb250ZXh0KCk7XG4gIGNvbnN0IGNsaWVudCA9IHVzZUNsaWVudENvbnRleHQoKTtcbiAgaWYgKCFjbGllbnQpIHtcbiAgICByZXR1cm4geyBpc0xvYWRlZDogZmFsc2UsIHNpZ25Jbjogdm9pZCAwLCBzZXRTZXNzaW9uOiB2b2lkIDAsIHNldEFjdGl2ZTogdm9pZCAwIH07XG4gIH1cbiAgcmV0dXJuIHtcbiAgICBpc0xvYWRlZDogdHJ1ZSxcbiAgICBzaWduSW46IGNsaWVudC5zaWduSW4sXG4gICAgc2V0U2Vzc2lvbjogaXNvbW9ycGhpY0NsZXJrLnNldFNlc3Npb24sXG4gICAgc2V0QWN0aXZlOiBpc29tb3JwaGljQ2xlcmsuc2V0QWN0aXZlXG4gIH07XG59O1xuZXhwb3J0IHtcbiAgdXNlU2lnbkluXG59O1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9dXNlU2lnbkluLmpzLm1hcCJdLCJuYW1lcyI6WyJ1c2VDbGllbnRDb250ZXh0IiwidXNlSXNvbW9ycGhpY0NsZXJrQ29udGV4dCIsInVzZVNpZ25JbiIsImlzb21vcnBoaWNDbGVyayIsImNsaWVudCIsImlzTG9hZGVkIiwic2lnbkluIiwic2V0U2Vzc2lvbiIsInNldEFjdGl2ZSJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/@clerk/clerk-react/dist/esm/hooks/useSignIn.js\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/@clerk/clerk-react/dist/esm/hooks/useSignUp.js":
/*!*********************************************************************!*\
  !*** ./node_modules/@clerk/clerk-react/dist/esm/hooks/useSignUp.js ***!
  \*********************************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   useSignUp: function() { return /* binding */ useSignUp; }\n/* harmony export */ });\n/* harmony import */ var _contexts_ClientContext__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../contexts/ClientContext */ \"(app-pages-browser)/./node_modules/@clerk/shared/dist/react/index.mjs\");\n/* harmony import */ var _contexts_IsomorphicClerkContext__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../contexts/IsomorphicClerkContext */ \"(app-pages-browser)/./node_modules/@clerk/clerk-react/dist/esm/contexts/IsomorphicClerkContext.js\");\nvar _s = $RefreshSig$();\n\n\n\nconst useSignUp = ()=>{\n    _s();\n    const isomorphicClerk = (0,_contexts_IsomorphicClerkContext__WEBPACK_IMPORTED_MODULE_0__.useIsomorphicClerkContext)();\n    const client = (0,_contexts_ClientContext__WEBPACK_IMPORTED_MODULE_1__.useClientContext)();\n    if (!client) {\n        return {\n            isLoaded: false,\n            signUp: void 0,\n            setSession: void 0,\n            setActive: void 0\n        };\n    }\n    return {\n        isLoaded: true,\n        signUp: client.signUp,\n        setSession: isomorphicClerk.setSession,\n        setActive: isomorphicClerk.setActive\n    };\n};\n_s(useSignUp, \"b5E3cv3ydzmFiTsNSuTGUCFb3lE=\", false, function() {\n    return [\n        _contexts_IsomorphicClerkContext__WEBPACK_IMPORTED_MODULE_0__.useIsomorphicClerkContext,\n        _contexts_ClientContext__WEBPACK_IMPORTED_MODULE_1__.useClientContext\n    ];\n});\n //# sourceMappingURL=useSignUp.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL25vZGVfbW9kdWxlcy9AY2xlcmsvY2xlcmstcmVhY3QvZGlzdC9lc20vaG9va3MvdXNlU2lnblVwLmpzIiwibWFwcGluZ3MiOiI7Ozs7Ozs7QUFBOEI7QUFDK0I7QUFDa0I7QUFDL0UsTUFBTUUsWUFBWTs7SUFDaEIsTUFBTUMsa0JBQWtCRiwyRkFBeUJBO0lBQ2pELE1BQU1HLFNBQVNKLHlFQUFnQkE7SUFDL0IsSUFBSSxDQUFDSSxRQUFRO1FBQ1gsT0FBTztZQUFFQyxVQUFVO1lBQU9DLFFBQVEsS0FBSztZQUFHQyxZQUFZLEtBQUs7WUFBR0MsV0FBVyxLQUFLO1FBQUU7SUFDbEY7SUFDQSxPQUFPO1FBQ0xILFVBQVU7UUFDVkMsUUFBUUYsT0FBT0UsTUFBTTtRQUNyQkMsWUFBWUosZ0JBQWdCSSxVQUFVO1FBQ3RDQyxXQUFXTCxnQkFBZ0JLLFNBQVM7SUFDdEM7QUFDRjtHQVpNTjs7UUFDb0JELHVGQUF5QkE7UUFDbENELHFFQUFnQkE7OztBQWEvQixDQUNGLHFDQUFxQyIsInNvdXJjZXMiOlsid2VicGFjazovL19OX0UvLi9ub2RlX21vZHVsZXMvQGNsZXJrL2NsZXJrLXJlYWN0L2Rpc3QvZXNtL2hvb2tzL3VzZVNpZ25VcC5qcz9kNDE5Il0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBcIi4uL2NodW5rLTNXNUc0Q1lJLmpzXCI7XG5pbXBvcnQgeyB1c2VDbGllbnRDb250ZXh0IH0gZnJvbSBcIi4uL2NvbnRleHRzL0NsaWVudENvbnRleHRcIjtcbmltcG9ydCB7IHVzZUlzb21vcnBoaWNDbGVya0NvbnRleHQgfSBmcm9tIFwiLi4vY29udGV4dHMvSXNvbW9ycGhpY0NsZXJrQ29udGV4dFwiO1xuY29uc3QgdXNlU2lnblVwID0gKCkgPT4ge1xuICBjb25zdCBpc29tb3JwaGljQ2xlcmsgPSB1c2VJc29tb3JwaGljQ2xlcmtDb250ZXh0KCk7XG4gIGNvbnN0IGNsaWVudCA9IHVzZUNsaWVudENvbnRleHQoKTtcbiAgaWYgKCFjbGllbnQpIHtcbiAgICByZXR1cm4geyBpc0xvYWRlZDogZmFsc2UsIHNpZ25VcDogdm9pZCAwLCBzZXRTZXNzaW9uOiB2b2lkIDAsIHNldEFjdGl2ZTogdm9pZCAwIH07XG4gIH1cbiAgcmV0dXJuIHtcbiAgICBpc0xvYWRlZDogdHJ1ZSxcbiAgICBzaWduVXA6IGNsaWVudC5zaWduVXAsXG4gICAgc2V0U2Vzc2lvbjogaXNvbW9ycGhpY0NsZXJrLnNldFNlc3Npb24sXG4gICAgc2V0QWN0aXZlOiBpc29tb3JwaGljQ2xlcmsuc2V0QWN0aXZlXG4gIH07XG59O1xuZXhwb3J0IHtcbiAgdXNlU2lnblVwXG59O1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9dXNlU2lnblVwLmpzLm1hcCJdLCJuYW1lcyI6WyJ1c2VDbGllbnRDb250ZXh0IiwidXNlSXNvbW9ycGhpY0NsZXJrQ29udGV4dCIsInVzZVNpZ25VcCIsImlzb21vcnBoaWNDbGVyayIsImNsaWVudCIsImlzTG9hZGVkIiwic2lnblVwIiwic2V0U2Vzc2lvbiIsInNldEFjdGl2ZSJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/@clerk/clerk-react/dist/esm/hooks/useSignUp.js\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/@clerk/clerk-react/dist/esm/hooks/useUser.js":
/*!*******************************************************************!*\
  !*** ./node_modules/@clerk/clerk-react/dist/esm/hooks/useUser.js ***!
  \*******************************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   useUser: function() { return /* binding */ useUser; }\n/* harmony export */ });\n/* harmony import */ var _contexts_UserContext__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../contexts/UserContext */ \"(app-pages-browser)/./node_modules/@clerk/shared/dist/react/index.mjs\");\nvar _s = $RefreshSig$();\n\n\nfunction useUser() {\n    _s();\n    const user = (0,_contexts_UserContext__WEBPACK_IMPORTED_MODULE_0__.useUserContext)();\n    if (user === void 0) {\n        return {\n            isLoaded: false,\n            isSignedIn: void 0,\n            user: void 0\n        };\n    }\n    if (user === null) {\n        return {\n            isLoaded: true,\n            isSignedIn: false,\n            user: null\n        };\n    }\n    return {\n        isLoaded: true,\n        isSignedIn: true,\n        user\n    };\n}\n_s(useUser, \"DoaH9XpqsIs0xeWZfn2uVEei7mw=\", false, function() {\n    return [\n        _contexts_UserContext__WEBPACK_IMPORTED_MODULE_0__.useUserContext\n    ];\n});\n //# sourceMappingURL=useUser.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL25vZGVfbW9kdWxlcy9AY2xlcmsvY2xlcmstcmVhY3QvZGlzdC9lc20vaG9va3MvdXNlVXNlci5qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7QUFBOEI7QUFDMkI7QUFDekQsU0FBU0M7O0lBQ1AsTUFBTUMsT0FBT0YscUVBQWNBO0lBQzNCLElBQUlFLFNBQVMsS0FBSyxHQUFHO1FBQ25CLE9BQU87WUFBRUMsVUFBVTtZQUFPQyxZQUFZLEtBQUs7WUFBR0YsTUFBTSxLQUFLO1FBQUU7SUFDN0Q7SUFDQSxJQUFJQSxTQUFTLE1BQU07UUFDakIsT0FBTztZQUFFQyxVQUFVO1lBQU1DLFlBQVk7WUFBT0YsTUFBTTtRQUFLO0lBQ3pEO0lBQ0EsT0FBTztRQUFFQyxVQUFVO1FBQU1DLFlBQVk7UUFBTUY7SUFBSztBQUNsRDtHQVRTRDs7UUFDTUQsaUVBQWNBOzs7QUFXM0IsQ0FDRixtQ0FBbUMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9fTl9FLy4vbm9kZV9tb2R1bGVzL0BjbGVyay9jbGVyay1yZWFjdC9kaXN0L2VzbS9ob29rcy91c2VVc2VyLmpzPzVjZDQiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IFwiLi4vY2h1bmstM1c1RzRDWUkuanNcIjtcbmltcG9ydCB7IHVzZVVzZXJDb250ZXh0IH0gZnJvbSBcIi4uL2NvbnRleHRzL1VzZXJDb250ZXh0XCI7XG5mdW5jdGlvbiB1c2VVc2VyKCkge1xuICBjb25zdCB1c2VyID0gdXNlVXNlckNvbnRleHQoKTtcbiAgaWYgKHVzZXIgPT09IHZvaWQgMCkge1xuICAgIHJldHVybiB7IGlzTG9hZGVkOiBmYWxzZSwgaXNTaWduZWRJbjogdm9pZCAwLCB1c2VyOiB2b2lkIDAgfTtcbiAgfVxuICBpZiAodXNlciA9PT0gbnVsbCkge1xuICAgIHJldHVybiB7IGlzTG9hZGVkOiB0cnVlLCBpc1NpZ25lZEluOiBmYWxzZSwgdXNlcjogbnVsbCB9O1xuICB9XG4gIHJldHVybiB7IGlzTG9hZGVkOiB0cnVlLCBpc1NpZ25lZEluOiB0cnVlLCB1c2VyIH07XG59XG5leHBvcnQge1xuICB1c2VVc2VyXG59O1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9dXNlVXNlci5qcy5tYXAiXSwibmFtZXMiOlsidXNlVXNlckNvbnRleHQiLCJ1c2VVc2VyIiwidXNlciIsImlzTG9hZGVkIiwiaXNTaWduZWRJbiJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/@clerk/clerk-react/dist/esm/hooks/useUser.js\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/@clerk/clerk-react/dist/esm/hooks/utils.js":
/*!*****************************************************************!*\
  !*** ./node_modules/@clerk/clerk-react/dist/esm/hooks/utils.js ***!
  \*****************************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   createGetToken: function() { return /* binding */ createGetToken; },\n/* harmony export */   createSignOut: function() { return /* binding */ createSignOut; }\n/* harmony export */ });\n\nconst clerkLoaded = (isomorphicClerk)=>{\n    return new Promise((resolve)=>{\n        if (isomorphicClerk.loaded) {\n            resolve();\n        }\n        isomorphicClerk.addOnLoaded(resolve);\n    });\n};\nconst createGetToken = (isomorphicClerk)=>{\n    return async (options)=>{\n        await clerkLoaded(isomorphicClerk);\n        if (!isomorphicClerk.session) {\n            return null;\n        }\n        return isomorphicClerk.session.getToken(options);\n    };\n};\nconst createSignOut = (isomorphicClerk)=>{\n    return async function() {\n        for(var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++){\n            args[_key] = arguments[_key];\n        }\n        await clerkLoaded(isomorphicClerk);\n        return isomorphicClerk.signOut(...args);\n    };\n};\n //# sourceMappingURL=utils.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL25vZGVfbW9kdWxlcy9AY2xlcmsvY2xlcmstcmVhY3QvZGlzdC9lc20vaG9va3MvdXRpbHMuanMiLCJtYXBwaW5ncyI6Ijs7Ozs7QUFBOEI7QUFDOUIsTUFBTUEsY0FBYyxDQUFDQztJQUNuQixPQUFPLElBQUlDLFFBQVEsQ0FBQ0M7UUFDbEIsSUFBSUYsZ0JBQWdCRyxNQUFNLEVBQUU7WUFDMUJEO1FBQ0Y7UUFDQUYsZ0JBQWdCSSxXQUFXLENBQUNGO0lBQzlCO0FBQ0Y7QUFDQSxNQUFNRyxpQkFBaUIsQ0FBQ0w7SUFDdEIsT0FBTyxPQUFPTTtRQUNaLE1BQU1QLFlBQVlDO1FBQ2xCLElBQUksQ0FBQ0EsZ0JBQWdCTyxPQUFPLEVBQUU7WUFDNUIsT0FBTztRQUNUO1FBQ0EsT0FBT1AsZ0JBQWdCTyxPQUFPLENBQUNDLFFBQVEsQ0FBQ0Y7SUFDMUM7QUFDRjtBQUNBLE1BQU1HLGdCQUFnQixDQUFDVDtJQUNyQixPQUFPO3lDQUFVVTtZQUFBQTs7UUFDZixNQUFNWCxZQUFZQztRQUNsQixPQUFPQSxnQkFBZ0JXLE9BQU8sSUFBSUQ7SUFDcEM7QUFDRjtBQUlFLENBQ0YsaUNBQWlDIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vX05fRS8uL25vZGVfbW9kdWxlcy9AY2xlcmsvY2xlcmstcmVhY3QvZGlzdC9lc20vaG9va3MvdXRpbHMuanM/NTRlNiJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgXCIuLi9jaHVuay0zVzVHNENZSS5qc1wiO1xuY29uc3QgY2xlcmtMb2FkZWQgPSAoaXNvbW9ycGhpY0NsZXJrKSA9PiB7XG4gIHJldHVybiBuZXcgUHJvbWlzZSgocmVzb2x2ZSkgPT4ge1xuICAgIGlmIChpc29tb3JwaGljQ2xlcmsubG9hZGVkKSB7XG4gICAgICByZXNvbHZlKCk7XG4gICAgfVxuICAgIGlzb21vcnBoaWNDbGVyay5hZGRPbkxvYWRlZChyZXNvbHZlKTtcbiAgfSk7XG59O1xuY29uc3QgY3JlYXRlR2V0VG9rZW4gPSAoaXNvbW9ycGhpY0NsZXJrKSA9PiB7XG4gIHJldHVybiBhc3luYyAob3B0aW9ucykgPT4ge1xuICAgIGF3YWl0IGNsZXJrTG9hZGVkKGlzb21vcnBoaWNDbGVyayk7XG4gICAgaWYgKCFpc29tb3JwaGljQ2xlcmsuc2Vzc2lvbikge1xuICAgICAgcmV0dXJuIG51bGw7XG4gICAgfVxuICAgIHJldHVybiBpc29tb3JwaGljQ2xlcmsuc2Vzc2lvbi5nZXRUb2tlbihvcHRpb25zKTtcbiAgfTtcbn07XG5jb25zdCBjcmVhdGVTaWduT3V0ID0gKGlzb21vcnBoaWNDbGVyaykgPT4ge1xuICByZXR1cm4gYXN5bmMgKC4uLmFyZ3MpID0+IHtcbiAgICBhd2FpdCBjbGVya0xvYWRlZChpc29tb3JwaGljQ2xlcmspO1xuICAgIHJldHVybiBpc29tb3JwaGljQ2xlcmsuc2lnbk91dCguLi5hcmdzKTtcbiAgfTtcbn07XG5leHBvcnQge1xuICBjcmVhdGVHZXRUb2tlbixcbiAgY3JlYXRlU2lnbk91dFxufTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXV0aWxzLmpzLm1hcCJdLCJuYW1lcyI6WyJjbGVya0xvYWRlZCIsImlzb21vcnBoaWNDbGVyayIsIlByb21pc2UiLCJyZXNvbHZlIiwibG9hZGVkIiwiYWRkT25Mb2FkZWQiLCJjcmVhdGVHZXRUb2tlbiIsIm9wdGlvbnMiLCJzZXNzaW9uIiwiZ2V0VG9rZW4iLCJjcmVhdGVTaWduT3V0IiwiYXJncyIsInNpZ25PdXQiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/@clerk/clerk-react/dist/esm/hooks/utils.js\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/@clerk/clerk-react/dist/esm/index.js":
/*!***********************************************************!*\
  !*** ./node_modules/@clerk/clerk-react/dist/esm/index.js ***!
  \***********************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   AuthenticateWithRedirectCallback: function() { return /* reexport safe */ _components__WEBPACK_IMPORTED_MODULE_2__.AuthenticateWithRedirectCallback; },\n/* harmony export */   ClerkLoaded: function() { return /* reexport safe */ _components__WEBPACK_IMPORTED_MODULE_2__.ClerkLoaded; },\n/* harmony export */   ClerkLoading: function() { return /* reexport safe */ _components__WEBPACK_IMPORTED_MODULE_2__.ClerkLoading; },\n/* harmony export */   ClerkProvider: function() { return /* reexport safe */ _contexts__WEBPACK_IMPORTED_MODULE_1__.ClerkProvider; },\n/* harmony export */   CreateOrganization: function() { return /* reexport safe */ _components__WEBPACK_IMPORTED_MODULE_2__.CreateOrganization; },\n/* harmony export */   EmailLinkErrorCode: function() { return /* reexport safe */ _errors__WEBPACK_IMPORTED_MODULE_4__.EmailLinkErrorCode; },\n/* harmony export */   MagicLinkErrorCode: function() { return /* reexport safe */ _errors__WEBPACK_IMPORTED_MODULE_4__.MagicLinkErrorCode; },\n/* harmony export */   MultisessionAppSupport: function() { return /* reexport safe */ _components__WEBPACK_IMPORTED_MODULE_2__.MultisessionAppSupport; },\n/* harmony export */   OrganizationList: function() { return /* reexport safe */ _components__WEBPACK_IMPORTED_MODULE_2__.OrganizationList; },\n/* harmony export */   OrganizationProfile: function() { return /* reexport safe */ _components__WEBPACK_IMPORTED_MODULE_2__.OrganizationProfile; },\n/* harmony export */   OrganizationSwitcher: function() { return /* reexport safe */ _components__WEBPACK_IMPORTED_MODULE_2__.OrganizationSwitcher; },\n/* harmony export */   Protect: function() { return /* reexport safe */ _components__WEBPACK_IMPORTED_MODULE_2__.Protect; },\n/* harmony export */   RedirectToCreateOrganization: function() { return /* reexport safe */ _components__WEBPACK_IMPORTED_MODULE_2__.RedirectToCreateOrganization; },\n/* harmony export */   RedirectToOrganizationProfile: function() { return /* reexport safe */ _components__WEBPACK_IMPORTED_MODULE_2__.RedirectToOrganizationProfile; },\n/* harmony export */   RedirectToSignIn: function() { return /* reexport safe */ _components__WEBPACK_IMPORTED_MODULE_2__.RedirectToSignIn; },\n/* harmony export */   RedirectToSignUp: function() { return /* reexport safe */ _components__WEBPACK_IMPORTED_MODULE_2__.RedirectToSignUp; },\n/* harmony export */   RedirectToUserProfile: function() { return /* reexport safe */ _components__WEBPACK_IMPORTED_MODULE_2__.RedirectToUserProfile; },\n/* harmony export */   SignIn: function() { return /* reexport safe */ _components__WEBPACK_IMPORTED_MODULE_2__.SignIn; },\n/* harmony export */   SignInButton: function() { return /* reexport safe */ _components__WEBPACK_IMPORTED_MODULE_2__.SignInButton; },\n/* harmony export */   SignInWithMetamaskButton: function() { return /* reexport safe */ _components__WEBPACK_IMPORTED_MODULE_2__.SignInWithMetamaskButton; },\n/* harmony export */   SignOutButton: function() { return /* reexport safe */ _components__WEBPACK_IMPORTED_MODULE_2__.SignOutButton; },\n/* harmony export */   SignUp: function() { return /* reexport safe */ _components__WEBPACK_IMPORTED_MODULE_2__.SignUp; },\n/* harmony export */   SignUpButton: function() { return /* reexport safe */ _components__WEBPACK_IMPORTED_MODULE_2__.SignUpButton; },\n/* harmony export */   SignedIn: function() { return /* reexport safe */ _components__WEBPACK_IMPORTED_MODULE_2__.SignedIn; },\n/* harmony export */   SignedOut: function() { return /* reexport safe */ _components__WEBPACK_IMPORTED_MODULE_2__.SignedOut; },\n/* harmony export */   UserButton: function() { return /* reexport safe */ _components__WEBPACK_IMPORTED_MODULE_2__.UserButton; },\n/* harmony export */   UserProfile: function() { return /* reexport safe */ _components__WEBPACK_IMPORTED_MODULE_2__.UserProfile; },\n/* harmony export */   WithClerk: function() { return /* reexport safe */ _components__WEBPACK_IMPORTED_MODULE_2__.WithClerk; },\n/* harmony export */   WithSession: function() { return /* reexport safe */ _components__WEBPACK_IMPORTED_MODULE_2__.WithSession; },\n/* harmony export */   WithUser: function() { return /* reexport safe */ _components__WEBPACK_IMPORTED_MODULE_2__.WithUser; },\n/* harmony export */   __internal__setErrorThrowerOptions: function() { return /* reexport safe */ _contexts__WEBPACK_IMPORTED_MODULE_1__.__internal__setErrorThrowerOptions; },\n/* harmony export */   isClerkAPIResponseError: function() { return /* reexport safe */ _errors__WEBPACK_IMPORTED_MODULE_4__.isClerkAPIResponseError; },\n/* harmony export */   isEmailLinkError: function() { return /* reexport safe */ _errors__WEBPACK_IMPORTED_MODULE_4__.isEmailLinkError; },\n/* harmony export */   isKnownError: function() { return /* reexport safe */ _errors__WEBPACK_IMPORTED_MODULE_4__.isKnownError; },\n/* harmony export */   isMagicLinkError: function() { return /* reexport safe */ _errors__WEBPACK_IMPORTED_MODULE_4__.isMagicLinkError; },\n/* harmony export */   isMetamaskError: function() { return /* reexport safe */ _errors__WEBPACK_IMPORTED_MODULE_4__.isMetamaskError; },\n/* harmony export */   useAuth: function() { return /* reexport safe */ _hooks__WEBPACK_IMPORTED_MODULE_3__.useAuth; },\n/* harmony export */   useClerk: function() { return /* reexport safe */ _hooks__WEBPACK_IMPORTED_MODULE_3__.useClerk; },\n/* harmony export */   useEmailLink: function() { return /* reexport safe */ _hooks_useEmailLink__WEBPACK_IMPORTED_MODULE_5__.useEmailLink; },\n/* harmony export */   useMagicLink: function() { return /* reexport safe */ _hooks_useMagicLink__WEBPACK_IMPORTED_MODULE_6__.useMagicLink; },\n/* harmony export */   useOrganization: function() { return /* reexport safe */ _hooks__WEBPACK_IMPORTED_MODULE_3__.useOrganization; },\n/* harmony export */   useOrganizationList: function() { return /* reexport safe */ _hooks__WEBPACK_IMPORTED_MODULE_3__.useOrganizationList; },\n/* harmony export */   useOrganizations: function() { return /* reexport safe */ _hooks__WEBPACK_IMPORTED_MODULE_3__.useOrganizations; },\n/* harmony export */   useSession: function() { return /* reexport safe */ _hooks__WEBPACK_IMPORTED_MODULE_3__.useSession; },\n/* harmony export */   useSessionList: function() { return /* reexport safe */ _hooks__WEBPACK_IMPORTED_MODULE_3__.useSessionList; },\n/* harmony export */   useSignIn: function() { return /* reexport safe */ _hooks__WEBPACK_IMPORTED_MODULE_3__.useSignIn; },\n/* harmony export */   useSignUp: function() { return /* reexport safe */ _hooks__WEBPACK_IMPORTED_MODULE_3__.useSignUp; },\n/* harmony export */   useUser: function() { return /* reexport safe */ _hooks__WEBPACK_IMPORTED_MODULE_3__.useUser; },\n/* harmony export */   withClerk: function() { return /* reexport safe */ _components__WEBPACK_IMPORTED_MODULE_2__.withClerk; },\n/* harmony export */   withSession: function() { return /* reexport safe */ _components__WEBPACK_IMPORTED_MODULE_2__.withSession; },\n/* harmony export */   withUser: function() { return /* reexport safe */ _components__WEBPACK_IMPORTED_MODULE_2__.withUser; }\n/* harmony export */ });\n/* harmony import */ var _polyfills__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./polyfills */ \"(app-pages-browser)/./node_modules/@clerk/clerk-react/dist/esm/polyfills.js\");\n/* harmony import */ var _polyfills__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_polyfills__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var _contexts__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./contexts */ \"(app-pages-browser)/./node_modules/@clerk/clerk-react/dist/esm/contexts/index.js\");\n/* harmony import */ var _components__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./components */ \"(app-pages-browser)/./node_modules/@clerk/clerk-react/dist/esm/components/index.js\");\n/* harmony import */ var _hooks__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./hooks */ \"(app-pages-browser)/./node_modules/@clerk/clerk-react/dist/esm/hooks/index.js\");\n/* harmony import */ var _errors__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./errors */ \"(app-pages-browser)/./node_modules/@clerk/shared/dist/error.mjs\");\n/* harmony import */ var _hooks_useMagicLink__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./hooks/useMagicLink */ \"(app-pages-browser)/./node_modules/@clerk/clerk-react/dist/esm/hooks/useMagicLink.js\");\n/* harmony import */ var _hooks_useEmailLink__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./hooks/useEmailLink */ \"(app-pages-browser)/./node_modules/@clerk/clerk-react/dist/esm/hooks/useEmailLink.js\");\n\n\n\n\n\n\n\n\n //# sourceMappingURL=index.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL25vZGVfbW9kdWxlcy9AY2xlcmsvY2xlcmstcmVhY3QvZGlzdC9lc20vaW5kZXguanMiLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7QUFBNkI7QUFDUjtBQUNNO0FBQ0U7QUFDTDtBQVNOO0FBQ2tDO0FBQ0E7QUFXbEQsQ0FDRixpQ0FBaUMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9fTl9FLy4vbm9kZV9tb2R1bGVzL0BjbGVyay9jbGVyay1yZWFjdC9kaXN0L2VzbS9pbmRleC5qcz82YTA5Il0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBcIi4vY2h1bmstM1c1RzRDWUkuanNcIjtcbmltcG9ydCBcIi4vcG9seWZpbGxzXCI7XG5leHBvcnQgKiBmcm9tIFwiLi9jb250ZXh0c1wiO1xuZXhwb3J0ICogZnJvbSBcIi4vY29tcG9uZW50c1wiO1xuZXhwb3J0ICogZnJvbSBcIi4vaG9va3NcIjtcbmltcG9ydCB7XG4gIE1hZ2ljTGlua0Vycm9yQ29kZSxcbiAgRW1haWxMaW5rRXJyb3JDb2RlLFxuICBpc0NsZXJrQVBJUmVzcG9uc2VFcnJvcixcbiAgaXNLbm93bkVycm9yLFxuICBpc01ldGFtYXNrRXJyb3IsXG4gIGlzTWFnaWNMaW5rRXJyb3IsXG4gIGlzRW1haWxMaW5rRXJyb3Jcbn0gZnJvbSBcIi4vZXJyb3JzXCI7XG5pbXBvcnQgeyB1c2VNYWdpY0xpbmsgfSBmcm9tIFwiLi9ob29rcy91c2VNYWdpY0xpbmtcIjtcbmltcG9ydCB7IHVzZUVtYWlsTGluayB9IGZyb20gXCIuL2hvb2tzL3VzZUVtYWlsTGlua1wiO1xuZXhwb3J0IHtcbiAgRW1haWxMaW5rRXJyb3JDb2RlLFxuICBNYWdpY0xpbmtFcnJvckNvZGUsXG4gIGlzQ2xlcmtBUElSZXNwb25zZUVycm9yLFxuICBpc0VtYWlsTGlua0Vycm9yLFxuICBpc0tub3duRXJyb3IsXG4gIGlzTWFnaWNMaW5rRXJyb3IsXG4gIGlzTWV0YW1hc2tFcnJvcixcbiAgdXNlRW1haWxMaW5rLFxuICB1c2VNYWdpY0xpbmtcbn07XG4vLyMgc291cmNlTWFwcGluZ1VSTD1pbmRleC5qcy5tYXAiXSwibmFtZXMiOlsiTWFnaWNMaW5rRXJyb3JDb2RlIiwiRW1haWxMaW5rRXJyb3JDb2RlIiwiaXNDbGVya0FQSVJlc3BvbnNlRXJyb3IiLCJpc0tub3duRXJyb3IiLCJpc01ldGFtYXNrRXJyb3IiLCJpc01hZ2ljTGlua0Vycm9yIiwiaXNFbWFpbExpbmtFcnJvciIsInVzZU1hZ2ljTGluayIsInVzZUVtYWlsTGluayJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/@clerk/clerk-react/dist/esm/index.js\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/@clerk/clerk-react/dist/esm/isomorphicClerk.js":
/*!*********************************************************************!*\
  !*** ./node_modules/@clerk/clerk-react/dist/esm/isomorphicClerk.js ***!
  \*********************************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": function() { return /* binding */ IsomorphicClerk; }\n/* harmony export */ });\n/* harmony import */ var _chunk_3W5G4CYI_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./chunk-3W5G4CYI.js */ \"(app-pages-browser)/./node_modules/@clerk/clerk-react/dist/esm/chunk-3W5G4CYI.js\");\n/* harmony import */ var _clerk_shared_browser__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @clerk/shared/browser */ \"(app-pages-browser)/./node_modules/@clerk/shared/dist/browser.mjs\");\n/* harmony import */ var _clerk_shared_deprecated__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @clerk/shared/deprecated */ \"(app-pages-browser)/./node_modules/@clerk/shared/dist/deprecated.mjs\");\n/* harmony import */ var _clerk_shared_handleValueOrFn__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @clerk/shared/handleValueOrFn */ \"(app-pages-browser)/./node_modules/@clerk/shared/dist/handleValueOrFn.mjs\");\n/* harmony import */ var _errors__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./errors */ \"(app-pages-browser)/./node_modules/@clerk/clerk-react/dist/esm/errors.js\");\n/* harmony import */ var _utils__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./utils */ \"(app-pages-browser)/./node_modules/@clerk/clerk-react/dist/esm/utils/isConstructor.js\");\n/* harmony import */ var _utils__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./utils */ \"(app-pages-browser)/./node_modules/@clerk/clerk-react/dist/esm/utils/loadClerkJsScript.js\");\n\nvar _loaded, _domain, _proxyUrl, _frontendApi, _publishableKey, _instance;\n\n\n\n\n\nconst _IsomorphicClerk = class _IsomorphicClerk {\n    get publishableKey() {\n        return (0,_chunk_3W5G4CYI_js__WEBPACK_IMPORTED_MODULE_3__.__privateGet)(this, _publishableKey);\n    }\n    get loaded() {\n        return (0,_chunk_3W5G4CYI_js__WEBPACK_IMPORTED_MODULE_3__.__privateGet)(this, _loaded);\n    }\n    static getOrCreateInstance(options) {\n        if (!(0,_clerk_shared_browser__WEBPACK_IMPORTED_MODULE_0__.inBrowser)() || !(0,_chunk_3W5G4CYI_js__WEBPACK_IMPORTED_MODULE_3__.__privateGet)(this, _instance) || options.Clerk && (0,_chunk_3W5G4CYI_js__WEBPACK_IMPORTED_MODULE_3__.__privateGet)(this, _instance).Clerk !== options.Clerk) {\n            (0,_chunk_3W5G4CYI_js__WEBPACK_IMPORTED_MODULE_3__.__privateSet)(this, _instance, new _IsomorphicClerk(options));\n        }\n        return (0,_chunk_3W5G4CYI_js__WEBPACK_IMPORTED_MODULE_3__.__privateGet)(this, _instance);\n    }\n    get domain() {\n        if ( true && window.location) {\n            return (0,_clerk_shared_handleValueOrFn__WEBPACK_IMPORTED_MODULE_2__.handleValueOrFn)((0,_chunk_3W5G4CYI_js__WEBPACK_IMPORTED_MODULE_3__.__privateGet)(this, _domain), new URL(window.location.href), \"\");\n        }\n        if (typeof (0,_chunk_3W5G4CYI_js__WEBPACK_IMPORTED_MODULE_3__.__privateGet)(this, _domain) === \"function\") {\n            throw new Error(_errors__WEBPACK_IMPORTED_MODULE_4__.unsupportedNonBrowserDomainOrProxyUrlFunction);\n        }\n        return (0,_chunk_3W5G4CYI_js__WEBPACK_IMPORTED_MODULE_3__.__privateGet)(this, _domain) || \"\";\n    }\n    get proxyUrl() {\n        if ( true && window.location) {\n            return (0,_clerk_shared_handleValueOrFn__WEBPACK_IMPORTED_MODULE_2__.handleValueOrFn)((0,_chunk_3W5G4CYI_js__WEBPACK_IMPORTED_MODULE_3__.__privateGet)(this, _proxyUrl), new URL(window.location.href), \"\");\n        }\n        if (typeof (0,_chunk_3W5G4CYI_js__WEBPACK_IMPORTED_MODULE_3__.__privateGet)(this, _proxyUrl) === \"function\") {\n            throw new Error(_errors__WEBPACK_IMPORTED_MODULE_4__.unsupportedNonBrowserDomainOrProxyUrlFunction);\n        }\n        return (0,_chunk_3W5G4CYI_js__WEBPACK_IMPORTED_MODULE_3__.__privateGet)(this, _proxyUrl) || \"\";\n    }\n    get sdkMetadata() {\n        var _this_clerkjs;\n        return ((_this_clerkjs = this.clerkjs) === null || _this_clerkjs === void 0 ? void 0 : _this_clerkjs.sdkMetadata) || this.options.sdkMetadata || void 0;\n    }\n    get instanceType() {\n        var _this_clerkjs;\n        return (_this_clerkjs = this.clerkjs) === null || _this_clerkjs === void 0 ? void 0 : _this_clerkjs.instanceType;\n    }\n    get frontendApi() {\n        var _this_clerkjs;\n        return ((_this_clerkjs = this.clerkjs) === null || _this_clerkjs === void 0 ? void 0 : _this_clerkjs.frontendApi) || (0,_chunk_3W5G4CYI_js__WEBPACK_IMPORTED_MODULE_3__.__privateGet)(this, _frontendApi) || \"\";\n    }\n    get isStandardBrowser() {\n        var _this_clerkjs;\n        return ((_this_clerkjs = this.clerkjs) === null || _this_clerkjs === void 0 ? void 0 : _this_clerkjs.isStandardBrowser) || this.options.standardBrowser || false;\n    }\n    get isSatellite() {\n        if ( true && window.location) {\n            return (0,_clerk_shared_handleValueOrFn__WEBPACK_IMPORTED_MODULE_2__.handleValueOrFn)(this.options.isSatellite, new URL(window.location.href), false);\n        }\n        if (typeof this.options.isSatellite === \"function\") {\n            throw new Error(_errors__WEBPACK_IMPORTED_MODULE_4__.unsupportedNonBrowserDomainOrProxyUrlFunction);\n        }\n        return false;\n    }\n    async loadClerkJS() {\n        if (this.mode !== \"browser\" || (0,_chunk_3W5G4CYI_js__WEBPACK_IMPORTED_MODULE_3__.__privateGet)(this, _loaded)) {\n            return;\n        }\n        if (true) {\n            window.__clerk_frontend_api = this.frontendApi;\n            window.__clerk_publishable_key = this.publishableKey;\n            window.__clerk_proxy_url = this.proxyUrl;\n            window.__clerk_domain = this.domain;\n        }\n        try {\n            var _global_Clerk, _global_Clerk1;\n            if (this.Clerk) {\n                let c;\n                if ((0,_utils__WEBPACK_IMPORTED_MODULE_5__.isConstructor)(this.Clerk)) {\n                    c = new this.Clerk(this.publishableKey || this.frontendApi || \"\", {\n                        proxyUrl: this.proxyUrl,\n                        domain: this.domain\n                    });\n                    await c.load(this.options);\n                } else {\n                    c = this.Clerk;\n                    if (!c.isReady()) {\n                        await c.load(this.options);\n                    }\n                }\n                __webpack_require__.g.Clerk = c;\n            } else {\n                if (!__webpack_require__.g.Clerk) {\n                    await (0,_utils__WEBPACK_IMPORTED_MODULE_6__.loadClerkJsScript)({\n                        ...this.options,\n                        frontendApi: this.frontendApi,\n                        publishableKey: this.publishableKey,\n                        proxyUrl: this.proxyUrl,\n                        domain: this.domain\n                    });\n                }\n                if (!__webpack_require__.g.Clerk) {\n                    throw new Error(\"Failed to download latest ClerkJS. Contact support@clerk.com.\");\n                }\n                await __webpack_require__.g.Clerk.load(this.options);\n            }\n            var _this_options_sdkMetadata;\n            __webpack_require__.g.Clerk.sdkMetadata = (_this_options_sdkMetadata = this.options.sdkMetadata) !== null && _this_options_sdkMetadata !== void 0 ? _this_options_sdkMetadata : {\n                name: \"@clerk/clerk-react\",\n                version: \"4.30.3\"\n            };\n            if (((_global_Clerk = __webpack_require__.g.Clerk) === null || _global_Clerk === void 0 ? void 0 : _global_Clerk.loaded) || ((_global_Clerk1 = __webpack_require__.g.Clerk) === null || _global_Clerk1 === void 0 ? void 0 : _global_Clerk1.isReady())) {\n                return this.hydrateClerkJS(__webpack_require__.g.Clerk);\n            }\n            return;\n        } catch (err) {\n            const error = err;\n            if (false) {} else {\n                throw err;\n            }\n            return;\n        }\n    }\n    get version() {\n        var _this_clerkjs;\n        return (_this_clerkjs = this.clerkjs) === null || _this_clerkjs === void 0 ? void 0 : _this_clerkjs.version;\n    }\n    get client() {\n        if (this.clerkjs) {\n            return this.clerkjs.client;\n        } else {\n            return void 0;\n        }\n    }\n    get session() {\n        if (this.clerkjs) {\n            return this.clerkjs.session;\n        } else {\n            return void 0;\n        }\n    }\n    get user() {\n        if (this.clerkjs) {\n            return this.clerkjs.user;\n        } else {\n            return void 0;\n        }\n    }\n    get organization() {\n        if (this.clerkjs) {\n            return this.clerkjs.organization;\n        } else {\n            return void 0;\n        }\n    }\n    get __unstable__environment() {\n        if (this.clerkjs) {\n            return this.clerkjs.__unstable__environment;\n        } else {\n            return void 0;\n        }\n    }\n    __unstable__setEnvironment() {\n        for(var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++){\n            args[_key] = arguments[_key];\n        }\n        if (this.clerkjs && \"__unstable__setEnvironment\" in this.clerkjs) {\n            this.clerkjs.__unstable__setEnvironment(args);\n        } else {\n            return void 0;\n        }\n    }\n    constructor(options){\n        var _this = this;\n        this.clerkjs = null;\n        this.preopenSignIn = null;\n        this.preopenSignUp = null;\n        this.preopenUserProfile = null;\n        this.preopenOrganizationProfile = null;\n        this.preopenCreateOrganization = null;\n        this.premountSignInNodes = /* @__PURE__ */ new Map();\n        this.premountSignUpNodes = /* @__PURE__ */ new Map();\n        this.premountUserProfileNodes = /* @__PURE__ */ new Map();\n        this.premountUserButtonNodes = /* @__PURE__ */ new Map();\n        this.premountOrganizationProfileNodes = /* @__PURE__ */ new Map();\n        this.premountCreateOrganizationNodes = /* @__PURE__ */ new Map();\n        this.premountOrganizationSwitcherNodes = /* @__PURE__ */ new Map();\n        this.premountOrganizationListNodes = /* @__PURE__ */ new Map();\n        this.premountMethodCalls = /* @__PURE__ */ new Map();\n        this.loadedListeners = [];\n        (0,_chunk_3W5G4CYI_js__WEBPACK_IMPORTED_MODULE_3__.__privateAdd)(this, _loaded, false);\n        (0,_chunk_3W5G4CYI_js__WEBPACK_IMPORTED_MODULE_3__.__privateAdd)(this, _domain, void 0);\n        (0,_chunk_3W5G4CYI_js__WEBPACK_IMPORTED_MODULE_3__.__privateAdd)(this, _proxyUrl, void 0);\n        (0,_chunk_3W5G4CYI_js__WEBPACK_IMPORTED_MODULE_3__.__privateAdd)(this, _frontendApi, void 0);\n        (0,_chunk_3W5G4CYI_js__WEBPACK_IMPORTED_MODULE_3__.__privateAdd)(this, _publishableKey, void 0);\n        this.isReady = ()=>{\n            var _this_clerkjs;\n            return Boolean((_this_clerkjs = this.clerkjs) === null || _this_clerkjs === void 0 ? void 0 : _this_clerkjs.isReady());\n        };\n        this.buildSignInUrl = (opts)=>{\n            const callback = ()=>{\n                var _this_clerkjs;\n                return ((_this_clerkjs = this.clerkjs) === null || _this_clerkjs === void 0 ? void 0 : _this_clerkjs.buildSignInUrl(opts)) || \"\";\n            };\n            if (this.clerkjs && (0,_chunk_3W5G4CYI_js__WEBPACK_IMPORTED_MODULE_3__.__privateGet)(this, _loaded)) {\n                return callback();\n            } else {\n                this.premountMethodCalls.set(\"buildSignInUrl\", callback);\n            }\n        };\n        this.buildSignUpUrl = (opts)=>{\n            const callback = ()=>{\n                var _this_clerkjs;\n                return ((_this_clerkjs = this.clerkjs) === null || _this_clerkjs === void 0 ? void 0 : _this_clerkjs.buildSignUpUrl(opts)) || \"\";\n            };\n            if (this.clerkjs && (0,_chunk_3W5G4CYI_js__WEBPACK_IMPORTED_MODULE_3__.__privateGet)(this, _loaded)) {\n                return callback();\n            } else {\n                this.premountMethodCalls.set(\"buildSignUpUrl\", callback);\n            }\n        };\n        this.buildUserProfileUrl = ()=>{\n            const callback = ()=>{\n                var _this_clerkjs;\n                return ((_this_clerkjs = this.clerkjs) === null || _this_clerkjs === void 0 ? void 0 : _this_clerkjs.buildUserProfileUrl()) || \"\";\n            };\n            if (this.clerkjs && (0,_chunk_3W5G4CYI_js__WEBPACK_IMPORTED_MODULE_3__.__privateGet)(this, _loaded)) {\n                return callback();\n            } else {\n                this.premountMethodCalls.set(\"buildUserProfileUrl\", callback);\n            }\n        };\n        this.buildCreateOrganizationUrl = ()=>{\n            const callback = ()=>{\n                var _this_clerkjs;\n                return ((_this_clerkjs = this.clerkjs) === null || _this_clerkjs === void 0 ? void 0 : _this_clerkjs.buildCreateOrganizationUrl()) || \"\";\n            };\n            if (this.clerkjs && (0,_chunk_3W5G4CYI_js__WEBPACK_IMPORTED_MODULE_3__.__privateGet)(this, _loaded)) {\n                return callback();\n            } else {\n                this.premountMethodCalls.set(\"buildCreateOrganizationUrl\", callback);\n            }\n        };\n        this.buildOrganizationProfileUrl = ()=>{\n            const callback = ()=>{\n                var _this_clerkjs;\n                return ((_this_clerkjs = this.clerkjs) === null || _this_clerkjs === void 0 ? void 0 : _this_clerkjs.buildOrganizationProfileUrl()) || \"\";\n            };\n            if (this.clerkjs && (0,_chunk_3W5G4CYI_js__WEBPACK_IMPORTED_MODULE_3__.__privateGet)(this, _loaded)) {\n                return callback();\n            } else {\n                this.premountMethodCalls.set(\"buildOrganizationProfileUrl\", callback);\n            }\n        };\n        this.buildHomeUrl = ()=>{\n            const callback = ()=>{\n                var _this_clerkjs;\n                return ((_this_clerkjs = this.clerkjs) === null || _this_clerkjs === void 0 ? void 0 : _this_clerkjs.buildHomeUrl()) || \"\";\n            };\n            if (this.clerkjs && (0,_chunk_3W5G4CYI_js__WEBPACK_IMPORTED_MODULE_3__.__privateGet)(this, _loaded)) {\n                return callback();\n            } else {\n                this.premountMethodCalls.set(\"buildHomeUrl\", callback);\n            }\n        };\n        this.buildUrlWithAuth = (to, opts)=>{\n            const callback = ()=>{\n                var _this_clerkjs;\n                return ((_this_clerkjs = this.clerkjs) === null || _this_clerkjs === void 0 ? void 0 : _this_clerkjs.buildUrlWithAuth(to, opts)) || \"\";\n            };\n            if (this.clerkjs && (0,_chunk_3W5G4CYI_js__WEBPACK_IMPORTED_MODULE_3__.__privateGet)(this, _loaded)) {\n                return callback();\n            } else {\n                this.premountMethodCalls.set(\"buildUrlWithAuth\", callback);\n            }\n        };\n        this.handleUnauthenticated = ()=>{\n            const callback = ()=>{\n                var _this_clerkjs;\n                return (_this_clerkjs = this.clerkjs) === null || _this_clerkjs === void 0 ? void 0 : _this_clerkjs.handleUnauthenticated();\n            };\n            if (this.clerkjs && (0,_chunk_3W5G4CYI_js__WEBPACK_IMPORTED_MODULE_3__.__privateGet)(this, _loaded)) {\n                void callback();\n            } else {\n                this.premountMethodCalls.set(\"handleUnauthenticated\", callback);\n            }\n        };\n        this.addOnLoaded = (cb)=>{\n            this.loadedListeners.push(cb);\n        };\n        this.emitLoaded = ()=>{\n            this.loadedListeners.forEach((cb)=>cb());\n            this.loadedListeners = [];\n        };\n        this.hydrateClerkJS = (clerkjs)=>{\n            if (!clerkjs) {\n                throw new Error(\"Failed to hydrate latest Clerk JS\");\n            }\n            this.clerkjs = clerkjs;\n            this.premountMethodCalls.forEach((cb)=>cb());\n            if (this.preopenSignIn !== null) {\n                clerkjs.openSignIn(this.preopenSignIn);\n            }\n            if (this.preopenSignUp !== null) {\n                clerkjs.openSignUp(this.preopenSignUp);\n            }\n            if (this.preopenUserProfile !== null) {\n                clerkjs.openUserProfile(this.preopenUserProfile);\n            }\n            if (this.preopenOrganizationProfile !== null) {\n                clerkjs.openOrganizationProfile(this.preopenOrganizationProfile);\n            }\n            if (this.preopenCreateOrganization !== null) {\n                clerkjs.openCreateOrganization(this.preopenCreateOrganization);\n            }\n            this.premountSignInNodes.forEach((props, node)=>{\n                clerkjs.mountSignIn(node, props);\n            });\n            this.premountSignUpNodes.forEach((props, node)=>{\n                clerkjs.mountSignUp(node, props);\n            });\n            this.premountUserProfileNodes.forEach((props, node)=>{\n                clerkjs.mountUserProfile(node, props);\n            });\n            this.premountUserButtonNodes.forEach((props, node)=>{\n                clerkjs.mountUserButton(node, props);\n            });\n            this.premountOrganizationListNodes.forEach((props, node)=>{\n                clerkjs.mountOrganizationList(node, props);\n            });\n            (0,_chunk_3W5G4CYI_js__WEBPACK_IMPORTED_MODULE_3__.__privateSet)(this, _loaded, true);\n            this.emitLoaded();\n            return this.clerkjs;\n        };\n        this.__unstable__updateProps = (props)=>{\n            if (this.clerkjs && \"__unstable__updateProps\" in this.clerkjs) {\n                this.clerkjs.__unstable__updateProps(props);\n            } else {\n                return void 0;\n            }\n        };\n        /**\n     * `setActive` can be used to set the active session and/or organization.\n     */ this.setActive = (param)=>{\n            let { session, organization, beforeEmit } = param;\n            if (this.clerkjs) {\n                return this.clerkjs.setActive({\n                    session,\n                    organization,\n                    beforeEmit\n                });\n            } else {\n                return Promise.reject();\n            }\n        };\n        this.setSession = (session, beforeEmit)=>{\n            (0,_clerk_shared_deprecated__WEBPACK_IMPORTED_MODULE_1__.deprecated)(\"setSession\", \"Use `Clerk.setActive` instead\");\n            return this.setActive({\n                session,\n                beforeEmit\n            });\n        };\n        this.openSignIn = (props)=>{\n            if (this.clerkjs && (0,_chunk_3W5G4CYI_js__WEBPACK_IMPORTED_MODULE_3__.__privateGet)(this, _loaded)) {\n                this.clerkjs.openSignIn(props);\n            } else {\n                this.preopenSignIn = props;\n            }\n        };\n        this.closeSignIn = ()=>{\n            if (this.clerkjs && (0,_chunk_3W5G4CYI_js__WEBPACK_IMPORTED_MODULE_3__.__privateGet)(this, _loaded)) {\n                this.clerkjs.closeSignIn();\n            } else {\n                this.preopenSignIn = null;\n            }\n        };\n        this.openUserProfile = (props)=>{\n            if (this.clerkjs && (0,_chunk_3W5G4CYI_js__WEBPACK_IMPORTED_MODULE_3__.__privateGet)(this, _loaded)) {\n                this.clerkjs.openUserProfile(props);\n            } else {\n                this.preopenUserProfile = props;\n            }\n        };\n        this.closeUserProfile = ()=>{\n            if (this.clerkjs && (0,_chunk_3W5G4CYI_js__WEBPACK_IMPORTED_MODULE_3__.__privateGet)(this, _loaded)) {\n                this.clerkjs.closeUserProfile();\n            } else {\n                this.preopenUserProfile = null;\n            }\n        };\n        this.openOrganizationProfile = (props)=>{\n            if (this.clerkjs && (0,_chunk_3W5G4CYI_js__WEBPACK_IMPORTED_MODULE_3__.__privateGet)(this, _loaded)) {\n                this.clerkjs.openOrganizationProfile(props);\n            } else {\n                this.preopenOrganizationProfile = props;\n            }\n        };\n        this.closeOrganizationProfile = ()=>{\n            if (this.clerkjs && (0,_chunk_3W5G4CYI_js__WEBPACK_IMPORTED_MODULE_3__.__privateGet)(this, _loaded)) {\n                this.clerkjs.closeOrganizationProfile();\n            } else {\n                this.preopenOrganizationProfile = null;\n            }\n        };\n        this.openCreateOrganization = (props)=>{\n            if (this.clerkjs && (0,_chunk_3W5G4CYI_js__WEBPACK_IMPORTED_MODULE_3__.__privateGet)(this, _loaded)) {\n                this.clerkjs.openCreateOrganization(props);\n            } else {\n                this.preopenCreateOrganization = props;\n            }\n        };\n        this.closeCreateOrganization = ()=>{\n            if (this.clerkjs && (0,_chunk_3W5G4CYI_js__WEBPACK_IMPORTED_MODULE_3__.__privateGet)(this, _loaded)) {\n                this.clerkjs.closeCreateOrganization();\n            } else {\n                this.preopenCreateOrganization = null;\n            }\n        };\n        this.openSignUp = (props)=>{\n            if (this.clerkjs && (0,_chunk_3W5G4CYI_js__WEBPACK_IMPORTED_MODULE_3__.__privateGet)(this, _loaded)) {\n                this.clerkjs.openSignUp(props);\n            } else {\n                this.preopenSignUp = props;\n            }\n        };\n        this.closeSignUp = ()=>{\n            if (this.clerkjs && (0,_chunk_3W5G4CYI_js__WEBPACK_IMPORTED_MODULE_3__.__privateGet)(this, _loaded)) {\n                this.clerkjs.closeSignUp();\n            } else {\n                this.preopenSignUp = null;\n            }\n        };\n        this.mountSignIn = (node, props)=>{\n            if (this.clerkjs && (0,_chunk_3W5G4CYI_js__WEBPACK_IMPORTED_MODULE_3__.__privateGet)(this, _loaded)) {\n                this.clerkjs.mountSignIn(node, props);\n            } else {\n                this.premountSignInNodes.set(node, props);\n            }\n        };\n        this.unmountSignIn = (node)=>{\n            if (this.clerkjs && (0,_chunk_3W5G4CYI_js__WEBPACK_IMPORTED_MODULE_3__.__privateGet)(this, _loaded)) {\n                this.clerkjs.unmountSignIn(node);\n            } else {\n                this.premountSignInNodes.delete(node);\n            }\n        };\n        this.mountSignUp = (node, props)=>{\n            if (this.clerkjs && (0,_chunk_3W5G4CYI_js__WEBPACK_IMPORTED_MODULE_3__.__privateGet)(this, _loaded)) {\n                this.clerkjs.mountSignUp(node, props);\n            } else {\n                this.premountSignUpNodes.set(node, props);\n            }\n        };\n        this.unmountSignUp = (node)=>{\n            if (this.clerkjs && (0,_chunk_3W5G4CYI_js__WEBPACK_IMPORTED_MODULE_3__.__privateGet)(this, _loaded)) {\n                this.clerkjs.unmountSignUp(node);\n            } else {\n                this.premountSignUpNodes.delete(node);\n            }\n        };\n        this.mountUserProfile = (node, props)=>{\n            if (this.clerkjs && (0,_chunk_3W5G4CYI_js__WEBPACK_IMPORTED_MODULE_3__.__privateGet)(this, _loaded)) {\n                this.clerkjs.mountUserProfile(node, props);\n            } else {\n                this.premountUserProfileNodes.set(node, props);\n            }\n        };\n        this.unmountUserProfile = (node)=>{\n            if (this.clerkjs && (0,_chunk_3W5G4CYI_js__WEBPACK_IMPORTED_MODULE_3__.__privateGet)(this, _loaded)) {\n                this.clerkjs.unmountUserProfile(node);\n            } else {\n                this.premountUserProfileNodes.delete(node);\n            }\n        };\n        this.mountOrganizationProfile = (node, props)=>{\n            if (this.clerkjs && (0,_chunk_3W5G4CYI_js__WEBPACK_IMPORTED_MODULE_3__.__privateGet)(this, _loaded)) {\n                this.clerkjs.mountOrganizationProfile(node, props);\n            } else {\n                this.premountOrganizationProfileNodes.set(node, props);\n            }\n        };\n        this.unmountOrganizationProfile = (node)=>{\n            if (this.clerkjs && (0,_chunk_3W5G4CYI_js__WEBPACK_IMPORTED_MODULE_3__.__privateGet)(this, _loaded)) {\n                this.clerkjs.unmountOrganizationProfile(node);\n            } else {\n                this.premountOrganizationProfileNodes.delete(node);\n            }\n        };\n        this.mountCreateOrganization = (node, props)=>{\n            if (this.clerkjs && (0,_chunk_3W5G4CYI_js__WEBPACK_IMPORTED_MODULE_3__.__privateGet)(this, _loaded)) {\n                this.clerkjs.mountCreateOrganization(node, props);\n            } else {\n                this.premountCreateOrganizationNodes.set(node, props);\n            }\n        };\n        this.unmountCreateOrganization = (node)=>{\n            if (this.clerkjs && (0,_chunk_3W5G4CYI_js__WEBPACK_IMPORTED_MODULE_3__.__privateGet)(this, _loaded)) {\n                this.clerkjs.unmountCreateOrganization(node);\n            } else {\n                this.premountCreateOrganizationNodes.delete(node);\n            }\n        };\n        this.mountOrganizationSwitcher = (node, props)=>{\n            if (this.clerkjs && (0,_chunk_3W5G4CYI_js__WEBPACK_IMPORTED_MODULE_3__.__privateGet)(this, _loaded)) {\n                this.clerkjs.mountOrganizationSwitcher(node, props);\n            } else {\n                this.premountOrganizationSwitcherNodes.set(node, props);\n            }\n        };\n        this.unmountOrganizationSwitcher = (node)=>{\n            if (this.clerkjs && (0,_chunk_3W5G4CYI_js__WEBPACK_IMPORTED_MODULE_3__.__privateGet)(this, _loaded)) {\n                this.clerkjs.unmountOrganizationSwitcher(node);\n            } else {\n                this.premountOrganizationSwitcherNodes.delete(node);\n            }\n        };\n        this.mountOrganizationList = (node, props)=>{\n            if (this.clerkjs && (0,_chunk_3W5G4CYI_js__WEBPACK_IMPORTED_MODULE_3__.__privateGet)(this, _loaded)) {\n                this.clerkjs.mountOrganizationList(node, props);\n            } else {\n                this.premountOrganizationListNodes.set(node, props);\n            }\n        };\n        this.unmountOrganizationList = (node)=>{\n            if (this.clerkjs && (0,_chunk_3W5G4CYI_js__WEBPACK_IMPORTED_MODULE_3__.__privateGet)(this, _loaded)) {\n                this.clerkjs.unmountOrganizationList(node);\n            } else {\n                this.premountOrganizationListNodes.delete(node);\n            }\n        };\n        this.mountUserButton = (node, userButtonProps)=>{\n            if (this.clerkjs && (0,_chunk_3W5G4CYI_js__WEBPACK_IMPORTED_MODULE_3__.__privateGet)(this, _loaded)) {\n                this.clerkjs.mountUserButton(node, userButtonProps);\n            } else {\n                this.premountUserButtonNodes.set(node, userButtonProps);\n            }\n        };\n        this.unmountUserButton = (node)=>{\n            if (this.clerkjs && (0,_chunk_3W5G4CYI_js__WEBPACK_IMPORTED_MODULE_3__.__privateGet)(this, _loaded)) {\n                this.clerkjs.unmountUserButton(node);\n            } else {\n                this.premountUserButtonNodes.delete(node);\n            }\n        };\n        this.addListener = (listener)=>{\n            const callback = ()=>{\n                var _this_clerkjs;\n                return (_this_clerkjs = this.clerkjs) === null || _this_clerkjs === void 0 ? void 0 : _this_clerkjs.addListener(listener);\n            };\n            if (this.clerkjs) {\n                return callback();\n            } else {\n                this.premountMethodCalls.set(\"addListener\", callback);\n                return ()=>this.premountMethodCalls.delete(\"addListener\");\n            }\n        };\n        this.navigate = (to)=>{\n            const callback = ()=>{\n                var _this_clerkjs;\n                return (_this_clerkjs = this.clerkjs) === null || _this_clerkjs === void 0 ? void 0 : _this_clerkjs.navigate(to);\n            };\n            if (this.clerkjs && (0,_chunk_3W5G4CYI_js__WEBPACK_IMPORTED_MODULE_3__.__privateGet)(this, _loaded)) {\n                void callback();\n            } else {\n                this.premountMethodCalls.set(\"navigate\", callback);\n            }\n        };\n        this.redirectWithAuth = function() {\n            for(var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++){\n                args[_key] = arguments[_key];\n            }\n            const callback = ()=>{\n                var _this_clerkjs;\n                return (_this_clerkjs = _this.clerkjs) === null || _this_clerkjs === void 0 ? void 0 : _this_clerkjs.redirectWithAuth(...args);\n            };\n            if (_this.clerkjs && (0,_chunk_3W5G4CYI_js__WEBPACK_IMPORTED_MODULE_3__.__privateGet)(_this, _loaded)) {\n                void callback();\n            } else {\n                _this.premountMethodCalls.set(\"redirectWithAuth\", callback);\n            }\n        };\n        this.redirectToSignIn = (opts)=>{\n            const callback = ()=>{\n                var _this_clerkjs;\n                return (_this_clerkjs = this.clerkjs) === null || _this_clerkjs === void 0 ? void 0 : _this_clerkjs.redirectToSignIn(opts);\n            };\n            if (this.clerkjs && (0,_chunk_3W5G4CYI_js__WEBPACK_IMPORTED_MODULE_3__.__privateGet)(this, _loaded)) {\n                void callback();\n            } else {\n                this.premountMethodCalls.set(\"redirectToSignIn\", callback);\n            }\n        };\n        this.redirectToSignUp = (opts)=>{\n            const callback = ()=>{\n                var _this_clerkjs;\n                return (_this_clerkjs = this.clerkjs) === null || _this_clerkjs === void 0 ? void 0 : _this_clerkjs.redirectToSignUp(opts);\n            };\n            if (this.clerkjs && (0,_chunk_3W5G4CYI_js__WEBPACK_IMPORTED_MODULE_3__.__privateGet)(this, _loaded)) {\n                void callback();\n            } else {\n                this.premountMethodCalls.set(\"redirectToSignUp\", callback);\n            }\n        };\n        this.redirectToUserProfile = ()=>{\n            const callback = ()=>{\n                var _this_clerkjs;\n                return (_this_clerkjs = this.clerkjs) === null || _this_clerkjs === void 0 ? void 0 : _this_clerkjs.redirectToUserProfile();\n            };\n            if (this.clerkjs && (0,_chunk_3W5G4CYI_js__WEBPACK_IMPORTED_MODULE_3__.__privateGet)(this, _loaded)) {\n                callback();\n            } else {\n                this.premountMethodCalls.set(\"redirectToUserProfile\", callback);\n            }\n        };\n        this.redirectToHome = ()=>{\n            const callback = ()=>{\n                var _this_clerkjs;\n                return (_this_clerkjs = this.clerkjs) === null || _this_clerkjs === void 0 ? void 0 : _this_clerkjs.redirectToHome();\n            };\n            if (this.clerkjs && (0,_chunk_3W5G4CYI_js__WEBPACK_IMPORTED_MODULE_3__.__privateGet)(this, _loaded)) {\n                callback();\n            } else {\n                this.premountMethodCalls.set(\"redirectToHome\", callback);\n            }\n        };\n        this.redirectToOrganizationProfile = ()=>{\n            const callback = ()=>{\n                var _this_clerkjs;\n                return (_this_clerkjs = this.clerkjs) === null || _this_clerkjs === void 0 ? void 0 : _this_clerkjs.redirectToOrganizationProfile();\n            };\n            if (this.clerkjs && (0,_chunk_3W5G4CYI_js__WEBPACK_IMPORTED_MODULE_3__.__privateGet)(this, _loaded)) {\n                callback();\n            } else {\n                this.premountMethodCalls.set(\"redirectToOrganizationProfile\", callback);\n            }\n        };\n        this.redirectToCreateOrganization = ()=>{\n            const callback = ()=>{\n                var _this_clerkjs;\n                return (_this_clerkjs = this.clerkjs) === null || _this_clerkjs === void 0 ? void 0 : _this_clerkjs.redirectToCreateOrganization();\n            };\n            if (this.clerkjs && (0,_chunk_3W5G4CYI_js__WEBPACK_IMPORTED_MODULE_3__.__privateGet)(this, _loaded)) {\n                callback();\n            } else {\n                this.premountMethodCalls.set(\"redirectToCreateOrganization\", callback);\n            }\n        };\n        this.handleRedirectCallback = (params)=>{\n            const callback = ()=>{\n                var _this_clerkjs;\n                return (_this_clerkjs = this.clerkjs) === null || _this_clerkjs === void 0 ? void 0 : _this_clerkjs.handleRedirectCallback(params);\n            };\n            if (this.clerkjs && (0,_chunk_3W5G4CYI_js__WEBPACK_IMPORTED_MODULE_3__.__privateGet)(this, _loaded)) {\n                var _callback;\n                void ((_callback = callback()) === null || _callback === void 0 ? void 0 : _callback.catch(()=>{}));\n            } else {\n                this.premountMethodCalls.set(\"handleRedirectCallback\", callback);\n            }\n        };\n        /**\n     * @deprecated Use `handleEmailLinkVerification` instead.\n     */ this.handleMagicLinkVerification = async (params)=>{\n            (0,_clerk_shared_deprecated__WEBPACK_IMPORTED_MODULE_1__.deprecated)(\"handleMagicLinkVerification\", \"Use `handleEmailLinkVerification` instead.\");\n            const callback = ()=>{\n                var _this_clerkjs;\n                return (_this_clerkjs = this.clerkjs) === null || _this_clerkjs === void 0 ? void 0 : _this_clerkjs.handleMagicLinkVerification(params);\n            };\n            if (this.clerkjs && (0,_chunk_3W5G4CYI_js__WEBPACK_IMPORTED_MODULE_3__.__privateGet)(this, _loaded)) {\n                return callback();\n            } else {\n                this.premountMethodCalls.set(\"handleMagicLinkVerification\", callback);\n            }\n        };\n        this.handleEmailLinkVerification = async (params)=>{\n            const callback = ()=>{\n                var _this_clerkjs;\n                return (_this_clerkjs = this.clerkjs) === null || _this_clerkjs === void 0 ? void 0 : _this_clerkjs.handleEmailLinkVerification(params);\n            };\n            if (this.clerkjs && (0,_chunk_3W5G4CYI_js__WEBPACK_IMPORTED_MODULE_3__.__privateGet)(this, _loaded)) {\n                return callback();\n            } else {\n                this.premountMethodCalls.set(\"handleEmailLinkVerification\", callback);\n            }\n        };\n        this.authenticateWithMetamask = async (params)=>{\n            const callback = ()=>{\n                var _this_clerkjs;\n                return (_this_clerkjs = this.clerkjs) === null || _this_clerkjs === void 0 ? void 0 : _this_clerkjs.authenticateWithMetamask(params);\n            };\n            if (this.clerkjs && (0,_chunk_3W5G4CYI_js__WEBPACK_IMPORTED_MODULE_3__.__privateGet)(this, _loaded)) {\n                return callback();\n            } else {\n                this.premountMethodCalls.set(\"authenticateWithMetamask\", callback);\n            }\n        };\n        this.createOrganization = async (params)=>{\n            const callback = ()=>{\n                var _this_clerkjs;\n                return (_this_clerkjs = this.clerkjs) === null || _this_clerkjs === void 0 ? void 0 : _this_clerkjs.createOrganization(params);\n            };\n            if (this.clerkjs && (0,_chunk_3W5G4CYI_js__WEBPACK_IMPORTED_MODULE_3__.__privateGet)(this, _loaded)) {\n                return callback();\n            } else {\n                this.premountMethodCalls.set(\"createOrganization\", callback);\n            }\n        };\n        this.getOrganizationMemberships = async ()=>{\n            const callback = ()=>{\n                var _this_clerkjs;\n                return (_this_clerkjs = this.clerkjs) === null || _this_clerkjs === void 0 ? void 0 : _this_clerkjs.getOrganizationMemberships();\n            };\n            if (this.clerkjs && (0,_chunk_3W5G4CYI_js__WEBPACK_IMPORTED_MODULE_3__.__privateGet)(this, _loaded)) {\n                return callback();\n            } else {\n                this.premountMethodCalls.set(\"getOrganizationMemberships\", callback);\n            }\n        };\n        this.getOrganization = async (organizationId)=>{\n            const callback = ()=>{\n                var _this_clerkjs;\n                return (_this_clerkjs = this.clerkjs) === null || _this_clerkjs === void 0 ? void 0 : _this_clerkjs.getOrganization(organizationId);\n            };\n            if (this.clerkjs && (0,_chunk_3W5G4CYI_js__WEBPACK_IMPORTED_MODULE_3__.__privateGet)(this, _loaded)) {\n                return callback();\n            } else {\n                this.premountMethodCalls.set(\"getOrganization\", callback);\n            }\n        };\n        this.signOut = async (signOutCallbackOrOptions, options)=>{\n            const callback = ()=>{\n                var _this_clerkjs;\n                return (_this_clerkjs = this.clerkjs) === null || _this_clerkjs === void 0 ? void 0 : _this_clerkjs.signOut(signOutCallbackOrOptions, options);\n            };\n            if (this.clerkjs && (0,_chunk_3W5G4CYI_js__WEBPACK_IMPORTED_MODULE_3__.__privateGet)(this, _loaded)) {\n                return callback();\n            } else {\n                this.premountMethodCalls.set(\"signOut\", callback);\n            }\n        };\n        const { Clerk = null, frontendApi, publishableKey } = options || {};\n        (0,_chunk_3W5G4CYI_js__WEBPACK_IMPORTED_MODULE_3__.__privateSet)(this, _frontendApi, frontendApi);\n        (0,_chunk_3W5G4CYI_js__WEBPACK_IMPORTED_MODULE_3__.__privateSet)(this, _publishableKey, publishableKey);\n        (0,_chunk_3W5G4CYI_js__WEBPACK_IMPORTED_MODULE_3__.__privateSet)(this, _proxyUrl, options === null || options === void 0 ? void 0 : options.proxyUrl);\n        (0,_chunk_3W5G4CYI_js__WEBPACK_IMPORTED_MODULE_3__.__privateSet)(this, _domain, options === null || options === void 0 ? void 0 : options.domain);\n        this.options = options;\n        this.Clerk = Clerk;\n        this.mode = (0,_clerk_shared_browser__WEBPACK_IMPORTED_MODULE_0__.inBrowser)() ? \"browser\" : \"server\";\n        void this.loadClerkJS();\n    }\n};\n_loaded = new WeakMap();\n_domain = new WeakMap();\n_proxyUrl = new WeakMap();\n_frontendApi = new WeakMap();\n_publishableKey = new WeakMap();\n_instance = new WeakMap();\n(0,_chunk_3W5G4CYI_js__WEBPACK_IMPORTED_MODULE_3__.__privateAdd)(_IsomorphicClerk, _instance, void 0);\nlet IsomorphicClerk = _IsomorphicClerk;\n //# sourceMappingURL=isomorphicClerk.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/@clerk/clerk-react/dist/esm/isomorphicClerk.js\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/@clerk/clerk-react/dist/esm/polyfills.js":
/*!***************************************************************!*\
  !*** ./node_modules/@clerk/clerk-react/dist/esm/polyfills.js ***!
  \***************************************************************/
/***/ (function(__unused_webpack_module, __unused_webpack_exports, __webpack_require__) {

eval(__webpack_require__.ts("if ( true && !window.global) {\n    window.global = typeof __webpack_require__.g === \"undefined\" ? window : __webpack_require__.g;\n} //# sourceMappingURL=polyfills.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL25vZGVfbW9kdWxlcy9AY2xlcmsvY2xlcmstcmVhY3QvZGlzdC9lc20vcG9seWZpbGxzLmpzIiwibWFwcGluZ3MiOiJBQUFBLElBQUksS0FBNkIsSUFBSSxDQUFDQSxPQUFPQyxNQUFNLEVBQUU7SUFDbkRELE9BQU9DLE1BQU0sR0FBRyxPQUFPQSxxQkFBTUEsS0FBSyxjQUFjRCxTQUFTQyxxQkFBTUE7QUFDakUsRUFDQSxxQ0FBcUMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9fTl9FLy4vbm9kZV9tb2R1bGVzL0BjbGVyay9jbGVyay1yZWFjdC9kaXN0L2VzbS9wb2x5ZmlsbHMuanM/YTg2MSJdLCJzb3VyY2VzQ29udGVudCI6WyJpZiAodHlwZW9mIHdpbmRvdyAhPT0gXCJ1bmRlZmluZWRcIiAmJiAhd2luZG93Lmdsb2JhbCkge1xuICB3aW5kb3cuZ2xvYmFsID0gdHlwZW9mIGdsb2JhbCA9PT0gXCJ1bmRlZmluZWRcIiA/IHdpbmRvdyA6IGdsb2JhbDtcbn1cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXBvbHlmaWxscy5qcy5tYXAiXSwibmFtZXMiOlsid2luZG93IiwiZ2xvYmFsIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/@clerk/clerk-react/dist/esm/polyfills.js\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/@clerk/clerk-react/dist/esm/utils/childrenUtils.js":
/*!*************************************************************************!*\
  !*** ./node_modules/@clerk/clerk-react/dist/esm/utils/childrenUtils.js ***!
  \*************************************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   assertSingleChild: function() { return /* binding */ assertSingleChild; },\n/* harmony export */   normalizeWithDefaultValue: function() { return /* binding */ normalizeWithDefaultValue; },\n/* harmony export */   safeExecute: function() { return /* binding */ safeExecute; }\n/* harmony export */ });\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react */ \"(app-pages-browser)/./node_modules/next/dist/compiled/react/index.js\");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var _errors__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../errors */ \"(app-pages-browser)/./node_modules/@clerk/clerk-react/dist/esm/errors.js\");\n\n\n\nconst assertSingleChild = (children)=>(name)=>{\n        try {\n            return react__WEBPACK_IMPORTED_MODULE_0___default().Children.only(children);\n        } catch (e) {\n            throw new Error((0,_errors__WEBPACK_IMPORTED_MODULE_1__.multipleChildrenInButtonComponent)(name));\n        }\n    };\nconst normalizeWithDefaultValue = (children, defaultText)=>{\n    if (!children) {\n        children = defaultText;\n    }\n    if (typeof children === \"string\") {\n        children = /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0___default().createElement(\"button\", null, children);\n    }\n    return children;\n};\nconst safeExecute = (cb)=>function() {\n        for(var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++){\n            args[_key] = arguments[_key];\n        }\n        if (cb && typeof cb === \"function\") {\n            return cb(...args);\n        }\n    };\n //# sourceMappingURL=childrenUtils.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL25vZGVfbW9kdWxlcy9AY2xlcmsvY2xlcmstcmVhY3QvZGlzdC9lc20vdXRpbHMvY2hpbGRyZW5VdGlscy5qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7QUFBOEI7QUFDSjtBQUNvQztBQUM5RCxNQUFNRSxvQkFBb0IsQ0FBQ0MsV0FBYSxDQUFDQztRQUN2QyxJQUFJO1lBQ0YsT0FBT0oscURBQWMsQ0FBQ00sSUFBSSxDQUFDSDtRQUM3QixFQUFFLE9BQU9JLEdBQUc7WUFDVixNQUFNLElBQUlDLE1BQU1QLDBFQUFpQ0EsQ0FBQ0c7UUFDcEQ7SUFDRjtBQUNBLE1BQU1LLDRCQUE0QixDQUFDTixVQUFVTztJQUMzQyxJQUFJLENBQUNQLFVBQVU7UUFDYkEsV0FBV087SUFDYjtJQUNBLElBQUksT0FBT1AsYUFBYSxVQUFVO1FBQ2hDQSxXQUFXLGFBQWEsaUJBQUdILDBEQUFtQixDQUFDLFVBQVUsTUFBTUc7SUFDakU7SUFDQSxPQUFPQTtBQUNUO0FBQ0EsTUFBTVMsY0FBYyxDQUFDQyxLQUFPO3lDQUFJQztZQUFBQTs7UUFDOUIsSUFBSUQsTUFBTSxPQUFPQSxPQUFPLFlBQVk7WUFDbEMsT0FBT0EsTUFBTUM7UUFDZjtJQUNGO0FBS0UsQ0FDRix5Q0FBeUMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9fTl9FLy4vbm9kZV9tb2R1bGVzL0BjbGVyay9jbGVyay1yZWFjdC9kaXN0L2VzbS91dGlscy9jaGlsZHJlblV0aWxzLmpzPzJiNmYiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IFwiLi4vY2h1bmstM1c1RzRDWUkuanNcIjtcbmltcG9ydCBSZWFjdCBmcm9tIFwicmVhY3RcIjtcbmltcG9ydCB7IG11bHRpcGxlQ2hpbGRyZW5JbkJ1dHRvbkNvbXBvbmVudCB9IGZyb20gXCIuLi9lcnJvcnNcIjtcbmNvbnN0IGFzc2VydFNpbmdsZUNoaWxkID0gKGNoaWxkcmVuKSA9PiAobmFtZSkgPT4ge1xuICB0cnkge1xuICAgIHJldHVybiBSZWFjdC5DaGlsZHJlbi5vbmx5KGNoaWxkcmVuKTtcbiAgfSBjYXRjaCAoZSkge1xuICAgIHRocm93IG5ldyBFcnJvcihtdWx0aXBsZUNoaWxkcmVuSW5CdXR0b25Db21wb25lbnQobmFtZSkpO1xuICB9XG59O1xuY29uc3Qgbm9ybWFsaXplV2l0aERlZmF1bHRWYWx1ZSA9IChjaGlsZHJlbiwgZGVmYXVsdFRleHQpID0+IHtcbiAgaWYgKCFjaGlsZHJlbikge1xuICAgIGNoaWxkcmVuID0gZGVmYXVsdFRleHQ7XG4gIH1cbiAgaWYgKHR5cGVvZiBjaGlsZHJlbiA9PT0gXCJzdHJpbmdcIikge1xuICAgIGNoaWxkcmVuID0gLyogQF9fUFVSRV9fICovIFJlYWN0LmNyZWF0ZUVsZW1lbnQoXCJidXR0b25cIiwgbnVsbCwgY2hpbGRyZW4pO1xuICB9XG4gIHJldHVybiBjaGlsZHJlbjtcbn07XG5jb25zdCBzYWZlRXhlY3V0ZSA9IChjYikgPT4gKC4uLmFyZ3MpID0+IHtcbiAgaWYgKGNiICYmIHR5cGVvZiBjYiA9PT0gXCJmdW5jdGlvblwiKSB7XG4gICAgcmV0dXJuIGNiKC4uLmFyZ3MpO1xuICB9XG59O1xuZXhwb3J0IHtcbiAgYXNzZXJ0U2luZ2xlQ2hpbGQsXG4gIG5vcm1hbGl6ZVdpdGhEZWZhdWx0VmFsdWUsXG4gIHNhZmVFeGVjdXRlXG59O1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9Y2hpbGRyZW5VdGlscy5qcy5tYXAiXSwibmFtZXMiOlsiUmVhY3QiLCJtdWx0aXBsZUNoaWxkcmVuSW5CdXR0b25Db21wb25lbnQiLCJhc3NlcnRTaW5nbGVDaGlsZCIsImNoaWxkcmVuIiwibmFtZSIsIkNoaWxkcmVuIiwib25seSIsImUiLCJFcnJvciIsIm5vcm1hbGl6ZVdpdGhEZWZhdWx0VmFsdWUiLCJkZWZhdWx0VGV4dCIsImNyZWF0ZUVsZW1lbnQiLCJzYWZlRXhlY3V0ZSIsImNiIiwiYXJncyJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/@clerk/clerk-react/dist/esm/utils/childrenUtils.js\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/@clerk/clerk-react/dist/esm/utils/deriveState.js":
/*!***********************************************************************!*\
  !*** ./node_modules/@clerk/clerk-react/dist/esm/utils/deriveState.js ***!
  \***********************************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   deriveState: function() { return /* binding */ deriveState; }\n/* harmony export */ });\n\nconst deriveState = (clerkLoaded, state, initialState)=>{\n    if (!clerkLoaded && initialState) {\n        return deriveFromSsrInitialState(initialState);\n    }\n    return deriveFromClientSideState(state);\n};\nconst deriveFromSsrInitialState = (initialState)=>{\n    const userId = initialState.userId;\n    const user = initialState.user;\n    const sessionId = initialState.sessionId;\n    const session = initialState.session;\n    const organization = initialState.organization;\n    const orgId = initialState.orgId;\n    const orgRole = initialState.orgRole;\n    const orgPermissions = initialState.orgPermissions;\n    const orgSlug = initialState.orgSlug;\n    const actor = initialState.actor;\n    return {\n        userId,\n        user,\n        sessionId,\n        session,\n        organization,\n        orgId,\n        orgRole,\n        orgPermissions,\n        orgSlug,\n        actor,\n        lastOrganizationInvitation: null,\n        lastOrganizationMember: null\n    };\n};\nconst deriveFromClientSideState = (state)=>{\n    var _user_organizationMemberships;\n    const userId = state.user ? state.user.id : state.user;\n    const user = state.user;\n    const sessionId = state.session ? state.session.id : state.session;\n    const session = state.session;\n    const actor = session === null || session === void 0 ? void 0 : session.actor;\n    const organization = state.organization;\n    const orgId = state.organization ? state.organization.id : state.organization;\n    const orgSlug = organization === null || organization === void 0 ? void 0 : organization.slug;\n    const membership = organization ? user === null || user === void 0 ? void 0 : (_user_organizationMemberships = user.organizationMemberships) === null || _user_organizationMemberships === void 0 ? void 0 : _user_organizationMemberships.find((om)=>om.organization.id === orgId) : organization;\n    const orgPermissions = membership ? membership.permissions : membership;\n    const orgRole = membership ? membership.role : membership;\n    const lastOrganizationInvitation = state.lastOrganizationInvitation;\n    const lastOrganizationMember = state.lastOrganizationMember;\n    return {\n        userId,\n        user,\n        sessionId,\n        session,\n        organization,\n        orgId,\n        orgRole,\n        orgSlug,\n        orgPermissions,\n        actor,\n        lastOrganizationInvitation,\n        lastOrganizationMember\n    };\n};\n //# sourceMappingURL=deriveState.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL25vZGVfbW9kdWxlcy9AY2xlcmsvY2xlcmstcmVhY3QvZGlzdC9lc20vdXRpbHMvZGVyaXZlU3RhdGUuanMiLCJtYXBwaW5ncyI6Ijs7OztBQUE4QjtBQUM5QixNQUFNQSxjQUFjLENBQUNDLGFBQWFDLE9BQU9DO0lBQ3ZDLElBQUksQ0FBQ0YsZUFBZUUsY0FBYztRQUNoQyxPQUFPQywwQkFBMEJEO0lBQ25DO0lBQ0EsT0FBT0UsMEJBQTBCSDtBQUNuQztBQUNBLE1BQU1FLDRCQUE0QixDQUFDRDtJQUNqQyxNQUFNRyxTQUFTSCxhQUFhRyxNQUFNO0lBQ2xDLE1BQU1DLE9BQU9KLGFBQWFJLElBQUk7SUFDOUIsTUFBTUMsWUFBWUwsYUFBYUssU0FBUztJQUN4QyxNQUFNQyxVQUFVTixhQUFhTSxPQUFPO0lBQ3BDLE1BQU1DLGVBQWVQLGFBQWFPLFlBQVk7SUFDOUMsTUFBTUMsUUFBUVIsYUFBYVEsS0FBSztJQUNoQyxNQUFNQyxVQUFVVCxhQUFhUyxPQUFPO0lBQ3BDLE1BQU1DLGlCQUFpQlYsYUFBYVUsY0FBYztJQUNsRCxNQUFNQyxVQUFVWCxhQUFhVyxPQUFPO0lBQ3BDLE1BQU1DLFFBQVFaLGFBQWFZLEtBQUs7SUFDaEMsT0FBTztRQUNMVDtRQUNBQztRQUNBQztRQUNBQztRQUNBQztRQUNBQztRQUNBQztRQUNBQztRQUNBQztRQUNBQztRQUNBQyw0QkFBNEI7UUFDNUJDLHdCQUF3QjtJQUMxQjtBQUNGO0FBQ0EsTUFBTVosNEJBQTRCLENBQUNIO1FBU0NLO0lBUmxDLE1BQU1ELFNBQVNKLE1BQU1LLElBQUksR0FBR0wsTUFBTUssSUFBSSxDQUFDVyxFQUFFLEdBQUdoQixNQUFNSyxJQUFJO0lBQ3RELE1BQU1BLE9BQU9MLE1BQU1LLElBQUk7SUFDdkIsTUFBTUMsWUFBWU4sTUFBTU8sT0FBTyxHQUFHUCxNQUFNTyxPQUFPLENBQUNTLEVBQUUsR0FBR2hCLE1BQU1PLE9BQU87SUFDbEUsTUFBTUEsVUFBVVAsTUFBTU8sT0FBTztJQUM3QixNQUFNTSxRQUFRTixvQkFBQUEsOEJBQUFBLFFBQVNNLEtBQUs7SUFDNUIsTUFBTUwsZUFBZVIsTUFBTVEsWUFBWTtJQUN2QyxNQUFNQyxRQUFRVCxNQUFNUSxZQUFZLEdBQUdSLE1BQU1RLFlBQVksQ0FBQ1EsRUFBRSxHQUFHaEIsTUFBTVEsWUFBWTtJQUM3RSxNQUFNSSxVQUFVSix5QkFBQUEsbUNBQUFBLGFBQWNTLElBQUk7SUFDbEMsTUFBTUMsYUFBYVYsZUFBZUgsaUJBQUFBLDRCQUFBQSxnQ0FBQUEsS0FBTWMsdUJBQXVCLGNBQTdCZCxvREFBQUEsOEJBQStCZSxJQUFJLENBQUMsQ0FBQ0MsS0FBT0EsR0FBR2IsWUFBWSxDQUFDUSxFQUFFLEtBQUtQLFNBQVNEO0lBQzlHLE1BQU1HLGlCQUFpQk8sYUFBYUEsV0FBV0ksV0FBVyxHQUFHSjtJQUM3RCxNQUFNUixVQUFVUSxhQUFhQSxXQUFXSyxJQUFJLEdBQUdMO0lBQy9DLE1BQU1KLDZCQUE2QmQsTUFBTWMsMEJBQTBCO0lBQ25FLE1BQU1DLHlCQUF5QmYsTUFBTWUsc0JBQXNCO0lBQzNELE9BQU87UUFDTFg7UUFDQUM7UUFDQUM7UUFDQUM7UUFDQUM7UUFDQUM7UUFDQUM7UUFDQUU7UUFDQUQ7UUFDQUU7UUFDQUM7UUFDQUM7SUFDRjtBQUNGO0FBR0UsQ0FDRix1Q0FBdUMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9fTl9FLy4vbm9kZV9tb2R1bGVzL0BjbGVyay9jbGVyay1yZWFjdC9kaXN0L2VzbS91dGlscy9kZXJpdmVTdGF0ZS5qcz9kN2IyIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBcIi4uL2NodW5rLTNXNUc0Q1lJLmpzXCI7XG5jb25zdCBkZXJpdmVTdGF0ZSA9IChjbGVya0xvYWRlZCwgc3RhdGUsIGluaXRpYWxTdGF0ZSkgPT4ge1xuICBpZiAoIWNsZXJrTG9hZGVkICYmIGluaXRpYWxTdGF0ZSkge1xuICAgIHJldHVybiBkZXJpdmVGcm9tU3NySW5pdGlhbFN0YXRlKGluaXRpYWxTdGF0ZSk7XG4gIH1cbiAgcmV0dXJuIGRlcml2ZUZyb21DbGllbnRTaWRlU3RhdGUoc3RhdGUpO1xufTtcbmNvbnN0IGRlcml2ZUZyb21Tc3JJbml0aWFsU3RhdGUgPSAoaW5pdGlhbFN0YXRlKSA9PiB7XG4gIGNvbnN0IHVzZXJJZCA9IGluaXRpYWxTdGF0ZS51c2VySWQ7XG4gIGNvbnN0IHVzZXIgPSBpbml0aWFsU3RhdGUudXNlcjtcbiAgY29uc3Qgc2Vzc2lvbklkID0gaW5pdGlhbFN0YXRlLnNlc3Npb25JZDtcbiAgY29uc3Qgc2Vzc2lvbiA9IGluaXRpYWxTdGF0ZS5zZXNzaW9uO1xuICBjb25zdCBvcmdhbml6YXRpb24gPSBpbml0aWFsU3RhdGUub3JnYW5pemF0aW9uO1xuICBjb25zdCBvcmdJZCA9IGluaXRpYWxTdGF0ZS5vcmdJZDtcbiAgY29uc3Qgb3JnUm9sZSA9IGluaXRpYWxTdGF0ZS5vcmdSb2xlO1xuICBjb25zdCBvcmdQZXJtaXNzaW9ucyA9IGluaXRpYWxTdGF0ZS5vcmdQZXJtaXNzaW9ucztcbiAgY29uc3Qgb3JnU2x1ZyA9IGluaXRpYWxTdGF0ZS5vcmdTbHVnO1xuICBjb25zdCBhY3RvciA9IGluaXRpYWxTdGF0ZS5hY3RvcjtcbiAgcmV0dXJuIHtcbiAgICB1c2VySWQsXG4gICAgdXNlcixcbiAgICBzZXNzaW9uSWQsXG4gICAgc2Vzc2lvbixcbiAgICBvcmdhbml6YXRpb24sXG4gICAgb3JnSWQsXG4gICAgb3JnUm9sZSxcbiAgICBvcmdQZXJtaXNzaW9ucyxcbiAgICBvcmdTbHVnLFxuICAgIGFjdG9yLFxuICAgIGxhc3RPcmdhbml6YXRpb25JbnZpdGF0aW9uOiBudWxsLFxuICAgIGxhc3RPcmdhbml6YXRpb25NZW1iZXI6IG51bGxcbiAgfTtcbn07XG5jb25zdCBkZXJpdmVGcm9tQ2xpZW50U2lkZVN0YXRlID0gKHN0YXRlKSA9PiB7XG4gIGNvbnN0IHVzZXJJZCA9IHN0YXRlLnVzZXIgPyBzdGF0ZS51c2VyLmlkIDogc3RhdGUudXNlcjtcbiAgY29uc3QgdXNlciA9IHN0YXRlLnVzZXI7XG4gIGNvbnN0IHNlc3Npb25JZCA9IHN0YXRlLnNlc3Npb24gPyBzdGF0ZS5zZXNzaW9uLmlkIDogc3RhdGUuc2Vzc2lvbjtcbiAgY29uc3Qgc2Vzc2lvbiA9IHN0YXRlLnNlc3Npb247XG4gIGNvbnN0IGFjdG9yID0gc2Vzc2lvbj8uYWN0b3I7XG4gIGNvbnN0IG9yZ2FuaXphdGlvbiA9IHN0YXRlLm9yZ2FuaXphdGlvbjtcbiAgY29uc3Qgb3JnSWQgPSBzdGF0ZS5vcmdhbml6YXRpb24gPyBzdGF0ZS5vcmdhbml6YXRpb24uaWQgOiBzdGF0ZS5vcmdhbml6YXRpb247XG4gIGNvbnN0IG9yZ1NsdWcgPSBvcmdhbml6YXRpb24/LnNsdWc7XG4gIGNvbnN0IG1lbWJlcnNoaXAgPSBvcmdhbml6YXRpb24gPyB1c2VyPy5vcmdhbml6YXRpb25NZW1iZXJzaGlwcz8uZmluZCgob20pID0+IG9tLm9yZ2FuaXphdGlvbi5pZCA9PT0gb3JnSWQpIDogb3JnYW5pemF0aW9uO1xuICBjb25zdCBvcmdQZXJtaXNzaW9ucyA9IG1lbWJlcnNoaXAgPyBtZW1iZXJzaGlwLnBlcm1pc3Npb25zIDogbWVtYmVyc2hpcDtcbiAgY29uc3Qgb3JnUm9sZSA9IG1lbWJlcnNoaXAgPyBtZW1iZXJzaGlwLnJvbGUgOiBtZW1iZXJzaGlwO1xuICBjb25zdCBsYXN0T3JnYW5pemF0aW9uSW52aXRhdGlvbiA9IHN0YXRlLmxhc3RPcmdhbml6YXRpb25JbnZpdGF0aW9uO1xuICBjb25zdCBsYXN0T3JnYW5pemF0aW9uTWVtYmVyID0gc3RhdGUubGFzdE9yZ2FuaXphdGlvbk1lbWJlcjtcbiAgcmV0dXJuIHtcbiAgICB1c2VySWQsXG4gICAgdXNlcixcbiAgICBzZXNzaW9uSWQsXG4gICAgc2Vzc2lvbixcbiAgICBvcmdhbml6YXRpb24sXG4gICAgb3JnSWQsXG4gICAgb3JnUm9sZSxcbiAgICBvcmdTbHVnLFxuICAgIG9yZ1Blcm1pc3Npb25zLFxuICAgIGFjdG9yLFxuICAgIGxhc3RPcmdhbml6YXRpb25JbnZpdGF0aW9uLFxuICAgIGxhc3RPcmdhbml6YXRpb25NZW1iZXJcbiAgfTtcbn07XG5leHBvcnQge1xuICBkZXJpdmVTdGF0ZVxufTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWRlcml2ZVN0YXRlLmpzLm1hcCJdLCJuYW1lcyI6WyJkZXJpdmVTdGF0ZSIsImNsZXJrTG9hZGVkIiwic3RhdGUiLCJpbml0aWFsU3RhdGUiLCJkZXJpdmVGcm9tU3NySW5pdGlhbFN0YXRlIiwiZGVyaXZlRnJvbUNsaWVudFNpZGVTdGF0ZSIsInVzZXJJZCIsInVzZXIiLCJzZXNzaW9uSWQiLCJzZXNzaW9uIiwib3JnYW5pemF0aW9uIiwib3JnSWQiLCJvcmdSb2xlIiwib3JnUGVybWlzc2lvbnMiLCJvcmdTbHVnIiwiYWN0b3IiLCJsYXN0T3JnYW5pemF0aW9uSW52aXRhdGlvbiIsImxhc3RPcmdhbml6YXRpb25NZW1iZXIiLCJpZCIsInNsdWciLCJtZW1iZXJzaGlwIiwib3JnYW5pemF0aW9uTWVtYmVyc2hpcHMiLCJmaW5kIiwib20iLCJwZXJtaXNzaW9ucyIsInJvbGUiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/@clerk/clerk-react/dist/esm/utils/deriveState.js\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/@clerk/clerk-react/dist/esm/utils/errorThrower.js":
/*!************************************************************************!*\
  !*** ./node_modules/@clerk/clerk-react/dist/esm/utils/errorThrower.js ***!
  \************************************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   __internal__setErrorThrowerOptions: function() { return /* binding */ __internal__setErrorThrowerOptions; },\n/* harmony export */   errorThrower: function() { return /* binding */ errorThrower; }\n/* harmony export */ });\n/* harmony import */ var _clerk_shared_error__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @clerk/shared/error */ \"(app-pages-browser)/./node_modules/@clerk/shared/dist/error.mjs\");\n\n\nconst errorThrower = (0,_clerk_shared_error__WEBPACK_IMPORTED_MODULE_0__.buildErrorThrower)({\n    packageName: \"@clerk/react\"\n});\nfunction __internal__setErrorThrowerOptions(options) {\n    errorThrower.setMessages(options).setPackageName(options);\n}\n //# sourceMappingURL=errorThrower.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL25vZGVfbW9kdWxlcy9AY2xlcmsvY2xlcmstcmVhY3QvZGlzdC9lc20vdXRpbHMvZXJyb3JUaHJvd2VyLmpzIiwibWFwcGluZ3MiOiI7Ozs7OztBQUE4QjtBQUMwQjtBQUN4RCxNQUFNQyxlQUFlRCxzRUFBaUJBLENBQUM7SUFBRUUsYUFBYTtBQUFlO0FBQ3JFLFNBQVNDLG1DQUFtQ0MsT0FBTztJQUNqREgsYUFBYUksV0FBVyxDQUFDRCxTQUFTRSxjQUFjLENBQUNGO0FBQ25EO0FBSUUsQ0FDRix3Q0FBd0MiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9fTl9FLy4vbm9kZV9tb2R1bGVzL0BjbGVyay9jbGVyay1yZWFjdC9kaXN0L2VzbS91dGlscy9lcnJvclRocm93ZXIuanM/NDZhNSJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgXCIuLi9jaHVuay0zVzVHNENZSS5qc1wiO1xuaW1wb3J0IHsgYnVpbGRFcnJvclRocm93ZXIgfSBmcm9tIFwiQGNsZXJrL3NoYXJlZC9lcnJvclwiO1xuY29uc3QgZXJyb3JUaHJvd2VyID0gYnVpbGRFcnJvclRocm93ZXIoeyBwYWNrYWdlTmFtZTogXCJAY2xlcmsvcmVhY3RcIiB9KTtcbmZ1bmN0aW9uIF9faW50ZXJuYWxfX3NldEVycm9yVGhyb3dlck9wdGlvbnMob3B0aW9ucykge1xuICBlcnJvclRocm93ZXIuc2V0TWVzc2FnZXMob3B0aW9ucykuc2V0UGFja2FnZU5hbWUob3B0aW9ucyk7XG59XG5leHBvcnQge1xuICBfX2ludGVybmFsX19zZXRFcnJvclRocm93ZXJPcHRpb25zLFxuICBlcnJvclRocm93ZXJcbn07XG4vLyMgc291cmNlTWFwcGluZ1VSTD1lcnJvclRocm93ZXIuanMubWFwIl0sIm5hbWVzIjpbImJ1aWxkRXJyb3JUaHJvd2VyIiwiZXJyb3JUaHJvd2VyIiwicGFja2FnZU5hbWUiLCJfX2ludGVybmFsX19zZXRFcnJvclRocm93ZXJPcHRpb25zIiwib3B0aW9ucyIsInNldE1lc3NhZ2VzIiwic2V0UGFja2FnZU5hbWUiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/@clerk/clerk-react/dist/esm/utils/errorThrower.js\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/@clerk/clerk-react/dist/esm/utils/isConstructor.js":
/*!*************************************************************************!*\
  !*** ./node_modules/@clerk/clerk-react/dist/esm/utils/isConstructor.js ***!
  \*************************************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   isConstructor: function() { return /* binding */ isConstructor; }\n/* harmony export */ });\n\nfunction isConstructor(f) {\n    return typeof f === \"function\";\n}\n //# sourceMappingURL=isConstructor.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL25vZGVfbW9kdWxlcy9AY2xlcmsvY2xlcmstcmVhY3QvZGlzdC9lc20vdXRpbHMvaXNDb25zdHJ1Y3Rvci5qcyIsIm1hcHBpbmdzIjoiOzs7O0FBQThCO0FBQzlCLFNBQVNBLGNBQWNDLENBQUM7SUFDdEIsT0FBTyxPQUFPQSxNQUFNO0FBQ3RCO0FBR0UsQ0FDRix5Q0FBeUMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9fTl9FLy4vbm9kZV9tb2R1bGVzL0BjbGVyay9jbGVyay1yZWFjdC9kaXN0L2VzbS91dGlscy9pc0NvbnN0cnVjdG9yLmpzPzliMDYiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IFwiLi4vY2h1bmstM1c1RzRDWUkuanNcIjtcbmZ1bmN0aW9uIGlzQ29uc3RydWN0b3IoZikge1xuICByZXR1cm4gdHlwZW9mIGYgPT09IFwiZnVuY3Rpb25cIjtcbn1cbmV4cG9ydCB7XG4gIGlzQ29uc3RydWN0b3Jcbn07XG4vLyMgc291cmNlTWFwcGluZ1VSTD1pc0NvbnN0cnVjdG9yLmpzLm1hcCJdLCJuYW1lcyI6WyJpc0NvbnN0cnVjdG9yIiwiZiJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/@clerk/clerk-react/dist/esm/utils/isConstructor.js\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/@clerk/clerk-react/dist/esm/utils/isDevOrStageUrl.js":
/*!***************************************************************************!*\
  !*** ./node_modules/@clerk/clerk-react/dist/esm/utils/isDevOrStageUrl.js ***!
  \***************************************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   isDevOrStagingUrl: function() { return /* binding */ isDevOrStagingUrl; }\n/* harmony export */ });\n/* harmony import */ var _clerk_shared_keys__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @clerk/shared/keys */ \"(app-pages-browser)/./node_modules/@clerk/shared/dist/keys.mjs\");\n\n\nconst { isDevOrStagingUrl } = (0,_clerk_shared_keys__WEBPACK_IMPORTED_MODULE_0__.createDevOrStagingUrlCache)();\n //# sourceMappingURL=isDevOrStageUrl.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL25vZGVfbW9kdWxlcy9AY2xlcmsvY2xlcmstcmVhY3QvZGlzdC9lc20vdXRpbHMvaXNEZXZPclN0YWdlVXJsLmpzIiwibWFwcGluZ3MiOiI7Ozs7O0FBQThCO0FBQ2tDO0FBQ2hFLE1BQU0sRUFBRUMsaUJBQWlCLEVBQUUsR0FBR0QsOEVBQTBCQTtBQUd0RCxDQUNGLDJDQUEyQyIsInNvdXJjZXMiOlsid2VicGFjazovL19OX0UvLi9ub2RlX21vZHVsZXMvQGNsZXJrL2NsZXJrLXJlYWN0L2Rpc3QvZXNtL3V0aWxzL2lzRGV2T3JTdGFnZVVybC5qcz9mODY3Il0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBcIi4uL2NodW5rLTNXNUc0Q1lJLmpzXCI7XG5pbXBvcnQgeyBjcmVhdGVEZXZPclN0YWdpbmdVcmxDYWNoZSB9IGZyb20gXCJAY2xlcmsvc2hhcmVkL2tleXNcIjtcbmNvbnN0IHsgaXNEZXZPclN0YWdpbmdVcmwgfSA9IGNyZWF0ZURldk9yU3RhZ2luZ1VybENhY2hlKCk7XG5leHBvcnQge1xuICBpc0Rldk9yU3RhZ2luZ1VybFxufTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWlzRGV2T3JTdGFnZVVybC5qcy5tYXAiXSwibmFtZXMiOlsiY3JlYXRlRGV2T3JTdGFnaW5nVXJsQ2FjaGUiLCJpc0Rldk9yU3RhZ2luZ1VybCJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/@clerk/clerk-react/dist/esm/utils/isDevOrStageUrl.js\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/@clerk/clerk-react/dist/esm/utils/loadClerkJsScript.js":
/*!*****************************************************************************!*\
  !*** ./node_modules/@clerk/clerk-react/dist/esm/utils/loadClerkJsScript.js ***!
  \*****************************************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   loadClerkJsScript: function() { return /* binding */ loadClerkJsScript; }\n/* harmony export */ });\n/* harmony import */ var _clerk_shared_keys__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @clerk/shared/keys */ \"(app-pages-browser)/./node_modules/@clerk/shared/dist/keys.mjs\");\n/* harmony import */ var _clerk_shared_loadScript__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @clerk/shared/loadScript */ \"(app-pages-browser)/./node_modules/@clerk/shared/dist/loadScript.mjs\");\n/* harmony import */ var _clerk_shared_proxy__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @clerk/shared/proxy */ \"(app-pages-browser)/./node_modules/@clerk/shared/dist/proxy.mjs\");\n/* harmony import */ var _clerk_shared_url__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @clerk/shared/url */ \"(app-pages-browser)/./node_modules/@clerk/shared/dist/url.mjs\");\n/* harmony import */ var _errorThrower__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./errorThrower */ \"(app-pages-browser)/./node_modules/@clerk/clerk-react/dist/esm/utils/errorThrower.js\");\n/* harmony import */ var _isDevOrStageUrl__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./isDevOrStageUrl */ \"(app-pages-browser)/./node_modules/@clerk/clerk-react/dist/esm/utils/isDevOrStageUrl.js\");\n/* harmony import */ var _versionSelector__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./versionSelector */ \"(app-pages-browser)/./node_modules/@clerk/clerk-react/dist/esm/utils/versionSelector.js\");\n\n\n\n\n\n\n\n\nconst FAILED_TO_LOAD_ERROR = \"Clerk: Failed to load Clerk\";\nconst loadClerkJsScript = (opts)=>{\n    const { frontendApi, publishableKey } = opts;\n    if (!publishableKey && !frontendApi) {\n        _errorThrower__WEBPACK_IMPORTED_MODULE_4__.errorThrower.throwMissingPublishableKeyError();\n    }\n    return (0,_clerk_shared_loadScript__WEBPACK_IMPORTED_MODULE_1__.loadScript)(clerkJsScriptUrl(opts), {\n        async: true,\n        crossOrigin: \"anonymous\",\n        beforeLoad: applyClerkJsScriptAttributes(opts)\n    }).catch(()=>{\n        throw new Error(FAILED_TO_LOAD_ERROR);\n    });\n};\nconst clerkJsScriptUrl = (opts)=>{\n    var _parsePublishableKey;\n    const { clerkJSUrl, clerkJSVariant, clerkJSVersion, proxyUrl, domain, publishableKey, frontendApi } = opts;\n    if (clerkJSUrl) {\n        return clerkJSUrl;\n    }\n    let scriptHost = \"\";\n    if (!!proxyUrl && (0,_clerk_shared_proxy__WEBPACK_IMPORTED_MODULE_2__.isValidProxyUrl)(proxyUrl)) {\n        scriptHost = (0,_clerk_shared_proxy__WEBPACK_IMPORTED_MODULE_2__.proxyUrlToAbsoluteURL)(proxyUrl).replace(/http(s)?:\\/\\//, \"\");\n    } else if (domain && !(0,_isDevOrStageUrl__WEBPACK_IMPORTED_MODULE_5__.isDevOrStagingUrl)(((_parsePublishableKey = (0,_clerk_shared_keys__WEBPACK_IMPORTED_MODULE_0__.parsePublishableKey)(publishableKey)) === null || _parsePublishableKey === void 0 ? void 0 : _parsePublishableKey.frontendApi) || frontendApi || \"\")) {\n        scriptHost = (0,_clerk_shared_url__WEBPACK_IMPORTED_MODULE_3__.addClerkPrefix)(domain);\n    } else {\n        var _parsePublishableKey1;\n        scriptHost = ((_parsePublishableKey1 = (0,_clerk_shared_keys__WEBPACK_IMPORTED_MODULE_0__.parsePublishableKey)(publishableKey)) === null || _parsePublishableKey1 === void 0 ? void 0 : _parsePublishableKey1.frontendApi) || frontendApi || \"\";\n    }\n    const variant = clerkJSVariant ? \"\".concat(clerkJSVariant.replace(/\\.+$/, \"\"), \".\") : \"\";\n    const version = (0,_versionSelector__WEBPACK_IMPORTED_MODULE_6__.versionSelector)(clerkJSVersion);\n    return \"https://\".concat(scriptHost, \"/npm/@clerk/clerk-js@\").concat(version, \"/dist/clerk.\").concat(variant, \"browser.js\");\n};\nconst applyClerkJsScriptAttributes = (options)=>(script)=>{\n        const { publishableKey, frontendApi, proxyUrl, domain } = options;\n        if (publishableKey) {\n            script.setAttribute(\"data-clerk-publishable-key\", publishableKey);\n        } else if (frontendApi) {\n            script.setAttribute(\"data-clerk-frontend-api\", frontendApi);\n        }\n        if (proxyUrl) {\n            script.setAttribute(\"data-clerk-proxy-url\", proxyUrl);\n        }\n        if (domain) {\n            script.setAttribute(\"data-clerk-domain\", domain);\n        }\n    };\n //# sourceMappingURL=loadClerkJsScript.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL25vZGVfbW9kdWxlcy9AY2xlcmsvY2xlcmstcmVhY3QvZGlzdC9lc20vdXRpbHMvbG9hZENsZXJrSnNTY3JpcHQuanMiLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7QUFBOEI7QUFDMkI7QUFDSDtBQUN1QjtBQUMxQjtBQUNMO0FBQ1E7QUFDRjtBQUNwRCxNQUFNUSx1QkFBdUI7QUFDN0IsTUFBTUMsb0JBQW9CLENBQUNDO0lBQ3pCLE1BQU0sRUFBRUMsV0FBVyxFQUFFQyxjQUFjLEVBQUUsR0FBR0Y7SUFDeEMsSUFBSSxDQUFDRSxrQkFBa0IsQ0FBQ0QsYUFBYTtRQUNuQ04sdURBQVlBLENBQUNRLCtCQUErQjtJQUM5QztJQUNBLE9BQU9aLG9FQUFVQSxDQUFDYSxpQkFBaUJKLE9BQU87UUFDeENLLE9BQU87UUFDUEMsYUFBYTtRQUNiQyxZQUFZQyw2QkFBNkJSO0lBQzNDLEdBQUdTLEtBQUssQ0FBQztRQUNQLE1BQU0sSUFBSUMsTUFBTVo7SUFDbEI7QUFDRjtBQUNBLE1BQU1NLG1CQUFtQixDQUFDSjtRQVFnQlY7SUFQeEMsTUFBTSxFQUFFcUIsVUFBVSxFQUFFQyxjQUFjLEVBQUVDLGNBQWMsRUFBRUMsUUFBUSxFQUFFQyxNQUFNLEVBQUViLGNBQWMsRUFBRUQsV0FBVyxFQUFFLEdBQUdEO0lBQ3RHLElBQUlXLFlBQVk7UUFDZCxPQUFPQTtJQUNUO0lBQ0EsSUFBSUssYUFBYTtJQUNqQixJQUFJLENBQUMsQ0FBQ0YsWUFBWXRCLG9FQUFlQSxDQUFDc0IsV0FBVztRQUMzQ0UsYUFBYXZCLDBFQUFxQkEsQ0FBQ3FCLFVBQVVHLE9BQU8sQ0FBQyxpQkFBaUI7SUFDeEUsT0FBTyxJQUFJRixVQUFVLENBQUNuQixtRUFBaUJBLENBQUNOLEVBQUFBLHVCQUFBQSx1RUFBbUJBLENBQUNZLDZCQUFwQlosMkNBQUFBLHFCQUFxQ1csV0FBVyxLQUFJQSxlQUFlLEtBQUs7UUFDOUdlLGFBQWF0QixpRUFBY0EsQ0FBQ3FCO0lBQzlCLE9BQU87WUFDUXpCO1FBQWIwQixhQUFhMUIsRUFBQUEsd0JBQUFBLHVFQUFtQkEsQ0FBQ1ksNkJBQXBCWiw0Q0FBQUEsc0JBQXFDVyxXQUFXLEtBQUlBLGVBQWU7SUFDbEY7SUFDQSxNQUFNaUIsVUFBVU4saUJBQWlCLEdBQXNDLE9BQW5DQSxlQUFlSyxPQUFPLENBQUMsUUFBUSxLQUFJLE9BQUs7SUFDNUUsTUFBTUUsVUFBVXRCLGlFQUFlQSxDQUFDZ0I7SUFDaEMsT0FBTyxXQUE2Q00sT0FBbENILFlBQVcseUJBQTZDRSxPQUF0QkMsU0FBUSxnQkFBc0IsT0FBUkQsU0FBUTtBQUNwRjtBQUNBLE1BQU1WLCtCQUErQixDQUFDWSxVQUFZLENBQUNDO1FBQ2pELE1BQU0sRUFBRW5CLGNBQWMsRUFBRUQsV0FBVyxFQUFFYSxRQUFRLEVBQUVDLE1BQU0sRUFBRSxHQUFHSztRQUMxRCxJQUFJbEIsZ0JBQWdCO1lBQ2xCbUIsT0FBT0MsWUFBWSxDQUFDLDhCQUE4QnBCO1FBQ3BELE9BQU8sSUFBSUQsYUFBYTtZQUN0Qm9CLE9BQU9DLFlBQVksQ0FBQywyQkFBMkJyQjtRQUNqRDtRQUNBLElBQUlhLFVBQVU7WUFDWk8sT0FBT0MsWUFBWSxDQUFDLHdCQUF3QlI7UUFDOUM7UUFDQSxJQUFJQyxRQUFRO1lBQ1ZNLE9BQU9DLFlBQVksQ0FBQyxxQkFBcUJQO1FBQzNDO0lBQ0Y7QUFHRSxDQUNGLDZDQUE2QyIsInNvdXJjZXMiOlsid2VicGFjazovL19OX0UvLi9ub2RlX21vZHVsZXMvQGNsZXJrL2NsZXJrLXJlYWN0L2Rpc3QvZXNtL3V0aWxzL2xvYWRDbGVya0pzU2NyaXB0LmpzPzZlZTAiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IFwiLi4vY2h1bmstM1c1RzRDWUkuanNcIjtcbmltcG9ydCB7IHBhcnNlUHVibGlzaGFibGVLZXkgfSBmcm9tIFwiQGNsZXJrL3NoYXJlZC9rZXlzXCI7XG5pbXBvcnQgeyBsb2FkU2NyaXB0IH0gZnJvbSBcIkBjbGVyay9zaGFyZWQvbG9hZFNjcmlwdFwiO1xuaW1wb3J0IHsgaXNWYWxpZFByb3h5VXJsLCBwcm94eVVybFRvQWJzb2x1dGVVUkwgfSBmcm9tIFwiQGNsZXJrL3NoYXJlZC9wcm94eVwiO1xuaW1wb3J0IHsgYWRkQ2xlcmtQcmVmaXggfSBmcm9tIFwiQGNsZXJrL3NoYXJlZC91cmxcIjtcbmltcG9ydCB7IGVycm9yVGhyb3dlciB9IGZyb20gXCIuL2Vycm9yVGhyb3dlclwiO1xuaW1wb3J0IHsgaXNEZXZPclN0YWdpbmdVcmwgfSBmcm9tIFwiLi9pc0Rldk9yU3RhZ2VVcmxcIjtcbmltcG9ydCB7IHZlcnNpb25TZWxlY3RvciB9IGZyb20gXCIuL3ZlcnNpb25TZWxlY3RvclwiO1xuY29uc3QgRkFJTEVEX1RPX0xPQURfRVJST1IgPSBcIkNsZXJrOiBGYWlsZWQgdG8gbG9hZCBDbGVya1wiO1xuY29uc3QgbG9hZENsZXJrSnNTY3JpcHQgPSAob3B0cykgPT4ge1xuICBjb25zdCB7IGZyb250ZW5kQXBpLCBwdWJsaXNoYWJsZUtleSB9ID0gb3B0cztcbiAgaWYgKCFwdWJsaXNoYWJsZUtleSAmJiAhZnJvbnRlbmRBcGkpIHtcbiAgICBlcnJvclRocm93ZXIudGhyb3dNaXNzaW5nUHVibGlzaGFibGVLZXlFcnJvcigpO1xuICB9XG4gIHJldHVybiBsb2FkU2NyaXB0KGNsZXJrSnNTY3JpcHRVcmwob3B0cyksIHtcbiAgICBhc3luYzogdHJ1ZSxcbiAgICBjcm9zc09yaWdpbjogXCJhbm9ueW1vdXNcIixcbiAgICBiZWZvcmVMb2FkOiBhcHBseUNsZXJrSnNTY3JpcHRBdHRyaWJ1dGVzKG9wdHMpXG4gIH0pLmNhdGNoKCgpID0+IHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoRkFJTEVEX1RPX0xPQURfRVJST1IpO1xuICB9KTtcbn07XG5jb25zdCBjbGVya0pzU2NyaXB0VXJsID0gKG9wdHMpID0+IHtcbiAgY29uc3QgeyBjbGVya0pTVXJsLCBjbGVya0pTVmFyaWFudCwgY2xlcmtKU1ZlcnNpb24sIHByb3h5VXJsLCBkb21haW4sIHB1Ymxpc2hhYmxlS2V5LCBmcm9udGVuZEFwaSB9ID0gb3B0cztcbiAgaWYgKGNsZXJrSlNVcmwpIHtcbiAgICByZXR1cm4gY2xlcmtKU1VybDtcbiAgfVxuICBsZXQgc2NyaXB0SG9zdCA9IFwiXCI7XG4gIGlmICghIXByb3h5VXJsICYmIGlzVmFsaWRQcm94eVVybChwcm94eVVybCkpIHtcbiAgICBzY3JpcHRIb3N0ID0gcHJveHlVcmxUb0Fic29sdXRlVVJMKHByb3h5VXJsKS5yZXBsYWNlKC9odHRwKHMpPzpcXC9cXC8vLCBcIlwiKTtcbiAgfSBlbHNlIGlmIChkb21haW4gJiYgIWlzRGV2T3JTdGFnaW5nVXJsKHBhcnNlUHVibGlzaGFibGVLZXkocHVibGlzaGFibGVLZXkpPy5mcm9udGVuZEFwaSB8fCBmcm9udGVuZEFwaSB8fCBcIlwiKSkge1xuICAgIHNjcmlwdEhvc3QgPSBhZGRDbGVya1ByZWZpeChkb21haW4pO1xuICB9IGVsc2Uge1xuICAgIHNjcmlwdEhvc3QgPSBwYXJzZVB1Ymxpc2hhYmxlS2V5KHB1Ymxpc2hhYmxlS2V5KT8uZnJvbnRlbmRBcGkgfHwgZnJvbnRlbmRBcGkgfHwgXCJcIjtcbiAgfVxuICBjb25zdCB2YXJpYW50ID0gY2xlcmtKU1ZhcmlhbnQgPyBgJHtjbGVya0pTVmFyaWFudC5yZXBsYWNlKC9cXC4rJC8sIFwiXCIpfS5gIDogXCJcIjtcbiAgY29uc3QgdmVyc2lvbiA9IHZlcnNpb25TZWxlY3RvcihjbGVya0pTVmVyc2lvbik7XG4gIHJldHVybiBgaHR0cHM6Ly8ke3NjcmlwdEhvc3R9L25wbS9AY2xlcmsvY2xlcmstanNAJHt2ZXJzaW9ufS9kaXN0L2NsZXJrLiR7dmFyaWFudH1icm93c2VyLmpzYDtcbn07XG5jb25zdCBhcHBseUNsZXJrSnNTY3JpcHRBdHRyaWJ1dGVzID0gKG9wdGlvbnMpID0+IChzY3JpcHQpID0+IHtcbiAgY29uc3QgeyBwdWJsaXNoYWJsZUtleSwgZnJvbnRlbmRBcGksIHByb3h5VXJsLCBkb21haW4gfSA9IG9wdGlvbnM7XG4gIGlmIChwdWJsaXNoYWJsZUtleSkge1xuICAgIHNjcmlwdC5zZXRBdHRyaWJ1dGUoXCJkYXRhLWNsZXJrLXB1Ymxpc2hhYmxlLWtleVwiLCBwdWJsaXNoYWJsZUtleSk7XG4gIH0gZWxzZSBpZiAoZnJvbnRlbmRBcGkpIHtcbiAgICBzY3JpcHQuc2V0QXR0cmlidXRlKFwiZGF0YS1jbGVyay1mcm9udGVuZC1hcGlcIiwgZnJvbnRlbmRBcGkpO1xuICB9XG4gIGlmIChwcm94eVVybCkge1xuICAgIHNjcmlwdC5zZXRBdHRyaWJ1dGUoXCJkYXRhLWNsZXJrLXByb3h5LXVybFwiLCBwcm94eVVybCk7XG4gIH1cbiAgaWYgKGRvbWFpbikge1xuICAgIHNjcmlwdC5zZXRBdHRyaWJ1dGUoXCJkYXRhLWNsZXJrLWRvbWFpblwiLCBkb21haW4pO1xuICB9XG59O1xuZXhwb3J0IHtcbiAgbG9hZENsZXJrSnNTY3JpcHRcbn07XG4vLyMgc291cmNlTWFwcGluZ1VSTD1sb2FkQ2xlcmtKc1NjcmlwdC5qcy5tYXAiXSwibmFtZXMiOlsicGFyc2VQdWJsaXNoYWJsZUtleSIsImxvYWRTY3JpcHQiLCJpc1ZhbGlkUHJveHlVcmwiLCJwcm94eVVybFRvQWJzb2x1dGVVUkwiLCJhZGRDbGVya1ByZWZpeCIsImVycm9yVGhyb3dlciIsImlzRGV2T3JTdGFnaW5nVXJsIiwidmVyc2lvblNlbGVjdG9yIiwiRkFJTEVEX1RPX0xPQURfRVJST1IiLCJsb2FkQ2xlcmtKc1NjcmlwdCIsIm9wdHMiLCJmcm9udGVuZEFwaSIsInB1Ymxpc2hhYmxlS2V5IiwidGhyb3dNaXNzaW5nUHVibGlzaGFibGVLZXlFcnJvciIsImNsZXJrSnNTY3JpcHRVcmwiLCJhc3luYyIsImNyb3NzT3JpZ2luIiwiYmVmb3JlTG9hZCIsImFwcGx5Q2xlcmtKc1NjcmlwdEF0dHJpYnV0ZXMiLCJjYXRjaCIsIkVycm9yIiwiY2xlcmtKU1VybCIsImNsZXJrSlNWYXJpYW50IiwiY2xlcmtKU1ZlcnNpb24iLCJwcm94eVVybCIsImRvbWFpbiIsInNjcmlwdEhvc3QiLCJyZXBsYWNlIiwidmFyaWFudCIsInZlcnNpb24iLCJvcHRpb25zIiwic2NyaXB0Iiwic2V0QXR0cmlidXRlIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/@clerk/clerk-react/dist/esm/utils/loadClerkJsScript.js\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/@clerk/clerk-react/dist/esm/utils/useCustomElementPortal.js":
/*!**********************************************************************************!*\
  !*** ./node_modules/@clerk/clerk-react/dist/esm/utils/useCustomElementPortal.js ***!
  \**********************************************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   useCustomElementPortal: function() { return /* binding */ useCustomElementPortal; }\n/* harmony export */ });\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react */ \"(app-pages-browser)/./node_modules/next/dist/compiled/react/index.js\");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var react_dom__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! react-dom */ \"(app-pages-browser)/./node_modules/next/dist/compiled/react-dom/index.js\");\nvar _s = $RefreshSig$();\n\n\n\nconst useCustomElementPortal = (elements)=>{\n    _s();\n    const initialState = Array(elements.length).fill(null);\n    const [nodes, setNodes] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(initialState);\n    return elements.map((el, index)=>({\n            id: el.id,\n            mount: (node)=>setNodes((prevState)=>prevState.map((n, i)=>i === index ? node : n)),\n            unmount: ()=>setNodes((prevState)=>prevState.map((n, i)=>i === index ? null : n)),\n            portal: ()=>/* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0___default().createElement((react__WEBPACK_IMPORTED_MODULE_0___default().Fragment), null, nodes[index] ? /*#__PURE__*/ (0,react_dom__WEBPACK_IMPORTED_MODULE_1__.createPortal)(el.component, nodes[index]) : null)\n        }));\n};\n_s(useCustomElementPortal, \"oiOG9E/Vs62Qo8+cCTZaTt2hUTA=\");\n //# sourceMappingURL=useCustomElementPortal.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL25vZGVfbW9kdWxlcy9AY2xlcmsvY2xlcmstcmVhY3QvZGlzdC9lc20vdXRpbHMvdXNlQ3VzdG9tRWxlbWVudFBvcnRhbC5qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7OztBQUE4QjtBQUNVO0FBQ0M7QUFDekMsTUFBTUcseUJBQXlCLENBQUNDOztJQUM5QixNQUFNQyxlQUFlQyxNQUFNRixTQUFTRyxNQUFNLEVBQUVDLElBQUksQ0FBQztJQUNqRCxNQUFNLENBQUNDLE9BQU9DLFNBQVMsR0FBR1QsK0NBQVFBLENBQUNJO0lBQ25DLE9BQU9ELFNBQVNPLEdBQUcsQ0FBQyxDQUFDQyxJQUFJQyxRQUFXO1lBQ2xDQyxJQUFJRixHQUFHRSxFQUFFO1lBQ1RDLE9BQU8sQ0FBQ0MsT0FBU04sU0FBUyxDQUFDTyxZQUFjQSxVQUFVTixHQUFHLENBQUMsQ0FBQ08sR0FBR0MsSUFBTUEsTUFBTU4sUUFBUUcsT0FBT0U7WUFDdEZFLFNBQVMsSUFBTVYsU0FBUyxDQUFDTyxZQUFjQSxVQUFVTixHQUFHLENBQUMsQ0FBQ08sR0FBR0MsSUFBTUEsTUFBTU4sUUFBUSxPQUFPSztZQUNwRkcsUUFBUSxJQUFNLGFBQWEsaUJBQUdyQiwwREFBbUIsQ0FBQ0EsdURBQWMsRUFBRSxNQUFNUyxLQUFLLENBQUNJLE1BQU0saUJBQUdYLHVEQUFZQSxDQUFDVSxHQUFHWSxTQUFTLEVBQUVmLEtBQUssQ0FBQ0ksTUFBTSxJQUFJO1FBQ3BJO0FBQ0Y7R0FUTVY7QUFZSixDQUNGLGtEQUFrRCIsInNvdXJjZXMiOlsid2VicGFjazovL19OX0UvLi9ub2RlX21vZHVsZXMvQGNsZXJrL2NsZXJrLXJlYWN0L2Rpc3QvZXNtL3V0aWxzL3VzZUN1c3RvbUVsZW1lbnRQb3J0YWwuanM/MjMwYiJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgXCIuLi9jaHVuay0zVzVHNENZSS5qc1wiO1xuaW1wb3J0IFJlYWN0LCB7IHVzZVN0YXRlIH0gZnJvbSBcInJlYWN0XCI7XG5pbXBvcnQgeyBjcmVhdGVQb3J0YWwgfSBmcm9tIFwicmVhY3QtZG9tXCI7XG5jb25zdCB1c2VDdXN0b21FbGVtZW50UG9ydGFsID0gKGVsZW1lbnRzKSA9PiB7XG4gIGNvbnN0IGluaXRpYWxTdGF0ZSA9IEFycmF5KGVsZW1lbnRzLmxlbmd0aCkuZmlsbChudWxsKTtcbiAgY29uc3QgW25vZGVzLCBzZXROb2Rlc10gPSB1c2VTdGF0ZShpbml0aWFsU3RhdGUpO1xuICByZXR1cm4gZWxlbWVudHMubWFwKChlbCwgaW5kZXgpID0+ICh7XG4gICAgaWQ6IGVsLmlkLFxuICAgIG1vdW50OiAobm9kZSkgPT4gc2V0Tm9kZXMoKHByZXZTdGF0ZSkgPT4gcHJldlN0YXRlLm1hcCgobiwgaSkgPT4gaSA9PT0gaW5kZXggPyBub2RlIDogbikpLFxuICAgIHVubW91bnQ6ICgpID0+IHNldE5vZGVzKChwcmV2U3RhdGUpID0+IHByZXZTdGF0ZS5tYXAoKG4sIGkpID0+IGkgPT09IGluZGV4ID8gbnVsbCA6IG4pKSxcbiAgICBwb3J0YWw6ICgpID0+IC8qIEBfX1BVUkVfXyAqLyBSZWFjdC5jcmVhdGVFbGVtZW50KFJlYWN0LkZyYWdtZW50LCBudWxsLCBub2Rlc1tpbmRleF0gPyBjcmVhdGVQb3J0YWwoZWwuY29tcG9uZW50LCBub2Rlc1tpbmRleF0pIDogbnVsbClcbiAgfSkpO1xufTtcbmV4cG9ydCB7XG4gIHVzZUN1c3RvbUVsZW1lbnRQb3J0YWxcbn07XG4vLyMgc291cmNlTWFwcGluZ1VSTD11c2VDdXN0b21FbGVtZW50UG9ydGFsLmpzLm1hcCJdLCJuYW1lcyI6WyJSZWFjdCIsInVzZVN0YXRlIiwiY3JlYXRlUG9ydGFsIiwidXNlQ3VzdG9tRWxlbWVudFBvcnRhbCIsImVsZW1lbnRzIiwiaW5pdGlhbFN0YXRlIiwiQXJyYXkiLCJsZW5ndGgiLCJmaWxsIiwibm9kZXMiLCJzZXROb2RlcyIsIm1hcCIsImVsIiwiaW5kZXgiLCJpZCIsIm1vdW50Iiwibm9kZSIsInByZXZTdGF0ZSIsIm4iLCJpIiwidW5tb3VudCIsInBvcnRhbCIsImNyZWF0ZUVsZW1lbnQiLCJGcmFnbWVudCIsImNvbXBvbmVudCJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/@clerk/clerk-react/dist/esm/utils/useCustomElementPortal.js\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/@clerk/clerk-react/dist/esm/utils/useCustomPages.js":
/*!**************************************************************************!*\
  !*** ./node_modules/@clerk/clerk-react/dist/esm/utils/useCustomPages.js ***!
  \**************************************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   useOrganizationProfileCustomPages: function() { return /* binding */ useOrganizationProfileCustomPages; },\n/* harmony export */   useUserProfileCustomPages: function() { return /* binding */ useUserProfileCustomPages; }\n/* harmony export */ });\n/* harmony import */ var _clerk_shared__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @clerk/shared */ \"(app-pages-browser)/./node_modules/@clerk/shared/dist/index.mjs\");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! react */ \"(app-pages-browser)/./node_modules/next/dist/compiled/react/index.js\");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_1__);\n/* harmony import */ var _components_uiComponents__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../components/uiComponents */ \"(app-pages-browser)/./node_modules/@clerk/clerk-react/dist/esm/components/uiComponents.js\");\n/* harmony import */ var _errors__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../errors */ \"(app-pages-browser)/./node_modules/@clerk/clerk-react/dist/esm/errors.js\");\n/* harmony import */ var _useCustomElementPortal__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./useCustomElementPortal */ \"(app-pages-browser)/./node_modules/@clerk/clerk-react/dist/esm/utils/useCustomElementPortal.js\");\nvar _s = $RefreshSig$(), _s1 = $RefreshSig$(), _s2 = $RefreshSig$();\n\n\n\n\n\n\nconst isThatComponent = (v, component)=>{\n    return !!v && /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1___default().isValidElement(v) && (v === null || v === void 0 ? void 0 : v.type) === component;\n};\nconst useUserProfileCustomPages = (children)=>{\n    _s();\n    const reorderItemsLabels = [\n        \"account\",\n        \"security\"\n    ];\n    return useCustomPages({\n        children,\n        reorderItemsLabels,\n        LinkComponent: _components_uiComponents__WEBPACK_IMPORTED_MODULE_2__.UserProfileLink,\n        PageComponent: _components_uiComponents__WEBPACK_IMPORTED_MODULE_2__.UserProfilePage,\n        componentName: \"UserProfile\"\n    });\n};\n_s(useUserProfileCustomPages, \"fF82ZroMbJVt9OqIexRHLUr/SD4=\", false, function() {\n    return [\n        useCustomPages\n    ];\n});\nconst useOrganizationProfileCustomPages = (children)=>{\n    _s1();\n    const reorderItemsLabels = [\n        \"members\",\n        \"settings\"\n    ];\n    return useCustomPages({\n        children,\n        reorderItemsLabels,\n        LinkComponent: _components_uiComponents__WEBPACK_IMPORTED_MODULE_2__.OrganizationProfileLink,\n        PageComponent: _components_uiComponents__WEBPACK_IMPORTED_MODULE_2__.OrganizationProfilePage,\n        componentName: \"OrganizationProfile\"\n    });\n};\n_s1(useOrganizationProfileCustomPages, \"fF82ZroMbJVt9OqIexRHLUr/SD4=\", false, function() {\n    return [\n        useCustomPages\n    ];\n});\nconst useCustomPages = (param)=>{\n    let { children, LinkComponent, PageComponent, reorderItemsLabels, componentName } = param;\n    _s2();\n    const validChildren = [];\n    react__WEBPACK_IMPORTED_MODULE_1___default().Children.forEach(children, (child)=>{\n        if (!isThatComponent(child, PageComponent) && !isThatComponent(child, LinkComponent)) {\n            if (child) {\n                (0,_clerk_shared__WEBPACK_IMPORTED_MODULE_0__.logErrorInDevMode)((0,_errors__WEBPACK_IMPORTED_MODULE_3__.customPagesIgnoredComponent)(componentName));\n            }\n            return;\n        }\n        const { props } = child;\n        const { children: children2, label, url, labelIcon } = props;\n        if (isThatComponent(child, PageComponent)) {\n            if (isReorderItem(props, reorderItemsLabels)) {\n                validChildren.push({\n                    label\n                });\n            } else if (isCustomPage(props)) {\n                validChildren.push({\n                    label,\n                    labelIcon,\n                    children: children2,\n                    url\n                });\n            } else {\n                (0,_clerk_shared__WEBPACK_IMPORTED_MODULE_0__.logErrorInDevMode)((0,_errors__WEBPACK_IMPORTED_MODULE_3__.customPageWrongProps)(componentName));\n                return;\n            }\n        }\n        if (isThatComponent(child, LinkComponent)) {\n            if (isExternalLink(props)) {\n                validChildren.push({\n                    label,\n                    labelIcon,\n                    url\n                });\n            } else {\n                (0,_clerk_shared__WEBPACK_IMPORTED_MODULE_0__.logErrorInDevMode)((0,_errors__WEBPACK_IMPORTED_MODULE_3__.customLinkWrongProps)(componentName));\n                return;\n            }\n        }\n    });\n    const customPageContents = [];\n    const customPageLabelIcons = [];\n    const customLinkLabelIcons = [];\n    validChildren.forEach((cp, index)=>{\n        if (isCustomPage(cp)) {\n            customPageContents.push({\n                component: cp.children,\n                id: index\n            });\n            customPageLabelIcons.push({\n                component: cp.labelIcon,\n                id: index\n            });\n            return;\n        }\n        if (isExternalLink(cp)) {\n            customLinkLabelIcons.push({\n                component: cp.labelIcon,\n                id: index\n            });\n        }\n    });\n    const customPageContentsPortals = (0,_useCustomElementPortal__WEBPACK_IMPORTED_MODULE_4__.useCustomElementPortal)(customPageContents);\n    const customPageLabelIconsPortals = (0,_useCustomElementPortal__WEBPACK_IMPORTED_MODULE_4__.useCustomElementPortal)(customPageLabelIcons);\n    const customLinkLabelIconsPortals = (0,_useCustomElementPortal__WEBPACK_IMPORTED_MODULE_4__.useCustomElementPortal)(customLinkLabelIcons);\n    const customPages = [];\n    const customPagesPortals = [];\n    validChildren.forEach((cp, index)=>{\n        if (isReorderItem(cp, reorderItemsLabels)) {\n            customPages.push({\n                label: cp.label\n            });\n            return;\n        }\n        if (isCustomPage(cp)) {\n            const { portal: contentPortal, mount, unmount } = customPageContentsPortals.find((p)=>p.id === index);\n            const { portal: labelPortal, mount: mountIcon, unmount: unmountIcon } = customPageLabelIconsPortals.find((p)=>p.id === index);\n            customPages.push({\n                label: cp.label,\n                url: cp.url,\n                mount,\n                unmount,\n                mountIcon,\n                unmountIcon\n            });\n            customPagesPortals.push(contentPortal);\n            customPagesPortals.push(labelPortal);\n            return;\n        }\n        if (isExternalLink(cp)) {\n            const { portal: labelPortal, mount: mountIcon, unmount: unmountIcon } = customLinkLabelIconsPortals.find((p)=>p.id === index);\n            customPages.push({\n                label: cp.label,\n                url: cp.url,\n                mountIcon,\n                unmountIcon\n            });\n            customPagesPortals.push(labelPortal);\n            return;\n        }\n    });\n    return {\n        customPages,\n        customPagesPortals\n    };\n};\n_s2(useCustomPages, \"wDjB4QthAxpfBm1i9D5TtrnrrV0=\", false, function() {\n    return [\n        _useCustomElementPortal__WEBPACK_IMPORTED_MODULE_4__.useCustomElementPortal,\n        _useCustomElementPortal__WEBPACK_IMPORTED_MODULE_4__.useCustomElementPortal,\n        _useCustomElementPortal__WEBPACK_IMPORTED_MODULE_4__.useCustomElementPortal\n    ];\n});\nconst isReorderItem = (childProps, validItems)=>{\n    const { children, label, url, labelIcon } = childProps;\n    return !children && !url && !labelIcon && validItems.some((v)=>v === label);\n};\nconst isCustomPage = (childProps)=>{\n    const { children, label, url, labelIcon } = childProps;\n    return !!children && !!url && !!labelIcon && !!label;\n};\nconst isExternalLink = (childProps)=>{\n    const { children, label, url, labelIcon } = childProps;\n    return !children && !!url && !!labelIcon && !!label;\n};\n //# sourceMappingURL=useCustomPages.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/@clerk/clerk-react/dist/esm/utils/useCustomPages.js\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/@clerk/clerk-react/dist/esm/utils/useMaxAllowedInstancesGuard.js":
/*!***************************************************************************************!*\
  !*** ./node_modules/@clerk/clerk-react/dist/esm/utils/useMaxAllowedInstancesGuard.js ***!
  \***************************************************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   useMaxAllowedInstancesGuard: function() { return /* binding */ useMaxAllowedInstancesGuard; },\n/* harmony export */   withMaxAllowedInstancesGuard: function() { return /* binding */ withMaxAllowedInstancesGuard; }\n/* harmony export */ });\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react */ \"(app-pages-browser)/./node_modules/next/dist/compiled/react/index.js\");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_0__);\nvar _s = $RefreshSig$();\n\n\nconst counts = /* @__PURE__ */ new Map();\nfunction useMaxAllowedInstancesGuard(name, error) {\n    let maxCount = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : 1;\n    _s();\n    react__WEBPACK_IMPORTED_MODULE_0___default().useEffect(()=>{\n        const count = counts.get(name) || 0;\n        if (count == maxCount) {\n            throw new Error(error);\n        }\n        counts.set(name, count + 1);\n        return ()=>{\n            counts.set(name, (counts.get(name) || 1) - 1);\n        };\n    }, []);\n}\n_s(useMaxAllowedInstancesGuard, \"OD7bBpZva5O2jO+Puf00hKivP7c=\");\nfunction withMaxAllowedInstancesGuard(WrappedComponent, name, error) {\n    var _s = $RefreshSig$();\n    const displayName = WrappedComponent.displayName || WrappedComponent.name || name || \"Component\";\n    const Hoc = (props)=>{\n        _s();\n        useMaxAllowedInstancesGuard(name, error);\n        return /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0___default().createElement(WrappedComponent, {\n            ...props\n        });\n    };\n    _s(Hoc, \"JCiFKLaOo/vFofVHfh+8WBvWOBM=\", false, function() {\n        return [\n            useMaxAllowedInstancesGuard\n        ];\n    });\n    Hoc.displayName = \"withMaxAllowedInstancesGuard(\".concat(displayName, \")\");\n    return Hoc;\n}\n //# sourceMappingURL=useMaxAllowedInstancesGuard.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL25vZGVfbW9kdWxlcy9AY2xlcmsvY2xlcmstcmVhY3QvZGlzdC9lc20vdXRpbHMvdXNlTWF4QWxsb3dlZEluc3RhbmNlc0d1YXJkLmpzIiwibWFwcGluZ3MiOiI7Ozs7Ozs7O0FBQThCO0FBQ0o7QUFDMUIsTUFBTUMsU0FBUyxhQUFhLEdBQUcsSUFBSUM7QUFDbkMsU0FBU0MsNEJBQTRCQyxJQUFJLEVBQUVDLEtBQUs7UUFBRUMsV0FBQUEsaUVBQVc7O0lBQzNETixzREFBZSxDQUFDO1FBQ2QsTUFBTVEsUUFBUVAsT0FBT1EsR0FBRyxDQUFDTCxTQUFTO1FBQ2xDLElBQUlJLFNBQVNGLFVBQVU7WUFDckIsTUFBTSxJQUFJSSxNQUFNTDtRQUNsQjtRQUNBSixPQUFPVSxHQUFHLENBQUNQLE1BQU1JLFFBQVE7UUFDekIsT0FBTztZQUNMUCxPQUFPVSxHQUFHLENBQUNQLE1BQU0sQ0FBQ0gsT0FBT1EsR0FBRyxDQUFDTCxTQUFTLEtBQUs7UUFDN0M7SUFDRixHQUFHLEVBQUU7QUFDUDtHQVhTRDtBQVlULFNBQVNTLDZCQUE2QkMsZ0JBQWdCLEVBQUVULElBQUksRUFBRUMsS0FBSzs7SUFDakUsTUFBTVMsY0FBY0QsaUJBQWlCQyxXQUFXLElBQUlELGlCQUFpQlQsSUFBSSxJQUFJQSxRQUFRO0lBQ3JGLE1BQU1XLE1BQU0sQ0FBQ0M7O1FBQ1hiLDRCQUE0QkMsTUFBTUM7UUFDbEMsT0FBTyxhQUFhLGlCQUFHTCwwREFBbUIsQ0FBQ2Esa0JBQWtCO1lBQUUsR0FBR0csS0FBSztRQUFDO0lBQzFFO09BSE1EOztZQUNKWjs7O0lBR0ZZLElBQUlELFdBQVcsR0FBRyxnQ0FBNEMsT0FBWkEsYUFBWTtJQUM5RCxPQUFPQztBQUNUO0FBSUUsQ0FDRix1REFBdUQiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9fTl9FLy4vbm9kZV9tb2R1bGVzL0BjbGVyay9jbGVyay1yZWFjdC9kaXN0L2VzbS91dGlscy91c2VNYXhBbGxvd2VkSW5zdGFuY2VzR3VhcmQuanM/NDk5OSJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgXCIuLi9jaHVuay0zVzVHNENZSS5qc1wiO1xuaW1wb3J0IFJlYWN0IGZyb20gXCJyZWFjdFwiO1xuY29uc3QgY291bnRzID0gLyogQF9fUFVSRV9fICovIG5ldyBNYXAoKTtcbmZ1bmN0aW9uIHVzZU1heEFsbG93ZWRJbnN0YW5jZXNHdWFyZChuYW1lLCBlcnJvciwgbWF4Q291bnQgPSAxKSB7XG4gIFJlYWN0LnVzZUVmZmVjdCgoKSA9PiB7XG4gICAgY29uc3QgY291bnQgPSBjb3VudHMuZ2V0KG5hbWUpIHx8IDA7XG4gICAgaWYgKGNvdW50ID09IG1heENvdW50KSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoZXJyb3IpO1xuICAgIH1cbiAgICBjb3VudHMuc2V0KG5hbWUsIGNvdW50ICsgMSk7XG4gICAgcmV0dXJuICgpID0+IHtcbiAgICAgIGNvdW50cy5zZXQobmFtZSwgKGNvdW50cy5nZXQobmFtZSkgfHwgMSkgLSAxKTtcbiAgICB9O1xuICB9LCBbXSk7XG59XG5mdW5jdGlvbiB3aXRoTWF4QWxsb3dlZEluc3RhbmNlc0d1YXJkKFdyYXBwZWRDb21wb25lbnQsIG5hbWUsIGVycm9yKSB7XG4gIGNvbnN0IGRpc3BsYXlOYW1lID0gV3JhcHBlZENvbXBvbmVudC5kaXNwbGF5TmFtZSB8fCBXcmFwcGVkQ29tcG9uZW50Lm5hbWUgfHwgbmFtZSB8fCBcIkNvbXBvbmVudFwiO1xuICBjb25zdCBIb2MgPSAocHJvcHMpID0+IHtcbiAgICB1c2VNYXhBbGxvd2VkSW5zdGFuY2VzR3VhcmQobmFtZSwgZXJyb3IpO1xuICAgIHJldHVybiAvKiBAX19QVVJFX18gKi8gUmVhY3QuY3JlYXRlRWxlbWVudChXcmFwcGVkQ29tcG9uZW50LCB7IC4uLnByb3BzIH0pO1xuICB9O1xuICBIb2MuZGlzcGxheU5hbWUgPSBgd2l0aE1heEFsbG93ZWRJbnN0YW5jZXNHdWFyZCgke2Rpc3BsYXlOYW1lfSlgO1xuICByZXR1cm4gSG9jO1xufVxuZXhwb3J0IHtcbiAgdXNlTWF4QWxsb3dlZEluc3RhbmNlc0d1YXJkLFxuICB3aXRoTWF4QWxsb3dlZEluc3RhbmNlc0d1YXJkXG59O1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9dXNlTWF4QWxsb3dlZEluc3RhbmNlc0d1YXJkLmpzLm1hcCJdLCJuYW1lcyI6WyJSZWFjdCIsImNvdW50cyIsIk1hcCIsInVzZU1heEFsbG93ZWRJbnN0YW5jZXNHdWFyZCIsIm5hbWUiLCJlcnJvciIsIm1heENvdW50IiwidXNlRWZmZWN0IiwiY291bnQiLCJnZXQiLCJFcnJvciIsInNldCIsIndpdGhNYXhBbGxvd2VkSW5zdGFuY2VzR3VhcmQiLCJXcmFwcGVkQ29tcG9uZW50IiwiZGlzcGxheU5hbWUiLCJIb2MiLCJwcm9wcyIsImNyZWF0ZUVsZW1lbnQiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/@clerk/clerk-react/dist/esm/utils/useMaxAllowedInstancesGuard.js\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/@clerk/clerk-react/dist/esm/utils/versionSelector.js":
/*!***************************************************************************!*\
  !*** ./node_modules/@clerk/clerk-react/dist/esm/utils/versionSelector.js ***!
  \***************************************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   versionSelector: function() { return /* binding */ versionSelector; }\n/* harmony export */ });\n\nconst versionSelector = (clerkJSVersion)=>{\n    if (clerkJSVersion) {\n        return clerkJSVersion;\n    }\n    const prereleaseTag = getPrereleaseTag(\"4.30.3\");\n    if (prereleaseTag) {\n        if (prereleaseTag === \"snapshot\") {\n            return \"4.68.2\";\n        }\n        return prereleaseTag;\n    }\n    return getMajorVersion(\"4.30.3\");\n};\nconst getPrereleaseTag = (packageVersion)=>{\n    var _packageVersion_match;\n    return (_packageVersion_match = packageVersion.match(/-(.*)\\./)) === null || _packageVersion_match === void 0 ? void 0 : _packageVersion_match[1];\n};\nconst getMajorVersion = (packageVersion)=>packageVersion.split(\".\")[0];\n //# sourceMappingURL=versionSelector.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL25vZGVfbW9kdWxlcy9AY2xlcmsvY2xlcmstcmVhY3QvZGlzdC9lc20vdXRpbHMvdmVyc2lvblNlbGVjdG9yLmpzIiwibWFwcGluZ3MiOiI7Ozs7QUFBOEI7QUFDOUIsTUFBTUEsa0JBQWtCLENBQUNDO0lBQ3ZCLElBQUlBLGdCQUFnQjtRQUNsQixPQUFPQTtJQUNUO0lBQ0EsTUFBTUMsZ0JBQWdCQyxpQkFBaUI7SUFDdkMsSUFBSUQsZUFBZTtRQUNqQixJQUFJQSxrQkFBa0IsWUFBWTtZQUNoQyxPQUFPO1FBQ1Q7UUFDQSxPQUFPQTtJQUNUO0lBQ0EsT0FBT0UsZ0JBQWdCO0FBQ3pCO0FBQ0EsTUFBTUQsbUJBQW1CLENBQUNFO1FBQW1CQTtZQUFBQSx3QkFBQUEsZUFBZUMsS0FBSyxDQUFDLHdCQUFyQkQsNENBQUFBLHFCQUFpQyxDQUFDLEVBQUU7O0FBQ2pGLE1BQU1ELGtCQUFrQixDQUFDQyxpQkFBbUJBLGVBQWVFLEtBQUssQ0FBQyxJQUFJLENBQUMsRUFBRTtBQUd0RSxDQUNGLDJDQUEyQyIsInNvdXJjZXMiOlsid2VicGFjazovL19OX0UvLi9ub2RlX21vZHVsZXMvQGNsZXJrL2NsZXJrLXJlYWN0L2Rpc3QvZXNtL3V0aWxzL3ZlcnNpb25TZWxlY3Rvci5qcz8wYjZiIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBcIi4uL2NodW5rLTNXNUc0Q1lJLmpzXCI7XG5jb25zdCB2ZXJzaW9uU2VsZWN0b3IgPSAoY2xlcmtKU1ZlcnNpb24pID0+IHtcbiAgaWYgKGNsZXJrSlNWZXJzaW9uKSB7XG4gICAgcmV0dXJuIGNsZXJrSlNWZXJzaW9uO1xuICB9XG4gIGNvbnN0IHByZXJlbGVhc2VUYWcgPSBnZXRQcmVyZWxlYXNlVGFnKFwiNC4zMC4zXCIpO1xuICBpZiAocHJlcmVsZWFzZVRhZykge1xuICAgIGlmIChwcmVyZWxlYXNlVGFnID09PSBcInNuYXBzaG90XCIpIHtcbiAgICAgIHJldHVybiBcIjQuNjguMlwiO1xuICAgIH1cbiAgICByZXR1cm4gcHJlcmVsZWFzZVRhZztcbiAgfVxuICByZXR1cm4gZ2V0TWFqb3JWZXJzaW9uKFwiNC4zMC4zXCIpO1xufTtcbmNvbnN0IGdldFByZXJlbGVhc2VUYWcgPSAocGFja2FnZVZlcnNpb24pID0+IHBhY2thZ2VWZXJzaW9uLm1hdGNoKC8tKC4qKVxcLi8pPy5bMV07XG5jb25zdCBnZXRNYWpvclZlcnNpb24gPSAocGFja2FnZVZlcnNpb24pID0+IHBhY2thZ2VWZXJzaW9uLnNwbGl0KFwiLlwiKVswXTtcbmV4cG9ydCB7XG4gIHZlcnNpb25TZWxlY3RvclxufTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXZlcnNpb25TZWxlY3Rvci5qcy5tYXAiXSwibmFtZXMiOlsidmVyc2lvblNlbGVjdG9yIiwiY2xlcmtKU1ZlcnNpb24iLCJwcmVyZWxlYXNlVGFnIiwiZ2V0UHJlcmVsZWFzZVRhZyIsImdldE1ham9yVmVyc2lvbiIsInBhY2thZ2VWZXJzaW9uIiwibWF0Y2giLCJzcGxpdCJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/@clerk/clerk-react/dist/esm/utils/versionSelector.js\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/@clerk/nextjs/dist/esm/client-boundary/NextOptionsContext.js":
/*!***********************************************************************************!*\
  !*** ./node_modules/@clerk/nextjs/dist/esm/client-boundary/NextOptionsContext.js ***!
  \***********************************************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   ClerkNextOptionsProvider: function() { return /* binding */ ClerkNextOptionsProvider; },\n/* harmony export */   useClerkNextOptions: function() { return /* binding */ useClerkNextOptions; }\n/* harmony export */ });\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react */ \"(app-pages-browser)/./node_modules/next/dist/compiled/react/index.js\");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_0__);\nvar _s = $RefreshSig$();\n\nconst ClerkNextOptionsCtx = /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0___default().createContext(void 0);\nClerkNextOptionsCtx.displayName = \"ClerkNextOptionsCtx\";\nconst useClerkNextOptions = ()=>{\n    _s();\n    const ctx = react__WEBPACK_IMPORTED_MODULE_0___default().useContext(ClerkNextOptionsCtx);\n    return ctx.value;\n};\n_s(useClerkNextOptions, \"/dMy7t63NXD4eYACoT93CePwGrg=\");\nconst ClerkNextOptionsProvider = (props)=>{\n    const { children, options } = props;\n    return /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0___default().createElement(ClerkNextOptionsCtx.Provider, {\n        value: {\n            value: options\n        }\n    }, children);\n};\n_c = ClerkNextOptionsProvider;\n //# sourceMappingURL=NextOptionsContext.js.map\nvar _c;\n$RefreshReg$(_c, \"ClerkNextOptionsProvider\");\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL25vZGVfbW9kdWxlcy9AY2xlcmsvbmV4dGpzL2Rpc3QvZXNtL2NsaWVudC1ib3VuZGFyeS9OZXh0T3B0aW9uc0NvbnRleHQuanMiLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7QUFBMEI7QUFDMUIsTUFBTUMsb0NBQXNCRCwwREFBbUIsQ0FBQyxLQUFLO0FBQ3JEQyxvQkFBb0JFLFdBQVcsR0FBRztBQUNsQyxNQUFNQyxzQkFBc0I7O0lBQzFCLE1BQU1DLE1BQU1MLHVEQUFnQixDQUFDQztJQUM3QixPQUFPSSxJQUFJRSxLQUFLO0FBQ2xCO0dBSE1IO0FBSU4sTUFBTUksMkJBQTJCLENBQUNDO0lBQ2hDLE1BQU0sRUFBRUMsUUFBUSxFQUFFQyxPQUFPLEVBQUUsR0FBR0Y7SUFDOUIsT0FBTyxhQUFhLGlCQUFHVCwwREFBbUIsQ0FBQ0Msb0JBQW9CWSxRQUFRLEVBQUU7UUFBRU4sT0FBTztZQUFFQSxPQUFPSTtRQUFRO0lBQUUsR0FBR0Q7QUFDMUc7S0FITUY7QUFPSixDQUNGLDhDQUE4QyIsInNvdXJjZXMiOlsid2VicGFjazovL19OX0UvLi9ub2RlX21vZHVsZXMvQGNsZXJrL25leHRqcy9kaXN0L2VzbS9jbGllbnQtYm91bmRhcnkvTmV4dE9wdGlvbnNDb250ZXh0LmpzPzlmNWYiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IFJlYWN0IGZyb20gXCJyZWFjdFwiO1xuY29uc3QgQ2xlcmtOZXh0T3B0aW9uc0N0eCA9IFJlYWN0LmNyZWF0ZUNvbnRleHQodm9pZCAwKTtcbkNsZXJrTmV4dE9wdGlvbnNDdHguZGlzcGxheU5hbWUgPSBcIkNsZXJrTmV4dE9wdGlvbnNDdHhcIjtcbmNvbnN0IHVzZUNsZXJrTmV4dE9wdGlvbnMgPSAoKSA9PiB7XG4gIGNvbnN0IGN0eCA9IFJlYWN0LnVzZUNvbnRleHQoQ2xlcmtOZXh0T3B0aW9uc0N0eCk7XG4gIHJldHVybiBjdHgudmFsdWU7XG59O1xuY29uc3QgQ2xlcmtOZXh0T3B0aW9uc1Byb3ZpZGVyID0gKHByb3BzKSA9PiB7XG4gIGNvbnN0IHsgY2hpbGRyZW4sIG9wdGlvbnMgfSA9IHByb3BzO1xuICByZXR1cm4gLyogQF9fUFVSRV9fICovIFJlYWN0LmNyZWF0ZUVsZW1lbnQoQ2xlcmtOZXh0T3B0aW9uc0N0eC5Qcm92aWRlciwgeyB2YWx1ZTogeyB2YWx1ZTogb3B0aW9ucyB9IH0sIGNoaWxkcmVuKTtcbn07XG5leHBvcnQge1xuICBDbGVya05leHRPcHRpb25zUHJvdmlkZXIsXG4gIHVzZUNsZXJrTmV4dE9wdGlvbnNcbn07XG4vLyMgc291cmNlTWFwcGluZ1VSTD1OZXh0T3B0aW9uc0NvbnRleHQuanMubWFwIl0sIm5hbWVzIjpbIlJlYWN0IiwiQ2xlcmtOZXh0T3B0aW9uc0N0eCIsImNyZWF0ZUNvbnRleHQiLCJkaXNwbGF5TmFtZSIsInVzZUNsZXJrTmV4dE9wdGlvbnMiLCJjdHgiLCJ1c2VDb250ZXh0IiwidmFsdWUiLCJDbGVya05leHRPcHRpb25zUHJvdmlkZXIiLCJwcm9wcyIsImNoaWxkcmVuIiwib3B0aW9ucyIsImNyZWF0ZUVsZW1lbnQiLCJQcm92aWRlciJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/@clerk/nextjs/dist/esm/client-boundary/NextOptionsContext.js\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/@clerk/nextjs/dist/esm/client-boundary/uiComponents.js":
/*!*****************************************************************************!*\
  !*** ./node_modules/@clerk/nextjs/dist/esm/client-boundary/uiComponents.js ***!
  \*****************************************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   CreateOrganization: function() { return /* reexport safe */ _clerk_clerk_react__WEBPACK_IMPORTED_MODULE_0__.CreateOrganization; },\n/* harmony export */   OrganizationList: function() { return /* reexport safe */ _clerk_clerk_react__WEBPACK_IMPORTED_MODULE_0__.OrganizationList; },\n/* harmony export */   OrganizationProfile: function() { return /* reexport safe */ _clerk_clerk_react__WEBPACK_IMPORTED_MODULE_0__.OrganizationProfile; },\n/* harmony export */   OrganizationSwitcher: function() { return /* reexport safe */ _clerk_clerk_react__WEBPACK_IMPORTED_MODULE_0__.OrganizationSwitcher; },\n/* harmony export */   SignIn: function() { return /* binding */ SignIn; },\n/* harmony export */   SignInButton: function() { return /* reexport safe */ _clerk_clerk_react__WEBPACK_IMPORTED_MODULE_0__.SignInButton; },\n/* harmony export */   SignInWithMetamaskButton: function() { return /* reexport safe */ _clerk_clerk_react__WEBPACK_IMPORTED_MODULE_0__.SignInWithMetamaskButton; },\n/* harmony export */   SignOutButton: function() { return /* reexport safe */ _clerk_clerk_react__WEBPACK_IMPORTED_MODULE_0__.SignOutButton; },\n/* harmony export */   SignUp: function() { return /* binding */ SignUp; },\n/* harmony export */   SignUpButton: function() { return /* reexport safe */ _clerk_clerk_react__WEBPACK_IMPORTED_MODULE_0__.SignUpButton; },\n/* harmony export */   UserButton: function() { return /* reexport safe */ _clerk_clerk_react__WEBPACK_IMPORTED_MODULE_0__.UserButton; },\n/* harmony export */   UserProfile: function() { return /* reexport safe */ _clerk_clerk_react__WEBPACK_IMPORTED_MODULE_0__.UserProfile; }\n/* harmony export */ });\n/* harmony import */ var _clerk_clerk_react__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @clerk/clerk-react */ \"(app-pages-browser)/./node_modules/@clerk/clerk-react/dist/esm/index.js\");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! react */ \"(app-pages-browser)/./node_modules/next/dist/compiled/react/index.js\");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_1__);\n/* harmony import */ var _NextOptionsContext__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./NextOptionsContext */ \"(app-pages-browser)/./node_modules/@clerk/nextjs/dist/esm/client-boundary/NextOptionsContext.js\");\n/* __next_internal_client_entry_do_not_use__ CreateOrganization,OrganizationList,OrganizationProfile,OrganizationSwitcher,SignIn,SignInButton,SignInWithMetamaskButton,SignOutButton,SignUp,SignUpButton,UserButton,UserProfile auto */ var _s = $RefreshSig$(), _s1 = $RefreshSig$();\n\n\n\n\nconst SignIn = (props)=>{\n    _s();\n    const { signInUrl: repoLevelSignInUrl } = (0,_NextOptionsContext__WEBPACK_IMPORTED_MODULE_2__.useClerkNextOptions)();\n    if (repoLevelSignInUrl) {\n        return /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1___default().createElement(_clerk_clerk_react__WEBPACK_IMPORTED_MODULE_0__.SignIn, {\n            routing: \"path\",\n            path: repoLevelSignInUrl,\n            ...props\n        });\n    }\n    return /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1___default().createElement(_clerk_clerk_react__WEBPACK_IMPORTED_MODULE_0__.SignIn, {\n        ...props\n    });\n};\n_s(SignIn, \"31YvdyRVYj/byJXoLlJaAeRzOTo=\", false, function() {\n    return [\n        _NextOptionsContext__WEBPACK_IMPORTED_MODULE_2__.useClerkNextOptions\n    ];\n});\n_c = SignIn;\nconst SignUp = (props)=>{\n    _s1();\n    const { signUpUrl: repoLevelSignUpUrl } = (0,_NextOptionsContext__WEBPACK_IMPORTED_MODULE_2__.useClerkNextOptions)();\n    if (repoLevelSignUpUrl) {\n        return /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1___default().createElement(_clerk_clerk_react__WEBPACK_IMPORTED_MODULE_0__.SignUp, {\n            routing: \"path\",\n            path: repoLevelSignUpUrl,\n            ...props\n        });\n    }\n    return /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1___default().createElement(_clerk_clerk_react__WEBPACK_IMPORTED_MODULE_0__.SignUp, {\n        ...props\n    });\n};\n_s1(SignUp, \"sgX/DA5oPOBmLJs2DckxNpqg8xA=\", false, function() {\n    return [\n        _NextOptionsContext__WEBPACK_IMPORTED_MODULE_2__.useClerkNextOptions\n    ];\n});\n_c1 = SignUp;\n //# sourceMappingURL=uiComponents.js.map\nvar _c, _c1;\n$RefreshReg$(_c, \"SignIn\");\n$RefreshReg$(_c1, \"SignUp\");\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL25vZGVfbW9kdWxlcy9AY2xlcmsvbmV4dGpzL2Rpc3QvZXNtL2NsaWVudC1ib3VuZGFyeS91aUNvbXBvbmVudHMuanMiLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7QUFDZ0Y7QUFDdEQ7QUFDaUM7QUFZL0I7QUFDNUIsTUFBTUEsU0FBUyxDQUFDZ0I7O0lBQ2QsTUFBTSxFQUFFQyxXQUFXQyxrQkFBa0IsRUFBRSxHQUFHYix3RUFBbUJBO0lBQzdELElBQUlhLG9CQUFvQjtRQUN0QixPQUFPLGFBQWEsaUJBQUdkLDBEQUFtQixDQUN4Q0gsc0RBQVVBLEVBQ1Y7WUFDRW1CLFNBQVM7WUFDVEMsTUFBTUg7WUFDTixHQUFHRixLQUFLO1FBQ1Y7SUFFSjtJQUNBLE9BQU8sYUFBYSxpQkFBR1osMERBQW1CLENBQUNILHNEQUFVQSxFQUFFO1FBQUUsR0FBR2UsS0FBSztJQUFDO0FBQ3BFO0dBYk1oQjs7UUFDc0NLLG9FQUFtQkE7OztLQUR6REw7QUFjTixNQUFNRSxTQUFTLENBQUNjOztJQUNkLE1BQU0sRUFBRU0sV0FBV0Msa0JBQWtCLEVBQUUsR0FBR2xCLHdFQUFtQkE7SUFDN0QsSUFBSWtCLG9CQUFvQjtRQUN0QixPQUFPLGFBQWEsaUJBQUduQiwwREFBbUIsQ0FDeENELHNEQUFVQSxFQUNWO1lBQ0VpQixTQUFTO1lBQ1RDLE1BQU1FO1lBQ04sR0FBR1AsS0FBSztRQUNWO0lBRUo7SUFDQSxPQUFPLGFBQWEsaUJBQUdaLDBEQUFtQixDQUFDRCxzREFBVUEsRUFBRTtRQUFFLEdBQUdhLEtBQUs7SUFBQztBQUNwRTtJQWJNZDs7UUFDc0NHLG9FQUFtQkE7OztNQUR6REg7QUEyQkosQ0FDRix3Q0FBd0MiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9fTl9FLy4vbm9kZV9tb2R1bGVzL0BjbGVyay9uZXh0anMvZGlzdC9lc20vY2xpZW50LWJvdW5kYXJ5L3VpQ29tcG9uZW50cy5qcz80NDhhIl0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIGNsaWVudFwiO1xuaW1wb3J0IHsgU2lnbkluIGFzIEJhc2VTaWduSW4sIFNpZ25VcCBhcyBCYXNlU2lnblVwIH0gZnJvbSBcIkBjbGVyay9jbGVyay1yZWFjdFwiO1xuaW1wb3J0IFJlYWN0IGZyb20gXCJyZWFjdFwiO1xuaW1wb3J0IHsgdXNlQ2xlcmtOZXh0T3B0aW9ucyB9IGZyb20gXCIuL05leHRPcHRpb25zQ29udGV4dFwiO1xuaW1wb3J0IHtcbiAgVXNlclByb2ZpbGUsXG4gIFVzZXJCdXR0b24sXG4gIE9yZ2FuaXphdGlvblN3aXRjaGVyLFxuICBPcmdhbml6YXRpb25Qcm9maWxlLFxuICBDcmVhdGVPcmdhbml6YXRpb24sXG4gIFNpZ25JbkJ1dHRvbixcbiAgU2lnblVwQnV0dG9uLFxuICBTaWduT3V0QnV0dG9uLFxuICBTaWduSW5XaXRoTWV0YW1hc2tCdXR0b24sXG4gIE9yZ2FuaXphdGlvbkxpc3Rcbn0gZnJvbSBcIkBjbGVyay9jbGVyay1yZWFjdFwiO1xuY29uc3QgU2lnbkluID0gKHByb3BzKSA9PiB7XG4gIGNvbnN0IHsgc2lnbkluVXJsOiByZXBvTGV2ZWxTaWduSW5VcmwgfSA9IHVzZUNsZXJrTmV4dE9wdGlvbnMoKTtcbiAgaWYgKHJlcG9MZXZlbFNpZ25JblVybCkge1xuICAgIHJldHVybiAvKiBAX19QVVJFX18gKi8gUmVhY3QuY3JlYXRlRWxlbWVudChcbiAgICAgIEJhc2VTaWduSW4sXG4gICAgICB7XG4gICAgICAgIHJvdXRpbmc6IFwicGF0aFwiLFxuICAgICAgICBwYXRoOiByZXBvTGV2ZWxTaWduSW5VcmwsXG4gICAgICAgIC4uLnByb3BzXG4gICAgICB9XG4gICAgKTtcbiAgfVxuICByZXR1cm4gLyogQF9fUFVSRV9fICovIFJlYWN0LmNyZWF0ZUVsZW1lbnQoQmFzZVNpZ25JbiwgeyAuLi5wcm9wcyB9KTtcbn07XG5jb25zdCBTaWduVXAgPSAocHJvcHMpID0+IHtcbiAgY29uc3QgeyBzaWduVXBVcmw6IHJlcG9MZXZlbFNpZ25VcFVybCB9ID0gdXNlQ2xlcmtOZXh0T3B0aW9ucygpO1xuICBpZiAocmVwb0xldmVsU2lnblVwVXJsKSB7XG4gICAgcmV0dXJuIC8qIEBfX1BVUkVfXyAqLyBSZWFjdC5jcmVhdGVFbGVtZW50KFxuICAgICAgQmFzZVNpZ25VcCxcbiAgICAgIHtcbiAgICAgICAgcm91dGluZzogXCJwYXRoXCIsXG4gICAgICAgIHBhdGg6IHJlcG9MZXZlbFNpZ25VcFVybCxcbiAgICAgICAgLi4ucHJvcHNcbiAgICAgIH1cbiAgICApO1xuICB9XG4gIHJldHVybiAvKiBAX19QVVJFX18gKi8gUmVhY3QuY3JlYXRlRWxlbWVudChCYXNlU2lnblVwLCB7IC4uLnByb3BzIH0pO1xufTtcbmV4cG9ydCB7XG4gIENyZWF0ZU9yZ2FuaXphdGlvbixcbiAgT3JnYW5pemF0aW9uTGlzdCxcbiAgT3JnYW5pemF0aW9uUHJvZmlsZSxcbiAgT3JnYW5pemF0aW9uU3dpdGNoZXIsXG4gIFNpZ25JbixcbiAgU2lnbkluQnV0dG9uLFxuICBTaWduSW5XaXRoTWV0YW1hc2tCdXR0b24sXG4gIFNpZ25PdXRCdXR0b24sXG4gIFNpZ25VcCxcbiAgU2lnblVwQnV0dG9uLFxuICBVc2VyQnV0dG9uLFxuICBVc2VyUHJvZmlsZVxufTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXVpQ29tcG9uZW50cy5qcy5tYXAiXSwibmFtZXMiOlsiU2lnbkluIiwiQmFzZVNpZ25JbiIsIlNpZ25VcCIsIkJhc2VTaWduVXAiLCJSZWFjdCIsInVzZUNsZXJrTmV4dE9wdGlvbnMiLCJVc2VyUHJvZmlsZSIsIlVzZXJCdXR0b24iLCJPcmdhbml6YXRpb25Td2l0Y2hlciIsIk9yZ2FuaXphdGlvblByb2ZpbGUiLCJDcmVhdGVPcmdhbml6YXRpb24iLCJTaWduSW5CdXR0b24iLCJTaWduVXBCdXR0b24iLCJTaWduT3V0QnV0dG9uIiwiU2lnbkluV2l0aE1ldGFtYXNrQnV0dG9uIiwiT3JnYW5pemF0aW9uTGlzdCIsInByb3BzIiwic2lnbkluVXJsIiwicmVwb0xldmVsU2lnbkluVXJsIiwiY3JlYXRlRWxlbWVudCIsInJvdXRpbmciLCJwYXRoIiwic2lnblVwVXJsIiwicmVwb0xldmVsU2lnblVwVXJsIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/@clerk/nextjs/dist/esm/client-boundary/uiComponents.js\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/lottie-react/build/index.umd.js":
/*!******************************************************!*\
  !*** ./node_modules/lottie-react/build/index.umd.js ***!
  \******************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

eval(__webpack_require__.ts("(function(global, factory) {\n     true ? factory(exports, __webpack_require__(/*! lottie-web */ \"(app-pages-browser)/./node_modules/lottie-web/build/player/lottie.js\"), __webpack_require__(/*! react */ \"(app-pages-browser)/./node_modules/next/dist/compiled/react/index.js\")) : 0;\n})(this, function(exports1, lottie, React) {\n    var _s = $RefreshSig$(), _s1 = $RefreshSig$(), _s2 = $RefreshSig$(), _s3 = $RefreshSig$();\n    \"use strict\";\n    function _interopDefaultLegacy(e) {\n        return e && typeof e === \"object\" && \"default\" in e ? e : {\n            \"default\": e\n        };\n    }\n    var lottie__default = /*#__PURE__*/ _interopDefaultLegacy(lottie);\n    var React__default = /*#__PURE__*/ _interopDefaultLegacy(React);\n    function _iterableToArrayLimit(arr, i) {\n        var _i = null == arr ? null : \"undefined\" != typeof Symbol && arr[Symbol.iterator] || arr[\"@@iterator\"];\n        if (null != _i) {\n            var _s, _e, _x, _r, _arr = [], _n = !0, _d = !1;\n            try {\n                if (_x = (_i = _i.call(arr)).next, 0 === i) {\n                    if (Object(_i) !== _i) return;\n                    _n = !1;\n                } else for(; !(_n = (_s = _x.call(_i)).done) && (_arr.push(_s.value), _arr.length !== i); _n = !0);\n            } catch (err) {\n                _d = !0, _e = err;\n            } finally{\n                try {\n                    if (!_n && null != _i.return && (_r = _i.return(), Object(_r) !== _r)) return;\n                } finally{\n                    if (_d) throw _e;\n                }\n            }\n            return _arr;\n        }\n    }\n    function ownKeys(object, enumerableOnly) {\n        var keys = Object.keys(object);\n        if (Object.getOwnPropertySymbols) {\n            var symbols = Object.getOwnPropertySymbols(object);\n            enumerableOnly && (symbols = symbols.filter(function(sym) {\n                return Object.getOwnPropertyDescriptor(object, sym).enumerable;\n            })), keys.push.apply(keys, symbols);\n        }\n        return keys;\n    }\n    function _objectSpread2(target) {\n        for(var i = 1; i < arguments.length; i++){\n            var source = null != arguments[i] ? arguments[i] : {};\n            i % 2 ? ownKeys(Object(source), !0).forEach(function(key) {\n                _defineProperty(target, key, source[key]);\n            }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function(key) {\n                Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));\n            });\n        }\n        return target;\n    }\n    function _defineProperty(obj, key, value) {\n        key = _toPropertyKey(key);\n        if (key in obj) {\n            Object.defineProperty(obj, key, {\n                value: value,\n                enumerable: true,\n                configurable: true,\n                writable: true\n            });\n        } else {\n            obj[key] = value;\n        }\n        return obj;\n    }\n    function _objectWithoutPropertiesLoose(source, excluded) {\n        if (source == null) return {};\n        var target = {};\n        var sourceKeys = Object.keys(source);\n        var key, i;\n        for(i = 0; i < sourceKeys.length; i++){\n            key = sourceKeys[i];\n            if (excluded.indexOf(key) >= 0) continue;\n            target[key] = source[key];\n        }\n        return target;\n    }\n    function _objectWithoutProperties(source, excluded) {\n        if (source == null) return {};\n        var target = _objectWithoutPropertiesLoose(source, excluded);\n        var key, i;\n        if (Object.getOwnPropertySymbols) {\n            var sourceSymbolKeys = Object.getOwnPropertySymbols(source);\n            for(i = 0; i < sourceSymbolKeys.length; i++){\n                key = sourceSymbolKeys[i];\n                if (excluded.indexOf(key) >= 0) continue;\n                if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue;\n                target[key] = source[key];\n            }\n        }\n        return target;\n    }\n    function _slicedToArray(arr, i) {\n        return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest();\n    }\n    function _arrayWithHoles(arr) {\n        if (Array.isArray(arr)) return arr;\n    }\n    function _unsupportedIterableToArray(o, minLen) {\n        if (!o) return;\n        if (typeof o === \"string\") return _arrayLikeToArray(o, minLen);\n        var n = Object.prototype.toString.call(o).slice(8, -1);\n        if (n === \"Object\" && o.constructor) n = o.constructor.name;\n        if (n === \"Map\" || n === \"Set\") return Array.from(o);\n        if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen);\n    }\n    function _arrayLikeToArray(arr, len) {\n        if (len == null || len > arr.length) len = arr.length;\n        for(var i = 0, arr2 = new Array(len); i < len; i++)arr2[i] = arr[i];\n        return arr2;\n    }\n    function _nonIterableRest() {\n        throw new TypeError(\"Invalid attempt to destructure non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n    }\n    function _toPrimitive(input, hint) {\n        if (typeof input !== \"object\" || input === null) return input;\n        var prim = input[Symbol.toPrimitive];\n        if (prim !== undefined) {\n            var res = prim.call(input, hint || \"default\");\n            if (typeof res !== \"object\") return res;\n            throw new TypeError(\"@@toPrimitive must return a primitive value.\");\n        }\n        return (hint === \"string\" ? String : Number)(input);\n    }\n    function _toPropertyKey(arg) {\n        var key = _toPrimitive(arg, \"string\");\n        return typeof key === \"symbol\" ? key : String(key);\n    }\n    var _excluded$1 = [\n        \"animationData\",\n        \"loop\",\n        \"autoplay\",\n        \"initialSegment\",\n        \"onComplete\",\n        \"onLoopComplete\",\n        \"onEnterFrame\",\n        \"onSegmentStart\",\n        \"onConfigReady\",\n        \"onDataReady\",\n        \"onDataFailed\",\n        \"onLoadedImages\",\n        \"onDOMLoaded\",\n        \"onDestroy\",\n        \"lottieRef\",\n        \"renderer\",\n        \"name\",\n        \"assetsPath\",\n        \"rendererSettings\"\n    ];\n    var useLottie = function useLottie(props, style) {\n        _s();\n        var animationData = props.animationData, loop = props.loop, autoplay = props.autoplay, initialSegment = props.initialSegment, onComplete = props.onComplete, onLoopComplete = props.onLoopComplete, onEnterFrame = props.onEnterFrame, onSegmentStart = props.onSegmentStart, onConfigReady = props.onConfigReady, onDataReady = props.onDataReady, onDataFailed = props.onDataFailed, onLoadedImages = props.onLoadedImages, onDOMLoaded = props.onDOMLoaded, onDestroy = props.onDestroy;\n        props.lottieRef;\n        props.renderer;\n        props.name;\n        props.assetsPath;\n        props.rendererSettings;\n        var rest = _objectWithoutProperties(props, _excluded$1);\n        var _useState = React.useState(false), _useState2 = _slicedToArray(_useState, 2), animationLoaded = _useState2[0], setAnimationLoaded = _useState2[1];\n        var animationInstanceRef = React.useRef();\n        var animationContainer = React.useRef(null);\n        /*\n          ======================================\n              INTERACTION METHODS\n          ======================================\n       */ /**\n     * Play\n     */ var play = function play() {\n            var _a;\n            (_a = animationInstanceRef.current) === null || _a === void 0 ? void 0 : _a.play();\n        };\n        /**\n     * Stop\n     */ var stop = function stop() {\n            var _a;\n            (_a = animationInstanceRef.current) === null || _a === void 0 ? void 0 : _a.stop();\n        };\n        /**\n     * Pause\n     */ var pause = function pause() {\n            var _a;\n            (_a = animationInstanceRef.current) === null || _a === void 0 ? void 0 : _a.pause();\n        };\n        /**\n     * Set animation speed\n     * @param speed\n     */ var setSpeed = function setSpeed(speed) {\n            var _a;\n            (_a = animationInstanceRef.current) === null || _a === void 0 ? void 0 : _a.setSpeed(speed);\n        };\n        /**\n     * Got to frame and play\n     * @param value\n     * @param isFrame\n     */ var goToAndPlay = function goToAndPlay(value, isFrame) {\n            var _a;\n            (_a = animationInstanceRef.current) === null || _a === void 0 ? void 0 : _a.goToAndPlay(value, isFrame);\n        };\n        /**\n     * Got to frame and stop\n     * @param value\n     * @param isFrame\n     */ var goToAndStop = function goToAndStop(value, isFrame) {\n            var _a;\n            (_a = animationInstanceRef.current) === null || _a === void 0 ? void 0 : _a.goToAndStop(value, isFrame);\n        };\n        /**\n     * Set animation direction\n     * @param direction\n     */ var setDirection = function setDirection(direction) {\n            var _a;\n            (_a = animationInstanceRef.current) === null || _a === void 0 ? void 0 : _a.setDirection(direction);\n        };\n        /**\n     * Play animation segments\n     * @param segments\n     * @param forceFlag\n     */ var playSegments = function playSegments(segments, forceFlag) {\n            var _a;\n            (_a = animationInstanceRef.current) === null || _a === void 0 ? void 0 : _a.playSegments(segments, forceFlag);\n        };\n        /**\n     * Set sub frames\n     * @param useSubFrames\n     */ var setSubframe = function setSubframe(useSubFrames) {\n            var _a;\n            (_a = animationInstanceRef.current) === null || _a === void 0 ? void 0 : _a.setSubframe(useSubFrames);\n        };\n        /**\n     * Get animation duration\n     * @param inFrames\n     */ var getDuration = function getDuration(inFrames) {\n            var _a;\n            return (_a = animationInstanceRef.current) === null || _a === void 0 ? void 0 : _a.getDuration(inFrames);\n        };\n        /**\n     * Destroy animation\n     */ var destroy = function destroy() {\n            var _a;\n            (_a = animationInstanceRef.current) === null || _a === void 0 ? void 0 : _a.destroy();\n            // Removing the reference to the animation so separate cleanups are skipped.\n            // Without it the internal `lottie-react` instance throws exceptions as it already cleared itself on destroy.\n            animationInstanceRef.current = undefined;\n        };\n        /*\n          ======================================\n              LOTTIE\n          ======================================\n       */ /**\n     * Load a new animation, and if it's the case, destroy the previous one\n     * @param {Object} forcedConfigs\n     */ var loadAnimation = function loadAnimation() {\n            var forcedConfigs = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n            var _a;\n            // Return if the container ref is null\n            if (!animationContainer.current) {\n                return;\n            }\n            // Destroy any previous instance\n            (_a = animationInstanceRef.current) === null || _a === void 0 ? void 0 : _a.destroy();\n            // Build the animation configuration\n            var config = _objectSpread2(_objectSpread2(_objectSpread2({}, props), forcedConfigs), {}, {\n                container: animationContainer.current\n            });\n            // Save the animation instance\n            animationInstanceRef.current = lottie__default[\"default\"].loadAnimation(config);\n            setAnimationLoaded(!!animationInstanceRef.current);\n            // Return a function that will clean up\n            return function() {\n                var _a;\n                (_a = animationInstanceRef.current) === null || _a === void 0 ? void 0 : _a.destroy();\n                animationInstanceRef.current = undefined;\n            };\n        };\n        /**\n     * (Re)Initialize when animation data changed\n     */ React.useEffect(function() {\n            var onUnmount = loadAnimation();\n            // Clean up on unmount\n            return function() {\n                return onUnmount === null || onUnmount === void 0 ? void 0 : onUnmount();\n            };\n        // eslint-disable-next-line react-hooks/exhaustive-deps\n        }, [\n            animationData,\n            loop\n        ]);\n        // Update the autoplay state\n        React.useEffect(function() {\n            if (!animationInstanceRef.current) {\n                return;\n            }\n            animationInstanceRef.current.autoplay = !!autoplay;\n        }, [\n            autoplay\n        ]);\n        // Update the initial segment state\n        React.useEffect(function() {\n            if (!animationInstanceRef.current) {\n                return;\n            }\n            // When null should reset to default animation length\n            if (!initialSegment) {\n                animationInstanceRef.current.resetSegments(true);\n                return;\n            }\n            // If it's not a valid segment, do nothing\n            if (!Array.isArray(initialSegment) || !initialSegment.length) {\n                return;\n            }\n            // If the current position it's not in the new segment\n            // set the current position to start\n            if (animationInstanceRef.current.currentRawFrame < initialSegment[0] || animationInstanceRef.current.currentRawFrame > initialSegment[1]) {\n                animationInstanceRef.current.currentRawFrame = initialSegment[0];\n            }\n            // Update the segment\n            animationInstanceRef.current.setSegment(initialSegment[0], initialSegment[1]);\n        }, [\n            initialSegment\n        ]);\n        /*\n          ======================================\n              EVENTS\n          ======================================\n       */ /**\n     * Reinitialize listener on change\n     */ React.useEffect(function() {\n            var partialListeners = [\n                {\n                    name: \"complete\",\n                    handler: onComplete\n                },\n                {\n                    name: \"loopComplete\",\n                    handler: onLoopComplete\n                },\n                {\n                    name: \"enterFrame\",\n                    handler: onEnterFrame\n                },\n                {\n                    name: \"segmentStart\",\n                    handler: onSegmentStart\n                },\n                {\n                    name: \"config_ready\",\n                    handler: onConfigReady\n                },\n                {\n                    name: \"data_ready\",\n                    handler: onDataReady\n                },\n                {\n                    name: \"data_failed\",\n                    handler: onDataFailed\n                },\n                {\n                    name: \"loaded_images\",\n                    handler: onLoadedImages\n                },\n                {\n                    name: \"DOMLoaded\",\n                    handler: onDOMLoaded\n                },\n                {\n                    name: \"destroy\",\n                    handler: onDestroy\n                }\n            ];\n            var listeners = partialListeners.filter(function(listener) {\n                return listener.handler != null;\n            });\n            if (!listeners.length) {\n                return;\n            }\n            var deregisterList = listeners.map(/**\n       * Handle the process of adding an event listener\n       * @param {Listener} listener\n       * @return {Function} Function that deregister the listener\n       */ function(listener) {\n                var _a;\n                (_a = animationInstanceRef.current) === null || _a === void 0 ? void 0 : _a.addEventListener(listener.name, listener.handler);\n                // Return a function to deregister this listener\n                return function() {\n                    var _a;\n                    (_a = animationInstanceRef.current) === null || _a === void 0 ? void 0 : _a.removeEventListener(listener.name, listener.handler);\n                };\n            });\n            // Deregister listeners on unmount\n            return function() {\n                deregisterList.forEach(function(deregister) {\n                    return deregister();\n                });\n            };\n        }, [\n            onComplete,\n            onLoopComplete,\n            onEnterFrame,\n            onSegmentStart,\n            onConfigReady,\n            onDataReady,\n            onDataFailed,\n            onLoadedImages,\n            onDOMLoaded,\n            onDestroy\n        ]);\n        /**\n     * Build the animation view\n     */ var View = /*#__PURE__*/ React__default[\"default\"].createElement(\"div\", _objectSpread2({\n            style: style,\n            ref: animationContainer\n        }, rest));\n        return {\n            View: View,\n            play: play,\n            stop: stop,\n            pause: pause,\n            setSpeed: setSpeed,\n            goToAndStop: goToAndStop,\n            goToAndPlay: goToAndPlay,\n            setDirection: setDirection,\n            playSegments: playSegments,\n            setSubframe: setSubframe,\n            getDuration: getDuration,\n            destroy: destroy,\n            animationContainerRef: animationContainer,\n            animationLoaded: animationLoaded,\n            animationItem: animationInstanceRef.current\n        };\n    };\n    _s(useLottie, \"xeYuijMTAfO0vynokmhETRYw+1o=\");\n    // helpers\n    function getContainerVisibility(container) {\n        var _container$getBoundin = container.getBoundingClientRect(), top = _container$getBoundin.top, height = _container$getBoundin.height;\n        var current = window.innerHeight - top;\n        var max = window.innerHeight + height;\n        return current / max;\n    }\n    function getContainerCursorPosition(container, cursorX, cursorY) {\n        var _container$getBoundin2 = container.getBoundingClientRect(), top = _container$getBoundin2.top, left = _container$getBoundin2.left, width = _container$getBoundin2.width, height = _container$getBoundin2.height;\n        var x = (cursorX - left) / width;\n        var y = (cursorY - top) / height;\n        return {\n            x: x,\n            y: y\n        };\n    }\n    var useInitInteractivity = function useInitInteractivity(_ref) {\n        _s1();\n        var wrapperRef = _ref.wrapperRef, animationItem = _ref.animationItem, mode = _ref.mode, actions = _ref.actions;\n        React.useEffect(function() {\n            var wrapper = wrapperRef.current;\n            if (!wrapper || !animationItem || !actions.length) {\n                return;\n            }\n            animationItem.stop();\n            var scrollModeHandler = function scrollModeHandler() {\n                var assignedSegment = null;\n                var scrollHandler = function scrollHandler() {\n                    var currentPercent = getContainerVisibility(wrapper);\n                    // Find the first action that satisfies the current position conditions\n                    var action = actions.find(function(_ref2) {\n                        var visibility = _ref2.visibility;\n                        return visibility && currentPercent >= visibility[0] && currentPercent <= visibility[1];\n                    });\n                    // Skip if no matching action was found!\n                    if (!action) {\n                        return;\n                    }\n                    if (action.type === \"seek\" && action.visibility && action.frames.length === 2) {\n                        // Seek: Go to a frame based on player scroll position action\n                        var frameToGo = action.frames[0] + Math.ceil((currentPercent - action.visibility[0]) / (action.visibility[1] - action.visibility[0]) * action.frames[1]);\n                        //! goToAndStop must be relative to the start of the current segment\n                        animationItem.goToAndStop(frameToGo - animationItem.firstFrame - 1, true);\n                    }\n                    if (action.type === \"loop\") {\n                        // Loop: Loop a given frames\n                        if (assignedSegment === null) {\n                            // if not playing any segments currently. play those segments and save to state\n                            animationItem.playSegments(action.frames, true);\n                            assignedSegment = action.frames;\n                        } else {\n                            // if playing any segments currently.\n                            //check if segments in state are equal to the frames selected by action\n                            if (assignedSegment !== action.frames) {\n                                // if they are not equal. new segments are to be loaded\n                                animationItem.playSegments(action.frames, true);\n                                assignedSegment = action.frames;\n                            } else if (animationItem.isPaused) {\n                                // if they are equal the play method must be called only if lottie is paused\n                                animationItem.playSegments(action.frames, true);\n                                assignedSegment = action.frames;\n                            }\n                        }\n                    }\n                    if (action.type === \"play\" && animationItem.isPaused) {\n                        // Play: Reset segments and continue playing full animation from current position\n                        animationItem.resetSegments(true);\n                        animationItem.play();\n                    }\n                    if (action.type === \"stop\") {\n                        // Stop: Stop playback\n                        animationItem.goToAndStop(action.frames[0] - animationItem.firstFrame - 1, true);\n                    }\n                };\n                document.addEventListener(\"scroll\", scrollHandler);\n                return function() {\n                    document.removeEventListener(\"scroll\", scrollHandler);\n                };\n            };\n            var cursorModeHandler = function cursorModeHandler() {\n                var handleCursor = function handleCursor(_x, _y) {\n                    var x = _x;\n                    var y = _y;\n                    // Resolve cursor position if cursor is inside container\n                    if (x !== -1 && y !== -1) {\n                        // Get container cursor position\n                        var pos = getContainerCursorPosition(wrapper, x, y);\n                        // Use the resolved position\n                        x = pos.x;\n                        y = pos.y;\n                    }\n                    // Find the first action that satisfies the current position conditions\n                    var action = actions.find(function(_ref3) {\n                        var position = _ref3.position;\n                        if (position && Array.isArray(position.x) && Array.isArray(position.y)) {\n                            return x >= position.x[0] && x <= position.x[1] && y >= position.y[0] && y <= position.y[1];\n                        }\n                        if (position && !Number.isNaN(position.x) && !Number.isNaN(position.y)) {\n                            return x === position.x && y === position.y;\n                        }\n                        return false;\n                    });\n                    // Skip if no matching action was found!\n                    if (!action) {\n                        return;\n                    }\n                    // Process action types:\n                    if (action.type === \"seek\" && action.position && Array.isArray(action.position.x) && Array.isArray(action.position.y) && action.frames.length === 2) {\n                        // Seek: Go to a frame based on player scroll position action\n                        var xPercent = (x - action.position.x[0]) / (action.position.x[1] - action.position.x[0]);\n                        var yPercent = (y - action.position.y[0]) / (action.position.y[1] - action.position.y[0]);\n                        animationItem.playSegments(action.frames, true);\n                        animationItem.goToAndStop(Math.ceil((xPercent + yPercent) / 2 * (action.frames[1] - action.frames[0])), true);\n                    }\n                    if (action.type === \"loop\") {\n                        animationItem.playSegments(action.frames, true);\n                    }\n                    if (action.type === \"play\") {\n                        // Play: Reset segments and continue playing full animation from current position\n                        if (animationItem.isPaused) {\n                            animationItem.resetSegments(false);\n                        }\n                        animationItem.playSegments(action.frames);\n                    }\n                    if (action.type === \"stop\") {\n                        animationItem.goToAndStop(action.frames[0], true);\n                    }\n                };\n                var mouseMoveHandler = function mouseMoveHandler(ev) {\n                    handleCursor(ev.clientX, ev.clientY);\n                };\n                var mouseOutHandler = function mouseOutHandler() {\n                    handleCursor(-1, -1);\n                };\n                wrapper.addEventListener(\"mousemove\", mouseMoveHandler);\n                wrapper.addEventListener(\"mouseout\", mouseOutHandler);\n                return function() {\n                    wrapper.removeEventListener(\"mousemove\", mouseMoveHandler);\n                    wrapper.removeEventListener(\"mouseout\", mouseOutHandler);\n                };\n            };\n            switch(mode){\n                case \"scroll\":\n                    return scrollModeHandler();\n                case \"cursor\":\n                    return cursorModeHandler();\n            }\n        // eslint-disable-next-line react-hooks/exhaustive-deps\n        }, [\n            mode,\n            animationItem\n        ]);\n    };\n    _s1(useInitInteractivity, \"OD7bBpZva5O2jO+Puf00hKivP7c=\");\n    var useLottieInteractivity = function useLottieInteractivity(_ref4) {\n        _s2();\n        var actions = _ref4.actions, mode = _ref4.mode, lottieObj = _ref4.lottieObj;\n        var animationItem = lottieObj.animationItem, View = lottieObj.View, animationContainerRef = lottieObj.animationContainerRef;\n        useInitInteractivity({\n            actions: actions,\n            animationItem: animationItem,\n            mode: mode,\n            wrapperRef: animationContainerRef\n        });\n        return View;\n    };\n    _s2(useLottieInteractivity, \"pZHzibF0ywEE8VfAvASRiDfXI8M=\", false, function() {\n        return [\n            useInitInteractivity\n        ];\n    });\n    var _excluded = [\n        \"style\",\n        \"interactivity\"\n    ];\n    var Lottie = function Lottie(props) {\n        _s3();\n        var _a, _b, _c;\n        var style = props.style, interactivity = props.interactivity, lottieProps = _objectWithoutProperties(props, _excluded);\n        /**\n     * Initialize the 'useLottie' hook\n     */ var _useLottie = useLottie(lottieProps, style), View = _useLottie.View, play = _useLottie.play, stop = _useLottie.stop, pause = _useLottie.pause, setSpeed = _useLottie.setSpeed, goToAndStop = _useLottie.goToAndStop, goToAndPlay = _useLottie.goToAndPlay, setDirection = _useLottie.setDirection, playSegments = _useLottie.playSegments, setSubframe = _useLottie.setSubframe, getDuration = _useLottie.getDuration, destroy = _useLottie.destroy, animationContainerRef = _useLottie.animationContainerRef, animationLoaded = _useLottie.animationLoaded, animationItem = _useLottie.animationItem;\n        /**\n     * Make the hook variables/methods available through the provided 'lottieRef'\n     */ React.useEffect(function() {\n            if (props.lottieRef) {\n                props.lottieRef.current = {\n                    play: play,\n                    stop: stop,\n                    pause: pause,\n                    setSpeed: setSpeed,\n                    goToAndPlay: goToAndPlay,\n                    goToAndStop: goToAndStop,\n                    setDirection: setDirection,\n                    playSegments: playSegments,\n                    setSubframe: setSubframe,\n                    getDuration: getDuration,\n                    destroy: destroy,\n                    animationContainerRef: animationContainerRef,\n                    animationLoaded: animationLoaded,\n                    animationItem: animationItem\n                };\n            }\n        // eslint-disable-next-line react-hooks/exhaustive-deps\n        }, [\n            (_a = props.lottieRef) === null || _a === void 0 ? void 0 : _a.current\n        ]);\n        return useLottieInteractivity({\n            lottieObj: {\n                View: View,\n                play: play,\n                stop: stop,\n                pause: pause,\n                setSpeed: setSpeed,\n                goToAndStop: goToAndStop,\n                goToAndPlay: goToAndPlay,\n                setDirection: setDirection,\n                playSegments: playSegments,\n                setSubframe: setSubframe,\n                getDuration: getDuration,\n                destroy: destroy,\n                animationContainerRef: animationContainerRef,\n                animationLoaded: animationLoaded,\n                animationItem: animationItem\n            },\n            actions: (_b = interactivity === null || interactivity === void 0 ? void 0 : interactivity.actions) !== null && _b !== void 0 ? _b : [],\n            mode: (_c = interactivity === null || interactivity === void 0 ? void 0 : interactivity.mode) !== null && _c !== void 0 ? _c : \"scroll\"\n        });\n    };\n    _s3(Lottie, \"+Yl74qjI6YZQ493sEPiZnMjYBq4=\", false, function() {\n        return [\n            useLottie,\n            useLottie,\n            useLottie,\n            useLottie,\n            useLottie,\n            useLottie,\n            useLottie,\n            useLottie,\n            useLottie,\n            useLottie,\n            useLottie,\n            useLottie,\n            useLottie,\n            useLottie,\n            useLottie,\n            useLottie,\n            useLottieInteractivity\n        ];\n    });\n    Object.defineProperty(exports1, \"LottiePlayer\", {\n        enumerable: true,\n        get: function() {\n            return lottie__default[\"default\"];\n        }\n    });\n    exports1[\"default\"] = Lottie;\n    exports1.useLottie = useLottie;\n    exports1.useLottieInteractivity = useLottieInteractivity;\n    Object.defineProperty(exports1, \"__esModule\", {\n        value: true\n    });\n}); //# sourceMappingURL=index.umd.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/lottie-react/build/index.umd.js\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/lottie-web/build/player/lottie.js":
/*!********************************************************!*\
  !*** ./node_modules/lottie-web/build/player/lottie.js ***!
  \********************************************************/
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("\ntypeof navigator !== \"undefined\" && function(global, factory) {\n     true ? module.exports = factory() : 0;\n}(void 0, function() {\n    \"use strict\";\n    var svgNS = \"http://www.w3.org/2000/svg\";\n    var locationHref = \"\";\n    var _useWebWorker = false;\n    var initialDefaultFrame = -999999;\n    var setWebWorker = function setWebWorker(flag) {\n        _useWebWorker = !!flag;\n    };\n    var getWebWorker = function getWebWorker() {\n        return _useWebWorker;\n    };\n    var setLocationHref = function setLocationHref(value) {\n        locationHref = value;\n    };\n    var getLocationHref = function getLocationHref() {\n        return locationHref;\n    };\n    function createTag(type) {\n        // return {appendChild:function(){},setAttribute:function(){},style:{}}\n        return document.createElement(type);\n    }\n    function extendPrototype(sources, destination) {\n        var i;\n        var len = sources.length;\n        var sourcePrototype;\n        for(i = 0; i < len; i += 1){\n            sourcePrototype = sources[i].prototype;\n            for(var attr in sourcePrototype){\n                if (Object.prototype.hasOwnProperty.call(sourcePrototype, attr)) destination.prototype[attr] = sourcePrototype[attr];\n            }\n        }\n    }\n    function getDescriptor(object, prop) {\n        return Object.getOwnPropertyDescriptor(object, prop);\n    }\n    function createProxyFunction(prototype) {\n        function ProxyFunction() {}\n        ProxyFunction.prototype = prototype;\n        return ProxyFunction;\n    }\n    // import Howl from '../../3rd_party/howler';\n    var audioControllerFactory = function() {\n        function AudioController(audioFactory) {\n            this.audios = [];\n            this.audioFactory = audioFactory;\n            this._volume = 1;\n            this._isMuted = false;\n        }\n        AudioController.prototype = {\n            addAudio: function addAudio(audio) {\n                this.audios.push(audio);\n            },\n            pause: function pause() {\n                var i;\n                var len = this.audios.length;\n                for(i = 0; i < len; i += 1){\n                    this.audios[i].pause();\n                }\n            },\n            resume: function resume() {\n                var i;\n                var len = this.audios.length;\n                for(i = 0; i < len; i += 1){\n                    this.audios[i].resume();\n                }\n            },\n            setRate: function setRate(rateValue) {\n                var i;\n                var len = this.audios.length;\n                for(i = 0; i < len; i += 1){\n                    this.audios[i].setRate(rateValue);\n                }\n            },\n            createAudio: function createAudio(assetPath) {\n                if (this.audioFactory) {\n                    return this.audioFactory(assetPath);\n                }\n                if (window.Howl) {\n                    return new window.Howl({\n                        src: [\n                            assetPath\n                        ]\n                    });\n                }\n                return {\n                    isPlaying: false,\n                    play: function play() {\n                        this.isPlaying = true;\n                    },\n                    seek: function seek() {\n                        this.isPlaying = false;\n                    },\n                    playing: function playing() {},\n                    rate: function rate() {},\n                    setVolume: function setVolume() {}\n                };\n            },\n            setAudioFactory: function setAudioFactory(audioFactory) {\n                this.audioFactory = audioFactory;\n            },\n            setVolume: function setVolume(value) {\n                this._volume = value;\n                this._updateVolume();\n            },\n            mute: function mute() {\n                this._isMuted = true;\n                this._updateVolume();\n            },\n            unmute: function unmute() {\n                this._isMuted = false;\n                this._updateVolume();\n            },\n            getVolume: function getVolume() {\n                return this._volume;\n            },\n            _updateVolume: function _updateVolume() {\n                var i;\n                var len = this.audios.length;\n                for(i = 0; i < len; i += 1){\n                    this.audios[i].volume(this._volume * (this._isMuted ? 0 : 1));\n                }\n            }\n        };\n        return function() {\n            return new AudioController();\n        };\n    }();\n    var createTypedArray = function() {\n        function createRegularArray(type, len) {\n            var i = 0;\n            var arr = [];\n            var value;\n            switch(type){\n                case \"int16\":\n                case \"uint8c\":\n                    value = 1;\n                    break;\n                default:\n                    value = 1.1;\n                    break;\n            }\n            for(i = 0; i < len; i += 1){\n                arr.push(value);\n            }\n            return arr;\n        }\n        function createTypedArrayFactory(type, len) {\n            if (type === \"float32\") {\n                return new Float32Array(len);\n            }\n            if (type === \"int16\") {\n                return new Int16Array(len);\n            }\n            if (type === \"uint8c\") {\n                return new Uint8ClampedArray(len);\n            }\n            return createRegularArray(type, len);\n        }\n        if (typeof Uint8ClampedArray === \"function\" && typeof Float32Array === \"function\") {\n            return createTypedArrayFactory;\n        }\n        return createRegularArray;\n    }();\n    function createSizedArray(len) {\n        return Array.apply(null, {\n            length: len\n        });\n    }\n    function _typeof$6(obj) {\n        \"@babel/helpers - typeof\";\n        if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") {\n            _typeof$6 = function _typeof(obj) {\n                return typeof obj;\n            };\n        } else {\n            _typeof$6 = function _typeof(obj) {\n                return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj;\n            };\n        }\n        return _typeof$6(obj);\n    }\n    var subframeEnabled = true;\n    var expressionsPlugin = null;\n    var expressionsInterfaces = null;\n    var idPrefix$1 = \"\";\n    var isSafari = /^((?!chrome|android).)*safari/i.test(navigator.userAgent);\n    var _shouldRoundValues = false;\n    var bmPow = Math.pow;\n    var bmSqrt = Math.sqrt;\n    var bmFloor = Math.floor;\n    var bmMax = Math.max;\n    var bmMin = Math.min;\n    var BMMath = {};\n    (function() {\n        var propertyNames = [\n            \"abs\",\n            \"acos\",\n            \"acosh\",\n            \"asin\",\n            \"asinh\",\n            \"atan\",\n            \"atanh\",\n            \"atan2\",\n            \"ceil\",\n            \"cbrt\",\n            \"expm1\",\n            \"clz32\",\n            \"cos\",\n            \"cosh\",\n            \"exp\",\n            \"floor\",\n            \"fround\",\n            \"hypot\",\n            \"imul\",\n            \"log\",\n            \"log1p\",\n            \"log2\",\n            \"log10\",\n            \"max\",\n            \"min\",\n            \"pow\",\n            \"random\",\n            \"round\",\n            \"sign\",\n            \"sin\",\n            \"sinh\",\n            \"sqrt\",\n            \"tan\",\n            \"tanh\",\n            \"trunc\",\n            \"E\",\n            \"LN10\",\n            \"LN2\",\n            \"LOG10E\",\n            \"LOG2E\",\n            \"PI\",\n            \"SQRT1_2\",\n            \"SQRT2\"\n        ];\n        var i;\n        var len = propertyNames.length;\n        for(i = 0; i < len; i += 1){\n            BMMath[propertyNames[i]] = Math[propertyNames[i]];\n        }\n    })();\n    function ProjectInterface$1() {\n        return {};\n    }\n    BMMath.random = Math.random;\n    BMMath.abs = function(val) {\n        var tOfVal = _typeof$6(val);\n        if (tOfVal === \"object\" && val.length) {\n            var absArr = createSizedArray(val.length);\n            var i;\n            var len = val.length;\n            for(i = 0; i < len; i += 1){\n                absArr[i] = Math.abs(val[i]);\n            }\n            return absArr;\n        }\n        return Math.abs(val);\n    };\n    var defaultCurveSegments = 150;\n    var degToRads = Math.PI / 180;\n    var roundCorner = 0.5519;\n    function roundValues(flag) {\n        _shouldRoundValues = !!flag;\n    }\n    function bmRnd(value) {\n        if (_shouldRoundValues) {\n            return Math.round(value);\n        }\n        return value;\n    }\n    function styleDiv(element) {\n        element.style.position = \"absolute\";\n        element.style.top = 0;\n        element.style.left = 0;\n        element.style.display = \"block\";\n        element.style.transformOrigin = \"0 0\";\n        element.style.webkitTransformOrigin = \"0 0\";\n        element.style.backfaceVisibility = \"visible\";\n        element.style.webkitBackfaceVisibility = \"visible\";\n        element.style.transformStyle = \"preserve-3d\";\n        element.style.webkitTransformStyle = \"preserve-3d\";\n        element.style.mozTransformStyle = \"preserve-3d\";\n    }\n    function BMEnterFrameEvent(type, currentTime, totalTime, frameMultiplier) {\n        this.type = type;\n        this.currentTime = currentTime;\n        this.totalTime = totalTime;\n        this.direction = frameMultiplier < 0 ? -1 : 1;\n    }\n    function BMCompleteEvent(type, frameMultiplier) {\n        this.type = type;\n        this.direction = frameMultiplier < 0 ? -1 : 1;\n    }\n    function BMCompleteLoopEvent(type, totalLoops, currentLoop, frameMultiplier) {\n        this.type = type;\n        this.currentLoop = currentLoop;\n        this.totalLoops = totalLoops;\n        this.direction = frameMultiplier < 0 ? -1 : 1;\n    }\n    function BMSegmentStartEvent(type, firstFrame, totalFrames) {\n        this.type = type;\n        this.firstFrame = firstFrame;\n        this.totalFrames = totalFrames;\n    }\n    function BMDestroyEvent(type, target) {\n        this.type = type;\n        this.target = target;\n    }\n    function BMRenderFrameErrorEvent(nativeError, currentTime) {\n        this.type = \"renderFrameError\";\n        this.nativeError = nativeError;\n        this.currentTime = currentTime;\n    }\n    function BMConfigErrorEvent(nativeError) {\n        this.type = \"configError\";\n        this.nativeError = nativeError;\n    }\n    function BMAnimationConfigErrorEvent(type, nativeError) {\n        this.type = type;\n        this.nativeError = nativeError;\n    }\n    var createElementID = function() {\n        var _count = 0;\n        return function createID() {\n            _count += 1;\n            return idPrefix$1 + \"__lottie_element_\" + _count;\n        };\n    }();\n    function HSVtoRGB(h, s, v) {\n        var r;\n        var g;\n        var b;\n        var i;\n        var f;\n        var p;\n        var q;\n        var t;\n        i = Math.floor(h * 6);\n        f = h * 6 - i;\n        p = v * (1 - s);\n        q = v * (1 - f * s);\n        t = v * (1 - (1 - f) * s);\n        switch(i % 6){\n            case 0:\n                r = v;\n                g = t;\n                b = p;\n                break;\n            case 1:\n                r = q;\n                g = v;\n                b = p;\n                break;\n            case 2:\n                r = p;\n                g = v;\n                b = t;\n                break;\n            case 3:\n                r = p;\n                g = q;\n                b = v;\n                break;\n            case 4:\n                r = t;\n                g = p;\n                b = v;\n                break;\n            case 5:\n                r = v;\n                g = p;\n                b = q;\n                break;\n            default:\n                break;\n        }\n        return [\n            r,\n            g,\n            b\n        ];\n    }\n    function RGBtoHSV(r, g, b) {\n        var max = Math.max(r, g, b);\n        var min = Math.min(r, g, b);\n        var d = max - min;\n        var h;\n        var s = max === 0 ? 0 : d / max;\n        var v = max / 255;\n        switch(max){\n            case min:\n                h = 0;\n                break;\n            case r:\n                h = g - b + d * (g < b ? 6 : 0);\n                h /= 6 * d;\n                break;\n            case g:\n                h = b - r + d * 2;\n                h /= 6 * d;\n                break;\n            case b:\n                h = r - g + d * 4;\n                h /= 6 * d;\n                break;\n            default:\n                break;\n        }\n        return [\n            h,\n            s,\n            v\n        ];\n    }\n    function addSaturationToRGB(color, offset) {\n        var hsv = RGBtoHSV(color[0] * 255, color[1] * 255, color[2] * 255);\n        hsv[1] += offset;\n        if (hsv[1] > 1) {\n            hsv[1] = 1;\n        } else if (hsv[1] <= 0) {\n            hsv[1] = 0;\n        }\n        return HSVtoRGB(hsv[0], hsv[1], hsv[2]);\n    }\n    function addBrightnessToRGB(color, offset) {\n        var hsv = RGBtoHSV(color[0] * 255, color[1] * 255, color[2] * 255);\n        hsv[2] += offset;\n        if (hsv[2] > 1) {\n            hsv[2] = 1;\n        } else if (hsv[2] < 0) {\n            hsv[2] = 0;\n        }\n        return HSVtoRGB(hsv[0], hsv[1], hsv[2]);\n    }\n    function addHueToRGB(color, offset) {\n        var hsv = RGBtoHSV(color[0] * 255, color[1] * 255, color[2] * 255);\n        hsv[0] += offset / 360;\n        if (hsv[0] > 1) {\n            hsv[0] -= 1;\n        } else if (hsv[0] < 0) {\n            hsv[0] += 1;\n        }\n        return HSVtoRGB(hsv[0], hsv[1], hsv[2]);\n    }\n    var rgbToHex = function() {\n        var colorMap = [];\n        var i;\n        var hex;\n        for(i = 0; i < 256; i += 1){\n            hex = i.toString(16);\n            colorMap[i] = hex.length === 1 ? \"0\" + hex : hex;\n        }\n        return function(r, g, b) {\n            if (r < 0) {\n                r = 0;\n            }\n            if (g < 0) {\n                g = 0;\n            }\n            if (b < 0) {\n                b = 0;\n            }\n            return \"#\" + colorMap[r] + colorMap[g] + colorMap[b];\n        };\n    }();\n    var setSubframeEnabled = function setSubframeEnabled(flag) {\n        subframeEnabled = !!flag;\n    };\n    var getSubframeEnabled = function getSubframeEnabled() {\n        return subframeEnabled;\n    };\n    var setExpressionsPlugin = function setExpressionsPlugin(value) {\n        expressionsPlugin = value;\n    };\n    var getExpressionsPlugin = function getExpressionsPlugin() {\n        return expressionsPlugin;\n    };\n    var setExpressionInterfaces = function setExpressionInterfaces(value) {\n        expressionsInterfaces = value;\n    };\n    var getExpressionInterfaces = function getExpressionInterfaces() {\n        return expressionsInterfaces;\n    };\n    var setDefaultCurveSegments = function setDefaultCurveSegments(value) {\n        defaultCurveSegments = value;\n    };\n    var getDefaultCurveSegments = function getDefaultCurveSegments() {\n        return defaultCurveSegments;\n    };\n    var setIdPrefix = function setIdPrefix(value) {\n        idPrefix$1 = value;\n    };\n    var getIdPrefix = function getIdPrefix() {\n        return idPrefix$1;\n    };\n    function createNS(type) {\n        // return {appendChild:function(){},setAttribute:function(){},style:{}}\n        return document.createElementNS(svgNS, type);\n    }\n    function _typeof$5(obj) {\n        \"@babel/helpers - typeof\";\n        if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") {\n            _typeof$5 = function _typeof(obj) {\n                return typeof obj;\n            };\n        } else {\n            _typeof$5 = function _typeof(obj) {\n                return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj;\n            };\n        }\n        return _typeof$5(obj);\n    }\n    var dataManager = function() {\n        var _counterId = 1;\n        var processes = [];\n        var workerFn;\n        var workerInstance;\n        var workerProxy = {\n            onmessage: function onmessage() {},\n            postMessage: function postMessage(path) {\n                workerFn({\n                    data: path\n                });\n            }\n        };\n        var _workerSelf = {\n            postMessage: function postMessage(data) {\n                workerProxy.onmessage({\n                    data: data\n                });\n            }\n        };\n        function createWorker(fn) {\n            if (window.Worker && window.Blob && getWebWorker()) {\n                var blob = new Blob([\n                    \"var _workerSelf = self; self.onmessage = \",\n                    fn.toString()\n                ], {\n                    type: \"text/javascript\"\n                }); // var blob = new Blob(['self.onmessage = ', fn.toString()], { type: 'text/javascript' });\n                var url = URL.createObjectURL(blob);\n                return new Worker(url);\n            }\n            workerFn = fn;\n            return workerProxy;\n        }\n        function setupWorker() {\n            if (!workerInstance) {\n                workerInstance = createWorker(function workerStart(e) {\n                    function dataFunctionManager() {\n                        function completeLayers(layers, comps) {\n                            var layerData;\n                            var i;\n                            var len = layers.length;\n                            var j;\n                            var jLen;\n                            var k;\n                            var kLen;\n                            for(i = 0; i < len; i += 1){\n                                layerData = layers[i];\n                                if (\"ks\" in layerData && !layerData.completed) {\n                                    layerData.completed = true;\n                                    if (layerData.hasMask) {\n                                        var maskProps = layerData.masksProperties;\n                                        jLen = maskProps.length;\n                                        for(j = 0; j < jLen; j += 1){\n                                            if (maskProps[j].pt.k.i) {\n                                                convertPathsToAbsoluteValues(maskProps[j].pt.k);\n                                            } else {\n                                                kLen = maskProps[j].pt.k.length;\n                                                for(k = 0; k < kLen; k += 1){\n                                                    if (maskProps[j].pt.k[k].s) {\n                                                        convertPathsToAbsoluteValues(maskProps[j].pt.k[k].s[0]);\n                                                    }\n                                                    if (maskProps[j].pt.k[k].e) {\n                                                        convertPathsToAbsoluteValues(maskProps[j].pt.k[k].e[0]);\n                                                    }\n                                                }\n                                            }\n                                        }\n                                    }\n                                    if (layerData.ty === 0) {\n                                        layerData.layers = findCompLayers(layerData.refId, comps);\n                                        completeLayers(layerData.layers, comps);\n                                    } else if (layerData.ty === 4) {\n                                        completeShapes(layerData.shapes);\n                                    } else if (layerData.ty === 5) {\n                                        completeText(layerData);\n                                    }\n                                }\n                            }\n                        }\n                        function completeChars(chars, assets) {\n                            if (chars) {\n                                var i = 0;\n                                var len = chars.length;\n                                for(i = 0; i < len; i += 1){\n                                    if (chars[i].t === 1) {\n                                        // var compData = findComp(chars[i].data.refId, assets);\n                                        chars[i].data.layers = findCompLayers(chars[i].data.refId, assets); // chars[i].data.ip = 0;\n                                        // chars[i].data.op = 99999;\n                                        // chars[i].data.st = 0;\n                                        // chars[i].data.sr = 1;\n                                        // chars[i].w = compData.w;\n                                        // chars[i].data.ks = {\n                                        //   a: { k: [0, 0, 0], a: 0 },\n                                        //   p: { k: [0, -compData.h, 0], a: 0 },\n                                        //   r: { k: 0, a: 0 },\n                                        //   s: { k: [100, 100], a: 0 },\n                                        //   o: { k: 100, a: 0 },\n                                        // };\n                                        completeLayers(chars[i].data.layers, assets);\n                                    }\n                                }\n                            }\n                        }\n                        function findComp(id, comps) {\n                            var i = 0;\n                            var len = comps.length;\n                            while(i < len){\n                                if (comps[i].id === id) {\n                                    return comps[i];\n                                }\n                                i += 1;\n                            }\n                            return null;\n                        }\n                        function findCompLayers(id, comps) {\n                            var comp = findComp(id, comps);\n                            if (comp) {\n                                if (!comp.layers.__used) {\n                                    comp.layers.__used = true;\n                                    return comp.layers;\n                                }\n                                return JSON.parse(JSON.stringify(comp.layers));\n                            }\n                            return null;\n                        }\n                        function completeShapes(arr) {\n                            var i;\n                            var len = arr.length;\n                            var j;\n                            var jLen;\n                            for(i = len - 1; i >= 0; i -= 1){\n                                if (arr[i].ty === \"sh\") {\n                                    if (arr[i].ks.k.i) {\n                                        convertPathsToAbsoluteValues(arr[i].ks.k);\n                                    } else {\n                                        jLen = arr[i].ks.k.length;\n                                        for(j = 0; j < jLen; j += 1){\n                                            if (arr[i].ks.k[j].s) {\n                                                convertPathsToAbsoluteValues(arr[i].ks.k[j].s[0]);\n                                            }\n                                            if (arr[i].ks.k[j].e) {\n                                                convertPathsToAbsoluteValues(arr[i].ks.k[j].e[0]);\n                                            }\n                                        }\n                                    }\n                                } else if (arr[i].ty === \"gr\") {\n                                    completeShapes(arr[i].it);\n                                }\n                            }\n                        }\n                        function convertPathsToAbsoluteValues(path) {\n                            var i;\n                            var len = path.i.length;\n                            for(i = 0; i < len; i += 1){\n                                path.i[i][0] += path.v[i][0];\n                                path.i[i][1] += path.v[i][1];\n                                path.o[i][0] += path.v[i][0];\n                                path.o[i][1] += path.v[i][1];\n                            }\n                        }\n                        function checkVersion(minimum, animVersionString) {\n                            var animVersion = animVersionString ? animVersionString.split(\".\") : [\n                                100,\n                                100,\n                                100\n                            ];\n                            if (minimum[0] > animVersion[0]) {\n                                return true;\n                            }\n                            if (animVersion[0] > minimum[0]) {\n                                return false;\n                            }\n                            if (minimum[1] > animVersion[1]) {\n                                return true;\n                            }\n                            if (animVersion[1] > minimum[1]) {\n                                return false;\n                            }\n                            if (minimum[2] > animVersion[2]) {\n                                return true;\n                            }\n                            if (animVersion[2] > minimum[2]) {\n                                return false;\n                            }\n                            return null;\n                        }\n                        var checkText = function() {\n                            var minimumVersion = [\n                                4,\n                                4,\n                                14\n                            ];\n                            function updateTextLayer(textLayer) {\n                                var documentData = textLayer.t.d;\n                                textLayer.t.d = {\n                                    k: [\n                                        {\n                                            s: documentData,\n                                            t: 0\n                                        }\n                                    ]\n                                };\n                            }\n                            function iterateLayers(layers) {\n                                var i;\n                                var len = layers.length;\n                                for(i = 0; i < len; i += 1){\n                                    if (layers[i].ty === 5) {\n                                        updateTextLayer(layers[i]);\n                                    }\n                                }\n                            }\n                            return function(animationData) {\n                                if (checkVersion(minimumVersion, animationData.v)) {\n                                    iterateLayers(animationData.layers);\n                                    if (animationData.assets) {\n                                        var i;\n                                        var len = animationData.assets.length;\n                                        for(i = 0; i < len; i += 1){\n                                            if (animationData.assets[i].layers) {\n                                                iterateLayers(animationData.assets[i].layers);\n                                            }\n                                        }\n                                    }\n                                }\n                            };\n                        }();\n                        var checkChars = function() {\n                            var minimumVersion = [\n                                4,\n                                7,\n                                99\n                            ];\n                            return function(animationData) {\n                                if (animationData.chars && !checkVersion(minimumVersion, animationData.v)) {\n                                    var i;\n                                    var len = animationData.chars.length;\n                                    for(i = 0; i < len; i += 1){\n                                        var charData = animationData.chars[i];\n                                        if (charData.data && charData.data.shapes) {\n                                            completeShapes(charData.data.shapes);\n                                            charData.data.ip = 0;\n                                            charData.data.op = 99999;\n                                            charData.data.st = 0;\n                                            charData.data.sr = 1;\n                                            charData.data.ks = {\n                                                p: {\n                                                    k: [\n                                                        0,\n                                                        0\n                                                    ],\n                                                    a: 0\n                                                },\n                                                s: {\n                                                    k: [\n                                                        100,\n                                                        100\n                                                    ],\n                                                    a: 0\n                                                },\n                                                a: {\n                                                    k: [\n                                                        0,\n                                                        0\n                                                    ],\n                                                    a: 0\n                                                },\n                                                r: {\n                                                    k: 0,\n                                                    a: 0\n                                                },\n                                                o: {\n                                                    k: 100,\n                                                    a: 0\n                                                }\n                                            };\n                                            if (!animationData.chars[i].t) {\n                                                charData.data.shapes.push({\n                                                    ty: \"no\"\n                                                });\n                                                charData.data.shapes[0].it.push({\n                                                    p: {\n                                                        k: [\n                                                            0,\n                                                            0\n                                                        ],\n                                                        a: 0\n                                                    },\n                                                    s: {\n                                                        k: [\n                                                            100,\n                                                            100\n                                                        ],\n                                                        a: 0\n                                                    },\n                                                    a: {\n                                                        k: [\n                                                            0,\n                                                            0\n                                                        ],\n                                                        a: 0\n                                                    },\n                                                    r: {\n                                                        k: 0,\n                                                        a: 0\n                                                    },\n                                                    o: {\n                                                        k: 100,\n                                                        a: 0\n                                                    },\n                                                    sk: {\n                                                        k: 0,\n                                                        a: 0\n                                                    },\n                                                    sa: {\n                                                        k: 0,\n                                                        a: 0\n                                                    },\n                                                    ty: \"tr\"\n                                                });\n                                            }\n                                        }\n                                    }\n                                }\n                            };\n                        }();\n                        var checkPathProperties = function() {\n                            var minimumVersion = [\n                                5,\n                                7,\n                                15\n                            ];\n                            function updateTextLayer(textLayer) {\n                                var pathData = textLayer.t.p;\n                                if (typeof pathData.a === \"number\") {\n                                    pathData.a = {\n                                        a: 0,\n                                        k: pathData.a\n                                    };\n                                }\n                                if (typeof pathData.p === \"number\") {\n                                    pathData.p = {\n                                        a: 0,\n                                        k: pathData.p\n                                    };\n                                }\n                                if (typeof pathData.r === \"number\") {\n                                    pathData.r = {\n                                        a: 0,\n                                        k: pathData.r\n                                    };\n                                }\n                            }\n                            function iterateLayers(layers) {\n                                var i;\n                                var len = layers.length;\n                                for(i = 0; i < len; i += 1){\n                                    if (layers[i].ty === 5) {\n                                        updateTextLayer(layers[i]);\n                                    }\n                                }\n                            }\n                            return function(animationData) {\n                                if (checkVersion(minimumVersion, animationData.v)) {\n                                    iterateLayers(animationData.layers);\n                                    if (animationData.assets) {\n                                        var i;\n                                        var len = animationData.assets.length;\n                                        for(i = 0; i < len; i += 1){\n                                            if (animationData.assets[i].layers) {\n                                                iterateLayers(animationData.assets[i].layers);\n                                            }\n                                        }\n                                    }\n                                }\n                            };\n                        }();\n                        var checkColors = function() {\n                            var minimumVersion = [\n                                4,\n                                1,\n                                9\n                            ];\n                            function iterateShapes(shapes) {\n                                var i;\n                                var len = shapes.length;\n                                var j;\n                                var jLen;\n                                for(i = 0; i < len; i += 1){\n                                    if (shapes[i].ty === \"gr\") {\n                                        iterateShapes(shapes[i].it);\n                                    } else if (shapes[i].ty === \"fl\" || shapes[i].ty === \"st\") {\n                                        if (shapes[i].c.k && shapes[i].c.k[0].i) {\n                                            jLen = shapes[i].c.k.length;\n                                            for(j = 0; j < jLen; j += 1){\n                                                if (shapes[i].c.k[j].s) {\n                                                    shapes[i].c.k[j].s[0] /= 255;\n                                                    shapes[i].c.k[j].s[1] /= 255;\n                                                    shapes[i].c.k[j].s[2] /= 255;\n                                                    shapes[i].c.k[j].s[3] /= 255;\n                                                }\n                                                if (shapes[i].c.k[j].e) {\n                                                    shapes[i].c.k[j].e[0] /= 255;\n                                                    shapes[i].c.k[j].e[1] /= 255;\n                                                    shapes[i].c.k[j].e[2] /= 255;\n                                                    shapes[i].c.k[j].e[3] /= 255;\n                                                }\n                                            }\n                                        } else {\n                                            shapes[i].c.k[0] /= 255;\n                                            shapes[i].c.k[1] /= 255;\n                                            shapes[i].c.k[2] /= 255;\n                                            shapes[i].c.k[3] /= 255;\n                                        }\n                                    }\n                                }\n                            }\n                            function iterateLayers(layers) {\n                                var i;\n                                var len = layers.length;\n                                for(i = 0; i < len; i += 1){\n                                    if (layers[i].ty === 4) {\n                                        iterateShapes(layers[i].shapes);\n                                    }\n                                }\n                            }\n                            return function(animationData) {\n                                if (checkVersion(minimumVersion, animationData.v)) {\n                                    iterateLayers(animationData.layers);\n                                    if (animationData.assets) {\n                                        var i;\n                                        var len = animationData.assets.length;\n                                        for(i = 0; i < len; i += 1){\n                                            if (animationData.assets[i].layers) {\n                                                iterateLayers(animationData.assets[i].layers);\n                                            }\n                                        }\n                                    }\n                                }\n                            };\n                        }();\n                        var checkShapes = function() {\n                            var minimumVersion = [\n                                4,\n                                4,\n                                18\n                            ];\n                            function completeClosingShapes(arr) {\n                                var i;\n                                var len = arr.length;\n                                var j;\n                                var jLen;\n                                for(i = len - 1; i >= 0; i -= 1){\n                                    if (arr[i].ty === \"sh\") {\n                                        if (arr[i].ks.k.i) {\n                                            arr[i].ks.k.c = arr[i].closed;\n                                        } else {\n                                            jLen = arr[i].ks.k.length;\n                                            for(j = 0; j < jLen; j += 1){\n                                                if (arr[i].ks.k[j].s) {\n                                                    arr[i].ks.k[j].s[0].c = arr[i].closed;\n                                                }\n                                                if (arr[i].ks.k[j].e) {\n                                                    arr[i].ks.k[j].e[0].c = arr[i].closed;\n                                                }\n                                            }\n                                        }\n                                    } else if (arr[i].ty === \"gr\") {\n                                        completeClosingShapes(arr[i].it);\n                                    }\n                                }\n                            }\n                            function iterateLayers(layers) {\n                                var layerData;\n                                var i;\n                                var len = layers.length;\n                                var j;\n                                var jLen;\n                                var k;\n                                var kLen;\n                                for(i = 0; i < len; i += 1){\n                                    layerData = layers[i];\n                                    if (layerData.hasMask) {\n                                        var maskProps = layerData.masksProperties;\n                                        jLen = maskProps.length;\n                                        for(j = 0; j < jLen; j += 1){\n                                            if (maskProps[j].pt.k.i) {\n                                                maskProps[j].pt.k.c = maskProps[j].cl;\n                                            } else {\n                                                kLen = maskProps[j].pt.k.length;\n                                                for(k = 0; k < kLen; k += 1){\n                                                    if (maskProps[j].pt.k[k].s) {\n                                                        maskProps[j].pt.k[k].s[0].c = maskProps[j].cl;\n                                                    }\n                                                    if (maskProps[j].pt.k[k].e) {\n                                                        maskProps[j].pt.k[k].e[0].c = maskProps[j].cl;\n                                                    }\n                                                }\n                                            }\n                                        }\n                                    }\n                                    if (layerData.ty === 4) {\n                                        completeClosingShapes(layerData.shapes);\n                                    }\n                                }\n                            }\n                            return function(animationData) {\n                                if (checkVersion(minimumVersion, animationData.v)) {\n                                    iterateLayers(animationData.layers);\n                                    if (animationData.assets) {\n                                        var i;\n                                        var len = animationData.assets.length;\n                                        for(i = 0; i < len; i += 1){\n                                            if (animationData.assets[i].layers) {\n                                                iterateLayers(animationData.assets[i].layers);\n                                            }\n                                        }\n                                    }\n                                }\n                            };\n                        }();\n                        function completeData(animationData) {\n                            if (animationData.__complete) {\n                                return;\n                            }\n                            checkColors(animationData);\n                            checkText(animationData);\n                            checkChars(animationData);\n                            checkPathProperties(animationData);\n                            checkShapes(animationData);\n                            completeLayers(animationData.layers, animationData.assets);\n                            completeChars(animationData.chars, animationData.assets);\n                            animationData.__complete = true;\n                        }\n                        function completeText(data) {\n                            if (data.t.a.length === 0 && !(\"m\" in data.t.p)) {}\n                        }\n                        var moduleOb = {};\n                        moduleOb.completeData = completeData;\n                        moduleOb.checkColors = checkColors;\n                        moduleOb.checkChars = checkChars;\n                        moduleOb.checkPathProperties = checkPathProperties;\n                        moduleOb.checkShapes = checkShapes;\n                        moduleOb.completeLayers = completeLayers;\n                        return moduleOb;\n                    }\n                    if (!_workerSelf.dataManager) {\n                        _workerSelf.dataManager = dataFunctionManager();\n                    }\n                    if (!_workerSelf.assetLoader) {\n                        _workerSelf.assetLoader = function() {\n                            function formatResponse(xhr) {\n                                // using typeof doubles the time of execution of this method,\n                                // so if available, it's better to use the header to validate the type\n                                var contentTypeHeader = xhr.getResponseHeader(\"content-type\");\n                                if (contentTypeHeader && xhr.responseType === \"json\" && contentTypeHeader.indexOf(\"json\") !== -1) {\n                                    return xhr.response;\n                                }\n                                if (xhr.response && _typeof$5(xhr.response) === \"object\") {\n                                    return xhr.response;\n                                }\n                                if (xhr.response && typeof xhr.response === \"string\") {\n                                    return JSON.parse(xhr.response);\n                                }\n                                if (xhr.responseText) {\n                                    return JSON.parse(xhr.responseText);\n                                }\n                                return null;\n                            }\n                            function loadAsset(path, fullPath, callback, errorCallback) {\n                                var response;\n                                var xhr = new XMLHttpRequest(); // set responseType after calling open or IE will break.\n                                try {\n                                    // This crashes on Android WebView prior to KitKat\n                                    xhr.responseType = \"json\";\n                                } catch (err) {} // eslint-disable-line no-empty\n                                xhr.onreadystatechange = function() {\n                                    if (xhr.readyState === 4) {\n                                        if (xhr.status === 200) {\n                                            response = formatResponse(xhr);\n                                            callback(response);\n                                        } else {\n                                            try {\n                                                response = formatResponse(xhr);\n                                                callback(response);\n                                            } catch (err) {\n                                                if (errorCallback) {\n                                                    errorCallback(err);\n                                                }\n                                            }\n                                        }\n                                    }\n                                };\n                                try {\n                                    // Hack to workaround banner validation\n                                    xhr.open([\n                                        \"G\",\n                                        \"E\",\n                                        \"T\"\n                                    ].join(\"\"), path, true);\n                                } catch (error) {\n                                    // Hack to workaround banner validation\n                                    xhr.open([\n                                        \"G\",\n                                        \"E\",\n                                        \"T\"\n                                    ].join(\"\"), fullPath + \"/\" + path, true);\n                                }\n                                xhr.send();\n                            }\n                            return {\n                                load: loadAsset\n                            };\n                        }();\n                    }\n                    if (e.data.type === \"loadAnimation\") {\n                        _workerSelf.assetLoader.load(e.data.path, e.data.fullPath, function(data) {\n                            _workerSelf.dataManager.completeData(data);\n                            _workerSelf.postMessage({\n                                id: e.data.id,\n                                payload: data,\n                                status: \"success\"\n                            });\n                        }, function() {\n                            _workerSelf.postMessage({\n                                id: e.data.id,\n                                status: \"error\"\n                            });\n                        });\n                    } else if (e.data.type === \"complete\") {\n                        var animation = e.data.animation;\n                        _workerSelf.dataManager.completeData(animation);\n                        _workerSelf.postMessage({\n                            id: e.data.id,\n                            payload: animation,\n                            status: \"success\"\n                        });\n                    } else if (e.data.type === \"loadData\") {\n                        _workerSelf.assetLoader.load(e.data.path, e.data.fullPath, function(data) {\n                            _workerSelf.postMessage({\n                                id: e.data.id,\n                                payload: data,\n                                status: \"success\"\n                            });\n                        }, function() {\n                            _workerSelf.postMessage({\n                                id: e.data.id,\n                                status: \"error\"\n                            });\n                        });\n                    }\n                });\n                workerInstance.onmessage = function(event) {\n                    var data = event.data;\n                    var id = data.id;\n                    var process = processes[id];\n                    processes[id] = null;\n                    if (data.status === \"success\") {\n                        process.onComplete(data.payload);\n                    } else if (process.onError) {\n                        process.onError();\n                    }\n                };\n            }\n        }\n        function createProcess(onComplete, onError) {\n            _counterId += 1;\n            var id = \"processId_\" + _counterId;\n            processes[id] = {\n                onComplete: onComplete,\n                onError: onError\n            };\n            return id;\n        }\n        function loadAnimation(path, onComplete, onError) {\n            setupWorker();\n            var processId = createProcess(onComplete, onError);\n            workerInstance.postMessage({\n                type: \"loadAnimation\",\n                path: path,\n                fullPath: window.location.origin + window.location.pathname,\n                id: processId\n            });\n        }\n        function loadData(path, onComplete, onError) {\n            setupWorker();\n            var processId = createProcess(onComplete, onError);\n            workerInstance.postMessage({\n                type: \"loadData\",\n                path: path,\n                fullPath: window.location.origin + window.location.pathname,\n                id: processId\n            });\n        }\n        function completeAnimation(anim, onComplete, onError) {\n            setupWorker();\n            var processId = createProcess(onComplete, onError);\n            workerInstance.postMessage({\n                type: \"complete\",\n                animation: anim,\n                id: processId\n            });\n        }\n        return {\n            loadAnimation: loadAnimation,\n            loadData: loadData,\n            completeAnimation: completeAnimation\n        };\n    }();\n    var ImagePreloader = function() {\n        var proxyImage = function() {\n            var canvas = createTag(\"canvas\");\n            canvas.width = 1;\n            canvas.height = 1;\n            var ctx = canvas.getContext(\"2d\");\n            ctx.fillStyle = \"rgba(0,0,0,0)\";\n            ctx.fillRect(0, 0, 1, 1);\n            return canvas;\n        }();\n        function imageLoaded() {\n            this.loadedAssets += 1;\n            if (this.loadedAssets === this.totalImages && this.loadedFootagesCount === this.totalFootages) {\n                if (this.imagesLoadedCb) {\n                    this.imagesLoadedCb(null);\n                }\n            }\n        }\n        function footageLoaded() {\n            this.loadedFootagesCount += 1;\n            if (this.loadedAssets === this.totalImages && this.loadedFootagesCount === this.totalFootages) {\n                if (this.imagesLoadedCb) {\n                    this.imagesLoadedCb(null);\n                }\n            }\n        }\n        function getAssetsPath(assetData, assetsPath, originalPath) {\n            var path = \"\";\n            if (assetData.e) {\n                path = assetData.p;\n            } else if (assetsPath) {\n                var imagePath = assetData.p;\n                if (imagePath.indexOf(\"images/\") !== -1) {\n                    imagePath = imagePath.split(\"/\")[1];\n                }\n                path = assetsPath + imagePath;\n            } else {\n                path = originalPath;\n                path += assetData.u ? assetData.u : \"\";\n                path += assetData.p;\n            }\n            return path;\n        }\n        function testImageLoaded(img) {\n            var _count = 0;\n            var intervalId = setInterval((function() {\n                var box = img.getBBox();\n                if (box.width || _count > 500) {\n                    this._imageLoaded();\n                    clearInterval(intervalId);\n                }\n                _count += 1;\n            }).bind(this), 50);\n        }\n        function createImageData(assetData) {\n            var path = getAssetsPath(assetData, this.assetsPath, this.path);\n            var img = createNS(\"image\");\n            if (isSafari) {\n                this.testImageLoaded(img);\n            } else {\n                img.addEventListener(\"load\", this._imageLoaded, false);\n            }\n            img.addEventListener(\"error\", (function() {\n                ob.img = proxyImage;\n                this._imageLoaded();\n            }).bind(this), false);\n            img.setAttributeNS(\"http://www.w3.org/1999/xlink\", \"href\", path);\n            if (this._elementHelper.append) {\n                this._elementHelper.append(img);\n            } else {\n                this._elementHelper.appendChild(img);\n            }\n            var ob = {\n                img: img,\n                assetData: assetData\n            };\n            return ob;\n        }\n        function createImgData(assetData) {\n            var path = getAssetsPath(assetData, this.assetsPath, this.path);\n            var img = createTag(\"img\");\n            img.crossOrigin = \"anonymous\";\n            img.addEventListener(\"load\", this._imageLoaded, false);\n            img.addEventListener(\"error\", (function() {\n                ob.img = proxyImage;\n                this._imageLoaded();\n            }).bind(this), false);\n            img.src = path;\n            var ob = {\n                img: img,\n                assetData: assetData\n            };\n            return ob;\n        }\n        function createFootageData(data) {\n            var ob = {\n                assetData: data\n            };\n            var path = getAssetsPath(data, this.assetsPath, this.path);\n            dataManager.loadData(path, (function(footageData) {\n                ob.img = footageData;\n                this._footageLoaded();\n            }).bind(this), (function() {\n                ob.img = {};\n                this._footageLoaded();\n            }).bind(this));\n            return ob;\n        }\n        function loadAssets(assets, cb) {\n            this.imagesLoadedCb = cb;\n            var i;\n            var len = assets.length;\n            for(i = 0; i < len; i += 1){\n                if (!assets[i].layers) {\n                    if (!assets[i].t || assets[i].t === \"seq\") {\n                        this.totalImages += 1;\n                        this.images.push(this._createImageData(assets[i]));\n                    } else if (assets[i].t === 3) {\n                        this.totalFootages += 1;\n                        this.images.push(this.createFootageData(assets[i]));\n                    }\n                }\n            }\n        }\n        function setPath(path) {\n            this.path = path || \"\";\n        }\n        function setAssetsPath(path) {\n            this.assetsPath = path || \"\";\n        }\n        function getAsset(assetData) {\n            var i = 0;\n            var len = this.images.length;\n            while(i < len){\n                if (this.images[i].assetData === assetData) {\n                    return this.images[i].img;\n                }\n                i += 1;\n            }\n            return null;\n        }\n        function destroy() {\n            this.imagesLoadedCb = null;\n            this.images.length = 0;\n        }\n        function loadedImages() {\n            return this.totalImages === this.loadedAssets;\n        }\n        function loadedFootages() {\n            return this.totalFootages === this.loadedFootagesCount;\n        }\n        function setCacheType(type, elementHelper) {\n            if (type === \"svg\") {\n                this._elementHelper = elementHelper;\n                this._createImageData = this.createImageData.bind(this);\n            } else {\n                this._createImageData = this.createImgData.bind(this);\n            }\n        }\n        function ImagePreloaderFactory() {\n            this._imageLoaded = imageLoaded.bind(this);\n            this._footageLoaded = footageLoaded.bind(this);\n            this.testImageLoaded = testImageLoaded.bind(this);\n            this.createFootageData = createFootageData.bind(this);\n            this.assetsPath = \"\";\n            this.path = \"\";\n            this.totalImages = 0;\n            this.totalFootages = 0;\n            this.loadedAssets = 0;\n            this.loadedFootagesCount = 0;\n            this.imagesLoadedCb = null;\n            this.images = [];\n        }\n        ImagePreloaderFactory.prototype = {\n            loadAssets: loadAssets,\n            setAssetsPath: setAssetsPath,\n            setPath: setPath,\n            loadedImages: loadedImages,\n            loadedFootages: loadedFootages,\n            destroy: destroy,\n            getAsset: getAsset,\n            createImgData: createImgData,\n            createImageData: createImageData,\n            imageLoaded: imageLoaded,\n            footageLoaded: footageLoaded,\n            setCacheType: setCacheType\n        };\n        return ImagePreloaderFactory;\n    }();\n    function BaseEvent() {}\n    BaseEvent.prototype = {\n        triggerEvent: function triggerEvent(eventName, args) {\n            if (this._cbs[eventName]) {\n                var callbacks = this._cbs[eventName];\n                for(var i = 0; i < callbacks.length; i += 1){\n                    callbacks[i](args);\n                }\n            }\n        },\n        addEventListener: function addEventListener(eventName, callback) {\n            if (!this._cbs[eventName]) {\n                this._cbs[eventName] = [];\n            }\n            this._cbs[eventName].push(callback);\n            return (function() {\n                this.removeEventListener(eventName, callback);\n            }).bind(this);\n        },\n        removeEventListener: function removeEventListener(eventName, callback) {\n            if (!callback) {\n                this._cbs[eventName] = null;\n            } else if (this._cbs[eventName]) {\n                var i = 0;\n                var len = this._cbs[eventName].length;\n                while(i < len){\n                    if (this._cbs[eventName][i] === callback) {\n                        this._cbs[eventName].splice(i, 1);\n                        i -= 1;\n                        len -= 1;\n                    }\n                    i += 1;\n                }\n                if (!this._cbs[eventName].length) {\n                    this._cbs[eventName] = null;\n                }\n            }\n        }\n    };\n    var markerParser = function() {\n        function parsePayloadLines(payload) {\n            var lines = payload.split(\"\\r\\n\");\n            var keys = {};\n            var line;\n            var keysCount = 0;\n            for(var i = 0; i < lines.length; i += 1){\n                line = lines[i].split(\":\");\n                if (line.length === 2) {\n                    keys[line[0]] = line[1].trim();\n                    keysCount += 1;\n                }\n            }\n            if (keysCount === 0) {\n                throw new Error();\n            }\n            return keys;\n        }\n        return function(_markers) {\n            var markers = [];\n            for(var i = 0; i < _markers.length; i += 1){\n                var _marker = _markers[i];\n                var markerData = {\n                    time: _marker.tm,\n                    duration: _marker.dr\n                };\n                try {\n                    markerData.payload = JSON.parse(_markers[i].cm);\n                } catch (_) {\n                    try {\n                        markerData.payload = parsePayloadLines(_markers[i].cm);\n                    } catch (__) {\n                        markerData.payload = {\n                            name: _markers[i].cm\n                        };\n                    }\n                }\n                markers.push(markerData);\n            }\n            return markers;\n        };\n    }();\n    var ProjectInterface = function() {\n        function registerComposition(comp) {\n            this.compositions.push(comp);\n        }\n        return function() {\n            function _thisProjectFunction(name) {\n                var i = 0;\n                var len = this.compositions.length;\n                while(i < len){\n                    if (this.compositions[i].data && this.compositions[i].data.nm === name) {\n                        if (this.compositions[i].prepareFrame && this.compositions[i].data.xt) {\n                            this.compositions[i].prepareFrame(this.currentFrame);\n                        }\n                        return this.compositions[i].compInterface;\n                    }\n                    i += 1;\n                }\n                return null;\n            }\n            _thisProjectFunction.compositions = [];\n            _thisProjectFunction.currentFrame = 0;\n            _thisProjectFunction.registerComposition = registerComposition;\n            return _thisProjectFunction;\n        };\n    }();\n    var renderers = {};\n    var registerRenderer = function registerRenderer(key, value) {\n        renderers[key] = value;\n    };\n    function getRenderer(key) {\n        return renderers[key];\n    }\n    function getRegisteredRenderer() {\n        // Returns canvas by default for compatibility\n        if (renderers.canvas) {\n            return \"canvas\";\n        } // Returns any renderer that is registered\n        for(var key in renderers){\n            if (renderers[key]) {\n                return key;\n            }\n        }\n        return \"\";\n    }\n    function _typeof$4(obj) {\n        \"@babel/helpers - typeof\";\n        if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") {\n            _typeof$4 = function _typeof(obj) {\n                return typeof obj;\n            };\n        } else {\n            _typeof$4 = function _typeof(obj) {\n                return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj;\n            };\n        }\n        return _typeof$4(obj);\n    }\n    var AnimationItem = function AnimationItem() {\n        this._cbs = [];\n        this.name = \"\";\n        this.path = \"\";\n        this.isLoaded = false;\n        this.currentFrame = 0;\n        this.currentRawFrame = 0;\n        this.firstFrame = 0;\n        this.totalFrames = 0;\n        this.frameRate = 0;\n        this.frameMult = 0;\n        this.playSpeed = 1;\n        this.playDirection = 1;\n        this.playCount = 0;\n        this.animationData = {};\n        this.assets = [];\n        this.isPaused = true;\n        this.autoplay = false;\n        this.loop = true;\n        this.renderer = null;\n        this.animationID = createElementID();\n        this.assetsPath = \"\";\n        this.timeCompleted = 0;\n        this.segmentPos = 0;\n        this.isSubframeEnabled = getSubframeEnabled();\n        this.segments = [];\n        this._idle = true;\n        this._completedLoop = false;\n        this.projectInterface = ProjectInterface();\n        this.imagePreloader = new ImagePreloader();\n        this.audioController = audioControllerFactory();\n        this.markers = [];\n        this.configAnimation = this.configAnimation.bind(this);\n        this.onSetupError = this.onSetupError.bind(this);\n        this.onSegmentComplete = this.onSegmentComplete.bind(this);\n        this.drawnFrameEvent = new BMEnterFrameEvent(\"drawnFrame\", 0, 0, 0);\n        this.expressionsPlugin = getExpressionsPlugin();\n    };\n    extendPrototype([\n        BaseEvent\n    ], AnimationItem);\n    AnimationItem.prototype.setParams = function(params) {\n        if (params.wrapper || params.container) {\n            this.wrapper = params.wrapper || params.container;\n        }\n        var animType = \"svg\";\n        if (params.animType) {\n            animType = params.animType;\n        } else if (params.renderer) {\n            animType = params.renderer;\n        }\n        var RendererClass = getRenderer(animType);\n        this.renderer = new RendererClass(this, params.rendererSettings);\n        this.imagePreloader.setCacheType(animType, this.renderer.globalData.defs);\n        this.renderer.setProjectInterface(this.projectInterface);\n        this.animType = animType;\n        if (params.loop === \"\" || params.loop === null || params.loop === undefined || params.loop === true) {\n            this.loop = true;\n        } else if (params.loop === false) {\n            this.loop = false;\n        } else {\n            this.loop = parseInt(params.loop, 10);\n        }\n        this.autoplay = \"autoplay\" in params ? params.autoplay : true;\n        this.name = params.name ? params.name : \"\";\n        this.autoloadSegments = Object.prototype.hasOwnProperty.call(params, \"autoloadSegments\") ? params.autoloadSegments : true;\n        this.assetsPath = params.assetsPath;\n        this.initialSegment = params.initialSegment;\n        if (params.audioFactory) {\n            this.audioController.setAudioFactory(params.audioFactory);\n        }\n        if (params.animationData) {\n            this.setupAnimation(params.animationData);\n        } else if (params.path) {\n            if (params.path.lastIndexOf(\"\\\\\") !== -1) {\n                this.path = params.path.substr(0, params.path.lastIndexOf(\"\\\\\") + 1);\n            } else {\n                this.path = params.path.substr(0, params.path.lastIndexOf(\"/\") + 1);\n            }\n            this.fileName = params.path.substr(params.path.lastIndexOf(\"/\") + 1);\n            this.fileName = this.fileName.substr(0, this.fileName.lastIndexOf(\".json\"));\n            dataManager.loadAnimation(params.path, this.configAnimation, this.onSetupError);\n        }\n    };\n    AnimationItem.prototype.onSetupError = function() {\n        this.trigger(\"data_failed\");\n    };\n    AnimationItem.prototype.setupAnimation = function(data) {\n        dataManager.completeAnimation(data, this.configAnimation);\n    };\n    AnimationItem.prototype.setData = function(wrapper, animationData) {\n        if (animationData) {\n            if (_typeof$4(animationData) !== \"object\") {\n                animationData = JSON.parse(animationData);\n            }\n        }\n        var params = {\n            wrapper: wrapper,\n            animationData: animationData\n        };\n        var wrapperAttributes = wrapper.attributes;\n        params.path = wrapperAttributes.getNamedItem(\"data-animation-path\") // eslint-disable-line no-nested-ternary\n         ? wrapperAttributes.getNamedItem(\"data-animation-path\").value : wrapperAttributes.getNamedItem(\"data-bm-path\") // eslint-disable-line no-nested-ternary\n         ? wrapperAttributes.getNamedItem(\"data-bm-path\").value : wrapperAttributes.getNamedItem(\"bm-path\") ? wrapperAttributes.getNamedItem(\"bm-path\").value : \"\";\n        params.animType = wrapperAttributes.getNamedItem(\"data-anim-type\") // eslint-disable-line no-nested-ternary\n         ? wrapperAttributes.getNamedItem(\"data-anim-type\").value : wrapperAttributes.getNamedItem(\"data-bm-type\") // eslint-disable-line no-nested-ternary\n         ? wrapperAttributes.getNamedItem(\"data-bm-type\").value : wrapperAttributes.getNamedItem(\"bm-type\") // eslint-disable-line no-nested-ternary\n         ? wrapperAttributes.getNamedItem(\"bm-type\").value : wrapperAttributes.getNamedItem(\"data-bm-renderer\") // eslint-disable-line no-nested-ternary\n         ? wrapperAttributes.getNamedItem(\"data-bm-renderer\").value : wrapperAttributes.getNamedItem(\"bm-renderer\") ? wrapperAttributes.getNamedItem(\"bm-renderer\").value : getRegisteredRenderer() || \"canvas\";\n        var loop = wrapperAttributes.getNamedItem(\"data-anim-loop\") // eslint-disable-line no-nested-ternary\n         ? wrapperAttributes.getNamedItem(\"data-anim-loop\").value : wrapperAttributes.getNamedItem(\"data-bm-loop\") // eslint-disable-line no-nested-ternary\n         ? wrapperAttributes.getNamedItem(\"data-bm-loop\").value : wrapperAttributes.getNamedItem(\"bm-loop\") ? wrapperAttributes.getNamedItem(\"bm-loop\").value : \"\";\n        if (loop === \"false\") {\n            params.loop = false;\n        } else if (loop === \"true\") {\n            params.loop = true;\n        } else if (loop !== \"\") {\n            params.loop = parseInt(loop, 10);\n        }\n        var autoplay = wrapperAttributes.getNamedItem(\"data-anim-autoplay\") // eslint-disable-line no-nested-ternary\n         ? wrapperAttributes.getNamedItem(\"data-anim-autoplay\").value : wrapperAttributes.getNamedItem(\"data-bm-autoplay\") // eslint-disable-line no-nested-ternary\n         ? wrapperAttributes.getNamedItem(\"data-bm-autoplay\").value : wrapperAttributes.getNamedItem(\"bm-autoplay\") ? wrapperAttributes.getNamedItem(\"bm-autoplay\").value : true;\n        params.autoplay = autoplay !== \"false\";\n        params.name = wrapperAttributes.getNamedItem(\"data-name\") // eslint-disable-line no-nested-ternary\n         ? wrapperAttributes.getNamedItem(\"data-name\").value : wrapperAttributes.getNamedItem(\"data-bm-name\") // eslint-disable-line no-nested-ternary\n         ? wrapperAttributes.getNamedItem(\"data-bm-name\").value : wrapperAttributes.getNamedItem(\"bm-name\") ? wrapperAttributes.getNamedItem(\"bm-name\").value : \"\";\n        var prerender = wrapperAttributes.getNamedItem(\"data-anim-prerender\") // eslint-disable-line no-nested-ternary\n         ? wrapperAttributes.getNamedItem(\"data-anim-prerender\").value : wrapperAttributes.getNamedItem(\"data-bm-prerender\") // eslint-disable-line no-nested-ternary\n         ? wrapperAttributes.getNamedItem(\"data-bm-prerender\").value : wrapperAttributes.getNamedItem(\"bm-prerender\") ? wrapperAttributes.getNamedItem(\"bm-prerender\").value : \"\";\n        if (prerender === \"false\") {\n            params.prerender = false;\n        }\n        if (!params.path) {\n            this.trigger(\"destroy\");\n        } else {\n            this.setParams(params);\n        }\n    };\n    AnimationItem.prototype.includeLayers = function(data) {\n        if (data.op > this.animationData.op) {\n            this.animationData.op = data.op;\n            this.totalFrames = Math.floor(data.op - this.animationData.ip);\n        }\n        var layers = this.animationData.layers;\n        var i;\n        var len = layers.length;\n        var newLayers = data.layers;\n        var j;\n        var jLen = newLayers.length;\n        for(j = 0; j < jLen; j += 1){\n            i = 0;\n            while(i < len){\n                if (layers[i].id === newLayers[j].id) {\n                    layers[i] = newLayers[j];\n                    break;\n                }\n                i += 1;\n            }\n        }\n        if (data.chars || data.fonts) {\n            this.renderer.globalData.fontManager.addChars(data.chars);\n            this.renderer.globalData.fontManager.addFonts(data.fonts, this.renderer.globalData.defs);\n        }\n        if (data.assets) {\n            len = data.assets.length;\n            for(i = 0; i < len; i += 1){\n                this.animationData.assets.push(data.assets[i]);\n            }\n        }\n        this.animationData.__complete = false;\n        dataManager.completeAnimation(this.animationData, this.onSegmentComplete);\n    };\n    AnimationItem.prototype.onSegmentComplete = function(data) {\n        this.animationData = data;\n        var expressionsPlugin = getExpressionsPlugin();\n        if (expressionsPlugin) {\n            expressionsPlugin.initExpressions(this);\n        }\n        this.loadNextSegment();\n    };\n    AnimationItem.prototype.loadNextSegment = function() {\n        var segments = this.animationData.segments;\n        if (!segments || segments.length === 0 || !this.autoloadSegments) {\n            this.trigger(\"data_ready\");\n            this.timeCompleted = this.totalFrames;\n            return;\n        }\n        var segment = segments.shift();\n        this.timeCompleted = segment.time * this.frameRate;\n        var segmentPath = this.path + this.fileName + \"_\" + this.segmentPos + \".json\";\n        this.segmentPos += 1;\n        dataManager.loadData(segmentPath, this.includeLayers.bind(this), (function() {\n            this.trigger(\"data_failed\");\n        }).bind(this));\n    };\n    AnimationItem.prototype.loadSegments = function() {\n        var segments = this.animationData.segments;\n        if (!segments) {\n            this.timeCompleted = this.totalFrames;\n        }\n        this.loadNextSegment();\n    };\n    AnimationItem.prototype.imagesLoaded = function() {\n        this.trigger(\"loaded_images\");\n        this.checkLoaded();\n    };\n    AnimationItem.prototype.preloadImages = function() {\n        this.imagePreloader.setAssetsPath(this.assetsPath);\n        this.imagePreloader.setPath(this.path);\n        this.imagePreloader.loadAssets(this.animationData.assets, this.imagesLoaded.bind(this));\n    };\n    AnimationItem.prototype.configAnimation = function(animData) {\n        if (!this.renderer) {\n            return;\n        }\n        try {\n            this.animationData = animData;\n            if (this.initialSegment) {\n                this.totalFrames = Math.floor(this.initialSegment[1] - this.initialSegment[0]);\n                this.firstFrame = Math.round(this.initialSegment[0]);\n            } else {\n                this.totalFrames = Math.floor(this.animationData.op - this.animationData.ip);\n                this.firstFrame = Math.round(this.animationData.ip);\n            }\n            this.renderer.configAnimation(animData);\n            if (!animData.assets) {\n                animData.assets = [];\n            }\n            this.assets = this.animationData.assets;\n            this.frameRate = this.animationData.fr;\n            this.frameMult = this.animationData.fr / 1000;\n            this.renderer.searchExtraCompositions(animData.assets);\n            this.markers = markerParser(animData.markers || []);\n            this.trigger(\"config_ready\");\n            this.preloadImages();\n            this.loadSegments();\n            this.updaFrameModifier();\n            this.waitForFontsLoaded();\n            if (this.isPaused) {\n                this.audioController.pause();\n            }\n        } catch (error) {\n            this.triggerConfigError(error);\n        }\n    };\n    AnimationItem.prototype.waitForFontsLoaded = function() {\n        if (!this.renderer) {\n            return;\n        }\n        if (this.renderer.globalData.fontManager.isLoaded) {\n            this.checkLoaded();\n        } else {\n            setTimeout(this.waitForFontsLoaded.bind(this), 20);\n        }\n    };\n    AnimationItem.prototype.checkLoaded = function() {\n        if (!this.isLoaded && this.renderer.globalData.fontManager.isLoaded && (this.imagePreloader.loadedImages() || this.renderer.rendererType !== \"canvas\") && this.imagePreloader.loadedFootages()) {\n            this.isLoaded = true;\n            var expressionsPlugin = getExpressionsPlugin();\n            if (expressionsPlugin) {\n                expressionsPlugin.initExpressions(this);\n            }\n            this.renderer.initItems();\n            setTimeout((function() {\n                this.trigger(\"DOMLoaded\");\n            }).bind(this), 0);\n            this.gotoFrame();\n            if (this.autoplay) {\n                this.play();\n            }\n        }\n    };\n    AnimationItem.prototype.resize = function(width, height) {\n        // Adding this validation for backwards compatibility in case an event object was being passed down\n        var _width = typeof width === \"number\" ? width : undefined;\n        var _height = typeof height === \"number\" ? height : undefined;\n        this.renderer.updateContainerSize(_width, _height);\n    };\n    AnimationItem.prototype.setSubframe = function(flag) {\n        this.isSubframeEnabled = !!flag;\n    };\n    AnimationItem.prototype.gotoFrame = function() {\n        this.currentFrame = this.isSubframeEnabled ? this.currentRawFrame : ~~this.currentRawFrame; // eslint-disable-line no-bitwise\n        if (this.timeCompleted !== this.totalFrames && this.currentFrame > this.timeCompleted) {\n            this.currentFrame = this.timeCompleted;\n        }\n        this.trigger(\"enterFrame\");\n        this.renderFrame();\n        this.trigger(\"drawnFrame\");\n    };\n    AnimationItem.prototype.renderFrame = function() {\n        if (this.isLoaded === false || !this.renderer) {\n            return;\n        }\n        try {\n            if (this.expressionsPlugin) {\n                this.expressionsPlugin.resetFrame();\n            }\n            this.renderer.renderFrame(this.currentFrame + this.firstFrame);\n        } catch (error) {\n            this.triggerRenderFrameError(error);\n        }\n    };\n    AnimationItem.prototype.play = function(name) {\n        if (name && this.name !== name) {\n            return;\n        }\n        if (this.isPaused === true) {\n            this.isPaused = false;\n            this.trigger(\"_play\");\n            this.audioController.resume();\n            if (this._idle) {\n                this._idle = false;\n                this.trigger(\"_active\");\n            }\n        }\n    };\n    AnimationItem.prototype.pause = function(name) {\n        if (name && this.name !== name) {\n            return;\n        }\n        if (this.isPaused === false) {\n            this.isPaused = true;\n            this.trigger(\"_pause\");\n            this._idle = true;\n            this.trigger(\"_idle\");\n            this.audioController.pause();\n        }\n    };\n    AnimationItem.prototype.togglePause = function(name) {\n        if (name && this.name !== name) {\n            return;\n        }\n        if (this.isPaused === true) {\n            this.play();\n        } else {\n            this.pause();\n        }\n    };\n    AnimationItem.prototype.stop = function(name) {\n        if (name && this.name !== name) {\n            return;\n        }\n        this.pause();\n        this.playCount = 0;\n        this._completedLoop = false;\n        this.setCurrentRawFrameValue(0);\n    };\n    AnimationItem.prototype.getMarkerData = function(markerName) {\n        var marker;\n        for(var i = 0; i < this.markers.length; i += 1){\n            marker = this.markers[i];\n            if (marker.payload && marker.payload.name === markerName) {\n                return marker;\n            }\n        }\n        return null;\n    };\n    AnimationItem.prototype.goToAndStop = function(value, isFrame, name) {\n        if (name && this.name !== name) {\n            return;\n        }\n        var numValue = Number(value);\n        if (isNaN(numValue)) {\n            var marker = this.getMarkerData(value);\n            if (marker) {\n                this.goToAndStop(marker.time, true);\n            }\n        } else if (isFrame) {\n            this.setCurrentRawFrameValue(value);\n        } else {\n            this.setCurrentRawFrameValue(value * this.frameModifier);\n        }\n        this.pause();\n    };\n    AnimationItem.prototype.goToAndPlay = function(value, isFrame, name) {\n        if (name && this.name !== name) {\n            return;\n        }\n        var numValue = Number(value);\n        if (isNaN(numValue)) {\n            var marker = this.getMarkerData(value);\n            if (marker) {\n                if (!marker.duration) {\n                    this.goToAndStop(marker.time, true);\n                } else {\n                    this.playSegments([\n                        marker.time,\n                        marker.time + marker.duration\n                    ], true);\n                }\n            }\n        } else {\n            this.goToAndStop(numValue, isFrame, name);\n        }\n        this.play();\n    };\n    AnimationItem.prototype.advanceTime = function(value) {\n        if (this.isPaused === true || this.isLoaded === false) {\n            return;\n        }\n        var nextValue = this.currentRawFrame + value * this.frameModifier;\n        var _isComplete = false; // Checking if nextValue > totalFrames - 1 for addressing non looping and looping animations.\n        // If animation won't loop, it should stop at totalFrames - 1. If it will loop it should complete the last frame and then loop.\n        if (nextValue >= this.totalFrames - 1 && this.frameModifier > 0) {\n            if (!this.loop || this.playCount === this.loop) {\n                if (!this.checkSegments(nextValue > this.totalFrames ? nextValue % this.totalFrames : 0)) {\n                    _isComplete = true;\n                    nextValue = this.totalFrames - 1;\n                }\n            } else if (nextValue >= this.totalFrames) {\n                this.playCount += 1;\n                if (!this.checkSegments(nextValue % this.totalFrames)) {\n                    this.setCurrentRawFrameValue(nextValue % this.totalFrames);\n                    this._completedLoop = true;\n                    this.trigger(\"loopComplete\");\n                }\n            } else {\n                this.setCurrentRawFrameValue(nextValue);\n            }\n        } else if (nextValue < 0) {\n            if (!this.checkSegments(nextValue % this.totalFrames)) {\n                if (this.loop && !(this.playCount-- <= 0 && this.loop !== true)) {\n                    // eslint-disable-line no-plusplus\n                    this.setCurrentRawFrameValue(this.totalFrames + nextValue % this.totalFrames);\n                    if (!this._completedLoop) {\n                        this._completedLoop = true;\n                    } else {\n                        this.trigger(\"loopComplete\");\n                    }\n                } else {\n                    _isComplete = true;\n                    nextValue = 0;\n                }\n            }\n        } else {\n            this.setCurrentRawFrameValue(nextValue);\n        }\n        if (_isComplete) {\n            this.setCurrentRawFrameValue(nextValue);\n            this.pause();\n            this.trigger(\"complete\");\n        }\n    };\n    AnimationItem.prototype.adjustSegment = function(arr, offset) {\n        this.playCount = 0;\n        if (arr[1] < arr[0]) {\n            if (this.frameModifier > 0) {\n                if (this.playSpeed < 0) {\n                    this.setSpeed(-this.playSpeed);\n                } else {\n                    this.setDirection(-1);\n                }\n            }\n            this.totalFrames = arr[0] - arr[1];\n            this.timeCompleted = this.totalFrames;\n            this.firstFrame = arr[1];\n            this.setCurrentRawFrameValue(this.totalFrames - 0.001 - offset);\n        } else if (arr[1] > arr[0]) {\n            if (this.frameModifier < 0) {\n                if (this.playSpeed < 0) {\n                    this.setSpeed(-this.playSpeed);\n                } else {\n                    this.setDirection(1);\n                }\n            }\n            this.totalFrames = arr[1] - arr[0];\n            this.timeCompleted = this.totalFrames;\n            this.firstFrame = arr[0];\n            this.setCurrentRawFrameValue(0.001 + offset);\n        }\n        this.trigger(\"segmentStart\");\n    };\n    AnimationItem.prototype.setSegment = function(init, end) {\n        var pendingFrame = -1;\n        if (this.isPaused) {\n            if (this.currentRawFrame + this.firstFrame < init) {\n                pendingFrame = init;\n            } else if (this.currentRawFrame + this.firstFrame > end) {\n                pendingFrame = end - init;\n            }\n        }\n        this.firstFrame = init;\n        this.totalFrames = end - init;\n        this.timeCompleted = this.totalFrames;\n        if (pendingFrame !== -1) {\n            this.goToAndStop(pendingFrame, true);\n        }\n    };\n    AnimationItem.prototype.playSegments = function(arr, forceFlag) {\n        if (forceFlag) {\n            this.segments.length = 0;\n        }\n        if (_typeof$4(arr[0]) === \"object\") {\n            var i;\n            var len = arr.length;\n            for(i = 0; i < len; i += 1){\n                this.segments.push(arr[i]);\n            }\n        } else {\n            this.segments.push(arr);\n        }\n        if (this.segments.length && forceFlag) {\n            this.adjustSegment(this.segments.shift(), 0);\n        }\n        if (this.isPaused) {\n            this.play();\n        }\n    };\n    AnimationItem.prototype.resetSegments = function(forceFlag) {\n        this.segments.length = 0;\n        this.segments.push([\n            this.animationData.ip,\n            this.animationData.op\n        ]);\n        if (forceFlag) {\n            this.checkSegments(0);\n        }\n    };\n    AnimationItem.prototype.checkSegments = function(offset) {\n        if (this.segments.length) {\n            this.adjustSegment(this.segments.shift(), offset);\n            return true;\n        }\n        return false;\n    };\n    AnimationItem.prototype.destroy = function(name) {\n        if (name && this.name !== name || !this.renderer) {\n            return;\n        }\n        this.renderer.destroy();\n        this.imagePreloader.destroy();\n        this.trigger(\"destroy\");\n        this._cbs = null;\n        this.onEnterFrame = null;\n        this.onLoopComplete = null;\n        this.onComplete = null;\n        this.onSegmentStart = null;\n        this.onDestroy = null;\n        this.renderer = null;\n        this.expressionsPlugin = null;\n        this.imagePreloader = null;\n        this.projectInterface = null;\n    };\n    AnimationItem.prototype.setCurrentRawFrameValue = function(value) {\n        this.currentRawFrame = value;\n        this.gotoFrame();\n    };\n    AnimationItem.prototype.setSpeed = function(val) {\n        this.playSpeed = val;\n        this.updaFrameModifier();\n    };\n    AnimationItem.prototype.setDirection = function(val) {\n        this.playDirection = val < 0 ? -1 : 1;\n        this.updaFrameModifier();\n    };\n    AnimationItem.prototype.setLoop = function(isLooping) {\n        this.loop = isLooping;\n    };\n    AnimationItem.prototype.setVolume = function(val, name) {\n        if (name && this.name !== name) {\n            return;\n        }\n        this.audioController.setVolume(val);\n    };\n    AnimationItem.prototype.getVolume = function() {\n        return this.audioController.getVolume();\n    };\n    AnimationItem.prototype.mute = function(name) {\n        if (name && this.name !== name) {\n            return;\n        }\n        this.audioController.mute();\n    };\n    AnimationItem.prototype.unmute = function(name) {\n        if (name && this.name !== name) {\n            return;\n        }\n        this.audioController.unmute();\n    };\n    AnimationItem.prototype.updaFrameModifier = function() {\n        this.frameModifier = this.frameMult * this.playSpeed * this.playDirection;\n        this.audioController.setRate(this.playSpeed * this.playDirection);\n    };\n    AnimationItem.prototype.getPath = function() {\n        return this.path;\n    };\n    AnimationItem.prototype.getAssetsPath = function(assetData) {\n        var path = \"\";\n        if (assetData.e) {\n            path = assetData.p;\n        } else if (this.assetsPath) {\n            var imagePath = assetData.p;\n            if (imagePath.indexOf(\"images/\") !== -1) {\n                imagePath = imagePath.split(\"/\")[1];\n            }\n            path = this.assetsPath + imagePath;\n        } else {\n            path = this.path;\n            path += assetData.u ? assetData.u : \"\";\n            path += assetData.p;\n        }\n        return path;\n    };\n    AnimationItem.prototype.getAssetData = function(id) {\n        var i = 0;\n        var len = this.assets.length;\n        while(i < len){\n            if (id === this.assets[i].id) {\n                return this.assets[i];\n            }\n            i += 1;\n        }\n        return null;\n    };\n    AnimationItem.prototype.hide = function() {\n        this.renderer.hide();\n    };\n    AnimationItem.prototype.show = function() {\n        this.renderer.show();\n    };\n    AnimationItem.prototype.getDuration = function(isFrame) {\n        return isFrame ? this.totalFrames : this.totalFrames / this.frameRate;\n    };\n    AnimationItem.prototype.updateDocumentData = function(path, documentData, index) {\n        try {\n            var element = this.renderer.getElementByPath(path);\n            element.updateDocumentData(documentData, index);\n        } catch (error) {}\n    };\n    AnimationItem.prototype.trigger = function(name) {\n        if (this._cbs && this._cbs[name]) {\n            switch(name){\n                case \"enterFrame\":\n                    this.triggerEvent(name, new BMEnterFrameEvent(name, this.currentFrame, this.totalFrames, this.frameModifier));\n                    break;\n                case \"drawnFrame\":\n                    this.drawnFrameEvent.currentTime = this.currentFrame;\n                    this.drawnFrameEvent.totalTime = this.totalFrames;\n                    this.drawnFrameEvent.direction = this.frameModifier;\n                    this.triggerEvent(name, this.drawnFrameEvent);\n                    break;\n                case \"loopComplete\":\n                    this.triggerEvent(name, new BMCompleteLoopEvent(name, this.loop, this.playCount, this.frameMult));\n                    break;\n                case \"complete\":\n                    this.triggerEvent(name, new BMCompleteEvent(name, this.frameMult));\n                    break;\n                case \"segmentStart\":\n                    this.triggerEvent(name, new BMSegmentStartEvent(name, this.firstFrame, this.totalFrames));\n                    break;\n                case \"destroy\":\n                    this.triggerEvent(name, new BMDestroyEvent(name, this));\n                    break;\n                default:\n                    this.triggerEvent(name);\n            }\n        }\n        if (name === \"enterFrame\" && this.onEnterFrame) {\n            this.onEnterFrame.call(this, new BMEnterFrameEvent(name, this.currentFrame, this.totalFrames, this.frameMult));\n        }\n        if (name === \"loopComplete\" && this.onLoopComplete) {\n            this.onLoopComplete.call(this, new BMCompleteLoopEvent(name, this.loop, this.playCount, this.frameMult));\n        }\n        if (name === \"complete\" && this.onComplete) {\n            this.onComplete.call(this, new BMCompleteEvent(name, this.frameMult));\n        }\n        if (name === \"segmentStart\" && this.onSegmentStart) {\n            this.onSegmentStart.call(this, new BMSegmentStartEvent(name, this.firstFrame, this.totalFrames));\n        }\n        if (name === \"destroy\" && this.onDestroy) {\n            this.onDestroy.call(this, new BMDestroyEvent(name, this));\n        }\n    };\n    AnimationItem.prototype.triggerRenderFrameError = function(nativeError) {\n        var error = new BMRenderFrameErrorEvent(nativeError, this.currentFrame);\n        this.triggerEvent(\"error\", error);\n        if (this.onError) {\n            this.onError.call(this, error);\n        }\n    };\n    AnimationItem.prototype.triggerConfigError = function(nativeError) {\n        var error = new BMConfigErrorEvent(nativeError, this.currentFrame);\n        this.triggerEvent(\"error\", error);\n        if (this.onError) {\n            this.onError.call(this, error);\n        }\n    };\n    var animationManager = function() {\n        var moduleOb = {};\n        var registeredAnimations = [];\n        var initTime = 0;\n        var len = 0;\n        var playingAnimationsNum = 0;\n        var _stopped = true;\n        var _isFrozen = false;\n        function removeElement(ev) {\n            var i = 0;\n            var animItem = ev.target;\n            while(i < len){\n                if (registeredAnimations[i].animation === animItem) {\n                    registeredAnimations.splice(i, 1);\n                    i -= 1;\n                    len -= 1;\n                    if (!animItem.isPaused) {\n                        subtractPlayingCount();\n                    }\n                }\n                i += 1;\n            }\n        }\n        function registerAnimation(element, animationData) {\n            if (!element) {\n                return null;\n            }\n            var i = 0;\n            while(i < len){\n                if (registeredAnimations[i].elem === element && registeredAnimations[i].elem !== null) {\n                    return registeredAnimations[i].animation;\n                }\n                i += 1;\n            }\n            var animItem = new AnimationItem();\n            setupAnimation(animItem, element);\n            animItem.setData(element, animationData);\n            return animItem;\n        }\n        function getRegisteredAnimations() {\n            var i;\n            var lenAnims = registeredAnimations.length;\n            var animations = [];\n            for(i = 0; i < lenAnims; i += 1){\n                animations.push(registeredAnimations[i].animation);\n            }\n            return animations;\n        }\n        function addPlayingCount() {\n            playingAnimationsNum += 1;\n            activate();\n        }\n        function subtractPlayingCount() {\n            playingAnimationsNum -= 1;\n        }\n        function setupAnimation(animItem, element) {\n            animItem.addEventListener(\"destroy\", removeElement);\n            animItem.addEventListener(\"_active\", addPlayingCount);\n            animItem.addEventListener(\"_idle\", subtractPlayingCount);\n            registeredAnimations.push({\n                elem: element,\n                animation: animItem\n            });\n            len += 1;\n        }\n        function loadAnimation(params) {\n            var animItem = new AnimationItem();\n            setupAnimation(animItem, null);\n            animItem.setParams(params);\n            return animItem;\n        }\n        function setSpeed(val, animation) {\n            var i;\n            for(i = 0; i < len; i += 1){\n                registeredAnimations[i].animation.setSpeed(val, animation);\n            }\n        }\n        function setDirection(val, animation) {\n            var i;\n            for(i = 0; i < len; i += 1){\n                registeredAnimations[i].animation.setDirection(val, animation);\n            }\n        }\n        function play(animation) {\n            var i;\n            for(i = 0; i < len; i += 1){\n                registeredAnimations[i].animation.play(animation);\n            }\n        }\n        function resume(nowTime) {\n            var elapsedTime = nowTime - initTime;\n            var i;\n            for(i = 0; i < len; i += 1){\n                registeredAnimations[i].animation.advanceTime(elapsedTime);\n            }\n            initTime = nowTime;\n            if (playingAnimationsNum && !_isFrozen) {\n                window.requestAnimationFrame(resume);\n            } else {\n                _stopped = true;\n            }\n        }\n        function first(nowTime) {\n            initTime = nowTime;\n            window.requestAnimationFrame(resume);\n        }\n        function pause(animation) {\n            var i;\n            for(i = 0; i < len; i += 1){\n                registeredAnimations[i].animation.pause(animation);\n            }\n        }\n        function goToAndStop(value, isFrame, animation) {\n            var i;\n            for(i = 0; i < len; i += 1){\n                registeredAnimations[i].animation.goToAndStop(value, isFrame, animation);\n            }\n        }\n        function stop(animation) {\n            var i;\n            for(i = 0; i < len; i += 1){\n                registeredAnimations[i].animation.stop(animation);\n            }\n        }\n        function togglePause(animation) {\n            var i;\n            for(i = 0; i < len; i += 1){\n                registeredAnimations[i].animation.togglePause(animation);\n            }\n        }\n        function destroy(animation) {\n            var i;\n            for(i = len - 1; i >= 0; i -= 1){\n                registeredAnimations[i].animation.destroy(animation);\n            }\n        }\n        function searchAnimations(animationData, standalone, renderer) {\n            var animElements = [].concat([].slice.call(document.getElementsByClassName(\"lottie\")), [].slice.call(document.getElementsByClassName(\"bodymovin\")));\n            var i;\n            var lenAnims = animElements.length;\n            for(i = 0; i < lenAnims; i += 1){\n                if (renderer) {\n                    animElements[i].setAttribute(\"data-bm-type\", renderer);\n                }\n                registerAnimation(animElements[i], animationData);\n            }\n            if (standalone && lenAnims === 0) {\n                if (!renderer) {\n                    renderer = \"svg\";\n                }\n                var body = document.getElementsByTagName(\"body\")[0];\n                body.innerText = \"\";\n                var div = createTag(\"div\");\n                div.style.width = \"100%\";\n                div.style.height = \"100%\";\n                div.setAttribute(\"data-bm-type\", renderer);\n                body.appendChild(div);\n                registerAnimation(div, animationData);\n            }\n        }\n        function resize() {\n            var i;\n            for(i = 0; i < len; i += 1){\n                registeredAnimations[i].animation.resize();\n            }\n        }\n        function activate() {\n            if (!_isFrozen && playingAnimationsNum) {\n                if (_stopped) {\n                    window.requestAnimationFrame(first);\n                    _stopped = false;\n                }\n            }\n        }\n        function freeze() {\n            _isFrozen = true;\n        }\n        function unfreeze() {\n            _isFrozen = false;\n            activate();\n        }\n        function setVolume(val, animation) {\n            var i;\n            for(i = 0; i < len; i += 1){\n                registeredAnimations[i].animation.setVolume(val, animation);\n            }\n        }\n        function mute(animation) {\n            var i;\n            for(i = 0; i < len; i += 1){\n                registeredAnimations[i].animation.mute(animation);\n            }\n        }\n        function unmute(animation) {\n            var i;\n            for(i = 0; i < len; i += 1){\n                registeredAnimations[i].animation.unmute(animation);\n            }\n        }\n        moduleOb.registerAnimation = registerAnimation;\n        moduleOb.loadAnimation = loadAnimation;\n        moduleOb.setSpeed = setSpeed;\n        moduleOb.setDirection = setDirection;\n        moduleOb.play = play;\n        moduleOb.pause = pause;\n        moduleOb.stop = stop;\n        moduleOb.togglePause = togglePause;\n        moduleOb.searchAnimations = searchAnimations;\n        moduleOb.resize = resize; // moduleOb.start = start;\n        moduleOb.goToAndStop = goToAndStop;\n        moduleOb.destroy = destroy;\n        moduleOb.freeze = freeze;\n        moduleOb.unfreeze = unfreeze;\n        moduleOb.setVolume = setVolume;\n        moduleOb.mute = mute;\n        moduleOb.unmute = unmute;\n        moduleOb.getRegisteredAnimations = getRegisteredAnimations;\n        return moduleOb;\n    }();\n    /* eslint-disable */ var BezierFactory = function() {\n        /**\r\n       * BezierEasing - use bezier curve for transition easing function\r\n       * by Gaëtan Renaudeau 2014 - 2015 – MIT License\r\n       *\r\n       * Credits: is based on Firefox's nsSMILKeySpline.cpp\r\n       * Usage:\r\n       * var spline = BezierEasing([ 0.25, 0.1, 0.25, 1.0 ])\r\n       * spline.get(x) => returns the easing value | x must be in [0, 1] range\r\n       *\r\n       */ var ob = {};\n        ob.getBezierEasing = getBezierEasing;\n        var beziers = {};\n        function getBezierEasing(a, b, c, d, nm) {\n            var str = nm || (\"bez_\" + a + \"_\" + b + \"_\" + c + \"_\" + d).replace(/\\./g, \"p\");\n            if (beziers[str]) {\n                return beziers[str];\n            }\n            var bezEasing = new BezierEasing([\n                a,\n                b,\n                c,\n                d\n            ]);\n            beziers[str] = bezEasing;\n            return bezEasing;\n        } // These values are established by empiricism with tests (tradeoff: performance VS precision)\n        var NEWTON_ITERATIONS = 4;\n        var NEWTON_MIN_SLOPE = 0.001;\n        var SUBDIVISION_PRECISION = 0.0000001;\n        var SUBDIVISION_MAX_ITERATIONS = 10;\n        var kSplineTableSize = 11;\n        var kSampleStepSize = 1.0 / (kSplineTableSize - 1.0);\n        var float32ArraySupported = typeof Float32Array === \"function\";\n        function A(aA1, aA2) {\n            return 1.0 - 3.0 * aA2 + 3.0 * aA1;\n        }\n        function B(aA1, aA2) {\n            return 3.0 * aA2 - 6.0 * aA1;\n        }\n        function C(aA1) {\n            return 3.0 * aA1;\n        } // Returns x(t) given t, x1, and x2, or y(t) given t, y1, and y2.\n        function calcBezier(aT, aA1, aA2) {\n            return ((A(aA1, aA2) * aT + B(aA1, aA2)) * aT + C(aA1)) * aT;\n        } // Returns dx/dt given t, x1, and x2, or dy/dt given t, y1, and y2.\n        function getSlope(aT, aA1, aA2) {\n            return 3.0 * A(aA1, aA2) * aT * aT + 2.0 * B(aA1, aA2) * aT + C(aA1);\n        }\n        function binarySubdivide(aX, aA, aB, mX1, mX2) {\n            var currentX, currentT, i = 0;\n            do {\n                currentT = aA + (aB - aA) / 2.0;\n                currentX = calcBezier(currentT, mX1, mX2) - aX;\n                if (currentX > 0.0) {\n                    aB = currentT;\n                } else {\n                    aA = currentT;\n                }\n            }while (Math.abs(currentX) > SUBDIVISION_PRECISION && ++i < SUBDIVISION_MAX_ITERATIONS);\n            return currentT;\n        }\n        function newtonRaphsonIterate(aX, aGuessT, mX1, mX2) {\n            for(var i = 0; i < NEWTON_ITERATIONS; ++i){\n                var currentSlope = getSlope(aGuessT, mX1, mX2);\n                if (currentSlope === 0.0) return aGuessT;\n                var currentX = calcBezier(aGuessT, mX1, mX2) - aX;\n                aGuessT -= currentX / currentSlope;\n            }\n            return aGuessT;\n        }\n        /**\r\n       * points is an array of [ mX1, mY1, mX2, mY2 ]\r\n       */ function BezierEasing(points) {\n            this._p = points;\n            this._mSampleValues = float32ArraySupported ? new Float32Array(kSplineTableSize) : new Array(kSplineTableSize);\n            this._precomputed = false;\n            this.get = this.get.bind(this);\n        }\n        BezierEasing.prototype = {\n            get: function get(x) {\n                var mX1 = this._p[0], mY1 = this._p[1], mX2 = this._p[2], mY2 = this._p[3];\n                if (!this._precomputed) this._precompute();\n                if (mX1 === mY1 && mX2 === mY2) return x; // linear\n                // Because JavaScript number are imprecise, we should guarantee the extremes are right.\n                if (x === 0) return 0;\n                if (x === 1) return 1;\n                return calcBezier(this._getTForX(x), mY1, mY2);\n            },\n            // Private part\n            _precompute: function _precompute() {\n                var mX1 = this._p[0], mY1 = this._p[1], mX2 = this._p[2], mY2 = this._p[3];\n                this._precomputed = true;\n                if (mX1 !== mY1 || mX2 !== mY2) {\n                    this._calcSampleValues();\n                }\n            },\n            _calcSampleValues: function _calcSampleValues() {\n                var mX1 = this._p[0], mX2 = this._p[2];\n                for(var i = 0; i < kSplineTableSize; ++i){\n                    this._mSampleValues[i] = calcBezier(i * kSampleStepSize, mX1, mX2);\n                }\n            },\n            /**\r\n           * getTForX chose the fastest heuristic to determine the percentage value precisely from a given X projection.\r\n           */ _getTForX: function _getTForX(aX) {\n                var mX1 = this._p[0], mX2 = this._p[2], mSampleValues = this._mSampleValues;\n                var intervalStart = 0.0;\n                var currentSample = 1;\n                var lastSample = kSplineTableSize - 1;\n                for(; currentSample !== lastSample && mSampleValues[currentSample] <= aX; ++currentSample){\n                    intervalStart += kSampleStepSize;\n                }\n                --currentSample; // Interpolate to provide an initial guess for t\n                var dist = (aX - mSampleValues[currentSample]) / (mSampleValues[currentSample + 1] - mSampleValues[currentSample]);\n                var guessForT = intervalStart + dist * kSampleStepSize;\n                var initialSlope = getSlope(guessForT, mX1, mX2);\n                if (initialSlope >= NEWTON_MIN_SLOPE) {\n                    return newtonRaphsonIterate(aX, guessForT, mX1, mX2);\n                }\n                if (initialSlope === 0.0) {\n                    return guessForT;\n                }\n                return binarySubdivide(aX, intervalStart, intervalStart + kSampleStepSize, mX1, mX2);\n            }\n        };\n        return ob;\n    }();\n    var pooling = function() {\n        function _double(arr) {\n            return arr.concat(createSizedArray(arr.length));\n        }\n        return {\n            \"double\": _double\n        };\n    }();\n    var poolFactory = function() {\n        return function(initialLength, _create, _release) {\n            var _length = 0;\n            var _maxLength = initialLength;\n            var pool = createSizedArray(_maxLength);\n            var ob = {\n                newElement: newElement,\n                release: release\n            };\n            function newElement() {\n                var element;\n                if (_length) {\n                    _length -= 1;\n                    element = pool[_length];\n                } else {\n                    element = _create();\n                }\n                return element;\n            }\n            function release(element) {\n                if (_length === _maxLength) {\n                    pool = pooling[\"double\"](pool);\n                    _maxLength *= 2;\n                }\n                if (_release) {\n                    _release(element);\n                }\n                pool[_length] = element;\n                _length += 1;\n            }\n            return ob;\n        };\n    }();\n    var bezierLengthPool = function() {\n        function create() {\n            return {\n                addedLength: 0,\n                percents: createTypedArray(\"float32\", getDefaultCurveSegments()),\n                lengths: createTypedArray(\"float32\", getDefaultCurveSegments())\n            };\n        }\n        return poolFactory(8, create);\n    }();\n    var segmentsLengthPool = function() {\n        function create() {\n            return {\n                lengths: [],\n                totalLength: 0\n            };\n        }\n        function release(element) {\n            var i;\n            var len = element.lengths.length;\n            for(i = 0; i < len; i += 1){\n                bezierLengthPool.release(element.lengths[i]);\n            }\n            element.lengths.length = 0;\n        }\n        return poolFactory(8, create, release);\n    }();\n    function bezFunction() {\n        var math = Math;\n        function pointOnLine2D(x1, y1, x2, y2, x3, y3) {\n            var det1 = x1 * y2 + y1 * x3 + x2 * y3 - x3 * y2 - y3 * x1 - x2 * y1;\n            return det1 > -0.001 && det1 < 0.001;\n        }\n        function pointOnLine3D(x1, y1, z1, x2, y2, z2, x3, y3, z3) {\n            if (z1 === 0 && z2 === 0 && z3 === 0) {\n                return pointOnLine2D(x1, y1, x2, y2, x3, y3);\n            }\n            var dist1 = math.sqrt(math.pow(x2 - x1, 2) + math.pow(y2 - y1, 2) + math.pow(z2 - z1, 2));\n            var dist2 = math.sqrt(math.pow(x3 - x1, 2) + math.pow(y3 - y1, 2) + math.pow(z3 - z1, 2));\n            var dist3 = math.sqrt(math.pow(x3 - x2, 2) + math.pow(y3 - y2, 2) + math.pow(z3 - z2, 2));\n            var diffDist;\n            if (dist1 > dist2) {\n                if (dist1 > dist3) {\n                    diffDist = dist1 - dist2 - dist3;\n                } else {\n                    diffDist = dist3 - dist2 - dist1;\n                }\n            } else if (dist3 > dist2) {\n                diffDist = dist3 - dist2 - dist1;\n            } else {\n                diffDist = dist2 - dist1 - dist3;\n            }\n            return diffDist > -0.0001 && diffDist < 0.0001;\n        }\n        var getBezierLength = function() {\n            return function(pt1, pt2, pt3, pt4) {\n                var curveSegments = getDefaultCurveSegments();\n                var k;\n                var i;\n                var len;\n                var ptCoord;\n                var perc;\n                var addedLength = 0;\n                var ptDistance;\n                var point = [];\n                var lastPoint = [];\n                var lengthData = bezierLengthPool.newElement();\n                len = pt3.length;\n                for(k = 0; k < curveSegments; k += 1){\n                    perc = k / (curveSegments - 1);\n                    ptDistance = 0;\n                    for(i = 0; i < len; i += 1){\n                        ptCoord = bmPow(1 - perc, 3) * pt1[i] + 3 * bmPow(1 - perc, 2) * perc * pt3[i] + 3 * (1 - perc) * bmPow(perc, 2) * pt4[i] + bmPow(perc, 3) * pt2[i];\n                        point[i] = ptCoord;\n                        if (lastPoint[i] !== null) {\n                            ptDistance += bmPow(point[i] - lastPoint[i], 2);\n                        }\n                        lastPoint[i] = point[i];\n                    }\n                    if (ptDistance) {\n                        ptDistance = bmSqrt(ptDistance);\n                        addedLength += ptDistance;\n                    }\n                    lengthData.percents[k] = perc;\n                    lengthData.lengths[k] = addedLength;\n                }\n                lengthData.addedLength = addedLength;\n                return lengthData;\n            };\n        }();\n        function getSegmentsLength(shapeData) {\n            var segmentsLength = segmentsLengthPool.newElement();\n            var closed = shapeData.c;\n            var pathV = shapeData.v;\n            var pathO = shapeData.o;\n            var pathI = shapeData.i;\n            var i;\n            var len = shapeData._length;\n            var lengths = segmentsLength.lengths;\n            var totalLength = 0;\n            for(i = 0; i < len - 1; i += 1){\n                lengths[i] = getBezierLength(pathV[i], pathV[i + 1], pathO[i], pathI[i + 1]);\n                totalLength += lengths[i].addedLength;\n            }\n            if (closed && len) {\n                lengths[i] = getBezierLength(pathV[i], pathV[0], pathO[i], pathI[0]);\n                totalLength += lengths[i].addedLength;\n            }\n            segmentsLength.totalLength = totalLength;\n            return segmentsLength;\n        }\n        function BezierData(length) {\n            this.segmentLength = 0;\n            this.points = new Array(length);\n        }\n        function PointData(partial, point) {\n            this.partialLength = partial;\n            this.point = point;\n        }\n        var buildBezierData = function() {\n            var storedData = {};\n            return function(pt1, pt2, pt3, pt4) {\n                var bezierName = (pt1[0] + \"_\" + pt1[1] + \"_\" + pt2[0] + \"_\" + pt2[1] + \"_\" + pt3[0] + \"_\" + pt3[1] + \"_\" + pt4[0] + \"_\" + pt4[1]).replace(/\\./g, \"p\");\n                if (!storedData[bezierName]) {\n                    var curveSegments = getDefaultCurveSegments();\n                    var k;\n                    var i;\n                    var len;\n                    var ptCoord;\n                    var perc;\n                    var addedLength = 0;\n                    var ptDistance;\n                    var point;\n                    var lastPoint = null;\n                    if (pt1.length === 2 && (pt1[0] !== pt2[0] || pt1[1] !== pt2[1]) && pointOnLine2D(pt1[0], pt1[1], pt2[0], pt2[1], pt1[0] + pt3[0], pt1[1] + pt3[1]) && pointOnLine2D(pt1[0], pt1[1], pt2[0], pt2[1], pt2[0] + pt4[0], pt2[1] + pt4[1])) {\n                        curveSegments = 2;\n                    }\n                    var bezierData = new BezierData(curveSegments);\n                    len = pt3.length;\n                    for(k = 0; k < curveSegments; k += 1){\n                        point = createSizedArray(len);\n                        perc = k / (curveSegments - 1);\n                        ptDistance = 0;\n                        for(i = 0; i < len; i += 1){\n                            ptCoord = bmPow(1 - perc, 3) * pt1[i] + 3 * bmPow(1 - perc, 2) * perc * (pt1[i] + pt3[i]) + 3 * (1 - perc) * bmPow(perc, 2) * (pt2[i] + pt4[i]) + bmPow(perc, 3) * pt2[i];\n                            point[i] = ptCoord;\n                            if (lastPoint !== null) {\n                                ptDistance += bmPow(point[i] - lastPoint[i], 2);\n                            }\n                        }\n                        ptDistance = bmSqrt(ptDistance);\n                        addedLength += ptDistance;\n                        bezierData.points[k] = new PointData(ptDistance, point);\n                        lastPoint = point;\n                    }\n                    bezierData.segmentLength = addedLength;\n                    storedData[bezierName] = bezierData;\n                }\n                return storedData[bezierName];\n            };\n        }();\n        function getDistancePerc(perc, bezierData) {\n            var percents = bezierData.percents;\n            var lengths = bezierData.lengths;\n            var len = percents.length;\n            var initPos = bmFloor((len - 1) * perc);\n            var lengthPos = perc * bezierData.addedLength;\n            var lPerc = 0;\n            if (initPos === len - 1 || initPos === 0 || lengthPos === lengths[initPos]) {\n                return percents[initPos];\n            }\n            var dir = lengths[initPos] > lengthPos ? -1 : 1;\n            var flag = true;\n            while(flag){\n                if (lengths[initPos] <= lengthPos && lengths[initPos + 1] > lengthPos) {\n                    lPerc = (lengthPos - lengths[initPos]) / (lengths[initPos + 1] - lengths[initPos]);\n                    flag = false;\n                } else {\n                    initPos += dir;\n                }\n                if (initPos < 0 || initPos >= len - 1) {\n                    // FIX for TypedArrays that don't store floating point values with enough accuracy\n                    if (initPos === len - 1) {\n                        return percents[initPos];\n                    }\n                    flag = false;\n                }\n            }\n            return percents[initPos] + (percents[initPos + 1] - percents[initPos]) * lPerc;\n        }\n        function getPointInSegment(pt1, pt2, pt3, pt4, percent, bezierData) {\n            var t1 = getDistancePerc(percent, bezierData);\n            var u1 = 1 - t1;\n            var ptX = math.round((u1 * u1 * u1 * pt1[0] + (t1 * u1 * u1 + u1 * t1 * u1 + u1 * u1 * t1) * pt3[0] + (t1 * t1 * u1 + u1 * t1 * t1 + t1 * u1 * t1) * pt4[0] + t1 * t1 * t1 * pt2[0]) * 1000) / 1000;\n            var ptY = math.round((u1 * u1 * u1 * pt1[1] + (t1 * u1 * u1 + u1 * t1 * u1 + u1 * u1 * t1) * pt3[1] + (t1 * t1 * u1 + u1 * t1 * t1 + t1 * u1 * t1) * pt4[1] + t1 * t1 * t1 * pt2[1]) * 1000) / 1000;\n            return [\n                ptX,\n                ptY\n            ];\n        }\n        var bezierSegmentPoints = createTypedArray(\"float32\", 8);\n        function getNewSegment(pt1, pt2, pt3, pt4, startPerc, endPerc, bezierData) {\n            if (startPerc < 0) {\n                startPerc = 0;\n            } else if (startPerc > 1) {\n                startPerc = 1;\n            }\n            var t0 = getDistancePerc(startPerc, bezierData);\n            endPerc = endPerc > 1 ? 1 : endPerc;\n            var t1 = getDistancePerc(endPerc, bezierData);\n            var i;\n            var len = pt1.length;\n            var u0 = 1 - t0;\n            var u1 = 1 - t1;\n            var u0u0u0 = u0 * u0 * u0;\n            var t0u0u0_3 = t0 * u0 * u0 * 3; // eslint-disable-line camelcase\n            var t0t0u0_3 = t0 * t0 * u0 * 3; // eslint-disable-line camelcase\n            var t0t0t0 = t0 * t0 * t0; //\n            var u0u0u1 = u0 * u0 * u1;\n            var t0u0u1_3 = t0 * u0 * u1 + u0 * t0 * u1 + u0 * u0 * t1; // eslint-disable-line camelcase\n            var t0t0u1_3 = t0 * t0 * u1 + u0 * t0 * t1 + t0 * u0 * t1; // eslint-disable-line camelcase\n            var t0t0t1 = t0 * t0 * t1; //\n            var u0u1u1 = u0 * u1 * u1;\n            var t0u1u1_3 = t0 * u1 * u1 + u0 * t1 * u1 + u0 * u1 * t1; // eslint-disable-line camelcase\n            var t0t1u1_3 = t0 * t1 * u1 + u0 * t1 * t1 + t0 * u1 * t1; // eslint-disable-line camelcase\n            var t0t1t1 = t0 * t1 * t1; //\n            var u1u1u1 = u1 * u1 * u1;\n            var t1u1u1_3 = t1 * u1 * u1 + u1 * t1 * u1 + u1 * u1 * t1; // eslint-disable-line camelcase\n            var t1t1u1_3 = t1 * t1 * u1 + u1 * t1 * t1 + t1 * u1 * t1; // eslint-disable-line camelcase\n            var t1t1t1 = t1 * t1 * t1;\n            for(i = 0; i < len; i += 1){\n                bezierSegmentPoints[i * 4] = math.round((u0u0u0 * pt1[i] + t0u0u0_3 * pt3[i] + t0t0u0_3 * pt4[i] + t0t0t0 * pt2[i]) * 1000) / 1000; // eslint-disable-line camelcase\n                bezierSegmentPoints[i * 4 + 1] = math.round((u0u0u1 * pt1[i] + t0u0u1_3 * pt3[i] + t0t0u1_3 * pt4[i] + t0t0t1 * pt2[i]) * 1000) / 1000; // eslint-disable-line camelcase\n                bezierSegmentPoints[i * 4 + 2] = math.round((u0u1u1 * pt1[i] + t0u1u1_3 * pt3[i] + t0t1u1_3 * pt4[i] + t0t1t1 * pt2[i]) * 1000) / 1000; // eslint-disable-line camelcase\n                bezierSegmentPoints[i * 4 + 3] = math.round((u1u1u1 * pt1[i] + t1u1u1_3 * pt3[i] + t1t1u1_3 * pt4[i] + t1t1t1 * pt2[i]) * 1000) / 1000; // eslint-disable-line camelcase\n            }\n            return bezierSegmentPoints;\n        }\n        return {\n            getSegmentsLength: getSegmentsLength,\n            getNewSegment: getNewSegment,\n            getPointInSegment: getPointInSegment,\n            buildBezierData: buildBezierData,\n            pointOnLine2D: pointOnLine2D,\n            pointOnLine3D: pointOnLine3D\n        };\n    }\n    var bez = bezFunction();\n    var initFrame = initialDefaultFrame;\n    var mathAbs = Math.abs;\n    function interpolateValue(frameNum, caching) {\n        var offsetTime = this.offsetTime;\n        var newValue;\n        if (this.propType === \"multidimensional\") {\n            newValue = createTypedArray(\"float32\", this.pv.length);\n        }\n        var iterationIndex = caching.lastIndex;\n        var i = iterationIndex;\n        var len = this.keyframes.length - 1;\n        var flag = true;\n        var keyData;\n        var nextKeyData;\n        var keyframeMetadata;\n        while(flag){\n            keyData = this.keyframes[i];\n            nextKeyData = this.keyframes[i + 1];\n            if (i === len - 1 && frameNum >= nextKeyData.t - offsetTime) {\n                if (keyData.h) {\n                    keyData = nextKeyData;\n                }\n                iterationIndex = 0;\n                break;\n            }\n            if (nextKeyData.t - offsetTime > frameNum) {\n                iterationIndex = i;\n                break;\n            }\n            if (i < len - 1) {\n                i += 1;\n            } else {\n                iterationIndex = 0;\n                flag = false;\n            }\n        }\n        keyframeMetadata = this.keyframesMetadata[i] || {};\n        var k;\n        var kLen;\n        var perc;\n        var jLen;\n        var j;\n        var fnc;\n        var nextKeyTime = nextKeyData.t - offsetTime;\n        var keyTime = keyData.t - offsetTime;\n        var endValue;\n        if (keyData.to) {\n            if (!keyframeMetadata.bezierData) {\n                keyframeMetadata.bezierData = bez.buildBezierData(keyData.s, nextKeyData.s || keyData.e, keyData.to, keyData.ti);\n            }\n            var bezierData = keyframeMetadata.bezierData;\n            if (frameNum >= nextKeyTime || frameNum < keyTime) {\n                var ind = frameNum >= nextKeyTime ? bezierData.points.length - 1 : 0;\n                kLen = bezierData.points[ind].point.length;\n                for(k = 0; k < kLen; k += 1){\n                    newValue[k] = bezierData.points[ind].point[k];\n                } // caching._lastKeyframeIndex = -1;\n            } else {\n                if (keyframeMetadata.__fnct) {\n                    fnc = keyframeMetadata.__fnct;\n                } else {\n                    fnc = BezierFactory.getBezierEasing(keyData.o.x, keyData.o.y, keyData.i.x, keyData.i.y, keyData.n).get;\n                    keyframeMetadata.__fnct = fnc;\n                }\n                perc = fnc((frameNum - keyTime) / (nextKeyTime - keyTime));\n                var distanceInLine = bezierData.segmentLength * perc;\n                var segmentPerc;\n                var addedLength = caching.lastFrame < frameNum && caching._lastKeyframeIndex === i ? caching._lastAddedLength : 0;\n                j = caching.lastFrame < frameNum && caching._lastKeyframeIndex === i ? caching._lastPoint : 0;\n                flag = true;\n                jLen = bezierData.points.length;\n                while(flag){\n                    addedLength += bezierData.points[j].partialLength;\n                    if (distanceInLine === 0 || perc === 0 || j === bezierData.points.length - 1) {\n                        kLen = bezierData.points[j].point.length;\n                        for(k = 0; k < kLen; k += 1){\n                            newValue[k] = bezierData.points[j].point[k];\n                        }\n                        break;\n                    } else if (distanceInLine >= addedLength && distanceInLine < addedLength + bezierData.points[j + 1].partialLength) {\n                        segmentPerc = (distanceInLine - addedLength) / bezierData.points[j + 1].partialLength;\n                        kLen = bezierData.points[j].point.length;\n                        for(k = 0; k < kLen; k += 1){\n                            newValue[k] = bezierData.points[j].point[k] + (bezierData.points[j + 1].point[k] - bezierData.points[j].point[k]) * segmentPerc;\n                        }\n                        break;\n                    }\n                    if (j < jLen - 1) {\n                        j += 1;\n                    } else {\n                        flag = false;\n                    }\n                }\n                caching._lastPoint = j;\n                caching._lastAddedLength = addedLength - bezierData.points[j].partialLength;\n                caching._lastKeyframeIndex = i;\n            }\n        } else {\n            var outX;\n            var outY;\n            var inX;\n            var inY;\n            var keyValue;\n            len = keyData.s.length;\n            endValue = nextKeyData.s || keyData.e;\n            if (this.sh && keyData.h !== 1) {\n                if (frameNum >= nextKeyTime) {\n                    newValue[0] = endValue[0];\n                    newValue[1] = endValue[1];\n                    newValue[2] = endValue[2];\n                } else if (frameNum <= keyTime) {\n                    newValue[0] = keyData.s[0];\n                    newValue[1] = keyData.s[1];\n                    newValue[2] = keyData.s[2];\n                } else {\n                    var quatStart = createQuaternion(keyData.s);\n                    var quatEnd = createQuaternion(endValue);\n                    var time = (frameNum - keyTime) / (nextKeyTime - keyTime);\n                    quaternionToEuler(newValue, slerp(quatStart, quatEnd, time));\n                }\n            } else {\n                for(i = 0; i < len; i += 1){\n                    if (keyData.h !== 1) {\n                        if (frameNum >= nextKeyTime) {\n                            perc = 1;\n                        } else if (frameNum < keyTime) {\n                            perc = 0;\n                        } else {\n                            if (keyData.o.x.constructor === Array) {\n                                if (!keyframeMetadata.__fnct) {\n                                    keyframeMetadata.__fnct = [];\n                                }\n                                if (!keyframeMetadata.__fnct[i]) {\n                                    outX = keyData.o.x[i] === undefined ? keyData.o.x[0] : keyData.o.x[i];\n                                    outY = keyData.o.y[i] === undefined ? keyData.o.y[0] : keyData.o.y[i];\n                                    inX = keyData.i.x[i] === undefined ? keyData.i.x[0] : keyData.i.x[i];\n                                    inY = keyData.i.y[i] === undefined ? keyData.i.y[0] : keyData.i.y[i];\n                                    fnc = BezierFactory.getBezierEasing(outX, outY, inX, inY).get;\n                                    keyframeMetadata.__fnct[i] = fnc;\n                                } else {\n                                    fnc = keyframeMetadata.__fnct[i];\n                                }\n                            } else if (!keyframeMetadata.__fnct) {\n                                outX = keyData.o.x;\n                                outY = keyData.o.y;\n                                inX = keyData.i.x;\n                                inY = keyData.i.y;\n                                fnc = BezierFactory.getBezierEasing(outX, outY, inX, inY).get;\n                                keyData.keyframeMetadata = fnc;\n                            } else {\n                                fnc = keyframeMetadata.__fnct;\n                            }\n                            perc = fnc((frameNum - keyTime) / (nextKeyTime - keyTime));\n                        }\n                    }\n                    endValue = nextKeyData.s || keyData.e;\n                    keyValue = keyData.h === 1 ? keyData.s[i] : keyData.s[i] + (endValue[i] - keyData.s[i]) * perc;\n                    if (this.propType === \"multidimensional\") {\n                        newValue[i] = keyValue;\n                    } else {\n                        newValue = keyValue;\n                    }\n                }\n            }\n        }\n        caching.lastIndex = iterationIndex;\n        return newValue;\n    } // based on @Toji's https://github.com/toji/gl-matrix/\n    function slerp(a, b, t) {\n        var out = [];\n        var ax = a[0];\n        var ay = a[1];\n        var az = a[2];\n        var aw = a[3];\n        var bx = b[0];\n        var by = b[1];\n        var bz = b[2];\n        var bw = b[3];\n        var omega;\n        var cosom;\n        var sinom;\n        var scale0;\n        var scale1;\n        cosom = ax * bx + ay * by + az * bz + aw * bw;\n        if (cosom < 0.0) {\n            cosom = -cosom;\n            bx = -bx;\n            by = -by;\n            bz = -bz;\n            bw = -bw;\n        }\n        if (1.0 - cosom > 0.000001) {\n            omega = Math.acos(cosom);\n            sinom = Math.sin(omega);\n            scale0 = Math.sin((1.0 - t) * omega) / sinom;\n            scale1 = Math.sin(t * omega) / sinom;\n        } else {\n            scale0 = 1.0 - t;\n            scale1 = t;\n        }\n        out[0] = scale0 * ax + scale1 * bx;\n        out[1] = scale0 * ay + scale1 * by;\n        out[2] = scale0 * az + scale1 * bz;\n        out[3] = scale0 * aw + scale1 * bw;\n        return out;\n    }\n    function quaternionToEuler(out, quat) {\n        var qx = quat[0];\n        var qy = quat[1];\n        var qz = quat[2];\n        var qw = quat[3];\n        var heading = Math.atan2(2 * qy * qw - 2 * qx * qz, 1 - 2 * qy * qy - 2 * qz * qz);\n        var attitude = Math.asin(2 * qx * qy + 2 * qz * qw);\n        var bank = Math.atan2(2 * qx * qw - 2 * qy * qz, 1 - 2 * qx * qx - 2 * qz * qz);\n        out[0] = heading / degToRads;\n        out[1] = attitude / degToRads;\n        out[2] = bank / degToRads;\n    }\n    function createQuaternion(values) {\n        var heading = values[0] * degToRads;\n        var attitude = values[1] * degToRads;\n        var bank = values[2] * degToRads;\n        var c1 = Math.cos(heading / 2);\n        var c2 = Math.cos(attitude / 2);\n        var c3 = Math.cos(bank / 2);\n        var s1 = Math.sin(heading / 2);\n        var s2 = Math.sin(attitude / 2);\n        var s3 = Math.sin(bank / 2);\n        var w = c1 * c2 * c3 - s1 * s2 * s3;\n        var x = s1 * s2 * c3 + c1 * c2 * s3;\n        var y = s1 * c2 * c3 + c1 * s2 * s3;\n        var z = c1 * s2 * c3 - s1 * c2 * s3;\n        return [\n            x,\n            y,\n            z,\n            w\n        ];\n    }\n    function getValueAtCurrentTime() {\n        var frameNum = this.comp.renderedFrame - this.offsetTime;\n        var initTime = this.keyframes[0].t - this.offsetTime;\n        var endTime = this.keyframes[this.keyframes.length - 1].t - this.offsetTime;\n        if (!(frameNum === this._caching.lastFrame || this._caching.lastFrame !== initFrame && (this._caching.lastFrame >= endTime && frameNum >= endTime || this._caching.lastFrame < initTime && frameNum < initTime))) {\n            if (this._caching.lastFrame >= frameNum) {\n                this._caching._lastKeyframeIndex = -1;\n                this._caching.lastIndex = 0;\n            }\n            var renderResult = this.interpolateValue(frameNum, this._caching);\n            this.pv = renderResult;\n        }\n        this._caching.lastFrame = frameNum;\n        return this.pv;\n    }\n    function setVValue(val) {\n        var multipliedValue;\n        if (this.propType === \"unidimensional\") {\n            multipliedValue = val * this.mult;\n            if (mathAbs(this.v - multipliedValue) > 0.00001) {\n                this.v = multipliedValue;\n                this._mdf = true;\n            }\n        } else {\n            var i = 0;\n            var len = this.v.length;\n            while(i < len){\n                multipliedValue = val[i] * this.mult;\n                if (mathAbs(this.v[i] - multipliedValue) > 0.00001) {\n                    this.v[i] = multipliedValue;\n                    this._mdf = true;\n                }\n                i += 1;\n            }\n        }\n    }\n    function processEffectsSequence() {\n        if (this.elem.globalData.frameId === this.frameId || !this.effectsSequence.length) {\n            return;\n        }\n        if (this.lock) {\n            this.setVValue(this.pv);\n            return;\n        }\n        this.lock = true;\n        this._mdf = this._isFirstFrame;\n        var i;\n        var len = this.effectsSequence.length;\n        var finalValue = this.kf ? this.pv : this.data.k;\n        for(i = 0; i < len; i += 1){\n            finalValue = this.effectsSequence[i](finalValue);\n        }\n        this.setVValue(finalValue);\n        this._isFirstFrame = false;\n        this.lock = false;\n        this.frameId = this.elem.globalData.frameId;\n    }\n    function addEffect(effectFunction) {\n        this.effectsSequence.push(effectFunction);\n        this.container.addDynamicProperty(this);\n    }\n    function ValueProperty(elem, data, mult, container) {\n        this.propType = \"unidimensional\";\n        this.mult = mult || 1;\n        this.data = data;\n        this.v = mult ? data.k * mult : data.k;\n        this.pv = data.k;\n        this._mdf = false;\n        this.elem = elem;\n        this.container = container;\n        this.comp = elem.comp;\n        this.k = false;\n        this.kf = false;\n        this.vel = 0;\n        this.effectsSequence = [];\n        this._isFirstFrame = true;\n        this.getValue = processEffectsSequence;\n        this.setVValue = setVValue;\n        this.addEffect = addEffect;\n    }\n    function MultiDimensionalProperty(elem, data, mult, container) {\n        this.propType = \"multidimensional\";\n        this.mult = mult || 1;\n        this.data = data;\n        this._mdf = false;\n        this.elem = elem;\n        this.container = container;\n        this.comp = elem.comp;\n        this.k = false;\n        this.kf = false;\n        this.frameId = -1;\n        var i;\n        var len = data.k.length;\n        this.v = createTypedArray(\"float32\", len);\n        this.pv = createTypedArray(\"float32\", len);\n        this.vel = createTypedArray(\"float32\", len);\n        for(i = 0; i < len; i += 1){\n            this.v[i] = data.k[i] * this.mult;\n            this.pv[i] = data.k[i];\n        }\n        this._isFirstFrame = true;\n        this.effectsSequence = [];\n        this.getValue = processEffectsSequence;\n        this.setVValue = setVValue;\n        this.addEffect = addEffect;\n    }\n    function KeyframedValueProperty(elem, data, mult, container) {\n        this.propType = \"unidimensional\";\n        this.keyframes = data.k;\n        this.keyframesMetadata = [];\n        this.offsetTime = elem.data.st;\n        this.frameId = -1;\n        this._caching = {\n            lastFrame: initFrame,\n            lastIndex: 0,\n            value: 0,\n            _lastKeyframeIndex: -1\n        };\n        this.k = true;\n        this.kf = true;\n        this.data = data;\n        this.mult = mult || 1;\n        this.elem = elem;\n        this.container = container;\n        this.comp = elem.comp;\n        this.v = initFrame;\n        this.pv = initFrame;\n        this._isFirstFrame = true;\n        this.getValue = processEffectsSequence;\n        this.setVValue = setVValue;\n        this.interpolateValue = interpolateValue;\n        this.effectsSequence = [\n            getValueAtCurrentTime.bind(this)\n        ];\n        this.addEffect = addEffect;\n    }\n    function KeyframedMultidimensionalProperty(elem, data, mult, container) {\n        this.propType = \"multidimensional\";\n        var i;\n        var len = data.k.length;\n        var s;\n        var e;\n        var to;\n        var ti;\n        for(i = 0; i < len - 1; i += 1){\n            if (data.k[i].to && data.k[i].s && data.k[i + 1] && data.k[i + 1].s) {\n                s = data.k[i].s;\n                e = data.k[i + 1].s;\n                to = data.k[i].to;\n                ti = data.k[i].ti;\n                if (s.length === 2 && !(s[0] === e[0] && s[1] === e[1]) && bez.pointOnLine2D(s[0], s[1], e[0], e[1], s[0] + to[0], s[1] + to[1]) && bez.pointOnLine2D(s[0], s[1], e[0], e[1], e[0] + ti[0], e[1] + ti[1]) || s.length === 3 && !(s[0] === e[0] && s[1] === e[1] && s[2] === e[2]) && bez.pointOnLine3D(s[0], s[1], s[2], e[0], e[1], e[2], s[0] + to[0], s[1] + to[1], s[2] + to[2]) && bez.pointOnLine3D(s[0], s[1], s[2], e[0], e[1], e[2], e[0] + ti[0], e[1] + ti[1], e[2] + ti[2])) {\n                    data.k[i].to = null;\n                    data.k[i].ti = null;\n                }\n                if (s[0] === e[0] && s[1] === e[1] && to[0] === 0 && to[1] === 0 && ti[0] === 0 && ti[1] === 0) {\n                    if (s.length === 2 || s[2] === e[2] && to[2] === 0 && ti[2] === 0) {\n                        data.k[i].to = null;\n                        data.k[i].ti = null;\n                    }\n                }\n            }\n        }\n        this.effectsSequence = [\n            getValueAtCurrentTime.bind(this)\n        ];\n        this.data = data;\n        this.keyframes = data.k;\n        this.keyframesMetadata = [];\n        this.offsetTime = elem.data.st;\n        this.k = true;\n        this.kf = true;\n        this._isFirstFrame = true;\n        this.mult = mult || 1;\n        this.elem = elem;\n        this.container = container;\n        this.comp = elem.comp;\n        this.getValue = processEffectsSequence;\n        this.setVValue = setVValue;\n        this.interpolateValue = interpolateValue;\n        this.frameId = -1;\n        var arrLen = data.k[0].s.length;\n        this.v = createTypedArray(\"float32\", arrLen);\n        this.pv = createTypedArray(\"float32\", arrLen);\n        for(i = 0; i < arrLen; i += 1){\n            this.v[i] = initFrame;\n            this.pv[i] = initFrame;\n        }\n        this._caching = {\n            lastFrame: initFrame,\n            lastIndex: 0,\n            value: createTypedArray(\"float32\", arrLen)\n        };\n        this.addEffect = addEffect;\n    }\n    var PropertyFactory = function() {\n        function getProp(elem, data, type, mult, container) {\n            if (data.sid) {\n                data = elem.globalData.slotManager.getProp(data);\n            }\n            var p;\n            if (!data.k.length) {\n                p = new ValueProperty(elem, data, mult, container);\n            } else if (typeof data.k[0] === \"number\") {\n                p = new MultiDimensionalProperty(elem, data, mult, container);\n            } else {\n                switch(type){\n                    case 0:\n                        p = new KeyframedValueProperty(elem, data, mult, container);\n                        break;\n                    case 1:\n                        p = new KeyframedMultidimensionalProperty(elem, data, mult, container);\n                        break;\n                    default:\n                        break;\n                }\n            }\n            if (p.effectsSequence.length) {\n                container.addDynamicProperty(p);\n            }\n            return p;\n        }\n        var ob = {\n            getProp: getProp\n        };\n        return ob;\n    }();\n    function DynamicPropertyContainer() {}\n    DynamicPropertyContainer.prototype = {\n        addDynamicProperty: function addDynamicProperty(prop) {\n            if (this.dynamicProperties.indexOf(prop) === -1) {\n                this.dynamicProperties.push(prop);\n                this.container.addDynamicProperty(this);\n                this._isAnimated = true;\n            }\n        },\n        iterateDynamicProperties: function iterateDynamicProperties() {\n            this._mdf = false;\n            var i;\n            var len = this.dynamicProperties.length;\n            for(i = 0; i < len; i += 1){\n                this.dynamicProperties[i].getValue();\n                if (this.dynamicProperties[i]._mdf) {\n                    this._mdf = true;\n                }\n            }\n        },\n        initDynamicPropertyContainer: function initDynamicPropertyContainer(container) {\n            this.container = container;\n            this.dynamicProperties = [];\n            this._mdf = false;\n            this._isAnimated = false;\n        }\n    };\n    var pointPool = function() {\n        function create() {\n            return createTypedArray(\"float32\", 2);\n        }\n        return poolFactory(8, create);\n    }();\n    function ShapePath() {\n        this.c = false;\n        this._length = 0;\n        this._maxLength = 8;\n        this.v = createSizedArray(this._maxLength);\n        this.o = createSizedArray(this._maxLength);\n        this.i = createSizedArray(this._maxLength);\n    }\n    ShapePath.prototype.setPathData = function(closed, len) {\n        this.c = closed;\n        this.setLength(len);\n        var i = 0;\n        while(i < len){\n            this.v[i] = pointPool.newElement();\n            this.o[i] = pointPool.newElement();\n            this.i[i] = pointPool.newElement();\n            i += 1;\n        }\n    };\n    ShapePath.prototype.setLength = function(len) {\n        while(this._maxLength < len){\n            this.doubleArrayLength();\n        }\n        this._length = len;\n    };\n    ShapePath.prototype.doubleArrayLength = function() {\n        this.v = this.v.concat(createSizedArray(this._maxLength));\n        this.i = this.i.concat(createSizedArray(this._maxLength));\n        this.o = this.o.concat(createSizedArray(this._maxLength));\n        this._maxLength *= 2;\n    };\n    ShapePath.prototype.setXYAt = function(x, y, type, pos, replace) {\n        var arr;\n        this._length = Math.max(this._length, pos + 1);\n        if (this._length >= this._maxLength) {\n            this.doubleArrayLength();\n        }\n        switch(type){\n            case \"v\":\n                arr = this.v;\n                break;\n            case \"i\":\n                arr = this.i;\n                break;\n            case \"o\":\n                arr = this.o;\n                break;\n            default:\n                arr = [];\n                break;\n        }\n        if (!arr[pos] || arr[pos] && !replace) {\n            arr[pos] = pointPool.newElement();\n        }\n        arr[pos][0] = x;\n        arr[pos][1] = y;\n    };\n    ShapePath.prototype.setTripleAt = function(vX, vY, oX, oY, iX, iY, pos, replace) {\n        this.setXYAt(vX, vY, \"v\", pos, replace);\n        this.setXYAt(oX, oY, \"o\", pos, replace);\n        this.setXYAt(iX, iY, \"i\", pos, replace);\n    };\n    ShapePath.prototype.reverse = function() {\n        var newPath = new ShapePath();\n        newPath.setPathData(this.c, this._length);\n        var vertices = this.v;\n        var outPoints = this.o;\n        var inPoints = this.i;\n        var init = 0;\n        if (this.c) {\n            newPath.setTripleAt(vertices[0][0], vertices[0][1], inPoints[0][0], inPoints[0][1], outPoints[0][0], outPoints[0][1], 0, false);\n            init = 1;\n        }\n        var cnt = this._length - 1;\n        var len = this._length;\n        var i;\n        for(i = init; i < len; i += 1){\n            newPath.setTripleAt(vertices[cnt][0], vertices[cnt][1], inPoints[cnt][0], inPoints[cnt][1], outPoints[cnt][0], outPoints[cnt][1], i, false);\n            cnt -= 1;\n        }\n        return newPath;\n    };\n    ShapePath.prototype.length = function() {\n        return this._length;\n    };\n    var shapePool = function() {\n        function create() {\n            return new ShapePath();\n        }\n        function release(shapePath) {\n            var len = shapePath._length;\n            var i;\n            for(i = 0; i < len; i += 1){\n                pointPool.release(shapePath.v[i]);\n                pointPool.release(shapePath.i[i]);\n                pointPool.release(shapePath.o[i]);\n                shapePath.v[i] = null;\n                shapePath.i[i] = null;\n                shapePath.o[i] = null;\n            }\n            shapePath._length = 0;\n            shapePath.c = false;\n        }\n        function clone(shape) {\n            var cloned = factory.newElement();\n            var i;\n            var len = shape._length === undefined ? shape.v.length : shape._length;\n            cloned.setLength(len);\n            cloned.c = shape.c;\n            for(i = 0; i < len; i += 1){\n                cloned.setTripleAt(shape.v[i][0], shape.v[i][1], shape.o[i][0], shape.o[i][1], shape.i[i][0], shape.i[i][1], i);\n            }\n            return cloned;\n        }\n        var factory = poolFactory(4, create, release);\n        factory.clone = clone;\n        return factory;\n    }();\n    function ShapeCollection() {\n        this._length = 0;\n        this._maxLength = 4;\n        this.shapes = createSizedArray(this._maxLength);\n    }\n    ShapeCollection.prototype.addShape = function(shapeData) {\n        if (this._length === this._maxLength) {\n            this.shapes = this.shapes.concat(createSizedArray(this._maxLength));\n            this._maxLength *= 2;\n        }\n        this.shapes[this._length] = shapeData;\n        this._length += 1;\n    };\n    ShapeCollection.prototype.releaseShapes = function() {\n        var i;\n        for(i = 0; i < this._length; i += 1){\n            shapePool.release(this.shapes[i]);\n        }\n        this._length = 0;\n    };\n    var shapeCollectionPool = function() {\n        var ob = {\n            newShapeCollection: newShapeCollection,\n            release: release\n        };\n        var _length = 0;\n        var _maxLength = 4;\n        var pool = createSizedArray(_maxLength);\n        function newShapeCollection() {\n            var shapeCollection;\n            if (_length) {\n                _length -= 1;\n                shapeCollection = pool[_length];\n            } else {\n                shapeCollection = new ShapeCollection();\n            }\n            return shapeCollection;\n        }\n        function release(shapeCollection) {\n            var i;\n            var len = shapeCollection._length;\n            for(i = 0; i < len; i += 1){\n                shapePool.release(shapeCollection.shapes[i]);\n            }\n            shapeCollection._length = 0;\n            if (_length === _maxLength) {\n                pool = pooling[\"double\"](pool);\n                _maxLength *= 2;\n            }\n            pool[_length] = shapeCollection;\n            _length += 1;\n        }\n        return ob;\n    }();\n    var ShapePropertyFactory = function() {\n        var initFrame = -999999;\n        function interpolateShape(frameNum, previousValue, caching) {\n            var iterationIndex = caching.lastIndex;\n            var keyPropS;\n            var keyPropE;\n            var isHold;\n            var j;\n            var k;\n            var jLen;\n            var kLen;\n            var perc;\n            var vertexValue;\n            var kf = this.keyframes;\n            if (frameNum < kf[0].t - this.offsetTime) {\n                keyPropS = kf[0].s[0];\n                isHold = true;\n                iterationIndex = 0;\n            } else if (frameNum >= kf[kf.length - 1].t - this.offsetTime) {\n                keyPropS = kf[kf.length - 1].s ? kf[kf.length - 1].s[0] : kf[kf.length - 2].e[0];\n                /* if(kf[kf.length - 1].s){\r\n                  keyPropS = kf[kf.length - 1].s[0];\r\n              }else{\r\n                  keyPropS = kf[kf.length - 2].e[0];\r\n              } */ isHold = true;\n            } else {\n                var i = iterationIndex;\n                var len = kf.length - 1;\n                var flag = true;\n                var keyData;\n                var nextKeyData;\n                var keyframeMetadata;\n                while(flag){\n                    keyData = kf[i];\n                    nextKeyData = kf[i + 1];\n                    if (nextKeyData.t - this.offsetTime > frameNum) {\n                        break;\n                    }\n                    if (i < len - 1) {\n                        i += 1;\n                    } else {\n                        flag = false;\n                    }\n                }\n                keyframeMetadata = this.keyframesMetadata[i] || {};\n                isHold = keyData.h === 1;\n                iterationIndex = i;\n                if (!isHold) {\n                    if (frameNum >= nextKeyData.t - this.offsetTime) {\n                        perc = 1;\n                    } else if (frameNum < keyData.t - this.offsetTime) {\n                        perc = 0;\n                    } else {\n                        var fnc;\n                        if (keyframeMetadata.__fnct) {\n                            fnc = keyframeMetadata.__fnct;\n                        } else {\n                            fnc = BezierFactory.getBezierEasing(keyData.o.x, keyData.o.y, keyData.i.x, keyData.i.y).get;\n                            keyframeMetadata.__fnct = fnc;\n                        }\n                        perc = fnc((frameNum - (keyData.t - this.offsetTime)) / (nextKeyData.t - this.offsetTime - (keyData.t - this.offsetTime)));\n                    }\n                    keyPropE = nextKeyData.s ? nextKeyData.s[0] : keyData.e[0];\n                }\n                keyPropS = keyData.s[0];\n            }\n            jLen = previousValue._length;\n            kLen = keyPropS.i[0].length;\n            caching.lastIndex = iterationIndex;\n            for(j = 0; j < jLen; j += 1){\n                for(k = 0; k < kLen; k += 1){\n                    vertexValue = isHold ? keyPropS.i[j][k] : keyPropS.i[j][k] + (keyPropE.i[j][k] - keyPropS.i[j][k]) * perc;\n                    previousValue.i[j][k] = vertexValue;\n                    vertexValue = isHold ? keyPropS.o[j][k] : keyPropS.o[j][k] + (keyPropE.o[j][k] - keyPropS.o[j][k]) * perc;\n                    previousValue.o[j][k] = vertexValue;\n                    vertexValue = isHold ? keyPropS.v[j][k] : keyPropS.v[j][k] + (keyPropE.v[j][k] - keyPropS.v[j][k]) * perc;\n                    previousValue.v[j][k] = vertexValue;\n                }\n            }\n        }\n        function interpolateShapeCurrentTime() {\n            var frameNum = this.comp.renderedFrame - this.offsetTime;\n            var initTime = this.keyframes[0].t - this.offsetTime;\n            var endTime = this.keyframes[this.keyframes.length - 1].t - this.offsetTime;\n            var lastFrame = this._caching.lastFrame;\n            if (!(lastFrame !== initFrame && (lastFrame < initTime && frameNum < initTime || lastFrame > endTime && frameNum > endTime))) {\n                /// /\n                this._caching.lastIndex = lastFrame < frameNum ? this._caching.lastIndex : 0;\n                this.interpolateShape(frameNum, this.pv, this._caching); /// /\n            }\n            this._caching.lastFrame = frameNum;\n            return this.pv;\n        }\n        function resetShape() {\n            this.paths = this.localShapeCollection;\n        }\n        function shapesEqual(shape1, shape2) {\n            if (shape1._length !== shape2._length || shape1.c !== shape2.c) {\n                return false;\n            }\n            var i;\n            var len = shape1._length;\n            for(i = 0; i < len; i += 1){\n                if (shape1.v[i][0] !== shape2.v[i][0] || shape1.v[i][1] !== shape2.v[i][1] || shape1.o[i][0] !== shape2.o[i][0] || shape1.o[i][1] !== shape2.o[i][1] || shape1.i[i][0] !== shape2.i[i][0] || shape1.i[i][1] !== shape2.i[i][1]) {\n                    return false;\n                }\n            }\n            return true;\n        }\n        function setVValue(newPath) {\n            if (!shapesEqual(this.v, newPath)) {\n                this.v = shapePool.clone(newPath);\n                this.localShapeCollection.releaseShapes();\n                this.localShapeCollection.addShape(this.v);\n                this._mdf = true;\n                this.paths = this.localShapeCollection;\n            }\n        }\n        function processEffectsSequence() {\n            if (this.elem.globalData.frameId === this.frameId) {\n                return;\n            }\n            if (!this.effectsSequence.length) {\n                this._mdf = false;\n                return;\n            }\n            if (this.lock) {\n                this.setVValue(this.pv);\n                return;\n            }\n            this.lock = true;\n            this._mdf = false;\n            var finalValue;\n            if (this.kf) {\n                finalValue = this.pv;\n            } else if (this.data.ks) {\n                finalValue = this.data.ks.k;\n            } else {\n                finalValue = this.data.pt.k;\n            }\n            var i;\n            var len = this.effectsSequence.length;\n            for(i = 0; i < len; i += 1){\n                finalValue = this.effectsSequence[i](finalValue);\n            }\n            this.setVValue(finalValue);\n            this.lock = false;\n            this.frameId = this.elem.globalData.frameId;\n        }\n        function ShapeProperty(elem, data, type) {\n            this.propType = \"shape\";\n            this.comp = elem.comp;\n            this.container = elem;\n            this.elem = elem;\n            this.data = data;\n            this.k = false;\n            this.kf = false;\n            this._mdf = false;\n            var pathData = type === 3 ? data.pt.k : data.ks.k;\n            this.v = shapePool.clone(pathData);\n            this.pv = shapePool.clone(this.v);\n            this.localShapeCollection = shapeCollectionPool.newShapeCollection();\n            this.paths = this.localShapeCollection;\n            this.paths.addShape(this.v);\n            this.reset = resetShape;\n            this.effectsSequence = [];\n        }\n        function addEffect(effectFunction) {\n            this.effectsSequence.push(effectFunction);\n            this.container.addDynamicProperty(this);\n        }\n        ShapeProperty.prototype.interpolateShape = interpolateShape;\n        ShapeProperty.prototype.getValue = processEffectsSequence;\n        ShapeProperty.prototype.setVValue = setVValue;\n        ShapeProperty.prototype.addEffect = addEffect;\n        function KeyframedShapeProperty(elem, data, type) {\n            this.propType = \"shape\";\n            this.comp = elem.comp;\n            this.elem = elem;\n            this.container = elem;\n            this.offsetTime = elem.data.st;\n            this.keyframes = type === 3 ? data.pt.k : data.ks.k;\n            this.keyframesMetadata = [];\n            this.k = true;\n            this.kf = true;\n            var len = this.keyframes[0].s[0].i.length;\n            this.v = shapePool.newElement();\n            this.v.setPathData(this.keyframes[0].s[0].c, len);\n            this.pv = shapePool.clone(this.v);\n            this.localShapeCollection = shapeCollectionPool.newShapeCollection();\n            this.paths = this.localShapeCollection;\n            this.paths.addShape(this.v);\n            this.lastFrame = initFrame;\n            this.reset = resetShape;\n            this._caching = {\n                lastFrame: initFrame,\n                lastIndex: 0\n            };\n            this.effectsSequence = [\n                interpolateShapeCurrentTime.bind(this)\n            ];\n        }\n        KeyframedShapeProperty.prototype.getValue = processEffectsSequence;\n        KeyframedShapeProperty.prototype.interpolateShape = interpolateShape;\n        KeyframedShapeProperty.prototype.setVValue = setVValue;\n        KeyframedShapeProperty.prototype.addEffect = addEffect;\n        var EllShapeProperty = function() {\n            var cPoint = roundCorner;\n            function EllShapePropertyFactory(elem, data) {\n                this.v = shapePool.newElement();\n                this.v.setPathData(true, 4);\n                this.localShapeCollection = shapeCollectionPool.newShapeCollection();\n                this.paths = this.localShapeCollection;\n                this.localShapeCollection.addShape(this.v);\n                this.d = data.d;\n                this.elem = elem;\n                this.comp = elem.comp;\n                this.frameId = -1;\n                this.initDynamicPropertyContainer(elem);\n                this.p = PropertyFactory.getProp(elem, data.p, 1, 0, this);\n                this.s = PropertyFactory.getProp(elem, data.s, 1, 0, this);\n                if (this.dynamicProperties.length) {\n                    this.k = true;\n                } else {\n                    this.k = false;\n                    this.convertEllToPath();\n                }\n            }\n            EllShapePropertyFactory.prototype = {\n                reset: resetShape,\n                getValue: function getValue() {\n                    if (this.elem.globalData.frameId === this.frameId) {\n                        return;\n                    }\n                    this.frameId = this.elem.globalData.frameId;\n                    this.iterateDynamicProperties();\n                    if (this._mdf) {\n                        this.convertEllToPath();\n                    }\n                },\n                convertEllToPath: function convertEllToPath() {\n                    var p0 = this.p.v[0];\n                    var p1 = this.p.v[1];\n                    var s0 = this.s.v[0] / 2;\n                    var s1 = this.s.v[1] / 2;\n                    var _cw = this.d !== 3;\n                    var _v = this.v;\n                    _v.v[0][0] = p0;\n                    _v.v[0][1] = p1 - s1;\n                    _v.v[1][0] = _cw ? p0 + s0 : p0 - s0;\n                    _v.v[1][1] = p1;\n                    _v.v[2][0] = p0;\n                    _v.v[2][1] = p1 + s1;\n                    _v.v[3][0] = _cw ? p0 - s0 : p0 + s0;\n                    _v.v[3][1] = p1;\n                    _v.i[0][0] = _cw ? p0 - s0 * cPoint : p0 + s0 * cPoint;\n                    _v.i[0][1] = p1 - s1;\n                    _v.i[1][0] = _cw ? p0 + s0 : p0 - s0;\n                    _v.i[1][1] = p1 - s1 * cPoint;\n                    _v.i[2][0] = _cw ? p0 + s0 * cPoint : p0 - s0 * cPoint;\n                    _v.i[2][1] = p1 + s1;\n                    _v.i[3][0] = _cw ? p0 - s0 : p0 + s0;\n                    _v.i[3][1] = p1 + s1 * cPoint;\n                    _v.o[0][0] = _cw ? p0 + s0 * cPoint : p0 - s0 * cPoint;\n                    _v.o[0][1] = p1 - s1;\n                    _v.o[1][0] = _cw ? p0 + s0 : p0 - s0;\n                    _v.o[1][1] = p1 + s1 * cPoint;\n                    _v.o[2][0] = _cw ? p0 - s0 * cPoint : p0 + s0 * cPoint;\n                    _v.o[2][1] = p1 + s1;\n                    _v.o[3][0] = _cw ? p0 - s0 : p0 + s0;\n                    _v.o[3][1] = p1 - s1 * cPoint;\n                }\n            };\n            extendPrototype([\n                DynamicPropertyContainer\n            ], EllShapePropertyFactory);\n            return EllShapePropertyFactory;\n        }();\n        var StarShapeProperty = function() {\n            function StarShapePropertyFactory(elem, data) {\n                this.v = shapePool.newElement();\n                this.v.setPathData(true, 0);\n                this.elem = elem;\n                this.comp = elem.comp;\n                this.data = data;\n                this.frameId = -1;\n                this.d = data.d;\n                this.initDynamicPropertyContainer(elem);\n                if (data.sy === 1) {\n                    this.ir = PropertyFactory.getProp(elem, data.ir, 0, 0, this);\n                    this.is = PropertyFactory.getProp(elem, data.is, 0, 0.01, this);\n                    this.convertToPath = this.convertStarToPath;\n                } else {\n                    this.convertToPath = this.convertPolygonToPath;\n                }\n                this.pt = PropertyFactory.getProp(elem, data.pt, 0, 0, this);\n                this.p = PropertyFactory.getProp(elem, data.p, 1, 0, this);\n                this.r = PropertyFactory.getProp(elem, data.r, 0, degToRads, this);\n                this.or = PropertyFactory.getProp(elem, data.or, 0, 0, this);\n                this.os = PropertyFactory.getProp(elem, data.os, 0, 0.01, this);\n                this.localShapeCollection = shapeCollectionPool.newShapeCollection();\n                this.localShapeCollection.addShape(this.v);\n                this.paths = this.localShapeCollection;\n                if (this.dynamicProperties.length) {\n                    this.k = true;\n                } else {\n                    this.k = false;\n                    this.convertToPath();\n                }\n            }\n            StarShapePropertyFactory.prototype = {\n                reset: resetShape,\n                getValue: function getValue() {\n                    if (this.elem.globalData.frameId === this.frameId) {\n                        return;\n                    }\n                    this.frameId = this.elem.globalData.frameId;\n                    this.iterateDynamicProperties();\n                    if (this._mdf) {\n                        this.convertToPath();\n                    }\n                },\n                convertStarToPath: function convertStarToPath() {\n                    var numPts = Math.floor(this.pt.v) * 2;\n                    var angle = Math.PI * 2 / numPts;\n                    /* this.v.v.length = numPts;\r\n                  this.v.i.length = numPts;\r\n                  this.v.o.length = numPts; */ var longFlag = true;\n                    var longRad = this.or.v;\n                    var shortRad = this.ir.v;\n                    var longRound = this.os.v;\n                    var shortRound = this.is.v;\n                    var longPerimSegment = 2 * Math.PI * longRad / (numPts * 2);\n                    var shortPerimSegment = 2 * Math.PI * shortRad / (numPts * 2);\n                    var i;\n                    var rad;\n                    var roundness;\n                    var perimSegment;\n                    var currentAng = -Math.PI / 2;\n                    currentAng += this.r.v;\n                    var dir = this.data.d === 3 ? -1 : 1;\n                    this.v._length = 0;\n                    for(i = 0; i < numPts; i += 1){\n                        rad = longFlag ? longRad : shortRad;\n                        roundness = longFlag ? longRound : shortRound;\n                        perimSegment = longFlag ? longPerimSegment : shortPerimSegment;\n                        var x = rad * Math.cos(currentAng);\n                        var y = rad * Math.sin(currentAng);\n                        var ox = x === 0 && y === 0 ? 0 : y / Math.sqrt(x * x + y * y);\n                        var oy = x === 0 && y === 0 ? 0 : -x / Math.sqrt(x * x + y * y);\n                        x += +this.p.v[0];\n                        y += +this.p.v[1];\n                        this.v.setTripleAt(x, y, x - ox * perimSegment * roundness * dir, y - oy * perimSegment * roundness * dir, x + ox * perimSegment * roundness * dir, y + oy * perimSegment * roundness * dir, i, true);\n                        /* this.v.v[i] = [x,y];\r\n                      this.v.i[i] = [x+ox*perimSegment*roundness*dir,y+oy*perimSegment*roundness*dir];\r\n                      this.v.o[i] = [x-ox*perimSegment*roundness*dir,y-oy*perimSegment*roundness*dir];\r\n                      this.v._length = numPts; */ longFlag = !longFlag;\n                        currentAng += angle * dir;\n                    }\n                },\n                convertPolygonToPath: function convertPolygonToPath() {\n                    var numPts = Math.floor(this.pt.v);\n                    var angle = Math.PI * 2 / numPts;\n                    var rad = this.or.v;\n                    var roundness = this.os.v;\n                    var perimSegment = 2 * Math.PI * rad / (numPts * 4);\n                    var i;\n                    var currentAng = -Math.PI * 0.5;\n                    var dir = this.data.d === 3 ? -1 : 1;\n                    currentAng += this.r.v;\n                    this.v._length = 0;\n                    for(i = 0; i < numPts; i += 1){\n                        var x = rad * Math.cos(currentAng);\n                        var y = rad * Math.sin(currentAng);\n                        var ox = x === 0 && y === 0 ? 0 : y / Math.sqrt(x * x + y * y);\n                        var oy = x === 0 && y === 0 ? 0 : -x / Math.sqrt(x * x + y * y);\n                        x += +this.p.v[0];\n                        y += +this.p.v[1];\n                        this.v.setTripleAt(x, y, x - ox * perimSegment * roundness * dir, y - oy * perimSegment * roundness * dir, x + ox * perimSegment * roundness * dir, y + oy * perimSegment * roundness * dir, i, true);\n                        currentAng += angle * dir;\n                    }\n                    this.paths.length = 0;\n                    this.paths[0] = this.v;\n                }\n            };\n            extendPrototype([\n                DynamicPropertyContainer\n            ], StarShapePropertyFactory);\n            return StarShapePropertyFactory;\n        }();\n        var RectShapeProperty = function() {\n            function RectShapePropertyFactory(elem, data) {\n                this.v = shapePool.newElement();\n                this.v.c = true;\n                this.localShapeCollection = shapeCollectionPool.newShapeCollection();\n                this.localShapeCollection.addShape(this.v);\n                this.paths = this.localShapeCollection;\n                this.elem = elem;\n                this.comp = elem.comp;\n                this.frameId = -1;\n                this.d = data.d;\n                this.initDynamicPropertyContainer(elem);\n                this.p = PropertyFactory.getProp(elem, data.p, 1, 0, this);\n                this.s = PropertyFactory.getProp(elem, data.s, 1, 0, this);\n                this.r = PropertyFactory.getProp(elem, data.r, 0, 0, this);\n                if (this.dynamicProperties.length) {\n                    this.k = true;\n                } else {\n                    this.k = false;\n                    this.convertRectToPath();\n                }\n            }\n            RectShapePropertyFactory.prototype = {\n                convertRectToPath: function convertRectToPath() {\n                    var p0 = this.p.v[0];\n                    var p1 = this.p.v[1];\n                    var v0 = this.s.v[0] / 2;\n                    var v1 = this.s.v[1] / 2;\n                    var round = bmMin(v0, v1, this.r.v);\n                    var cPoint = round * (1 - roundCorner);\n                    this.v._length = 0;\n                    if (this.d === 2 || this.d === 1) {\n                        this.v.setTripleAt(p0 + v0, p1 - v1 + round, p0 + v0, p1 - v1 + round, p0 + v0, p1 - v1 + cPoint, 0, true);\n                        this.v.setTripleAt(p0 + v0, p1 + v1 - round, p0 + v0, p1 + v1 - cPoint, p0 + v0, p1 + v1 - round, 1, true);\n                        if (round !== 0) {\n                            this.v.setTripleAt(p0 + v0 - round, p1 + v1, p0 + v0 - round, p1 + v1, p0 + v0 - cPoint, p1 + v1, 2, true);\n                            this.v.setTripleAt(p0 - v0 + round, p1 + v1, p0 - v0 + cPoint, p1 + v1, p0 - v0 + round, p1 + v1, 3, true);\n                            this.v.setTripleAt(p0 - v0, p1 + v1 - round, p0 - v0, p1 + v1 - round, p0 - v0, p1 + v1 - cPoint, 4, true);\n                            this.v.setTripleAt(p0 - v0, p1 - v1 + round, p0 - v0, p1 - v1 + cPoint, p0 - v0, p1 - v1 + round, 5, true);\n                            this.v.setTripleAt(p0 - v0 + round, p1 - v1, p0 - v0 + round, p1 - v1, p0 - v0 + cPoint, p1 - v1, 6, true);\n                            this.v.setTripleAt(p0 + v0 - round, p1 - v1, p0 + v0 - cPoint, p1 - v1, p0 + v0 - round, p1 - v1, 7, true);\n                        } else {\n                            this.v.setTripleAt(p0 - v0, p1 + v1, p0 - v0 + cPoint, p1 + v1, p0 - v0, p1 + v1, 2);\n                            this.v.setTripleAt(p0 - v0, p1 - v1, p0 - v0, p1 - v1 + cPoint, p0 - v0, p1 - v1, 3);\n                        }\n                    } else {\n                        this.v.setTripleAt(p0 + v0, p1 - v1 + round, p0 + v0, p1 - v1 + cPoint, p0 + v0, p1 - v1 + round, 0, true);\n                        if (round !== 0) {\n                            this.v.setTripleAt(p0 + v0 - round, p1 - v1, p0 + v0 - round, p1 - v1, p0 + v0 - cPoint, p1 - v1, 1, true);\n                            this.v.setTripleAt(p0 - v0 + round, p1 - v1, p0 - v0 + cPoint, p1 - v1, p0 - v0 + round, p1 - v1, 2, true);\n                            this.v.setTripleAt(p0 - v0, p1 - v1 + round, p0 - v0, p1 - v1 + round, p0 - v0, p1 - v1 + cPoint, 3, true);\n                            this.v.setTripleAt(p0 - v0, p1 + v1 - round, p0 - v0, p1 + v1 - cPoint, p0 - v0, p1 + v1 - round, 4, true);\n                            this.v.setTripleAt(p0 - v0 + round, p1 + v1, p0 - v0 + round, p1 + v1, p0 - v0 + cPoint, p1 + v1, 5, true);\n                            this.v.setTripleAt(p0 + v0 - round, p1 + v1, p0 + v0 - cPoint, p1 + v1, p0 + v0 - round, p1 + v1, 6, true);\n                            this.v.setTripleAt(p0 + v0, p1 + v1 - round, p0 + v0, p1 + v1 - round, p0 + v0, p1 + v1 - cPoint, 7, true);\n                        } else {\n                            this.v.setTripleAt(p0 - v0, p1 - v1, p0 - v0 + cPoint, p1 - v1, p0 - v0, p1 - v1, 1, true);\n                            this.v.setTripleAt(p0 - v0, p1 + v1, p0 - v0, p1 + v1 - cPoint, p0 - v0, p1 + v1, 2, true);\n                            this.v.setTripleAt(p0 + v0, p1 + v1, p0 + v0 - cPoint, p1 + v1, p0 + v0, p1 + v1, 3, true);\n                        }\n                    }\n                },\n                getValue: function getValue() {\n                    if (this.elem.globalData.frameId === this.frameId) {\n                        return;\n                    }\n                    this.frameId = this.elem.globalData.frameId;\n                    this.iterateDynamicProperties();\n                    if (this._mdf) {\n                        this.convertRectToPath();\n                    }\n                },\n                reset: resetShape\n            };\n            extendPrototype([\n                DynamicPropertyContainer\n            ], RectShapePropertyFactory);\n            return RectShapePropertyFactory;\n        }();\n        function getShapeProp(elem, data, type) {\n            var prop;\n            if (type === 3 || type === 4) {\n                var dataProp = type === 3 ? data.pt : data.ks;\n                var keys = dataProp.k;\n                if (keys.length) {\n                    prop = new KeyframedShapeProperty(elem, data, type);\n                } else {\n                    prop = new ShapeProperty(elem, data, type);\n                }\n            } else if (type === 5) {\n                prop = new RectShapeProperty(elem, data);\n            } else if (type === 6) {\n                prop = new EllShapeProperty(elem, data);\n            } else if (type === 7) {\n                prop = new StarShapeProperty(elem, data);\n            }\n            if (prop.k) {\n                elem.addDynamicProperty(prop);\n            }\n            return prop;\n        }\n        function getConstructorFunction() {\n            return ShapeProperty;\n        }\n        function getKeyframedConstructorFunction() {\n            return KeyframedShapeProperty;\n        }\n        var ob = {};\n        ob.getShapeProp = getShapeProp;\n        ob.getConstructorFunction = getConstructorFunction;\n        ob.getKeyframedConstructorFunction = getKeyframedConstructorFunction;\n        return ob;\n    }();\n    /*!\r\n   Transformation Matrix v2.0\r\n   (c) Epistemex 2014-2015\r\n   www.epistemex.com\r\n   By Ken Fyrstenberg\r\n   Contributions by leeoniya.\r\n   License: MIT, header required.\r\n   */ /**\r\n   * 2D transformation matrix object initialized with identity matrix.\r\n   *\r\n   * The matrix can synchronize a canvas context by supplying the context\r\n   * as an argument, or later apply current absolute transform to an\r\n   * existing context.\r\n   *\r\n   * All values are handled as floating point values.\r\n   *\r\n   * @param {CanvasRenderingContext2D} [context] - Optional context to sync with Matrix\r\n   * @prop {number} a - scale x\r\n   * @prop {number} b - shear y\r\n   * @prop {number} c - shear x\r\n   * @prop {number} d - scale y\r\n   * @prop {number} e - translate x\r\n   * @prop {number} f - translate y\r\n   * @prop {CanvasRenderingContext2D|null} [context=null] - set or get current canvas context\r\n   * @constructor\r\n   */ var Matrix = function() {\n        var _cos = Math.cos;\n        var _sin = Math.sin;\n        var _tan = Math.tan;\n        var _rnd = Math.round;\n        function reset() {\n            this.props[0] = 1;\n            this.props[1] = 0;\n            this.props[2] = 0;\n            this.props[3] = 0;\n            this.props[4] = 0;\n            this.props[5] = 1;\n            this.props[6] = 0;\n            this.props[7] = 0;\n            this.props[8] = 0;\n            this.props[9] = 0;\n            this.props[10] = 1;\n            this.props[11] = 0;\n            this.props[12] = 0;\n            this.props[13] = 0;\n            this.props[14] = 0;\n            this.props[15] = 1;\n            return this;\n        }\n        function rotate(angle) {\n            if (angle === 0) {\n                return this;\n            }\n            var mCos = _cos(angle);\n            var mSin = _sin(angle);\n            return this._t(mCos, -mSin, 0, 0, mSin, mCos, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1);\n        }\n        function rotateX(angle) {\n            if (angle === 0) {\n                return this;\n            }\n            var mCos = _cos(angle);\n            var mSin = _sin(angle);\n            return this._t(1, 0, 0, 0, 0, mCos, -mSin, 0, 0, mSin, mCos, 0, 0, 0, 0, 1);\n        }\n        function rotateY(angle) {\n            if (angle === 0) {\n                return this;\n            }\n            var mCos = _cos(angle);\n            var mSin = _sin(angle);\n            return this._t(mCos, 0, mSin, 0, 0, 1, 0, 0, -mSin, 0, mCos, 0, 0, 0, 0, 1);\n        }\n        function rotateZ(angle) {\n            if (angle === 0) {\n                return this;\n            }\n            var mCos = _cos(angle);\n            var mSin = _sin(angle);\n            return this._t(mCos, -mSin, 0, 0, mSin, mCos, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1);\n        }\n        function shear(sx, sy) {\n            return this._t(1, sy, sx, 1, 0, 0);\n        }\n        function skew(ax, ay) {\n            return this.shear(_tan(ax), _tan(ay));\n        }\n        function skewFromAxis(ax, angle) {\n            var mCos = _cos(angle);\n            var mSin = _sin(angle);\n            return this._t(mCos, mSin, 0, 0, -mSin, mCos, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1)._t(1, 0, 0, 0, _tan(ax), 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1)._t(mCos, -mSin, 0, 0, mSin, mCos, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1); // return this._t(mCos, mSin, -mSin, mCos, 0, 0)._t(1, 0, _tan(ax), 1, 0, 0)._t(mCos, -mSin, mSin, mCos, 0, 0);\n        }\n        function scale(sx, sy, sz) {\n            if (!sz && sz !== 0) {\n                sz = 1;\n            }\n            if (sx === 1 && sy === 1 && sz === 1) {\n                return this;\n            }\n            return this._t(sx, 0, 0, 0, 0, sy, 0, 0, 0, 0, sz, 0, 0, 0, 0, 1);\n        }\n        function setTransform(a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p) {\n            this.props[0] = a;\n            this.props[1] = b;\n            this.props[2] = c;\n            this.props[3] = d;\n            this.props[4] = e;\n            this.props[5] = f;\n            this.props[6] = g;\n            this.props[7] = h;\n            this.props[8] = i;\n            this.props[9] = j;\n            this.props[10] = k;\n            this.props[11] = l;\n            this.props[12] = m;\n            this.props[13] = n;\n            this.props[14] = o;\n            this.props[15] = p;\n            return this;\n        }\n        function translate(tx, ty, tz) {\n            tz = tz || 0;\n            if (tx !== 0 || ty !== 0 || tz !== 0) {\n                return this._t(1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, tx, ty, tz, 1);\n            }\n            return this;\n        }\n        function transform(a2, b2, c2, d2, e2, f2, g2, h2, i2, j2, k2, l2, m2, n2, o2, p2) {\n            var _p = this.props;\n            if (a2 === 1 && b2 === 0 && c2 === 0 && d2 === 0 && e2 === 0 && f2 === 1 && g2 === 0 && h2 === 0 && i2 === 0 && j2 === 0 && k2 === 1 && l2 === 0) {\n                // NOTE: commenting this condition because TurboFan deoptimizes code when present\n                // if(m2 !== 0 || n2 !== 0 || o2 !== 0){\n                _p[12] = _p[12] * a2 + _p[15] * m2;\n                _p[13] = _p[13] * f2 + _p[15] * n2;\n                _p[14] = _p[14] * k2 + _p[15] * o2;\n                _p[15] *= p2; // }\n                this._identityCalculated = false;\n                return this;\n            }\n            var a1 = _p[0];\n            var b1 = _p[1];\n            var c1 = _p[2];\n            var d1 = _p[3];\n            var e1 = _p[4];\n            var f1 = _p[5];\n            var g1 = _p[6];\n            var h1 = _p[7];\n            var i1 = _p[8];\n            var j1 = _p[9];\n            var k1 = _p[10];\n            var l1 = _p[11];\n            var m1 = _p[12];\n            var n1 = _p[13];\n            var o1 = _p[14];\n            var p1 = _p[15];\n            /* matrix order (canvas compatible):\r\n           * ace\r\n           * bdf\r\n           * 001\r\n           */ _p[0] = a1 * a2 + b1 * e2 + c1 * i2 + d1 * m2;\n            _p[1] = a1 * b2 + b1 * f2 + c1 * j2 + d1 * n2;\n            _p[2] = a1 * c2 + b1 * g2 + c1 * k2 + d1 * o2;\n            _p[3] = a1 * d2 + b1 * h2 + c1 * l2 + d1 * p2;\n            _p[4] = e1 * a2 + f1 * e2 + g1 * i2 + h1 * m2;\n            _p[5] = e1 * b2 + f1 * f2 + g1 * j2 + h1 * n2;\n            _p[6] = e1 * c2 + f1 * g2 + g1 * k2 + h1 * o2;\n            _p[7] = e1 * d2 + f1 * h2 + g1 * l2 + h1 * p2;\n            _p[8] = i1 * a2 + j1 * e2 + k1 * i2 + l1 * m2;\n            _p[9] = i1 * b2 + j1 * f2 + k1 * j2 + l1 * n2;\n            _p[10] = i1 * c2 + j1 * g2 + k1 * k2 + l1 * o2;\n            _p[11] = i1 * d2 + j1 * h2 + k1 * l2 + l1 * p2;\n            _p[12] = m1 * a2 + n1 * e2 + o1 * i2 + p1 * m2;\n            _p[13] = m1 * b2 + n1 * f2 + o1 * j2 + p1 * n2;\n            _p[14] = m1 * c2 + n1 * g2 + o1 * k2 + p1 * o2;\n            _p[15] = m1 * d2 + n1 * h2 + o1 * l2 + p1 * p2;\n            this._identityCalculated = false;\n            return this;\n        }\n        function multiply(matrix) {\n            var matrixProps = matrix.props;\n            return this.transform(matrixProps[0], matrixProps[1], matrixProps[2], matrixProps[3], matrixProps[4], matrixProps[5], matrixProps[6], matrixProps[7], matrixProps[8], matrixProps[9], matrixProps[10], matrixProps[11], matrixProps[12], matrixProps[13], matrixProps[14], matrixProps[15]);\n        }\n        function isIdentity() {\n            if (!this._identityCalculated) {\n                this._identity = !(this.props[0] !== 1 || this.props[1] !== 0 || this.props[2] !== 0 || this.props[3] !== 0 || this.props[4] !== 0 || this.props[5] !== 1 || this.props[6] !== 0 || this.props[7] !== 0 || this.props[8] !== 0 || this.props[9] !== 0 || this.props[10] !== 1 || this.props[11] !== 0 || this.props[12] !== 0 || this.props[13] !== 0 || this.props[14] !== 0 || this.props[15] !== 1);\n                this._identityCalculated = true;\n            }\n            return this._identity;\n        }\n        function equals(matr) {\n            var i = 0;\n            while(i < 16){\n                if (matr.props[i] !== this.props[i]) {\n                    return false;\n                }\n                i += 1;\n            }\n            return true;\n        }\n        function clone(matr) {\n            var i;\n            for(i = 0; i < 16; i += 1){\n                matr.props[i] = this.props[i];\n            }\n            return matr;\n        }\n        function cloneFromProps(props) {\n            var i;\n            for(i = 0; i < 16; i += 1){\n                this.props[i] = props[i];\n            }\n        }\n        function applyToPoint(x, y, z) {\n            return {\n                x: x * this.props[0] + y * this.props[4] + z * this.props[8] + this.props[12],\n                y: x * this.props[1] + y * this.props[5] + z * this.props[9] + this.props[13],\n                z: x * this.props[2] + y * this.props[6] + z * this.props[10] + this.props[14]\n            };\n        /* return {\r\n           x: x * me.a + y * me.c + me.e,\r\n           y: x * me.b + y * me.d + me.f\r\n           }; */ }\n        function applyToX(x, y, z) {\n            return x * this.props[0] + y * this.props[4] + z * this.props[8] + this.props[12];\n        }\n        function applyToY(x, y, z) {\n            return x * this.props[1] + y * this.props[5] + z * this.props[9] + this.props[13];\n        }\n        function applyToZ(x, y, z) {\n            return x * this.props[2] + y * this.props[6] + z * this.props[10] + this.props[14];\n        }\n        function getInverseMatrix() {\n            var determinant = this.props[0] * this.props[5] - this.props[1] * this.props[4];\n            var a = this.props[5] / determinant;\n            var b = -this.props[1] / determinant;\n            var c = -this.props[4] / determinant;\n            var d = this.props[0] / determinant;\n            var e = (this.props[4] * this.props[13] - this.props[5] * this.props[12]) / determinant;\n            var f = -(this.props[0] * this.props[13] - this.props[1] * this.props[12]) / determinant;\n            var inverseMatrix = new Matrix();\n            inverseMatrix.props[0] = a;\n            inverseMatrix.props[1] = b;\n            inverseMatrix.props[4] = c;\n            inverseMatrix.props[5] = d;\n            inverseMatrix.props[12] = e;\n            inverseMatrix.props[13] = f;\n            return inverseMatrix;\n        }\n        function inversePoint(pt) {\n            var inverseMatrix = this.getInverseMatrix();\n            return inverseMatrix.applyToPointArray(pt[0], pt[1], pt[2] || 0);\n        }\n        function inversePoints(pts) {\n            var i;\n            var len = pts.length;\n            var retPts = [];\n            for(i = 0; i < len; i += 1){\n                retPts[i] = inversePoint(pts[i]);\n            }\n            return retPts;\n        }\n        function applyToTriplePoints(pt1, pt2, pt3) {\n            var arr = createTypedArray(\"float32\", 6);\n            if (this.isIdentity()) {\n                arr[0] = pt1[0];\n                arr[1] = pt1[1];\n                arr[2] = pt2[0];\n                arr[3] = pt2[1];\n                arr[4] = pt3[0];\n                arr[5] = pt3[1];\n            } else {\n                var p0 = this.props[0];\n                var p1 = this.props[1];\n                var p4 = this.props[4];\n                var p5 = this.props[5];\n                var p12 = this.props[12];\n                var p13 = this.props[13];\n                arr[0] = pt1[0] * p0 + pt1[1] * p4 + p12;\n                arr[1] = pt1[0] * p1 + pt1[1] * p5 + p13;\n                arr[2] = pt2[0] * p0 + pt2[1] * p4 + p12;\n                arr[3] = pt2[0] * p1 + pt2[1] * p5 + p13;\n                arr[4] = pt3[0] * p0 + pt3[1] * p4 + p12;\n                arr[5] = pt3[0] * p1 + pt3[1] * p5 + p13;\n            }\n            return arr;\n        }\n        function applyToPointArray(x, y, z) {\n            var arr;\n            if (this.isIdentity()) {\n                arr = [\n                    x,\n                    y,\n                    z\n                ];\n            } else {\n                arr = [\n                    x * this.props[0] + y * this.props[4] + z * this.props[8] + this.props[12],\n                    x * this.props[1] + y * this.props[5] + z * this.props[9] + this.props[13],\n                    x * this.props[2] + y * this.props[6] + z * this.props[10] + this.props[14]\n                ];\n            }\n            return arr;\n        }\n        function applyToPointStringified(x, y) {\n            if (this.isIdentity()) {\n                return x + \",\" + y;\n            }\n            var _p = this.props;\n            return Math.round((x * _p[0] + y * _p[4] + _p[12]) * 100) / 100 + \",\" + Math.round((x * _p[1] + y * _p[5] + _p[13]) * 100) / 100;\n        }\n        function toCSS() {\n            // Doesn't make much sense to add this optimization. If it is an identity matrix, it's very likely this will get called only once since it won't be keyframed.\n            /* if(this.isIdentity()) {\r\n              return '';\r\n          } */ var i = 0;\n            var props = this.props;\n            var cssValue = \"matrix3d(\";\n            var v = 10000;\n            while(i < 16){\n                cssValue += _rnd(props[i] * v) / v;\n                cssValue += i === 15 ? \")\" : \",\";\n                i += 1;\n            }\n            return cssValue;\n        }\n        function roundMatrixProperty(val) {\n            var v = 10000;\n            if (val < 0.000001 && val > 0 || val > -0.000001 && val < 0) {\n                return _rnd(val * v) / v;\n            }\n            return val;\n        }\n        function to2dCSS() {\n            // Doesn't make much sense to add this optimization. If it is an identity matrix, it's very likely this will get called only once since it won't be keyframed.\n            /* if(this.isIdentity()) {\r\n              return '';\r\n          } */ var props = this.props;\n            var _a = roundMatrixProperty(props[0]);\n            var _b = roundMatrixProperty(props[1]);\n            var _c = roundMatrixProperty(props[4]);\n            var _d = roundMatrixProperty(props[5]);\n            var _e = roundMatrixProperty(props[12]);\n            var _f = roundMatrixProperty(props[13]);\n            return \"matrix(\" + _a + \",\" + _b + \",\" + _c + \",\" + _d + \",\" + _e + \",\" + _f + \")\";\n        }\n        return function() {\n            this.reset = reset;\n            this.rotate = rotate;\n            this.rotateX = rotateX;\n            this.rotateY = rotateY;\n            this.rotateZ = rotateZ;\n            this.skew = skew;\n            this.skewFromAxis = skewFromAxis;\n            this.shear = shear;\n            this.scale = scale;\n            this.setTransform = setTransform;\n            this.translate = translate;\n            this.transform = transform;\n            this.multiply = multiply;\n            this.applyToPoint = applyToPoint;\n            this.applyToX = applyToX;\n            this.applyToY = applyToY;\n            this.applyToZ = applyToZ;\n            this.applyToPointArray = applyToPointArray;\n            this.applyToTriplePoints = applyToTriplePoints;\n            this.applyToPointStringified = applyToPointStringified;\n            this.toCSS = toCSS;\n            this.to2dCSS = to2dCSS;\n            this.clone = clone;\n            this.cloneFromProps = cloneFromProps;\n            this.equals = equals;\n            this.inversePoints = inversePoints;\n            this.inversePoint = inversePoint;\n            this.getInverseMatrix = getInverseMatrix;\n            this._t = this.transform;\n            this.isIdentity = isIdentity;\n            this._identity = true;\n            this._identityCalculated = false;\n            this.props = createTypedArray(\"float32\", 16);\n            this.reset();\n        };\n    }();\n    function _typeof$3(obj) {\n        \"@babel/helpers - typeof\";\n        if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") {\n            _typeof$3 = function _typeof(obj) {\n                return typeof obj;\n            };\n        } else {\n            _typeof$3 = function _typeof(obj) {\n                return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj;\n            };\n        }\n        return _typeof$3(obj);\n    }\n    var lottie = {};\n    var standalone = \"__[STANDALONE]__\";\n    var animationData = \"__[ANIMATIONDATA]__\";\n    var renderer = \"\";\n    function setLocation(href) {\n        setLocationHref(href);\n    }\n    function searchAnimations() {\n        if (standalone === true) {\n            animationManager.searchAnimations(animationData, standalone, renderer);\n        } else {\n            animationManager.searchAnimations();\n        }\n    }\n    function setSubframeRendering(flag) {\n        setSubframeEnabled(flag);\n    }\n    function setPrefix(prefix) {\n        setIdPrefix(prefix);\n    }\n    function loadAnimation(params) {\n        if (standalone === true) {\n            params.animationData = JSON.parse(animationData);\n        }\n        return animationManager.loadAnimation(params);\n    }\n    function setQuality(value) {\n        if (typeof value === \"string\") {\n            switch(value){\n                case \"high\":\n                    setDefaultCurveSegments(200);\n                    break;\n                default:\n                case \"medium\":\n                    setDefaultCurveSegments(50);\n                    break;\n                case \"low\":\n                    setDefaultCurveSegments(10);\n                    break;\n            }\n        } else if (!isNaN(value) && value > 1) {\n            setDefaultCurveSegments(value);\n        }\n        if (getDefaultCurveSegments() >= 50) {\n            roundValues(false);\n        } else {\n            roundValues(true);\n        }\n    }\n    function inBrowser() {\n        return typeof navigator !== \"undefined\";\n    }\n    function installPlugin(type, plugin) {\n        if (type === \"expressions\") {\n            setExpressionsPlugin(plugin);\n        }\n    }\n    function getFactory(name) {\n        switch(name){\n            case \"propertyFactory\":\n                return PropertyFactory;\n            case \"shapePropertyFactory\":\n                return ShapePropertyFactory;\n            case \"matrix\":\n                return Matrix;\n            default:\n                return null;\n        }\n    }\n    lottie.play = animationManager.play;\n    lottie.pause = animationManager.pause;\n    lottie.setLocationHref = setLocation;\n    lottie.togglePause = animationManager.togglePause;\n    lottie.setSpeed = animationManager.setSpeed;\n    lottie.setDirection = animationManager.setDirection;\n    lottie.stop = animationManager.stop;\n    lottie.searchAnimations = searchAnimations;\n    lottie.registerAnimation = animationManager.registerAnimation;\n    lottie.loadAnimation = loadAnimation;\n    lottie.setSubframeRendering = setSubframeRendering;\n    lottie.resize = animationManager.resize; // lottie.start = start;\n    lottie.goToAndStop = animationManager.goToAndStop;\n    lottie.destroy = animationManager.destroy;\n    lottie.setQuality = setQuality;\n    lottie.inBrowser = inBrowser;\n    lottie.installPlugin = installPlugin;\n    lottie.freeze = animationManager.freeze;\n    lottie.unfreeze = animationManager.unfreeze;\n    lottie.setVolume = animationManager.setVolume;\n    lottie.mute = animationManager.mute;\n    lottie.unmute = animationManager.unmute;\n    lottie.getRegisteredAnimations = animationManager.getRegisteredAnimations;\n    lottie.useWebWorker = setWebWorker;\n    lottie.setIDPrefix = setPrefix;\n    lottie.__getFactory = getFactory;\n    lottie.version = \"5.12.2\";\n    function checkReady() {\n        if (document.readyState === \"complete\") {\n            clearInterval(readyStateCheckInterval);\n            searchAnimations();\n        }\n    }\n    function getQueryVariable(variable) {\n        var vars = queryString.split(\"&\");\n        for(var i = 0; i < vars.length; i += 1){\n            var pair = vars[i].split(\"=\");\n            if (decodeURIComponent(pair[0]) == variable) {\n                // eslint-disable-line eqeqeq\n                return decodeURIComponent(pair[1]);\n            }\n        }\n        return null;\n    }\n    var queryString = \"\";\n    if (standalone) {\n        var scripts = document.getElementsByTagName(\"script\");\n        var index = scripts.length - 1;\n        var myScript = scripts[index] || {\n            src: \"\"\n        };\n        queryString = myScript.src ? myScript.src.replace(/^[^\\?]+\\??/, \"\") : \"\"; // eslint-disable-line no-useless-escape\n        renderer = getQueryVariable(\"renderer\");\n    }\n    var readyStateCheckInterval = setInterval(checkReady, 100); // this adds bodymovin to the window object for backwards compatibility\n    try {\n        if (!(( false ? 0 : _typeof$3(exports)) === \"object\" && \"object\" !== \"undefined\") && !( true && __webpack_require__.amdO // eslint-disable-line no-undef\n        )) {}\n    } catch (err) {}\n    var ShapeModifiers = function() {\n        var ob = {};\n        var modifiers = {};\n        ob.registerModifier = registerModifier;\n        ob.getModifier = getModifier;\n        function registerModifier(nm, factory) {\n            if (!modifiers[nm]) {\n                modifiers[nm] = factory;\n            }\n        }\n        function getModifier(nm, elem, data) {\n            return new modifiers[nm](elem, data);\n        }\n        return ob;\n    }();\n    function ShapeModifier() {}\n    ShapeModifier.prototype.initModifierProperties = function() {};\n    ShapeModifier.prototype.addShapeToModifier = function() {};\n    ShapeModifier.prototype.addShape = function(data) {\n        if (!this.closed) {\n            // Adding shape to dynamic properties. It covers the case where a shape has no effects applied, to reset it's _mdf state on every tick.\n            data.sh.container.addDynamicProperty(data.sh);\n            var shapeData = {\n                shape: data.sh,\n                data: data,\n                localShapeCollection: shapeCollectionPool.newShapeCollection()\n            };\n            this.shapes.push(shapeData);\n            this.addShapeToModifier(shapeData);\n            if (this._isAnimated) {\n                data.setAsAnimated();\n            }\n        }\n    };\n    ShapeModifier.prototype.init = function(elem, data) {\n        this.shapes = [];\n        this.elem = elem;\n        this.initDynamicPropertyContainer(elem);\n        this.initModifierProperties(elem, data);\n        this.frameId = initialDefaultFrame;\n        this.closed = false;\n        this.k = false;\n        if (this.dynamicProperties.length) {\n            this.k = true;\n        } else {\n            this.getValue(true);\n        }\n    };\n    ShapeModifier.prototype.processKeys = function() {\n        if (this.elem.globalData.frameId === this.frameId) {\n            return;\n        }\n        this.frameId = this.elem.globalData.frameId;\n        this.iterateDynamicProperties();\n    };\n    extendPrototype([\n        DynamicPropertyContainer\n    ], ShapeModifier);\n    function TrimModifier() {}\n    extendPrototype([\n        ShapeModifier\n    ], TrimModifier);\n    TrimModifier.prototype.initModifierProperties = function(elem, data) {\n        this.s = PropertyFactory.getProp(elem, data.s, 0, 0.01, this);\n        this.e = PropertyFactory.getProp(elem, data.e, 0, 0.01, this);\n        this.o = PropertyFactory.getProp(elem, data.o, 0, 0, this);\n        this.sValue = 0;\n        this.eValue = 0;\n        this.getValue = this.processKeys;\n        this.m = data.m;\n        this._isAnimated = !!this.s.effectsSequence.length || !!this.e.effectsSequence.length || !!this.o.effectsSequence.length;\n    };\n    TrimModifier.prototype.addShapeToModifier = function(shapeData) {\n        shapeData.pathsData = [];\n    };\n    TrimModifier.prototype.calculateShapeEdges = function(s, e, shapeLength, addedLength, totalModifierLength) {\n        var segments = [];\n        if (e <= 1) {\n            segments.push({\n                s: s,\n                e: e\n            });\n        } else if (s >= 1) {\n            segments.push({\n                s: s - 1,\n                e: e - 1\n            });\n        } else {\n            segments.push({\n                s: s,\n                e: 1\n            });\n            segments.push({\n                s: 0,\n                e: e - 1\n            });\n        }\n        var shapeSegments = [];\n        var i;\n        var len = segments.length;\n        var segmentOb;\n        for(i = 0; i < len; i += 1){\n            segmentOb = segments[i];\n            if (!(segmentOb.e * totalModifierLength < addedLength || segmentOb.s * totalModifierLength > addedLength + shapeLength)) {\n                var shapeS;\n                var shapeE;\n                if (segmentOb.s * totalModifierLength <= addedLength) {\n                    shapeS = 0;\n                } else {\n                    shapeS = (segmentOb.s * totalModifierLength - addedLength) / shapeLength;\n                }\n                if (segmentOb.e * totalModifierLength >= addedLength + shapeLength) {\n                    shapeE = 1;\n                } else {\n                    shapeE = (segmentOb.e * totalModifierLength - addedLength) / shapeLength;\n                }\n                shapeSegments.push([\n                    shapeS,\n                    shapeE\n                ]);\n            }\n        }\n        if (!shapeSegments.length) {\n            shapeSegments.push([\n                0,\n                0\n            ]);\n        }\n        return shapeSegments;\n    };\n    TrimModifier.prototype.releasePathsData = function(pathsData) {\n        var i;\n        var len = pathsData.length;\n        for(i = 0; i < len; i += 1){\n            segmentsLengthPool.release(pathsData[i]);\n        }\n        pathsData.length = 0;\n        return pathsData;\n    };\n    TrimModifier.prototype.processShapes = function(_isFirstFrame) {\n        var s;\n        var e;\n        if (this._mdf || _isFirstFrame) {\n            var o = this.o.v % 360 / 360;\n            if (o < 0) {\n                o += 1;\n            }\n            if (this.s.v > 1) {\n                s = 1 + o;\n            } else if (this.s.v < 0) {\n                s = 0 + o;\n            } else {\n                s = this.s.v + o;\n            }\n            if (this.e.v > 1) {\n                e = 1 + o;\n            } else if (this.e.v < 0) {\n                e = 0 + o;\n            } else {\n                e = this.e.v + o;\n            }\n            if (s > e) {\n                var _s = s;\n                s = e;\n                e = _s;\n            }\n            s = Math.round(s * 10000) * 0.0001;\n            e = Math.round(e * 10000) * 0.0001;\n            this.sValue = s;\n            this.eValue = e;\n        } else {\n            s = this.sValue;\n            e = this.eValue;\n        }\n        var shapePaths;\n        var i;\n        var len = this.shapes.length;\n        var j;\n        var jLen;\n        var pathsData;\n        var pathData;\n        var totalShapeLength;\n        var totalModifierLength = 0;\n        if (e === s) {\n            for(i = 0; i < len; i += 1){\n                this.shapes[i].localShapeCollection.releaseShapes();\n                this.shapes[i].shape._mdf = true;\n                this.shapes[i].shape.paths = this.shapes[i].localShapeCollection;\n                if (this._mdf) {\n                    this.shapes[i].pathsData.length = 0;\n                }\n            }\n        } else if (!(e === 1 && s === 0 || e === 0 && s === 1)) {\n            var segments = [];\n            var shapeData;\n            var localShapeCollection;\n            for(i = 0; i < len; i += 1){\n                shapeData = this.shapes[i]; // if shape hasn't changed and trim properties haven't changed, cached previous path can be used\n                if (!shapeData.shape._mdf && !this._mdf && !_isFirstFrame && this.m !== 2) {\n                    shapeData.shape.paths = shapeData.localShapeCollection;\n                } else {\n                    shapePaths = shapeData.shape.paths;\n                    jLen = shapePaths._length;\n                    totalShapeLength = 0;\n                    if (!shapeData.shape._mdf && shapeData.pathsData.length) {\n                        totalShapeLength = shapeData.totalShapeLength;\n                    } else {\n                        pathsData = this.releasePathsData(shapeData.pathsData);\n                        for(j = 0; j < jLen; j += 1){\n                            pathData = bez.getSegmentsLength(shapePaths.shapes[j]);\n                            pathsData.push(pathData);\n                            totalShapeLength += pathData.totalLength;\n                        }\n                        shapeData.totalShapeLength = totalShapeLength;\n                        shapeData.pathsData = pathsData;\n                    }\n                    totalModifierLength += totalShapeLength;\n                    shapeData.shape._mdf = true;\n                }\n            }\n            var shapeS = s;\n            var shapeE = e;\n            var addedLength = 0;\n            var edges;\n            for(i = len - 1; i >= 0; i -= 1){\n                shapeData = this.shapes[i];\n                if (shapeData.shape._mdf) {\n                    localShapeCollection = shapeData.localShapeCollection;\n                    localShapeCollection.releaseShapes(); // if m === 2 means paths are trimmed individually so edges need to be found for this specific shape relative to whoel group\n                    if (this.m === 2 && len > 1) {\n                        edges = this.calculateShapeEdges(s, e, shapeData.totalShapeLength, addedLength, totalModifierLength);\n                        addedLength += shapeData.totalShapeLength;\n                    } else {\n                        edges = [\n                            [\n                                shapeS,\n                                shapeE\n                            ]\n                        ];\n                    }\n                    jLen = edges.length;\n                    for(j = 0; j < jLen; j += 1){\n                        shapeS = edges[j][0];\n                        shapeE = edges[j][1];\n                        segments.length = 0;\n                        if (shapeE <= 1) {\n                            segments.push({\n                                s: shapeData.totalShapeLength * shapeS,\n                                e: shapeData.totalShapeLength * shapeE\n                            });\n                        } else if (shapeS >= 1) {\n                            segments.push({\n                                s: shapeData.totalShapeLength * (shapeS - 1),\n                                e: shapeData.totalShapeLength * (shapeE - 1)\n                            });\n                        } else {\n                            segments.push({\n                                s: shapeData.totalShapeLength * shapeS,\n                                e: shapeData.totalShapeLength\n                            });\n                            segments.push({\n                                s: 0,\n                                e: shapeData.totalShapeLength * (shapeE - 1)\n                            });\n                        }\n                        var newShapesData = this.addShapes(shapeData, segments[0]);\n                        if (segments[0].s !== segments[0].e) {\n                            if (segments.length > 1) {\n                                var lastShapeInCollection = shapeData.shape.paths.shapes[shapeData.shape.paths._length - 1];\n                                if (lastShapeInCollection.c) {\n                                    var lastShape = newShapesData.pop();\n                                    this.addPaths(newShapesData, localShapeCollection);\n                                    newShapesData = this.addShapes(shapeData, segments[1], lastShape);\n                                } else {\n                                    this.addPaths(newShapesData, localShapeCollection);\n                                    newShapesData = this.addShapes(shapeData, segments[1]);\n                                }\n                            }\n                            this.addPaths(newShapesData, localShapeCollection);\n                        }\n                    }\n                    shapeData.shape.paths = localShapeCollection;\n                }\n            }\n        } else if (this._mdf) {\n            for(i = 0; i < len; i += 1){\n                // Releasign Trim Cached paths data when no trim applied in case shapes are modified inbetween.\n                // Don't remove this even if it's losing cached info.\n                this.shapes[i].pathsData.length = 0;\n                this.shapes[i].shape._mdf = true;\n            }\n        }\n    };\n    TrimModifier.prototype.addPaths = function(newPaths, localShapeCollection) {\n        var i;\n        var len = newPaths.length;\n        for(i = 0; i < len; i += 1){\n            localShapeCollection.addShape(newPaths[i]);\n        }\n    };\n    TrimModifier.prototype.addSegment = function(pt1, pt2, pt3, pt4, shapePath, pos, newShape) {\n        shapePath.setXYAt(pt2[0], pt2[1], \"o\", pos);\n        shapePath.setXYAt(pt3[0], pt3[1], \"i\", pos + 1);\n        if (newShape) {\n            shapePath.setXYAt(pt1[0], pt1[1], \"v\", pos);\n        }\n        shapePath.setXYAt(pt4[0], pt4[1], \"v\", pos + 1);\n    };\n    TrimModifier.prototype.addSegmentFromArray = function(points, shapePath, pos, newShape) {\n        shapePath.setXYAt(points[1], points[5], \"o\", pos);\n        shapePath.setXYAt(points[2], points[6], \"i\", pos + 1);\n        if (newShape) {\n            shapePath.setXYAt(points[0], points[4], \"v\", pos);\n        }\n        shapePath.setXYAt(points[3], points[7], \"v\", pos + 1);\n    };\n    TrimModifier.prototype.addShapes = function(shapeData, shapeSegment, shapePath) {\n        var pathsData = shapeData.pathsData;\n        var shapePaths = shapeData.shape.paths.shapes;\n        var i;\n        var len = shapeData.shape.paths._length;\n        var j;\n        var jLen;\n        var addedLength = 0;\n        var currentLengthData;\n        var segmentCount;\n        var lengths;\n        var segment;\n        var shapes = [];\n        var initPos;\n        var newShape = true;\n        if (!shapePath) {\n            shapePath = shapePool.newElement();\n            segmentCount = 0;\n            initPos = 0;\n        } else {\n            segmentCount = shapePath._length;\n            initPos = shapePath._length;\n        }\n        shapes.push(shapePath);\n        for(i = 0; i < len; i += 1){\n            lengths = pathsData[i].lengths;\n            shapePath.c = shapePaths[i].c;\n            jLen = shapePaths[i].c ? lengths.length : lengths.length + 1;\n            for(j = 1; j < jLen; j += 1){\n                currentLengthData = lengths[j - 1];\n                if (addedLength + currentLengthData.addedLength < shapeSegment.s) {\n                    addedLength += currentLengthData.addedLength;\n                    shapePath.c = false;\n                } else if (addedLength > shapeSegment.e) {\n                    shapePath.c = false;\n                    break;\n                } else {\n                    if (shapeSegment.s <= addedLength && shapeSegment.e >= addedLength + currentLengthData.addedLength) {\n                        this.addSegment(shapePaths[i].v[j - 1], shapePaths[i].o[j - 1], shapePaths[i].i[j], shapePaths[i].v[j], shapePath, segmentCount, newShape);\n                        newShape = false;\n                    } else {\n                        segment = bez.getNewSegment(shapePaths[i].v[j - 1], shapePaths[i].v[j], shapePaths[i].o[j - 1], shapePaths[i].i[j], (shapeSegment.s - addedLength) / currentLengthData.addedLength, (shapeSegment.e - addedLength) / currentLengthData.addedLength, lengths[j - 1]);\n                        this.addSegmentFromArray(segment, shapePath, segmentCount, newShape); // this.addSegment(segment.pt1, segment.pt3, segment.pt4, segment.pt2, shapePath, segmentCount, newShape);\n                        newShape = false;\n                        shapePath.c = false;\n                    }\n                    addedLength += currentLengthData.addedLength;\n                    segmentCount += 1;\n                }\n            }\n            if (shapePaths[i].c && lengths.length) {\n                currentLengthData = lengths[j - 1];\n                if (addedLength <= shapeSegment.e) {\n                    var segmentLength = lengths[j - 1].addedLength;\n                    if (shapeSegment.s <= addedLength && shapeSegment.e >= addedLength + segmentLength) {\n                        this.addSegment(shapePaths[i].v[j - 1], shapePaths[i].o[j - 1], shapePaths[i].i[0], shapePaths[i].v[0], shapePath, segmentCount, newShape);\n                        newShape = false;\n                    } else {\n                        segment = bez.getNewSegment(shapePaths[i].v[j - 1], shapePaths[i].v[0], shapePaths[i].o[j - 1], shapePaths[i].i[0], (shapeSegment.s - addedLength) / segmentLength, (shapeSegment.e - addedLength) / segmentLength, lengths[j - 1]);\n                        this.addSegmentFromArray(segment, shapePath, segmentCount, newShape); // this.addSegment(segment.pt1, segment.pt3, segment.pt4, segment.pt2, shapePath, segmentCount, newShape);\n                        newShape = false;\n                        shapePath.c = false;\n                    }\n                } else {\n                    shapePath.c = false;\n                }\n                addedLength += currentLengthData.addedLength;\n                segmentCount += 1;\n            }\n            if (shapePath._length) {\n                shapePath.setXYAt(shapePath.v[initPos][0], shapePath.v[initPos][1], \"i\", initPos);\n                shapePath.setXYAt(shapePath.v[shapePath._length - 1][0], shapePath.v[shapePath._length - 1][1], \"o\", shapePath._length - 1);\n            }\n            if (addedLength > shapeSegment.e) {\n                break;\n            }\n            if (i < len - 1) {\n                shapePath = shapePool.newElement();\n                newShape = true;\n                shapes.push(shapePath);\n                segmentCount = 0;\n            }\n        }\n        return shapes;\n    };\n    function PuckerAndBloatModifier() {}\n    extendPrototype([\n        ShapeModifier\n    ], PuckerAndBloatModifier);\n    PuckerAndBloatModifier.prototype.initModifierProperties = function(elem, data) {\n        this.getValue = this.processKeys;\n        this.amount = PropertyFactory.getProp(elem, data.a, 0, null, this);\n        this._isAnimated = !!this.amount.effectsSequence.length;\n    };\n    PuckerAndBloatModifier.prototype.processPath = function(path, amount) {\n        var percent = amount / 100;\n        var centerPoint = [\n            0,\n            0\n        ];\n        var pathLength = path._length;\n        var i = 0;\n        for(i = 0; i < pathLength; i += 1){\n            centerPoint[0] += path.v[i][0];\n            centerPoint[1] += path.v[i][1];\n        }\n        centerPoint[0] /= pathLength;\n        centerPoint[1] /= pathLength;\n        var clonedPath = shapePool.newElement();\n        clonedPath.c = path.c;\n        var vX;\n        var vY;\n        var oX;\n        var oY;\n        var iX;\n        var iY;\n        for(i = 0; i < pathLength; i += 1){\n            vX = path.v[i][0] + (centerPoint[0] - path.v[i][0]) * percent;\n            vY = path.v[i][1] + (centerPoint[1] - path.v[i][1]) * percent;\n            oX = path.o[i][0] + (centerPoint[0] - path.o[i][0]) * -percent;\n            oY = path.o[i][1] + (centerPoint[1] - path.o[i][1]) * -percent;\n            iX = path.i[i][0] + (centerPoint[0] - path.i[i][0]) * -percent;\n            iY = path.i[i][1] + (centerPoint[1] - path.i[i][1]) * -percent;\n            clonedPath.setTripleAt(vX, vY, oX, oY, iX, iY, i);\n        }\n        return clonedPath;\n    };\n    PuckerAndBloatModifier.prototype.processShapes = function(_isFirstFrame) {\n        var shapePaths;\n        var i;\n        var len = this.shapes.length;\n        var j;\n        var jLen;\n        var amount = this.amount.v;\n        if (amount !== 0) {\n            var shapeData;\n            var localShapeCollection;\n            for(i = 0; i < len; i += 1){\n                shapeData = this.shapes[i];\n                localShapeCollection = shapeData.localShapeCollection;\n                if (!(!shapeData.shape._mdf && !this._mdf && !_isFirstFrame)) {\n                    localShapeCollection.releaseShapes();\n                    shapeData.shape._mdf = true;\n                    shapePaths = shapeData.shape.paths.shapes;\n                    jLen = shapeData.shape.paths._length;\n                    for(j = 0; j < jLen; j += 1){\n                        localShapeCollection.addShape(this.processPath(shapePaths[j], amount));\n                    }\n                }\n                shapeData.shape.paths = shapeData.localShapeCollection;\n            }\n        }\n        if (!this.dynamicProperties.length) {\n            this._mdf = false;\n        }\n    };\n    var TransformPropertyFactory = function() {\n        var defaultVector = [\n            0,\n            0\n        ];\n        function applyToMatrix(mat) {\n            var _mdf = this._mdf;\n            this.iterateDynamicProperties();\n            this._mdf = this._mdf || _mdf;\n            if (this.a) {\n                mat.translate(-this.a.v[0], -this.a.v[1], this.a.v[2]);\n            }\n            if (this.s) {\n                mat.scale(this.s.v[0], this.s.v[1], this.s.v[2]);\n            }\n            if (this.sk) {\n                mat.skewFromAxis(-this.sk.v, this.sa.v);\n            }\n            if (this.r) {\n                mat.rotate(-this.r.v);\n            } else {\n                mat.rotateZ(-this.rz.v).rotateY(this.ry.v).rotateX(this.rx.v).rotateZ(-this.or.v[2]).rotateY(this.or.v[1]).rotateX(this.or.v[0]);\n            }\n            if (this.data.p.s) {\n                if (this.data.p.z) {\n                    mat.translate(this.px.v, this.py.v, -this.pz.v);\n                } else {\n                    mat.translate(this.px.v, this.py.v, 0);\n                }\n            } else {\n                mat.translate(this.p.v[0], this.p.v[1], -this.p.v[2]);\n            }\n        }\n        function processKeys(forceRender) {\n            if (this.elem.globalData.frameId === this.frameId) {\n                return;\n            }\n            if (this._isDirty) {\n                this.precalculateMatrix();\n                this._isDirty = false;\n            }\n            this.iterateDynamicProperties();\n            if (this._mdf || forceRender) {\n                var frameRate;\n                this.v.cloneFromProps(this.pre.props);\n                if (this.appliedTransformations < 1) {\n                    this.v.translate(-this.a.v[0], -this.a.v[1], this.a.v[2]);\n                }\n                if (this.appliedTransformations < 2) {\n                    this.v.scale(this.s.v[0], this.s.v[1], this.s.v[2]);\n                }\n                if (this.sk && this.appliedTransformations < 3) {\n                    this.v.skewFromAxis(-this.sk.v, this.sa.v);\n                }\n                if (this.r && this.appliedTransformations < 4) {\n                    this.v.rotate(-this.r.v);\n                } else if (!this.r && this.appliedTransformations < 4) {\n                    this.v.rotateZ(-this.rz.v).rotateY(this.ry.v).rotateX(this.rx.v).rotateZ(-this.or.v[2]).rotateY(this.or.v[1]).rotateX(this.or.v[0]);\n                }\n                if (this.autoOriented) {\n                    var v1;\n                    var v2;\n                    frameRate = this.elem.globalData.frameRate;\n                    if (this.p && this.p.keyframes && this.p.getValueAtTime) {\n                        if (this.p._caching.lastFrame + this.p.offsetTime <= this.p.keyframes[0].t) {\n                            v1 = this.p.getValueAtTime((this.p.keyframes[0].t + 0.01) / frameRate, 0);\n                            v2 = this.p.getValueAtTime(this.p.keyframes[0].t / frameRate, 0);\n                        } else if (this.p._caching.lastFrame + this.p.offsetTime >= this.p.keyframes[this.p.keyframes.length - 1].t) {\n                            v1 = this.p.getValueAtTime(this.p.keyframes[this.p.keyframes.length - 1].t / frameRate, 0);\n                            v2 = this.p.getValueAtTime((this.p.keyframes[this.p.keyframes.length - 1].t - 0.05) / frameRate, 0);\n                        } else {\n                            v1 = this.p.pv;\n                            v2 = this.p.getValueAtTime((this.p._caching.lastFrame + this.p.offsetTime - 0.01) / frameRate, this.p.offsetTime);\n                        }\n                    } else if (this.px && this.px.keyframes && this.py.keyframes && this.px.getValueAtTime && this.py.getValueAtTime) {\n                        v1 = [];\n                        v2 = [];\n                        var px = this.px;\n                        var py = this.py;\n                        if (px._caching.lastFrame + px.offsetTime <= px.keyframes[0].t) {\n                            v1[0] = px.getValueAtTime((px.keyframes[0].t + 0.01) / frameRate, 0);\n                            v1[1] = py.getValueAtTime((py.keyframes[0].t + 0.01) / frameRate, 0);\n                            v2[0] = px.getValueAtTime(px.keyframes[0].t / frameRate, 0);\n                            v2[1] = py.getValueAtTime(py.keyframes[0].t / frameRate, 0);\n                        } else if (px._caching.lastFrame + px.offsetTime >= px.keyframes[px.keyframes.length - 1].t) {\n                            v1[0] = px.getValueAtTime(px.keyframes[px.keyframes.length - 1].t / frameRate, 0);\n                            v1[1] = py.getValueAtTime(py.keyframes[py.keyframes.length - 1].t / frameRate, 0);\n                            v2[0] = px.getValueAtTime((px.keyframes[px.keyframes.length - 1].t - 0.01) / frameRate, 0);\n                            v2[1] = py.getValueAtTime((py.keyframes[py.keyframes.length - 1].t - 0.01) / frameRate, 0);\n                        } else {\n                            v1 = [\n                                px.pv,\n                                py.pv\n                            ];\n                            v2[0] = px.getValueAtTime((px._caching.lastFrame + px.offsetTime - 0.01) / frameRate, px.offsetTime);\n                            v2[1] = py.getValueAtTime((py._caching.lastFrame + py.offsetTime - 0.01) / frameRate, py.offsetTime);\n                        }\n                    } else {\n                        v2 = defaultVector;\n                        v1 = v2;\n                    }\n                    this.v.rotate(-Math.atan2(v1[1] - v2[1], v1[0] - v2[0]));\n                }\n                if (this.data.p && this.data.p.s) {\n                    if (this.data.p.z) {\n                        this.v.translate(this.px.v, this.py.v, -this.pz.v);\n                    } else {\n                        this.v.translate(this.px.v, this.py.v, 0);\n                    }\n                } else {\n                    this.v.translate(this.p.v[0], this.p.v[1], -this.p.v[2]);\n                }\n            }\n            this.frameId = this.elem.globalData.frameId;\n        }\n        function precalculateMatrix() {\n            this.appliedTransformations = 0;\n            this.pre.reset();\n            if (!this.a.effectsSequence.length) {\n                this.pre.translate(-this.a.v[0], -this.a.v[1], this.a.v[2]);\n                this.appliedTransformations = 1;\n            } else {\n                return;\n            }\n            if (!this.s.effectsSequence.length) {\n                this.pre.scale(this.s.v[0], this.s.v[1], this.s.v[2]);\n                this.appliedTransformations = 2;\n            } else {\n                return;\n            }\n            if (this.sk) {\n                if (!this.sk.effectsSequence.length && !this.sa.effectsSequence.length) {\n                    this.pre.skewFromAxis(-this.sk.v, this.sa.v);\n                    this.appliedTransformations = 3;\n                } else {\n                    return;\n                }\n            }\n            if (this.r) {\n                if (!this.r.effectsSequence.length) {\n                    this.pre.rotate(-this.r.v);\n                    this.appliedTransformations = 4;\n                }\n            } else if (!this.rz.effectsSequence.length && !this.ry.effectsSequence.length && !this.rx.effectsSequence.length && !this.or.effectsSequence.length) {\n                this.pre.rotateZ(-this.rz.v).rotateY(this.ry.v).rotateX(this.rx.v).rotateZ(-this.or.v[2]).rotateY(this.or.v[1]).rotateX(this.or.v[0]);\n                this.appliedTransformations = 4;\n            }\n        }\n        function autoOrient() {\n        // var prevP = this.getValueAtTime();\n        }\n        function addDynamicProperty(prop) {\n            this._addDynamicProperty(prop);\n            this.elem.addDynamicProperty(prop);\n            this._isDirty = true;\n        }\n        function TransformProperty(elem, data, container) {\n            this.elem = elem;\n            this.frameId = -1;\n            this.propType = \"transform\";\n            this.data = data;\n            this.v = new Matrix(); // Precalculated matrix with non animated properties\n            this.pre = new Matrix();\n            this.appliedTransformations = 0;\n            this.initDynamicPropertyContainer(container || elem);\n            if (data.p && data.p.s) {\n                this.px = PropertyFactory.getProp(elem, data.p.x, 0, 0, this);\n                this.py = PropertyFactory.getProp(elem, data.p.y, 0, 0, this);\n                if (data.p.z) {\n                    this.pz = PropertyFactory.getProp(elem, data.p.z, 0, 0, this);\n                }\n            } else {\n                this.p = PropertyFactory.getProp(elem, data.p || {\n                    k: [\n                        0,\n                        0,\n                        0\n                    ]\n                }, 1, 0, this);\n            }\n            if (data.rx) {\n                this.rx = PropertyFactory.getProp(elem, data.rx, 0, degToRads, this);\n                this.ry = PropertyFactory.getProp(elem, data.ry, 0, degToRads, this);\n                this.rz = PropertyFactory.getProp(elem, data.rz, 0, degToRads, this);\n                if (data.or.k[0].ti) {\n                    var i;\n                    var len = data.or.k.length;\n                    for(i = 0; i < len; i += 1){\n                        data.or.k[i].to = null;\n                        data.or.k[i].ti = null;\n                    }\n                }\n                this.or = PropertyFactory.getProp(elem, data.or, 1, degToRads, this); // sh Indicates it needs to be capped between -180 and 180\n                this.or.sh = true;\n            } else {\n                this.r = PropertyFactory.getProp(elem, data.r || {\n                    k: 0\n                }, 0, degToRads, this);\n            }\n            if (data.sk) {\n                this.sk = PropertyFactory.getProp(elem, data.sk, 0, degToRads, this);\n                this.sa = PropertyFactory.getProp(elem, data.sa, 0, degToRads, this);\n            }\n            this.a = PropertyFactory.getProp(elem, data.a || {\n                k: [\n                    0,\n                    0,\n                    0\n                ]\n            }, 1, 0, this);\n            this.s = PropertyFactory.getProp(elem, data.s || {\n                k: [\n                    100,\n                    100,\n                    100\n                ]\n            }, 1, 0.01, this); // Opacity is not part of the transform properties, that's why it won't use this.dynamicProperties. That way transforms won't get updated if opacity changes.\n            if (data.o) {\n                this.o = PropertyFactory.getProp(elem, data.o, 0, 0.01, elem);\n            } else {\n                this.o = {\n                    _mdf: false,\n                    v: 1\n                };\n            }\n            this._isDirty = true;\n            if (!this.dynamicProperties.length) {\n                this.getValue(true);\n            }\n        }\n        TransformProperty.prototype = {\n            applyToMatrix: applyToMatrix,\n            getValue: processKeys,\n            precalculateMatrix: precalculateMatrix,\n            autoOrient: autoOrient\n        };\n        extendPrototype([\n            DynamicPropertyContainer\n        ], TransformProperty);\n        TransformProperty.prototype.addDynamicProperty = addDynamicProperty;\n        TransformProperty.prototype._addDynamicProperty = DynamicPropertyContainer.prototype.addDynamicProperty;\n        function getTransformProperty(elem, data, container) {\n            return new TransformProperty(elem, data, container);\n        }\n        return {\n            getTransformProperty: getTransformProperty\n        };\n    }();\n    function RepeaterModifier() {}\n    extendPrototype([\n        ShapeModifier\n    ], RepeaterModifier);\n    RepeaterModifier.prototype.initModifierProperties = function(elem, data) {\n        this.getValue = this.processKeys;\n        this.c = PropertyFactory.getProp(elem, data.c, 0, null, this);\n        this.o = PropertyFactory.getProp(elem, data.o, 0, null, this);\n        this.tr = TransformPropertyFactory.getTransformProperty(elem, data.tr, this);\n        this.so = PropertyFactory.getProp(elem, data.tr.so, 0, 0.01, this);\n        this.eo = PropertyFactory.getProp(elem, data.tr.eo, 0, 0.01, this);\n        this.data = data;\n        if (!this.dynamicProperties.length) {\n            this.getValue(true);\n        }\n        this._isAnimated = !!this.dynamicProperties.length;\n        this.pMatrix = new Matrix();\n        this.rMatrix = new Matrix();\n        this.sMatrix = new Matrix();\n        this.tMatrix = new Matrix();\n        this.matrix = new Matrix();\n    };\n    RepeaterModifier.prototype.applyTransforms = function(pMatrix, rMatrix, sMatrix, transform, perc, inv) {\n        var dir = inv ? -1 : 1;\n        var scaleX = transform.s.v[0] + (1 - transform.s.v[0]) * (1 - perc);\n        var scaleY = transform.s.v[1] + (1 - transform.s.v[1]) * (1 - perc);\n        pMatrix.translate(transform.p.v[0] * dir * perc, transform.p.v[1] * dir * perc, transform.p.v[2]);\n        rMatrix.translate(-transform.a.v[0], -transform.a.v[1], transform.a.v[2]);\n        rMatrix.rotate(-transform.r.v * dir * perc);\n        rMatrix.translate(transform.a.v[0], transform.a.v[1], transform.a.v[2]);\n        sMatrix.translate(-transform.a.v[0], -transform.a.v[1], transform.a.v[2]);\n        sMatrix.scale(inv ? 1 / scaleX : scaleX, inv ? 1 / scaleY : scaleY);\n        sMatrix.translate(transform.a.v[0], transform.a.v[1], transform.a.v[2]);\n    };\n    RepeaterModifier.prototype.init = function(elem, arr, pos, elemsData) {\n        this.elem = elem;\n        this.arr = arr;\n        this.pos = pos;\n        this.elemsData = elemsData;\n        this._currentCopies = 0;\n        this._elements = [];\n        this._groups = [];\n        this.frameId = -1;\n        this.initDynamicPropertyContainer(elem);\n        this.initModifierProperties(elem, arr[pos]);\n        while(pos > 0){\n            pos -= 1; // this._elements.unshift(arr.splice(pos,1)[0]);\n            this._elements.unshift(arr[pos]);\n        }\n        if (this.dynamicProperties.length) {\n            this.k = true;\n        } else {\n            this.getValue(true);\n        }\n    };\n    RepeaterModifier.prototype.resetElements = function(elements) {\n        var i;\n        var len = elements.length;\n        for(i = 0; i < len; i += 1){\n            elements[i]._processed = false;\n            if (elements[i].ty === \"gr\") {\n                this.resetElements(elements[i].it);\n            }\n        }\n    };\n    RepeaterModifier.prototype.cloneElements = function(elements) {\n        var newElements = JSON.parse(JSON.stringify(elements));\n        this.resetElements(newElements);\n        return newElements;\n    };\n    RepeaterModifier.prototype.changeGroupRender = function(elements, renderFlag) {\n        var i;\n        var len = elements.length;\n        for(i = 0; i < len; i += 1){\n            elements[i]._render = renderFlag;\n            if (elements[i].ty === \"gr\") {\n                this.changeGroupRender(elements[i].it, renderFlag);\n            }\n        }\n    };\n    RepeaterModifier.prototype.processShapes = function(_isFirstFrame) {\n        var items;\n        var itemsTransform;\n        var i;\n        var dir;\n        var cont;\n        var hasReloaded = false;\n        if (this._mdf || _isFirstFrame) {\n            var copies = Math.ceil(this.c.v);\n            if (this._groups.length < copies) {\n                while(this._groups.length < copies){\n                    var group = {\n                        it: this.cloneElements(this._elements),\n                        ty: \"gr\"\n                    };\n                    group.it.push({\n                        a: {\n                            a: 0,\n                            ix: 1,\n                            k: [\n                                0,\n                                0\n                            ]\n                        },\n                        nm: \"Transform\",\n                        o: {\n                            a: 0,\n                            ix: 7,\n                            k: 100\n                        },\n                        p: {\n                            a: 0,\n                            ix: 2,\n                            k: [\n                                0,\n                                0\n                            ]\n                        },\n                        r: {\n                            a: 1,\n                            ix: 6,\n                            k: [\n                                {\n                                    s: 0,\n                                    e: 0,\n                                    t: 0\n                                },\n                                {\n                                    s: 0,\n                                    e: 0,\n                                    t: 1\n                                }\n                            ]\n                        },\n                        s: {\n                            a: 0,\n                            ix: 3,\n                            k: [\n                                100,\n                                100\n                            ]\n                        },\n                        sa: {\n                            a: 0,\n                            ix: 5,\n                            k: 0\n                        },\n                        sk: {\n                            a: 0,\n                            ix: 4,\n                            k: 0\n                        },\n                        ty: \"tr\"\n                    });\n                    this.arr.splice(0, 0, group);\n                    this._groups.splice(0, 0, group);\n                    this._currentCopies += 1;\n                }\n                this.elem.reloadShapes();\n                hasReloaded = true;\n            }\n            cont = 0;\n            var renderFlag;\n            for(i = 0; i <= this._groups.length - 1; i += 1){\n                renderFlag = cont < copies;\n                this._groups[i]._render = renderFlag;\n                this.changeGroupRender(this._groups[i].it, renderFlag);\n                if (!renderFlag) {\n                    var elems = this.elemsData[i].it;\n                    var transformData = elems[elems.length - 1];\n                    if (transformData.transform.op.v !== 0) {\n                        transformData.transform.op._mdf = true;\n                        transformData.transform.op.v = 0;\n                    } else {\n                        transformData.transform.op._mdf = false;\n                    }\n                }\n                cont += 1;\n            }\n            this._currentCopies = copies; /// /\n            var offset = this.o.v;\n            var offsetModulo = offset % 1;\n            var roundOffset = offset > 0 ? Math.floor(offset) : Math.ceil(offset);\n            var pProps = this.pMatrix.props;\n            var rProps = this.rMatrix.props;\n            var sProps = this.sMatrix.props;\n            this.pMatrix.reset();\n            this.rMatrix.reset();\n            this.sMatrix.reset();\n            this.tMatrix.reset();\n            this.matrix.reset();\n            var iteration = 0;\n            if (offset > 0) {\n                while(iteration < roundOffset){\n                    this.applyTransforms(this.pMatrix, this.rMatrix, this.sMatrix, this.tr, 1, false);\n                    iteration += 1;\n                }\n                if (offsetModulo) {\n                    this.applyTransforms(this.pMatrix, this.rMatrix, this.sMatrix, this.tr, offsetModulo, false);\n                    iteration += offsetModulo;\n                }\n            } else if (offset < 0) {\n                while(iteration > roundOffset){\n                    this.applyTransforms(this.pMatrix, this.rMatrix, this.sMatrix, this.tr, 1, true);\n                    iteration -= 1;\n                }\n                if (offsetModulo) {\n                    this.applyTransforms(this.pMatrix, this.rMatrix, this.sMatrix, this.tr, -offsetModulo, true);\n                    iteration -= offsetModulo;\n                }\n            }\n            i = this.data.m === 1 ? 0 : this._currentCopies - 1;\n            dir = this.data.m === 1 ? 1 : -1;\n            cont = this._currentCopies;\n            var j;\n            var jLen;\n            while(cont){\n                items = this.elemsData[i].it;\n                itemsTransform = items[items.length - 1].transform.mProps.v.props;\n                jLen = itemsTransform.length;\n                items[items.length - 1].transform.mProps._mdf = true;\n                items[items.length - 1].transform.op._mdf = true;\n                items[items.length - 1].transform.op.v = this._currentCopies === 1 ? this.so.v : this.so.v + (this.eo.v - this.so.v) * (i / (this._currentCopies - 1));\n                if (iteration !== 0) {\n                    if (i !== 0 && dir === 1 || i !== this._currentCopies - 1 && dir === -1) {\n                        this.applyTransforms(this.pMatrix, this.rMatrix, this.sMatrix, this.tr, 1, false);\n                    }\n                    this.matrix.transform(rProps[0], rProps[1], rProps[2], rProps[3], rProps[4], rProps[5], rProps[6], rProps[7], rProps[8], rProps[9], rProps[10], rProps[11], rProps[12], rProps[13], rProps[14], rProps[15]);\n                    this.matrix.transform(sProps[0], sProps[1], sProps[2], sProps[3], sProps[4], sProps[5], sProps[6], sProps[7], sProps[8], sProps[9], sProps[10], sProps[11], sProps[12], sProps[13], sProps[14], sProps[15]);\n                    this.matrix.transform(pProps[0], pProps[1], pProps[2], pProps[3], pProps[4], pProps[5], pProps[6], pProps[7], pProps[8], pProps[9], pProps[10], pProps[11], pProps[12], pProps[13], pProps[14], pProps[15]);\n                    for(j = 0; j < jLen; j += 1){\n                        itemsTransform[j] = this.matrix.props[j];\n                    }\n                    this.matrix.reset();\n                } else {\n                    this.matrix.reset();\n                    for(j = 0; j < jLen; j += 1){\n                        itemsTransform[j] = this.matrix.props[j];\n                    }\n                }\n                iteration += 1;\n                cont -= 1;\n                i += dir;\n            }\n        } else {\n            cont = this._currentCopies;\n            i = 0;\n            dir = 1;\n            while(cont){\n                items = this.elemsData[i].it;\n                itemsTransform = items[items.length - 1].transform.mProps.v.props;\n                items[items.length - 1].transform.mProps._mdf = false;\n                items[items.length - 1].transform.op._mdf = false;\n                cont -= 1;\n                i += dir;\n            }\n        }\n        return hasReloaded;\n    };\n    RepeaterModifier.prototype.addShape = function() {};\n    function RoundCornersModifier() {}\n    extendPrototype([\n        ShapeModifier\n    ], RoundCornersModifier);\n    RoundCornersModifier.prototype.initModifierProperties = function(elem, data) {\n        this.getValue = this.processKeys;\n        this.rd = PropertyFactory.getProp(elem, data.r, 0, null, this);\n        this._isAnimated = !!this.rd.effectsSequence.length;\n    };\n    RoundCornersModifier.prototype.processPath = function(path, round) {\n        var clonedPath = shapePool.newElement();\n        clonedPath.c = path.c;\n        var i;\n        var len = path._length;\n        var currentV;\n        var currentI;\n        var currentO;\n        var closerV;\n        var distance;\n        var newPosPerc;\n        var index = 0;\n        var vX;\n        var vY;\n        var oX;\n        var oY;\n        var iX;\n        var iY;\n        for(i = 0; i < len; i += 1){\n            currentV = path.v[i];\n            currentO = path.o[i];\n            currentI = path.i[i];\n            if (currentV[0] === currentO[0] && currentV[1] === currentO[1] && currentV[0] === currentI[0] && currentV[1] === currentI[1]) {\n                if ((i === 0 || i === len - 1) && !path.c) {\n                    clonedPath.setTripleAt(currentV[0], currentV[1], currentO[0], currentO[1], currentI[0], currentI[1], index);\n                    /* clonedPath.v[index] = currentV;\r\n                  clonedPath.o[index] = currentO;\r\n                  clonedPath.i[index] = currentI; */ index += 1;\n                } else {\n                    if (i === 0) {\n                        closerV = path.v[len - 1];\n                    } else {\n                        closerV = path.v[i - 1];\n                    }\n                    distance = Math.sqrt(Math.pow(currentV[0] - closerV[0], 2) + Math.pow(currentV[1] - closerV[1], 2));\n                    newPosPerc = distance ? Math.min(distance / 2, round) / distance : 0;\n                    iX = currentV[0] + (closerV[0] - currentV[0]) * newPosPerc;\n                    vX = iX;\n                    iY = currentV[1] - (currentV[1] - closerV[1]) * newPosPerc;\n                    vY = iY;\n                    oX = vX - (vX - currentV[0]) * roundCorner;\n                    oY = vY - (vY - currentV[1]) * roundCorner;\n                    clonedPath.setTripleAt(vX, vY, oX, oY, iX, iY, index);\n                    index += 1;\n                    if (i === len - 1) {\n                        closerV = path.v[0];\n                    } else {\n                        closerV = path.v[i + 1];\n                    }\n                    distance = Math.sqrt(Math.pow(currentV[0] - closerV[0], 2) + Math.pow(currentV[1] - closerV[1], 2));\n                    newPosPerc = distance ? Math.min(distance / 2, round) / distance : 0;\n                    oX = currentV[0] + (closerV[0] - currentV[0]) * newPosPerc;\n                    vX = oX;\n                    oY = currentV[1] + (closerV[1] - currentV[1]) * newPosPerc;\n                    vY = oY;\n                    iX = vX - (vX - currentV[0]) * roundCorner;\n                    iY = vY - (vY - currentV[1]) * roundCorner;\n                    clonedPath.setTripleAt(vX, vY, oX, oY, iX, iY, index);\n                    index += 1;\n                }\n            } else {\n                clonedPath.setTripleAt(path.v[i][0], path.v[i][1], path.o[i][0], path.o[i][1], path.i[i][0], path.i[i][1], index);\n                index += 1;\n            }\n        }\n        return clonedPath;\n    };\n    RoundCornersModifier.prototype.processShapes = function(_isFirstFrame) {\n        var shapePaths;\n        var i;\n        var len = this.shapes.length;\n        var j;\n        var jLen;\n        var rd = this.rd.v;\n        if (rd !== 0) {\n            var shapeData;\n            var localShapeCollection;\n            for(i = 0; i < len; i += 1){\n                shapeData = this.shapes[i];\n                localShapeCollection = shapeData.localShapeCollection;\n                if (!(!shapeData.shape._mdf && !this._mdf && !_isFirstFrame)) {\n                    localShapeCollection.releaseShapes();\n                    shapeData.shape._mdf = true;\n                    shapePaths = shapeData.shape.paths.shapes;\n                    jLen = shapeData.shape.paths._length;\n                    for(j = 0; j < jLen; j += 1){\n                        localShapeCollection.addShape(this.processPath(shapePaths[j], rd));\n                    }\n                }\n                shapeData.shape.paths = shapeData.localShapeCollection;\n            }\n        }\n        if (!this.dynamicProperties.length) {\n            this._mdf = false;\n        }\n    };\n    function floatEqual(a, b) {\n        return Math.abs(a - b) * 100000 <= Math.min(Math.abs(a), Math.abs(b));\n    }\n    function floatZero(f) {\n        return Math.abs(f) <= 0.00001;\n    }\n    function lerp(p0, p1, amount) {\n        return p0 * (1 - amount) + p1 * amount;\n    }\n    function lerpPoint(p0, p1, amount) {\n        return [\n            lerp(p0[0], p1[0], amount),\n            lerp(p0[1], p1[1], amount)\n        ];\n    }\n    function quadRoots(a, b, c) {\n        // no root\n        if (a === 0) return [];\n        var s = b * b - 4 * a * c; // Complex roots\n        if (s < 0) return [];\n        var singleRoot = -b / (2 * a); // 1 root\n        if (s === 0) return [\n            singleRoot\n        ];\n        var delta = Math.sqrt(s) / (2 * a); // 2 roots\n        return [\n            singleRoot - delta,\n            singleRoot + delta\n        ];\n    }\n    function polynomialCoefficients(p0, p1, p2, p3) {\n        return [\n            -p0 + 3 * p1 - 3 * p2 + p3,\n            3 * p0 - 6 * p1 + 3 * p2,\n            -3 * p0 + 3 * p1,\n            p0\n        ];\n    }\n    function singlePoint(p) {\n        return new PolynomialBezier(p, p, p, p, false);\n    }\n    function PolynomialBezier(p0, p1, p2, p3, linearize) {\n        if (linearize && pointEqual(p0, p1)) {\n            p1 = lerpPoint(p0, p3, 1 / 3);\n        }\n        if (linearize && pointEqual(p2, p3)) {\n            p2 = lerpPoint(p0, p3, 2 / 3);\n        }\n        var coeffx = polynomialCoefficients(p0[0], p1[0], p2[0], p3[0]);\n        var coeffy = polynomialCoefficients(p0[1], p1[1], p2[1], p3[1]);\n        this.a = [\n            coeffx[0],\n            coeffy[0]\n        ];\n        this.b = [\n            coeffx[1],\n            coeffy[1]\n        ];\n        this.c = [\n            coeffx[2],\n            coeffy[2]\n        ];\n        this.d = [\n            coeffx[3],\n            coeffy[3]\n        ];\n        this.points = [\n            p0,\n            p1,\n            p2,\n            p3\n        ];\n    }\n    PolynomialBezier.prototype.point = function(t) {\n        return [\n            ((this.a[0] * t + this.b[0]) * t + this.c[0]) * t + this.d[0],\n            ((this.a[1] * t + this.b[1]) * t + this.c[1]) * t + this.d[1]\n        ];\n    };\n    PolynomialBezier.prototype.derivative = function(t) {\n        return [\n            (3 * t * this.a[0] + 2 * this.b[0]) * t + this.c[0],\n            (3 * t * this.a[1] + 2 * this.b[1]) * t + this.c[1]\n        ];\n    };\n    PolynomialBezier.prototype.tangentAngle = function(t) {\n        var p = this.derivative(t);\n        return Math.atan2(p[1], p[0]);\n    };\n    PolynomialBezier.prototype.normalAngle = function(t) {\n        var p = this.derivative(t);\n        return Math.atan2(p[0], p[1]);\n    };\n    PolynomialBezier.prototype.inflectionPoints = function() {\n        var denom = this.a[1] * this.b[0] - this.a[0] * this.b[1];\n        if (floatZero(denom)) return [];\n        var tcusp = -0.5 * (this.a[1] * this.c[0] - this.a[0] * this.c[1]) / denom;\n        var square = tcusp * tcusp - 1 / 3 * (this.b[1] * this.c[0] - this.b[0] * this.c[1]) / denom;\n        if (square < 0) return [];\n        var root = Math.sqrt(square);\n        if (floatZero(root)) {\n            if (root > 0 && root < 1) return [\n                tcusp\n            ];\n            return [];\n        }\n        return [\n            tcusp - root,\n            tcusp + root\n        ].filter(function(r) {\n            return r > 0 && r < 1;\n        });\n    };\n    PolynomialBezier.prototype.split = function(t) {\n        if (t <= 0) return [\n            singlePoint(this.points[0]),\n            this\n        ];\n        if (t >= 1) return [\n            this,\n            singlePoint(this.points[this.points.length - 1])\n        ];\n        var p10 = lerpPoint(this.points[0], this.points[1], t);\n        var p11 = lerpPoint(this.points[1], this.points[2], t);\n        var p12 = lerpPoint(this.points[2], this.points[3], t);\n        var p20 = lerpPoint(p10, p11, t);\n        var p21 = lerpPoint(p11, p12, t);\n        var p3 = lerpPoint(p20, p21, t);\n        return [\n            new PolynomialBezier(this.points[0], p10, p20, p3, true),\n            new PolynomialBezier(p3, p21, p12, this.points[3], true)\n        ];\n    };\n    function extrema(bez, comp) {\n        var min = bez.points[0][comp];\n        var max = bez.points[bez.points.length - 1][comp];\n        if (min > max) {\n            var e = max;\n            max = min;\n            min = e;\n        } // Derivative roots to find min/max\n        var f = quadRoots(3 * bez.a[comp], 2 * bez.b[comp], bez.c[comp]);\n        for(var i = 0; i < f.length; i += 1){\n            if (f[i] > 0 && f[i] < 1) {\n                var val = bez.point(f[i])[comp];\n                if (val < min) min = val;\n                else if (val > max) max = val;\n            }\n        }\n        return {\n            min: min,\n            max: max\n        };\n    }\n    PolynomialBezier.prototype.bounds = function() {\n        return {\n            x: extrema(this, 0),\n            y: extrema(this, 1)\n        };\n    };\n    PolynomialBezier.prototype.boundingBox = function() {\n        var bounds = this.bounds();\n        return {\n            left: bounds.x.min,\n            right: bounds.x.max,\n            top: bounds.y.min,\n            bottom: bounds.y.max,\n            width: bounds.x.max - bounds.x.min,\n            height: bounds.y.max - bounds.y.min,\n            cx: (bounds.x.max + bounds.x.min) / 2,\n            cy: (bounds.y.max + bounds.y.min) / 2\n        };\n    };\n    function intersectData(bez, t1, t2) {\n        var box = bez.boundingBox();\n        return {\n            cx: box.cx,\n            cy: box.cy,\n            width: box.width,\n            height: box.height,\n            bez: bez,\n            t: (t1 + t2) / 2,\n            t1: t1,\n            t2: t2\n        };\n    }\n    function splitData(data) {\n        var split = data.bez.split(0.5);\n        return [\n            intersectData(split[0], data.t1, data.t),\n            intersectData(split[1], data.t, data.t2)\n        ];\n    }\n    function boxIntersect(b1, b2) {\n        return Math.abs(b1.cx - b2.cx) * 2 < b1.width + b2.width && Math.abs(b1.cy - b2.cy) * 2 < b1.height + b2.height;\n    }\n    function intersectsImpl(d1, d2, depth, tolerance, intersections, maxRecursion) {\n        if (!boxIntersect(d1, d2)) return;\n        if (depth >= maxRecursion || d1.width <= tolerance && d1.height <= tolerance && d2.width <= tolerance && d2.height <= tolerance) {\n            intersections.push([\n                d1.t,\n                d2.t\n            ]);\n            return;\n        }\n        var d1s = splitData(d1);\n        var d2s = splitData(d2);\n        intersectsImpl(d1s[0], d2s[0], depth + 1, tolerance, intersections, maxRecursion);\n        intersectsImpl(d1s[0], d2s[1], depth + 1, tolerance, intersections, maxRecursion);\n        intersectsImpl(d1s[1], d2s[0], depth + 1, tolerance, intersections, maxRecursion);\n        intersectsImpl(d1s[1], d2s[1], depth + 1, tolerance, intersections, maxRecursion);\n    }\n    PolynomialBezier.prototype.intersections = function(other, tolerance, maxRecursion) {\n        if (tolerance === undefined) tolerance = 2;\n        if (maxRecursion === undefined) maxRecursion = 7;\n        var intersections = [];\n        intersectsImpl(intersectData(this, 0, 1), intersectData(other, 0, 1), 0, tolerance, intersections, maxRecursion);\n        return intersections;\n    };\n    PolynomialBezier.shapeSegment = function(shapePath, index) {\n        var nextIndex = (index + 1) % shapePath.length();\n        return new PolynomialBezier(shapePath.v[index], shapePath.o[index], shapePath.i[nextIndex], shapePath.v[nextIndex], true);\n    };\n    PolynomialBezier.shapeSegmentInverted = function(shapePath, index) {\n        var nextIndex = (index + 1) % shapePath.length();\n        return new PolynomialBezier(shapePath.v[nextIndex], shapePath.i[nextIndex], shapePath.o[index], shapePath.v[index], true);\n    };\n    function crossProduct(a, b) {\n        return [\n            a[1] * b[2] - a[2] * b[1],\n            a[2] * b[0] - a[0] * b[2],\n            a[0] * b[1] - a[1] * b[0]\n        ];\n    }\n    function lineIntersection(start1, end1, start2, end2) {\n        var v1 = [\n            start1[0],\n            start1[1],\n            1\n        ];\n        var v2 = [\n            end1[0],\n            end1[1],\n            1\n        ];\n        var v3 = [\n            start2[0],\n            start2[1],\n            1\n        ];\n        var v4 = [\n            end2[0],\n            end2[1],\n            1\n        ];\n        var r = crossProduct(crossProduct(v1, v2), crossProduct(v3, v4));\n        if (floatZero(r[2])) return null;\n        return [\n            r[0] / r[2],\n            r[1] / r[2]\n        ];\n    }\n    function polarOffset(p, angle, length) {\n        return [\n            p[0] + Math.cos(angle) * length,\n            p[1] - Math.sin(angle) * length\n        ];\n    }\n    function pointDistance(p1, p2) {\n        return Math.hypot(p1[0] - p2[0], p1[1] - p2[1]);\n    }\n    function pointEqual(p1, p2) {\n        return floatEqual(p1[0], p2[0]) && floatEqual(p1[1], p2[1]);\n    }\n    function ZigZagModifier() {}\n    extendPrototype([\n        ShapeModifier\n    ], ZigZagModifier);\n    ZigZagModifier.prototype.initModifierProperties = function(elem, data) {\n        this.getValue = this.processKeys;\n        this.amplitude = PropertyFactory.getProp(elem, data.s, 0, null, this);\n        this.frequency = PropertyFactory.getProp(elem, data.r, 0, null, this);\n        this.pointsType = PropertyFactory.getProp(elem, data.pt, 0, null, this);\n        this._isAnimated = this.amplitude.effectsSequence.length !== 0 || this.frequency.effectsSequence.length !== 0 || this.pointsType.effectsSequence.length !== 0;\n    };\n    function setPoint(outputBezier, point, angle, direction, amplitude, outAmplitude, inAmplitude) {\n        var angO = angle - Math.PI / 2;\n        var angI = angle + Math.PI / 2;\n        var px = point[0] + Math.cos(angle) * direction * amplitude;\n        var py = point[1] - Math.sin(angle) * direction * amplitude;\n        outputBezier.setTripleAt(px, py, px + Math.cos(angO) * outAmplitude, py - Math.sin(angO) * outAmplitude, px + Math.cos(angI) * inAmplitude, py - Math.sin(angI) * inAmplitude, outputBezier.length());\n    }\n    function getPerpendicularVector(pt1, pt2) {\n        var vector = [\n            pt2[0] - pt1[0],\n            pt2[1] - pt1[1]\n        ];\n        var rot = -Math.PI * 0.5;\n        var rotatedVector = [\n            Math.cos(rot) * vector[0] - Math.sin(rot) * vector[1],\n            Math.sin(rot) * vector[0] + Math.cos(rot) * vector[1]\n        ];\n        return rotatedVector;\n    }\n    function getProjectingAngle(path, cur) {\n        var prevIndex = cur === 0 ? path.length() - 1 : cur - 1;\n        var nextIndex = (cur + 1) % path.length();\n        var prevPoint = path.v[prevIndex];\n        var nextPoint = path.v[nextIndex];\n        var pVector = getPerpendicularVector(prevPoint, nextPoint);\n        return Math.atan2(0, 1) - Math.atan2(pVector[1], pVector[0]);\n    }\n    function zigZagCorner(outputBezier, path, cur, amplitude, frequency, pointType, direction) {\n        var angle = getProjectingAngle(path, cur);\n        var point = path.v[cur % path._length];\n        var prevPoint = path.v[cur === 0 ? path._length - 1 : cur - 1];\n        var nextPoint = path.v[(cur + 1) % path._length];\n        var prevDist = pointType === 2 ? Math.sqrt(Math.pow(point[0] - prevPoint[0], 2) + Math.pow(point[1] - prevPoint[1], 2)) : 0;\n        var nextDist = pointType === 2 ? Math.sqrt(Math.pow(point[0] - nextPoint[0], 2) + Math.pow(point[1] - nextPoint[1], 2)) : 0;\n        setPoint(outputBezier, path.v[cur % path._length], angle, direction, amplitude, nextDist / ((frequency + 1) * 2), prevDist / ((frequency + 1) * 2), pointType);\n    }\n    function zigZagSegment(outputBezier, segment, amplitude, frequency, pointType, direction) {\n        for(var i = 0; i < frequency; i += 1){\n            var t = (i + 1) / (frequency + 1);\n            var dist = pointType === 2 ? Math.sqrt(Math.pow(segment.points[3][0] - segment.points[0][0], 2) + Math.pow(segment.points[3][1] - segment.points[0][1], 2)) : 0;\n            var angle = segment.normalAngle(t);\n            var point = segment.point(t);\n            setPoint(outputBezier, point, angle, direction, amplitude, dist / ((frequency + 1) * 2), dist / ((frequency + 1) * 2), pointType);\n            direction = -direction;\n        }\n        return direction;\n    }\n    ZigZagModifier.prototype.processPath = function(path, amplitude, frequency, pointType) {\n        var count = path._length;\n        var clonedPath = shapePool.newElement();\n        clonedPath.c = path.c;\n        if (!path.c) {\n            count -= 1;\n        }\n        if (count === 0) return clonedPath;\n        var direction = -1;\n        var segment = PolynomialBezier.shapeSegment(path, 0);\n        zigZagCorner(clonedPath, path, 0, amplitude, frequency, pointType, direction);\n        for(var i = 0; i < count; i += 1){\n            direction = zigZagSegment(clonedPath, segment, amplitude, frequency, pointType, -direction);\n            if (i === count - 1 && !path.c) {\n                segment = null;\n            } else {\n                segment = PolynomialBezier.shapeSegment(path, (i + 1) % count);\n            }\n            zigZagCorner(clonedPath, path, i + 1, amplitude, frequency, pointType, direction);\n        }\n        return clonedPath;\n    };\n    ZigZagModifier.prototype.processShapes = function(_isFirstFrame) {\n        var shapePaths;\n        var i;\n        var len = this.shapes.length;\n        var j;\n        var jLen;\n        var amplitude = this.amplitude.v;\n        var frequency = Math.max(0, Math.round(this.frequency.v));\n        var pointType = this.pointsType.v;\n        if (amplitude !== 0) {\n            var shapeData;\n            var localShapeCollection;\n            for(i = 0; i < len; i += 1){\n                shapeData = this.shapes[i];\n                localShapeCollection = shapeData.localShapeCollection;\n                if (!(!shapeData.shape._mdf && !this._mdf && !_isFirstFrame)) {\n                    localShapeCollection.releaseShapes();\n                    shapeData.shape._mdf = true;\n                    shapePaths = shapeData.shape.paths.shapes;\n                    jLen = shapeData.shape.paths._length;\n                    for(j = 0; j < jLen; j += 1){\n                        localShapeCollection.addShape(this.processPath(shapePaths[j], amplitude, frequency, pointType));\n                    }\n                }\n                shapeData.shape.paths = shapeData.localShapeCollection;\n            }\n        }\n        if (!this.dynamicProperties.length) {\n            this._mdf = false;\n        }\n    };\n    function linearOffset(p1, p2, amount) {\n        var angle = Math.atan2(p2[0] - p1[0], p2[1] - p1[1]);\n        return [\n            polarOffset(p1, angle, amount),\n            polarOffset(p2, angle, amount)\n        ];\n    }\n    function offsetSegment(segment, amount) {\n        var p0;\n        var p1a;\n        var p1b;\n        var p2b;\n        var p2a;\n        var p3;\n        var e;\n        e = linearOffset(segment.points[0], segment.points[1], amount);\n        p0 = e[0];\n        p1a = e[1];\n        e = linearOffset(segment.points[1], segment.points[2], amount);\n        p1b = e[0];\n        p2b = e[1];\n        e = linearOffset(segment.points[2], segment.points[3], amount);\n        p2a = e[0];\n        p3 = e[1];\n        var p1 = lineIntersection(p0, p1a, p1b, p2b);\n        if (p1 === null) p1 = p1a;\n        var p2 = lineIntersection(p2a, p3, p1b, p2b);\n        if (p2 === null) p2 = p2a;\n        return new PolynomialBezier(p0, p1, p2, p3);\n    }\n    function joinLines(outputBezier, seg1, seg2, lineJoin, miterLimit) {\n        var p0 = seg1.points[3];\n        var p1 = seg2.points[0]; // Bevel\n        if (lineJoin === 3) return p0; // Connected, they don't need a joint\n        if (pointEqual(p0, p1)) return p0; // Round\n        if (lineJoin === 2) {\n            var angleOut = -seg1.tangentAngle(1);\n            var angleIn = -seg2.tangentAngle(0) + Math.PI;\n            var center = lineIntersection(p0, polarOffset(p0, angleOut + Math.PI / 2, 100), p1, polarOffset(p1, angleOut + Math.PI / 2, 100));\n            var radius = center ? pointDistance(center, p0) : pointDistance(p0, p1) / 2;\n            var tan = polarOffset(p0, angleOut, 2 * radius * roundCorner);\n            outputBezier.setXYAt(tan[0], tan[1], \"o\", outputBezier.length() - 1);\n            tan = polarOffset(p1, angleIn, 2 * radius * roundCorner);\n            outputBezier.setTripleAt(p1[0], p1[1], p1[0], p1[1], tan[0], tan[1], outputBezier.length());\n            return p1;\n        } // Miter\n        var t0 = pointEqual(p0, seg1.points[2]) ? seg1.points[0] : seg1.points[2];\n        var t1 = pointEqual(p1, seg2.points[1]) ? seg2.points[3] : seg2.points[1];\n        var intersection = lineIntersection(t0, p0, p1, t1);\n        if (intersection && pointDistance(intersection, p0) < miterLimit) {\n            outputBezier.setTripleAt(intersection[0], intersection[1], intersection[0], intersection[1], intersection[0], intersection[1], outputBezier.length());\n            return intersection;\n        }\n        return p0;\n    }\n    function getIntersection(a, b) {\n        var intersect = a.intersections(b);\n        if (intersect.length && floatEqual(intersect[0][0], 1)) intersect.shift();\n        if (intersect.length) return intersect[0];\n        return null;\n    }\n    function pruneSegmentIntersection(a, b) {\n        var outa = a.slice();\n        var outb = b.slice();\n        var intersect = getIntersection(a[a.length - 1], b[0]);\n        if (intersect) {\n            outa[a.length - 1] = a[a.length - 1].split(intersect[0])[0];\n            outb[0] = b[0].split(intersect[1])[1];\n        }\n        if (a.length > 1 && b.length > 1) {\n            intersect = getIntersection(a[0], b[b.length - 1]);\n            if (intersect) {\n                return [\n                    [\n                        a[0].split(intersect[0])[0]\n                    ],\n                    [\n                        b[b.length - 1].split(intersect[1])[1]\n                    ]\n                ];\n            }\n        }\n        return [\n            outa,\n            outb\n        ];\n    }\n    function pruneIntersections(segments) {\n        var e;\n        for(var i = 1; i < segments.length; i += 1){\n            e = pruneSegmentIntersection(segments[i - 1], segments[i]);\n            segments[i - 1] = e[0];\n            segments[i] = e[1];\n        }\n        if (segments.length > 1) {\n            e = pruneSegmentIntersection(segments[segments.length - 1], segments[0]);\n            segments[segments.length - 1] = e[0];\n            segments[0] = e[1];\n        }\n        return segments;\n    }\n    function offsetSegmentSplit(segment, amount) {\n        /*\r\n      We split each bezier segment into smaller pieces based\r\n      on inflection points, this ensures the control point\r\n      polygon is convex.\r\n        (A cubic bezier can have none, one, or two inflection points)\r\n    */ var flex = segment.inflectionPoints();\n        var left;\n        var right;\n        var split;\n        var mid;\n        if (flex.length === 0) {\n            return [\n                offsetSegment(segment, amount)\n            ];\n        }\n        if (flex.length === 1 || floatEqual(flex[1], 1)) {\n            split = segment.split(flex[0]);\n            left = split[0];\n            right = split[1];\n            return [\n                offsetSegment(left, amount),\n                offsetSegment(right, amount)\n            ];\n        }\n        split = segment.split(flex[0]);\n        left = split[0];\n        var t = (flex[1] - flex[0]) / (1 - flex[0]);\n        split = split[1].split(t);\n        mid = split[0];\n        right = split[1];\n        return [\n            offsetSegment(left, amount),\n            offsetSegment(mid, amount),\n            offsetSegment(right, amount)\n        ];\n    }\n    function OffsetPathModifier() {}\n    extendPrototype([\n        ShapeModifier\n    ], OffsetPathModifier);\n    OffsetPathModifier.prototype.initModifierProperties = function(elem, data) {\n        this.getValue = this.processKeys;\n        this.amount = PropertyFactory.getProp(elem, data.a, 0, null, this);\n        this.miterLimit = PropertyFactory.getProp(elem, data.ml, 0, null, this);\n        this.lineJoin = data.lj;\n        this._isAnimated = this.amount.effectsSequence.length !== 0;\n    };\n    OffsetPathModifier.prototype.processPath = function(inputBezier, amount, lineJoin, miterLimit) {\n        var outputBezier = shapePool.newElement();\n        outputBezier.c = inputBezier.c;\n        var count = inputBezier.length();\n        if (!inputBezier.c) {\n            count -= 1;\n        }\n        var i;\n        var j;\n        var segment;\n        var multiSegments = [];\n        for(i = 0; i < count; i += 1){\n            segment = PolynomialBezier.shapeSegment(inputBezier, i);\n            multiSegments.push(offsetSegmentSplit(segment, amount));\n        }\n        if (!inputBezier.c) {\n            for(i = count - 1; i >= 0; i -= 1){\n                segment = PolynomialBezier.shapeSegmentInverted(inputBezier, i);\n                multiSegments.push(offsetSegmentSplit(segment, amount));\n            }\n        }\n        multiSegments = pruneIntersections(multiSegments); // Add bezier segments to the output and apply line joints\n        var lastPoint = null;\n        var lastSeg = null;\n        for(i = 0; i < multiSegments.length; i += 1){\n            var multiSegment = multiSegments[i];\n            if (lastSeg) lastPoint = joinLines(outputBezier, lastSeg, multiSegment[0], lineJoin, miterLimit);\n            lastSeg = multiSegment[multiSegment.length - 1];\n            for(j = 0; j < multiSegment.length; j += 1){\n                segment = multiSegment[j];\n                if (lastPoint && pointEqual(segment.points[0], lastPoint)) {\n                    outputBezier.setXYAt(segment.points[1][0], segment.points[1][1], \"o\", outputBezier.length() - 1);\n                } else {\n                    outputBezier.setTripleAt(segment.points[0][0], segment.points[0][1], segment.points[1][0], segment.points[1][1], segment.points[0][0], segment.points[0][1], outputBezier.length());\n                }\n                outputBezier.setTripleAt(segment.points[3][0], segment.points[3][1], segment.points[3][0], segment.points[3][1], segment.points[2][0], segment.points[2][1], outputBezier.length());\n                lastPoint = segment.points[3];\n            }\n        }\n        if (multiSegments.length) joinLines(outputBezier, lastSeg, multiSegments[0][0], lineJoin, miterLimit);\n        return outputBezier;\n    };\n    OffsetPathModifier.prototype.processShapes = function(_isFirstFrame) {\n        var shapePaths;\n        var i;\n        var len = this.shapes.length;\n        var j;\n        var jLen;\n        var amount = this.amount.v;\n        var miterLimit = this.miterLimit.v;\n        var lineJoin = this.lineJoin;\n        if (amount !== 0) {\n            var shapeData;\n            var localShapeCollection;\n            for(i = 0; i < len; i += 1){\n                shapeData = this.shapes[i];\n                localShapeCollection = shapeData.localShapeCollection;\n                if (!(!shapeData.shape._mdf && !this._mdf && !_isFirstFrame)) {\n                    localShapeCollection.releaseShapes();\n                    shapeData.shape._mdf = true;\n                    shapePaths = shapeData.shape.paths.shapes;\n                    jLen = shapeData.shape.paths._length;\n                    for(j = 0; j < jLen; j += 1){\n                        localShapeCollection.addShape(this.processPath(shapePaths[j], amount, lineJoin, miterLimit));\n                    }\n                }\n                shapeData.shape.paths = shapeData.localShapeCollection;\n            }\n        }\n        if (!this.dynamicProperties.length) {\n            this._mdf = false;\n        }\n    };\n    function getFontProperties(fontData) {\n        var styles = fontData.fStyle ? fontData.fStyle.split(\" \") : [];\n        var fWeight = \"normal\";\n        var fStyle = \"normal\";\n        var len = styles.length;\n        var styleName;\n        for(var i = 0; i < len; i += 1){\n            styleName = styles[i].toLowerCase();\n            switch(styleName){\n                case \"italic\":\n                    fStyle = \"italic\";\n                    break;\n                case \"bold\":\n                    fWeight = \"700\";\n                    break;\n                case \"black\":\n                    fWeight = \"900\";\n                    break;\n                case \"medium\":\n                    fWeight = \"500\";\n                    break;\n                case \"regular\":\n                case \"normal\":\n                    fWeight = \"400\";\n                    break;\n                case \"light\":\n                case \"thin\":\n                    fWeight = \"200\";\n                    break;\n                default:\n                    break;\n            }\n        }\n        return {\n            style: fStyle,\n            weight: fontData.fWeight || fWeight\n        };\n    }\n    var FontManager = function() {\n        var maxWaitingTime = 5000;\n        var emptyChar = {\n            w: 0,\n            size: 0,\n            shapes: [],\n            data: {\n                shapes: []\n            }\n        };\n        var combinedCharacters = []; // Hindi characters\n        combinedCharacters = combinedCharacters.concat([\n            2304,\n            2305,\n            2306,\n            2307,\n            2362,\n            2363,\n            2364,\n            2364,\n            2366,\n            2367,\n            2368,\n            2369,\n            2370,\n            2371,\n            2372,\n            2373,\n            2374,\n            2375,\n            2376,\n            2377,\n            2378,\n            2379,\n            2380,\n            2381,\n            2382,\n            2383,\n            2387,\n            2388,\n            2389,\n            2390,\n            2391,\n            2402,\n            2403\n        ]);\n        var BLACK_FLAG_CODE_POINT = 127988;\n        var CANCEL_TAG_CODE_POINT = 917631;\n        var A_TAG_CODE_POINT = 917601;\n        var Z_TAG_CODE_POINT = 917626;\n        var VARIATION_SELECTOR_16_CODE_POINT = 65039;\n        var ZERO_WIDTH_JOINER_CODE_POINT = 8205;\n        var REGIONAL_CHARACTER_A_CODE_POINT = 127462;\n        var REGIONAL_CHARACTER_Z_CODE_POINT = 127487;\n        var surrogateModifiers = [\n            \"d83cdffb\",\n            \"d83cdffc\",\n            \"d83cdffd\",\n            \"d83cdffe\",\n            \"d83cdfff\"\n        ];\n        function trimFontOptions(font) {\n            var familyArray = font.split(\",\");\n            var i;\n            var len = familyArray.length;\n            var enabledFamilies = [];\n            for(i = 0; i < len; i += 1){\n                if (familyArray[i] !== \"sans-serif\" && familyArray[i] !== \"monospace\") {\n                    enabledFamilies.push(familyArray[i]);\n                }\n            }\n            return enabledFamilies.join(\",\");\n        }\n        function setUpNode(font, family) {\n            var parentNode = createTag(\"span\"); // Node is invisible to screen readers.\n            parentNode.setAttribute(\"aria-hidden\", true);\n            parentNode.style.fontFamily = family;\n            var node = createTag(\"span\"); // Characters that vary significantly among different fonts\n            node.innerText = \"giItT1WQy@!-/#\"; // Visible - so we can measure it - but not on the screen\n            parentNode.style.position = \"absolute\";\n            parentNode.style.left = \"-10000px\";\n            parentNode.style.top = \"-10000px\"; // Large font size makes even subtle changes obvious\n            parentNode.style.fontSize = \"300px\"; // Reset any font properties\n            parentNode.style.fontVariant = \"normal\";\n            parentNode.style.fontStyle = \"normal\";\n            parentNode.style.fontWeight = \"normal\";\n            parentNode.style.letterSpacing = \"0\";\n            parentNode.appendChild(node);\n            document.body.appendChild(parentNode); // Remember width with no applied web font\n            var width = node.offsetWidth;\n            node.style.fontFamily = trimFontOptions(font) + \", \" + family;\n            return {\n                node: node,\n                w: width,\n                parent: parentNode\n            };\n        }\n        function checkLoadedFonts() {\n            var i;\n            var len = this.fonts.length;\n            var node;\n            var w;\n            var loadedCount = len;\n            for(i = 0; i < len; i += 1){\n                if (this.fonts[i].loaded) {\n                    loadedCount -= 1;\n                } else if (this.fonts[i].fOrigin === \"n\" || this.fonts[i].origin === 0) {\n                    this.fonts[i].loaded = true;\n                } else {\n                    node = this.fonts[i].monoCase.node;\n                    w = this.fonts[i].monoCase.w;\n                    if (node.offsetWidth !== w) {\n                        loadedCount -= 1;\n                        this.fonts[i].loaded = true;\n                    } else {\n                        node = this.fonts[i].sansCase.node;\n                        w = this.fonts[i].sansCase.w;\n                        if (node.offsetWidth !== w) {\n                            loadedCount -= 1;\n                            this.fonts[i].loaded = true;\n                        }\n                    }\n                    if (this.fonts[i].loaded) {\n                        this.fonts[i].sansCase.parent.parentNode.removeChild(this.fonts[i].sansCase.parent);\n                        this.fonts[i].monoCase.parent.parentNode.removeChild(this.fonts[i].monoCase.parent);\n                    }\n                }\n            }\n            if (loadedCount !== 0 && Date.now() - this.initTime < maxWaitingTime) {\n                setTimeout(this.checkLoadedFontsBinded, 20);\n            } else {\n                setTimeout(this.setIsLoadedBinded, 10);\n            }\n        }\n        function createHelper(fontData, def) {\n            var engine = document.body && def ? \"svg\" : \"canvas\";\n            var helper;\n            var fontProps = getFontProperties(fontData);\n            if (engine === \"svg\") {\n                var tHelper = createNS(\"text\");\n                tHelper.style.fontSize = \"100px\"; // tHelper.style.fontFamily = fontData.fFamily;\n                tHelper.setAttribute(\"font-family\", fontData.fFamily);\n                tHelper.setAttribute(\"font-style\", fontProps.style);\n                tHelper.setAttribute(\"font-weight\", fontProps.weight);\n                tHelper.textContent = \"1\";\n                if (fontData.fClass) {\n                    tHelper.style.fontFamily = \"inherit\";\n                    tHelper.setAttribute(\"class\", fontData.fClass);\n                } else {\n                    tHelper.style.fontFamily = fontData.fFamily;\n                }\n                def.appendChild(tHelper);\n                helper = tHelper;\n            } else {\n                var tCanvasHelper = new OffscreenCanvas(500, 500).getContext(\"2d\");\n                tCanvasHelper.font = fontProps.style + \" \" + fontProps.weight + \" 100px \" + fontData.fFamily;\n                helper = tCanvasHelper;\n            }\n            function measure(text) {\n                if (engine === \"svg\") {\n                    helper.textContent = text;\n                    return helper.getComputedTextLength();\n                }\n                return helper.measureText(text).width;\n            }\n            return {\n                measureText: measure\n            };\n        }\n        function addFonts(fontData, defs) {\n            if (!fontData) {\n                this.isLoaded = true;\n                return;\n            }\n            if (this.chars) {\n                this.isLoaded = true;\n                this.fonts = fontData.list;\n                return;\n            }\n            if (!document.body) {\n                this.isLoaded = true;\n                fontData.list.forEach(function(data) {\n                    data.helper = createHelper(data);\n                    data.cache = {};\n                });\n                this.fonts = fontData.list;\n                return;\n            }\n            var fontArr = fontData.list;\n            var i;\n            var len = fontArr.length;\n            var _pendingFonts = len;\n            for(i = 0; i < len; i += 1){\n                var shouldLoadFont = true;\n                var loadedSelector;\n                var j;\n                fontArr[i].loaded = false;\n                fontArr[i].monoCase = setUpNode(fontArr[i].fFamily, \"monospace\");\n                fontArr[i].sansCase = setUpNode(fontArr[i].fFamily, \"sans-serif\");\n                if (!fontArr[i].fPath) {\n                    fontArr[i].loaded = true;\n                    _pendingFonts -= 1;\n                } else if (fontArr[i].fOrigin === \"p\" || fontArr[i].origin === 3) {\n                    loadedSelector = document.querySelectorAll('style[f-forigin=\"p\"][f-family=\"' + fontArr[i].fFamily + '\"], style[f-origin=\"3\"][f-family=\"' + fontArr[i].fFamily + '\"]');\n                    if (loadedSelector.length > 0) {\n                        shouldLoadFont = false;\n                    }\n                    if (shouldLoadFont) {\n                        var s = createTag(\"style\");\n                        s.setAttribute(\"f-forigin\", fontArr[i].fOrigin);\n                        s.setAttribute(\"f-origin\", fontArr[i].origin);\n                        s.setAttribute(\"f-family\", fontArr[i].fFamily);\n                        s.type = \"text/css\";\n                        s.innerText = \"@font-face {font-family: \" + fontArr[i].fFamily + \"; font-style: normal; src: url('\" + fontArr[i].fPath + \"');}\";\n                        defs.appendChild(s);\n                    }\n                } else if (fontArr[i].fOrigin === \"g\" || fontArr[i].origin === 1) {\n                    loadedSelector = document.querySelectorAll('link[f-forigin=\"g\"], link[f-origin=\"1\"]');\n                    for(j = 0; j < loadedSelector.length; j += 1){\n                        if (loadedSelector[j].href.indexOf(fontArr[i].fPath) !== -1) {\n                            // Font is already loaded\n                            shouldLoadFont = false;\n                        }\n                    }\n                    if (shouldLoadFont) {\n                        var l = createTag(\"link\");\n                        l.setAttribute(\"f-forigin\", fontArr[i].fOrigin);\n                        l.setAttribute(\"f-origin\", fontArr[i].origin);\n                        l.type = \"text/css\";\n                        l.rel = \"stylesheet\";\n                        l.href = fontArr[i].fPath;\n                        document.body.appendChild(l);\n                    }\n                } else if (fontArr[i].fOrigin === \"t\" || fontArr[i].origin === 2) {\n                    loadedSelector = document.querySelectorAll('script[f-forigin=\"t\"], script[f-origin=\"2\"]');\n                    for(j = 0; j < loadedSelector.length; j += 1){\n                        if (fontArr[i].fPath === loadedSelector[j].src) {\n                            // Font is already loaded\n                            shouldLoadFont = false;\n                        }\n                    }\n                    if (shouldLoadFont) {\n                        var sc = createTag(\"link\");\n                        sc.setAttribute(\"f-forigin\", fontArr[i].fOrigin);\n                        sc.setAttribute(\"f-origin\", fontArr[i].origin);\n                        sc.setAttribute(\"rel\", \"stylesheet\");\n                        sc.setAttribute(\"href\", fontArr[i].fPath);\n                        defs.appendChild(sc);\n                    }\n                }\n                fontArr[i].helper = createHelper(fontArr[i], defs);\n                fontArr[i].cache = {};\n                this.fonts.push(fontArr[i]);\n            }\n            if (_pendingFonts === 0) {\n                this.isLoaded = true;\n            } else {\n                // On some cases even if the font is loaded, it won't load correctly when measuring text on canvas.\n                // Adding this timeout seems to fix it\n                setTimeout(this.checkLoadedFonts.bind(this), 100);\n            }\n        }\n        function addChars(chars) {\n            if (!chars) {\n                return;\n            }\n            if (!this.chars) {\n                this.chars = [];\n            }\n            var i;\n            var len = chars.length;\n            var j;\n            var jLen = this.chars.length;\n            var found;\n            for(i = 0; i < len; i += 1){\n                j = 0;\n                found = false;\n                while(j < jLen){\n                    if (this.chars[j].style === chars[i].style && this.chars[j].fFamily === chars[i].fFamily && this.chars[j].ch === chars[i].ch) {\n                        found = true;\n                    }\n                    j += 1;\n                }\n                if (!found) {\n                    this.chars.push(chars[i]);\n                    jLen += 1;\n                }\n            }\n        }\n        function getCharData(_char, style, font) {\n            var i = 0;\n            var len = this.chars.length;\n            while(i < len){\n                if (this.chars[i].ch === _char && this.chars[i].style === style && this.chars[i].fFamily === font) {\n                    return this.chars[i];\n                }\n                i += 1;\n            }\n            if ((typeof _char === \"string\" && _char.charCodeAt(0) !== 13 || !_char) && console && console.warn // eslint-disable-line no-console\n             && !this._warned) {\n                this._warned = true;\n                console.warn(\"Missing character from exported characters list: \", _char, style, font); // eslint-disable-line no-console\n            }\n            return emptyChar;\n        }\n        function measureText(_char2, fontName, size) {\n            var fontData = this.getFontByName(fontName); // Using the char instead of char.charCodeAt(0)\n            // to avoid collisions between equal chars\n            var index = _char2;\n            if (!fontData.cache[index]) {\n                var tHelper = fontData.helper;\n                if (_char2 === \" \") {\n                    var doubleSize = tHelper.measureText(\"|\" + _char2 + \"|\");\n                    var singleSize = tHelper.measureText(\"||\");\n                    fontData.cache[index] = (doubleSize - singleSize) / 100;\n                } else {\n                    fontData.cache[index] = tHelper.measureText(_char2) / 100;\n                }\n            }\n            return fontData.cache[index] * size;\n        }\n        function getFontByName(name) {\n            var i = 0;\n            var len = this.fonts.length;\n            while(i < len){\n                if (this.fonts[i].fName === name) {\n                    return this.fonts[i];\n                }\n                i += 1;\n            }\n            return this.fonts[0];\n        }\n        function getCodePoint(string) {\n            var codePoint = 0;\n            var first = string.charCodeAt(0);\n            if (first >= 0xD800 && first <= 0xDBFF) {\n                var second = string.charCodeAt(1);\n                if (second >= 0xDC00 && second <= 0xDFFF) {\n                    codePoint = (first - 0xD800) * 0x400 + second - 0xDC00 + 0x10000;\n                }\n            }\n            return codePoint;\n        } // Skin tone modifiers\n        function isModifier(firstCharCode, secondCharCode) {\n            var sum = firstCharCode.toString(16) + secondCharCode.toString(16);\n            return surrogateModifiers.indexOf(sum) !== -1;\n        }\n        function isZeroWidthJoiner(charCode) {\n            return charCode === ZERO_WIDTH_JOINER_CODE_POINT;\n        } // This codepoint may change the appearance of the preceding character.\n        // If that is a symbol, dingbat or emoji, U+FE0F forces it to be rendered\n        // as a colorful image as compared to a monochrome text variant.\n        function isVariationSelector(charCode) {\n            return charCode === VARIATION_SELECTOR_16_CODE_POINT;\n        } // The regional indicator symbols are a set of 26 alphabetic Unicode\n        /// characters (A–Z) intended to be used to encode ISO 3166-1 alpha-2\n        // two-letter country codes in a way that allows optional special treatment.\n        function isRegionalCode(string) {\n            var codePoint = getCodePoint(string);\n            if (codePoint >= REGIONAL_CHARACTER_A_CODE_POINT && codePoint <= REGIONAL_CHARACTER_Z_CODE_POINT) {\n                return true;\n            }\n            return false;\n        } // Some Emoji implementations represent combinations of\n        // two “regional indicator” letters as a single flag symbol.\n        function isFlagEmoji(string) {\n            return isRegionalCode(string.substr(0, 2)) && isRegionalCode(string.substr(2, 2));\n        }\n        function isCombinedCharacter(_char3) {\n            return combinedCharacters.indexOf(_char3) !== -1;\n        } // Regional flags start with a BLACK_FLAG_CODE_POINT\n        // folowed by 5 chars in the TAG range\n        // and end with a CANCEL_TAG_CODE_POINT\n        function isRegionalFlag(text, index) {\n            var codePoint = getCodePoint(text.substr(index, 2));\n            if (codePoint !== BLACK_FLAG_CODE_POINT) {\n                return false;\n            }\n            var count = 0;\n            index += 2;\n            while(count < 5){\n                codePoint = getCodePoint(text.substr(index, 2));\n                if (codePoint < A_TAG_CODE_POINT || codePoint > Z_TAG_CODE_POINT) {\n                    return false;\n                }\n                count += 1;\n                index += 2;\n            }\n            return getCodePoint(text.substr(index, 2)) === CANCEL_TAG_CODE_POINT;\n        }\n        function setIsLoaded() {\n            this.isLoaded = true;\n        }\n        var Font = function Font() {\n            this.fonts = [];\n            this.chars = null;\n            this.typekitLoaded = 0;\n            this.isLoaded = false;\n            this._warned = false;\n            this.initTime = Date.now();\n            this.setIsLoadedBinded = this.setIsLoaded.bind(this);\n            this.checkLoadedFontsBinded = this.checkLoadedFonts.bind(this);\n        };\n        Font.isModifier = isModifier;\n        Font.isZeroWidthJoiner = isZeroWidthJoiner;\n        Font.isFlagEmoji = isFlagEmoji;\n        Font.isRegionalCode = isRegionalCode;\n        Font.isCombinedCharacter = isCombinedCharacter;\n        Font.isRegionalFlag = isRegionalFlag;\n        Font.isVariationSelector = isVariationSelector;\n        Font.BLACK_FLAG_CODE_POINT = BLACK_FLAG_CODE_POINT;\n        var fontPrototype = {\n            addChars: addChars,\n            addFonts: addFonts,\n            getCharData: getCharData,\n            getFontByName: getFontByName,\n            measureText: measureText,\n            checkLoadedFonts: checkLoadedFonts,\n            setIsLoaded: setIsLoaded\n        };\n        Font.prototype = fontPrototype;\n        return Font;\n    }();\n    function SlotManager(animationData) {\n        this.animationData = animationData;\n    }\n    SlotManager.prototype.getProp = function(data) {\n        if (this.animationData.slots && this.animationData.slots[data.sid]) {\n            return Object.assign(data, this.animationData.slots[data.sid].p);\n        }\n        return data;\n    };\n    function slotFactory(animationData) {\n        return new SlotManager(animationData);\n    }\n    function RenderableElement() {}\n    RenderableElement.prototype = {\n        initRenderable: function initRenderable() {\n            // layer's visibility related to inpoint and outpoint. Rename isVisible to isInRange\n            this.isInRange = false; // layer's display state\n            this.hidden = false; // If layer's transparency equals 0, it can be hidden\n            this.isTransparent = false; // list of animated components\n            this.renderableComponents = [];\n        },\n        addRenderableComponent: function addRenderableComponent(component) {\n            if (this.renderableComponents.indexOf(component) === -1) {\n                this.renderableComponents.push(component);\n            }\n        },\n        removeRenderableComponent: function removeRenderableComponent(component) {\n            if (this.renderableComponents.indexOf(component) !== -1) {\n                this.renderableComponents.splice(this.renderableComponents.indexOf(component), 1);\n            }\n        },\n        prepareRenderableFrame: function prepareRenderableFrame(num) {\n            this.checkLayerLimits(num);\n        },\n        checkTransparency: function checkTransparency() {\n            if (this.finalTransform.mProp.o.v <= 0) {\n                if (!this.isTransparent && this.globalData.renderConfig.hideOnTransparent) {\n                    this.isTransparent = true;\n                    this.hide();\n                }\n            } else if (this.isTransparent) {\n                this.isTransparent = false;\n                this.show();\n            }\n        },\n        /**\r\n       * @function\r\n       * Initializes frame related properties.\r\n       *\r\n       * @param {number} num\r\n       * current frame number in Layer's time\r\n       *\r\n       */ checkLayerLimits: function checkLayerLimits(num) {\n            if (this.data.ip - this.data.st <= num && this.data.op - this.data.st > num) {\n                if (this.isInRange !== true) {\n                    this.globalData._mdf = true;\n                    this._mdf = true;\n                    this.isInRange = true;\n                    this.show();\n                }\n            } else if (this.isInRange !== false) {\n                this.globalData._mdf = true;\n                this.isInRange = false;\n                this.hide();\n            }\n        },\n        renderRenderable: function renderRenderable() {\n            var i;\n            var len = this.renderableComponents.length;\n            for(i = 0; i < len; i += 1){\n                this.renderableComponents[i].renderFrame(this._isFirstFrame);\n            }\n        /* this.maskManager.renderFrame(this.finalTransform.mat);\r\n          this.renderableEffectsManager.renderFrame(this._isFirstFrame); */ },\n        sourceRectAtTime: function sourceRectAtTime() {\n            return {\n                top: 0,\n                left: 0,\n                width: 100,\n                height: 100\n            };\n        },\n        getLayerSize: function getLayerSize() {\n            if (this.data.ty === 5) {\n                return {\n                    w: this.data.textData.width,\n                    h: this.data.textData.height\n                };\n            }\n            return {\n                w: this.data.width,\n                h: this.data.height\n            };\n        }\n    };\n    var getBlendMode = function() {\n        var blendModeEnums = {\n            0: \"source-over\",\n            1: \"multiply\",\n            2: \"screen\",\n            3: \"overlay\",\n            4: \"darken\",\n            5: \"lighten\",\n            6: \"color-dodge\",\n            7: \"color-burn\",\n            8: \"hard-light\",\n            9: \"soft-light\",\n            10: \"difference\",\n            11: \"exclusion\",\n            12: \"hue\",\n            13: \"saturation\",\n            14: \"color\",\n            15: \"luminosity\"\n        };\n        return function(mode) {\n            return blendModeEnums[mode] || \"\";\n        };\n    }();\n    function SliderEffect(data, elem, container) {\n        this.p = PropertyFactory.getProp(elem, data.v, 0, 0, container);\n    }\n    function AngleEffect(data, elem, container) {\n        this.p = PropertyFactory.getProp(elem, data.v, 0, 0, container);\n    }\n    function ColorEffect(data, elem, container) {\n        this.p = PropertyFactory.getProp(elem, data.v, 1, 0, container);\n    }\n    function PointEffect(data, elem, container) {\n        this.p = PropertyFactory.getProp(elem, data.v, 1, 0, container);\n    }\n    function LayerIndexEffect(data, elem, container) {\n        this.p = PropertyFactory.getProp(elem, data.v, 0, 0, container);\n    }\n    function MaskIndexEffect(data, elem, container) {\n        this.p = PropertyFactory.getProp(elem, data.v, 0, 0, container);\n    }\n    function CheckboxEffect(data, elem, container) {\n        this.p = PropertyFactory.getProp(elem, data.v, 0, 0, container);\n    }\n    function NoValueEffect() {\n        this.p = {};\n    }\n    function EffectsManager(data, element) {\n        var effects = data.ef || [];\n        this.effectElements = [];\n        var i;\n        var len = effects.length;\n        var effectItem;\n        for(i = 0; i < len; i += 1){\n            effectItem = new GroupEffect(effects[i], element);\n            this.effectElements.push(effectItem);\n        }\n    }\n    function GroupEffect(data, element) {\n        this.init(data, element);\n    }\n    extendPrototype([\n        DynamicPropertyContainer\n    ], GroupEffect);\n    GroupEffect.prototype.getValue = GroupEffect.prototype.iterateDynamicProperties;\n    GroupEffect.prototype.init = function(data, element) {\n        this.data = data;\n        this.effectElements = [];\n        this.initDynamicPropertyContainer(element);\n        var i;\n        var len = this.data.ef.length;\n        var eff;\n        var effects = this.data.ef;\n        for(i = 0; i < len; i += 1){\n            eff = null;\n            switch(effects[i].ty){\n                case 0:\n                    eff = new SliderEffect(effects[i], element, this);\n                    break;\n                case 1:\n                    eff = new AngleEffect(effects[i], element, this);\n                    break;\n                case 2:\n                    eff = new ColorEffect(effects[i], element, this);\n                    break;\n                case 3:\n                    eff = new PointEffect(effects[i], element, this);\n                    break;\n                case 4:\n                case 7:\n                    eff = new CheckboxEffect(effects[i], element, this);\n                    break;\n                case 10:\n                    eff = new LayerIndexEffect(effects[i], element, this);\n                    break;\n                case 11:\n                    eff = new MaskIndexEffect(effects[i], element, this);\n                    break;\n                case 5:\n                    eff = new EffectsManager(effects[i], element, this);\n                    break;\n                // case 6:\n                default:\n                    eff = new NoValueEffect(effects[i], element, this);\n                    break;\n            }\n            if (eff) {\n                this.effectElements.push(eff);\n            }\n        }\n    };\n    function BaseElement() {}\n    BaseElement.prototype = {\n        checkMasks: function checkMasks() {\n            if (!this.data.hasMask) {\n                return false;\n            }\n            var i = 0;\n            var len = this.data.masksProperties.length;\n            while(i < len){\n                if (this.data.masksProperties[i].mode !== \"n\" && this.data.masksProperties[i].cl !== false) {\n                    return true;\n                }\n                i += 1;\n            }\n            return false;\n        },\n        initExpressions: function initExpressions() {\n            var expressionsInterfaces = getExpressionInterfaces();\n            if (!expressionsInterfaces) {\n                return;\n            }\n            var LayerExpressionInterface = expressionsInterfaces(\"layer\");\n            var EffectsExpressionInterface = expressionsInterfaces(\"effects\");\n            var ShapeExpressionInterface = expressionsInterfaces(\"shape\");\n            var TextExpressionInterface = expressionsInterfaces(\"text\");\n            var CompExpressionInterface = expressionsInterfaces(\"comp\");\n            this.layerInterface = LayerExpressionInterface(this);\n            if (this.data.hasMask && this.maskManager) {\n                this.layerInterface.registerMaskInterface(this.maskManager);\n            }\n            var effectsInterface = EffectsExpressionInterface.createEffectsInterface(this, this.layerInterface);\n            this.layerInterface.registerEffectsInterface(effectsInterface);\n            if (this.data.ty === 0 || this.data.xt) {\n                this.compInterface = CompExpressionInterface(this);\n            } else if (this.data.ty === 4) {\n                this.layerInterface.shapeInterface = ShapeExpressionInterface(this.shapesData, this.itemsData, this.layerInterface);\n                this.layerInterface.content = this.layerInterface.shapeInterface;\n            } else if (this.data.ty === 5) {\n                this.layerInterface.textInterface = TextExpressionInterface(this);\n                this.layerInterface.text = this.layerInterface.textInterface;\n            }\n        },\n        setBlendMode: function setBlendMode() {\n            var blendModeValue = getBlendMode(this.data.bm);\n            var elem = this.baseElement || this.layerElement;\n            elem.style[\"mix-blend-mode\"] = blendModeValue;\n        },\n        initBaseData: function initBaseData(data, globalData, comp) {\n            this.globalData = globalData;\n            this.comp = comp;\n            this.data = data;\n            this.layerId = createElementID(); // Stretch factor for old animations missing this property.\n            if (!this.data.sr) {\n                this.data.sr = 1;\n            } // effects manager\n            this.effectsManager = new EffectsManager(this.data, this, this.dynamicProperties);\n        },\n        getType: function getType() {\n            return this.type;\n        },\n        sourceRectAtTime: function sourceRectAtTime() {}\n    };\n    /**\r\n   * @file\r\n   * Handles element's layer frame update.\r\n   * Checks layer in point and out point\r\n   *\r\n   */ function FrameElement() {}\n    FrameElement.prototype = {\n        /**\r\n       * @function\r\n       * Initializes frame related properties.\r\n       *\r\n       */ initFrame: function initFrame() {\n            // set to true when inpoint is rendered\n            this._isFirstFrame = false; // list of animated properties\n            this.dynamicProperties = []; // If layer has been modified in current tick this will be true\n            this._mdf = false;\n        },\n        /**\r\n       * @function\r\n       * Calculates all dynamic values\r\n       *\r\n       * @param {number} num\r\n       * current frame number in Layer's time\r\n       * @param {boolean} isVisible\r\n       * if layers is currently in range\r\n       *\r\n       */ prepareProperties: function prepareProperties(num, isVisible) {\n            var i;\n            var len = this.dynamicProperties.length;\n            for(i = 0; i < len; i += 1){\n                if (isVisible || this._isParent && this.dynamicProperties[i].propType === \"transform\") {\n                    this.dynamicProperties[i].getValue();\n                    if (this.dynamicProperties[i]._mdf) {\n                        this.globalData._mdf = true;\n                        this._mdf = true;\n                    }\n                }\n            }\n        },\n        addDynamicProperty: function addDynamicProperty(prop) {\n            if (this.dynamicProperties.indexOf(prop) === -1) {\n                this.dynamicProperties.push(prop);\n            }\n        }\n    };\n    function FootageElement(data, globalData, comp) {\n        this.initFrame();\n        this.initRenderable();\n        this.assetData = globalData.getAssetData(data.refId);\n        this.footageData = globalData.imageLoader.getAsset(this.assetData);\n        this.initBaseData(data, globalData, comp);\n    }\n    FootageElement.prototype.prepareFrame = function() {};\n    extendPrototype([\n        RenderableElement,\n        BaseElement,\n        FrameElement\n    ], FootageElement);\n    FootageElement.prototype.getBaseElement = function() {\n        return null;\n    };\n    FootageElement.prototype.renderFrame = function() {};\n    FootageElement.prototype.destroy = function() {};\n    FootageElement.prototype.initExpressions = function() {\n        var expressionsInterfaces = getExpressionInterfaces();\n        if (!expressionsInterfaces) {\n            return;\n        }\n        var FootageInterface = expressionsInterfaces(\"footage\");\n        this.layerInterface = FootageInterface(this);\n    };\n    FootageElement.prototype.getFootageData = function() {\n        return this.footageData;\n    };\n    function AudioElement(data, globalData, comp) {\n        this.initFrame();\n        this.initRenderable();\n        this.assetData = globalData.getAssetData(data.refId);\n        this.initBaseData(data, globalData, comp);\n        this._isPlaying = false;\n        this._canPlay = false;\n        var assetPath = this.globalData.getAssetsPath(this.assetData);\n        this.audio = this.globalData.audioController.createAudio(assetPath);\n        this._currentTime = 0;\n        this.globalData.audioController.addAudio(this);\n        this._volumeMultiplier = 1;\n        this._volume = 1;\n        this._previousVolume = null;\n        this.tm = data.tm ? PropertyFactory.getProp(this, data.tm, 0, globalData.frameRate, this) : {\n            _placeholder: true\n        };\n        this.lv = PropertyFactory.getProp(this, data.au && data.au.lv ? data.au.lv : {\n            k: [\n                100\n            ]\n        }, 1, 0.01, this);\n    }\n    AudioElement.prototype.prepareFrame = function(num) {\n        this.prepareRenderableFrame(num, true);\n        this.prepareProperties(num, true);\n        if (!this.tm._placeholder) {\n            var timeRemapped = this.tm.v;\n            this._currentTime = timeRemapped;\n        } else {\n            this._currentTime = num / this.data.sr;\n        }\n        this._volume = this.lv.v[0];\n        var totalVolume = this._volume * this._volumeMultiplier;\n        if (this._previousVolume !== totalVolume) {\n            this._previousVolume = totalVolume;\n            this.audio.volume(totalVolume);\n        }\n    };\n    extendPrototype([\n        RenderableElement,\n        BaseElement,\n        FrameElement\n    ], AudioElement);\n    AudioElement.prototype.renderFrame = function() {\n        if (this.isInRange && this._canPlay) {\n            if (!this._isPlaying) {\n                this.audio.play();\n                this.audio.seek(this._currentTime / this.globalData.frameRate);\n                this._isPlaying = true;\n            } else if (!this.audio.playing() || Math.abs(this._currentTime / this.globalData.frameRate - this.audio.seek()) > 0.1) {\n                this.audio.seek(this._currentTime / this.globalData.frameRate);\n            }\n        }\n    };\n    AudioElement.prototype.show = function() {};\n    AudioElement.prototype.hide = function() {\n        this.audio.pause();\n        this._isPlaying = false;\n    };\n    AudioElement.prototype.pause = function() {\n        this.audio.pause();\n        this._isPlaying = false;\n        this._canPlay = false;\n    };\n    AudioElement.prototype.resume = function() {\n        this._canPlay = true;\n    };\n    AudioElement.prototype.setRate = function(rateValue) {\n        this.audio.rate(rateValue);\n    };\n    AudioElement.prototype.volume = function(volumeValue) {\n        this._volumeMultiplier = volumeValue;\n        this._previousVolume = volumeValue * this._volume;\n        this.audio.volume(this._previousVolume);\n    };\n    AudioElement.prototype.getBaseElement = function() {\n        return null;\n    };\n    AudioElement.prototype.destroy = function() {};\n    AudioElement.prototype.sourceRectAtTime = function() {};\n    AudioElement.prototype.initExpressions = function() {};\n    function BaseRenderer() {}\n    BaseRenderer.prototype.checkLayers = function(num) {\n        var i;\n        var len = this.layers.length;\n        var data;\n        this.completeLayers = true;\n        for(i = len - 1; i >= 0; i -= 1){\n            if (!this.elements[i]) {\n                data = this.layers[i];\n                if (data.ip - data.st <= num - this.layers[i].st && data.op - data.st > num - this.layers[i].st) {\n                    this.buildItem(i);\n                }\n            }\n            this.completeLayers = this.elements[i] ? this.completeLayers : false;\n        }\n        this.checkPendingElements();\n    };\n    BaseRenderer.prototype.createItem = function(layer) {\n        switch(layer.ty){\n            case 2:\n                return this.createImage(layer);\n            case 0:\n                return this.createComp(layer);\n            case 1:\n                return this.createSolid(layer);\n            case 3:\n                return this.createNull(layer);\n            case 4:\n                return this.createShape(layer);\n            case 5:\n                return this.createText(layer);\n            case 6:\n                return this.createAudio(layer);\n            case 13:\n                return this.createCamera(layer);\n            case 15:\n                return this.createFootage(layer);\n            default:\n                return this.createNull(layer);\n        }\n    };\n    BaseRenderer.prototype.createCamera = function() {\n        throw new Error(\"You're using a 3d camera. Try the html renderer.\");\n    };\n    BaseRenderer.prototype.createAudio = function(data) {\n        return new AudioElement(data, this.globalData, this);\n    };\n    BaseRenderer.prototype.createFootage = function(data) {\n        return new FootageElement(data, this.globalData, this);\n    };\n    BaseRenderer.prototype.buildAllItems = function() {\n        var i;\n        var len = this.layers.length;\n        for(i = 0; i < len; i += 1){\n            this.buildItem(i);\n        }\n        this.checkPendingElements();\n    };\n    BaseRenderer.prototype.includeLayers = function(newLayers) {\n        this.completeLayers = false;\n        var i;\n        var len = newLayers.length;\n        var j;\n        var jLen = this.layers.length;\n        for(i = 0; i < len; i += 1){\n            j = 0;\n            while(j < jLen){\n                if (this.layers[j].id === newLayers[i].id) {\n                    this.layers[j] = newLayers[i];\n                    break;\n                }\n                j += 1;\n            }\n        }\n    };\n    BaseRenderer.prototype.setProjectInterface = function(pInterface) {\n        this.globalData.projectInterface = pInterface;\n    };\n    BaseRenderer.prototype.initItems = function() {\n        if (!this.globalData.progressiveLoad) {\n            this.buildAllItems();\n        }\n    };\n    BaseRenderer.prototype.buildElementParenting = function(element, parentName, hierarchy) {\n        var elements = this.elements;\n        var layers = this.layers;\n        var i = 0;\n        var len = layers.length;\n        while(i < len){\n            if (layers[i].ind == parentName) {\n                // eslint-disable-line eqeqeq\n                if (!elements[i] || elements[i] === true) {\n                    this.buildItem(i);\n                    this.addPendingElement(element);\n                } else {\n                    hierarchy.push(elements[i]);\n                    elements[i].setAsParent();\n                    if (layers[i].parent !== undefined) {\n                        this.buildElementParenting(element, layers[i].parent, hierarchy);\n                    } else {\n                        element.setHierarchy(hierarchy);\n                    }\n                }\n            }\n            i += 1;\n        }\n    };\n    BaseRenderer.prototype.addPendingElement = function(element) {\n        this.pendingElements.push(element);\n    };\n    BaseRenderer.prototype.searchExtraCompositions = function(assets) {\n        var i;\n        var len = assets.length;\n        for(i = 0; i < len; i += 1){\n            if (assets[i].xt) {\n                var comp = this.createComp(assets[i]);\n                comp.initExpressions();\n                this.globalData.projectInterface.registerComposition(comp);\n            }\n        }\n    };\n    BaseRenderer.prototype.getElementById = function(ind) {\n        var i;\n        var len = this.elements.length;\n        for(i = 0; i < len; i += 1){\n            if (this.elements[i].data.ind === ind) {\n                return this.elements[i];\n            }\n        }\n        return null;\n    };\n    BaseRenderer.prototype.getElementByPath = function(path) {\n        var pathValue = path.shift();\n        var element;\n        if (typeof pathValue === \"number\") {\n            element = this.elements[pathValue];\n        } else {\n            var i;\n            var len = this.elements.length;\n            for(i = 0; i < len; i += 1){\n                if (this.elements[i].data.nm === pathValue) {\n                    element = this.elements[i];\n                    break;\n                }\n            }\n        }\n        if (path.length === 0) {\n            return element;\n        }\n        return element.getElementByPath(path);\n    };\n    BaseRenderer.prototype.setupGlobalData = function(animData, fontsContainer) {\n        this.globalData.fontManager = new FontManager();\n        this.globalData.slotManager = slotFactory(animData);\n        this.globalData.fontManager.addChars(animData.chars);\n        this.globalData.fontManager.addFonts(animData.fonts, fontsContainer);\n        this.globalData.getAssetData = this.animationItem.getAssetData.bind(this.animationItem);\n        this.globalData.getAssetsPath = this.animationItem.getAssetsPath.bind(this.animationItem);\n        this.globalData.imageLoader = this.animationItem.imagePreloader;\n        this.globalData.audioController = this.animationItem.audioController;\n        this.globalData.frameId = 0;\n        this.globalData.frameRate = animData.fr;\n        this.globalData.nm = animData.nm;\n        this.globalData.compSize = {\n            w: animData.w,\n            h: animData.h\n        };\n    };\n    var effectTypes = {\n        TRANSFORM_EFFECT: \"transformEFfect\"\n    };\n    function TransformElement() {}\n    TransformElement.prototype = {\n        initTransform: function initTransform() {\n            var mat = new Matrix();\n            this.finalTransform = {\n                mProp: this.data.ks ? TransformPropertyFactory.getTransformProperty(this, this.data.ks, this) : {\n                    o: 0\n                },\n                _matMdf: false,\n                _localMatMdf: false,\n                _opMdf: false,\n                mat: mat,\n                localMat: mat,\n                localOpacity: 1\n            };\n            if (this.data.ao) {\n                this.finalTransform.mProp.autoOriented = true;\n            } // TODO: check TYPE 11: Guided elements\n            if (this.data.ty !== 11) {}\n        },\n        renderTransform: function renderTransform() {\n            this.finalTransform._opMdf = this.finalTransform.mProp.o._mdf || this._isFirstFrame;\n            this.finalTransform._matMdf = this.finalTransform.mProp._mdf || this._isFirstFrame;\n            if (this.hierarchy) {\n                var mat;\n                var finalMat = this.finalTransform.mat;\n                var i = 0;\n                var len = this.hierarchy.length; // Checking if any of the transformation matrices in the hierarchy chain has changed.\n                if (!this.finalTransform._matMdf) {\n                    while(i < len){\n                        if (this.hierarchy[i].finalTransform.mProp._mdf) {\n                            this.finalTransform._matMdf = true;\n                            break;\n                        }\n                        i += 1;\n                    }\n                }\n                if (this.finalTransform._matMdf) {\n                    mat = this.finalTransform.mProp.v.props;\n                    finalMat.cloneFromProps(mat);\n                    for(i = 0; i < len; i += 1){\n                        finalMat.multiply(this.hierarchy[i].finalTransform.mProp.v);\n                    }\n                }\n            }\n            if (this.finalTransform._matMdf) {\n                this.finalTransform._localMatMdf = this.finalTransform._matMdf;\n            }\n            if (this.finalTransform._opMdf) {\n                this.finalTransform.localOpacity = this.finalTransform.mProp.o.v;\n            }\n        },\n        renderLocalTransform: function renderLocalTransform() {\n            if (this.localTransforms) {\n                var i = 0;\n                var len = this.localTransforms.length;\n                this.finalTransform._localMatMdf = this.finalTransform._matMdf;\n                if (!this.finalTransform._localMatMdf || !this.finalTransform._opMdf) {\n                    while(i < len){\n                        if (this.localTransforms[i]._mdf) {\n                            this.finalTransform._localMatMdf = true;\n                        }\n                        if (this.localTransforms[i]._opMdf && !this.finalTransform._opMdf) {\n                            this.finalTransform.localOpacity = this.finalTransform.mProp.o.v;\n                            this.finalTransform._opMdf = true;\n                        }\n                        i += 1;\n                    }\n                }\n                if (this.finalTransform._localMatMdf) {\n                    var localMat = this.finalTransform.localMat;\n                    this.localTransforms[0].matrix.clone(localMat);\n                    for(i = 1; i < len; i += 1){\n                        var lmat = this.localTransforms[i].matrix;\n                        localMat.multiply(lmat);\n                    }\n                    localMat.multiply(this.finalTransform.mat);\n                }\n                if (this.finalTransform._opMdf) {\n                    var localOp = this.finalTransform.localOpacity;\n                    for(i = 0; i < len; i += 1){\n                        localOp *= this.localTransforms[i].opacity * 0.01;\n                    }\n                    this.finalTransform.localOpacity = localOp;\n                }\n            }\n        },\n        searchEffectTransforms: function searchEffectTransforms() {\n            if (this.renderableEffectsManager) {\n                var transformEffects = this.renderableEffectsManager.getEffects(effectTypes.TRANSFORM_EFFECT);\n                if (transformEffects.length) {\n                    this.localTransforms = [];\n                    this.finalTransform.localMat = new Matrix();\n                    var i = 0;\n                    var len = transformEffects.length;\n                    for(i = 0; i < len; i += 1){\n                        this.localTransforms.push(transformEffects[i]);\n                    }\n                }\n            }\n        },\n        globalToLocal: function globalToLocal(pt) {\n            var transforms = [];\n            transforms.push(this.finalTransform);\n            var flag = true;\n            var comp = this.comp;\n            while(flag){\n                if (comp.finalTransform) {\n                    if (comp.data.hasMask) {\n                        transforms.splice(0, 0, comp.finalTransform);\n                    }\n                    comp = comp.comp;\n                } else {\n                    flag = false;\n                }\n            }\n            var i;\n            var len = transforms.length;\n            var ptNew;\n            for(i = 0; i < len; i += 1){\n                ptNew = transforms[i].mat.applyToPointArray(0, 0, 0); // ptNew = transforms[i].mat.applyToPointArray(pt[0],pt[1],pt[2]);\n                pt = [\n                    pt[0] - ptNew[0],\n                    pt[1] - ptNew[1],\n                    0\n                ];\n            }\n            return pt;\n        },\n        mHelper: new Matrix()\n    };\n    function MaskElement(data, element, globalData) {\n        this.data = data;\n        this.element = element;\n        this.globalData = globalData;\n        this.storedData = [];\n        this.masksProperties = this.data.masksProperties || [];\n        this.maskElement = null;\n        var defs = this.globalData.defs;\n        var i;\n        var len = this.masksProperties ? this.masksProperties.length : 0;\n        this.viewData = createSizedArray(len);\n        this.solidPath = \"\";\n        var path;\n        var properties = this.masksProperties;\n        var count = 0;\n        var currentMasks = [];\n        var j;\n        var jLen;\n        var layerId = createElementID();\n        var rect;\n        var expansor;\n        var feMorph;\n        var x;\n        var maskType = \"clipPath\";\n        var maskRef = \"clip-path\";\n        for(i = 0; i < len; i += 1){\n            if (properties[i].mode !== \"a\" && properties[i].mode !== \"n\" || properties[i].inv || properties[i].o.k !== 100 || properties[i].o.x) {\n                maskType = \"mask\";\n                maskRef = \"mask\";\n            }\n            if ((properties[i].mode === \"s\" || properties[i].mode === \"i\") && count === 0) {\n                rect = createNS(\"rect\");\n                rect.setAttribute(\"fill\", \"#ffffff\");\n                rect.setAttribute(\"width\", this.element.comp.data.w || 0);\n                rect.setAttribute(\"height\", this.element.comp.data.h || 0);\n                currentMasks.push(rect);\n            } else {\n                rect = null;\n            }\n            path = createNS(\"path\");\n            if (properties[i].mode === \"n\") {\n                // TODO move this to a factory or to a constructor\n                this.viewData[i] = {\n                    op: PropertyFactory.getProp(this.element, properties[i].o, 0, 0.01, this.element),\n                    prop: ShapePropertyFactory.getShapeProp(this.element, properties[i], 3),\n                    elem: path,\n                    lastPath: \"\"\n                };\n                defs.appendChild(path);\n            } else {\n                count += 1;\n                path.setAttribute(\"fill\", properties[i].mode === \"s\" ? \"#000000\" : \"#ffffff\");\n                path.setAttribute(\"clip-rule\", \"nonzero\");\n                var filterID;\n                if (properties[i].x.k !== 0) {\n                    maskType = \"mask\";\n                    maskRef = \"mask\";\n                    x = PropertyFactory.getProp(this.element, properties[i].x, 0, null, this.element);\n                    filterID = createElementID();\n                    expansor = createNS(\"filter\");\n                    expansor.setAttribute(\"id\", filterID);\n                    feMorph = createNS(\"feMorphology\");\n                    feMorph.setAttribute(\"operator\", \"erode\");\n                    feMorph.setAttribute(\"in\", \"SourceGraphic\");\n                    feMorph.setAttribute(\"radius\", \"0\");\n                    expansor.appendChild(feMorph);\n                    defs.appendChild(expansor);\n                    path.setAttribute(\"stroke\", properties[i].mode === \"s\" ? \"#000000\" : \"#ffffff\");\n                } else {\n                    feMorph = null;\n                    x = null;\n                } // TODO move this to a factory or to a constructor\n                this.storedData[i] = {\n                    elem: path,\n                    x: x,\n                    expan: feMorph,\n                    lastPath: \"\",\n                    lastOperator: \"\",\n                    filterId: filterID,\n                    lastRadius: 0\n                };\n                if (properties[i].mode === \"i\") {\n                    jLen = currentMasks.length;\n                    var g = createNS(\"g\");\n                    for(j = 0; j < jLen; j += 1){\n                        g.appendChild(currentMasks[j]);\n                    }\n                    var mask = createNS(\"mask\");\n                    mask.setAttribute(\"mask-type\", \"alpha\");\n                    mask.setAttribute(\"id\", layerId + \"_\" + count);\n                    mask.appendChild(path);\n                    defs.appendChild(mask);\n                    g.setAttribute(\"mask\", \"url(\" + getLocationHref() + \"#\" + layerId + \"_\" + count + \")\");\n                    currentMasks.length = 0;\n                    currentMasks.push(g);\n                } else {\n                    currentMasks.push(path);\n                }\n                if (properties[i].inv && !this.solidPath) {\n                    this.solidPath = this.createLayerSolidPath();\n                } // TODO move this to a factory or to a constructor\n                this.viewData[i] = {\n                    elem: path,\n                    lastPath: \"\",\n                    op: PropertyFactory.getProp(this.element, properties[i].o, 0, 0.01, this.element),\n                    prop: ShapePropertyFactory.getShapeProp(this.element, properties[i], 3),\n                    invRect: rect\n                };\n                if (!this.viewData[i].prop.k) {\n                    this.drawPath(properties[i], this.viewData[i].prop.v, this.viewData[i]);\n                }\n            }\n        }\n        this.maskElement = createNS(maskType);\n        len = currentMasks.length;\n        for(i = 0; i < len; i += 1){\n            this.maskElement.appendChild(currentMasks[i]);\n        }\n        if (count > 0) {\n            this.maskElement.setAttribute(\"id\", layerId);\n            this.element.maskedElement.setAttribute(maskRef, \"url(\" + getLocationHref() + \"#\" + layerId + \")\");\n            defs.appendChild(this.maskElement);\n        }\n        if (this.viewData.length) {\n            this.element.addRenderableComponent(this);\n        }\n    }\n    MaskElement.prototype.getMaskProperty = function(pos) {\n        return this.viewData[pos].prop;\n    };\n    MaskElement.prototype.renderFrame = function(isFirstFrame) {\n        var finalMat = this.element.finalTransform.mat;\n        var i;\n        var len = this.masksProperties.length;\n        for(i = 0; i < len; i += 1){\n            if (this.viewData[i].prop._mdf || isFirstFrame) {\n                this.drawPath(this.masksProperties[i], this.viewData[i].prop.v, this.viewData[i]);\n            }\n            if (this.viewData[i].op._mdf || isFirstFrame) {\n                this.viewData[i].elem.setAttribute(\"fill-opacity\", this.viewData[i].op.v);\n            }\n            if (this.masksProperties[i].mode !== \"n\") {\n                if (this.viewData[i].invRect && (this.element.finalTransform.mProp._mdf || isFirstFrame)) {\n                    this.viewData[i].invRect.setAttribute(\"transform\", finalMat.getInverseMatrix().to2dCSS());\n                }\n                if (this.storedData[i].x && (this.storedData[i].x._mdf || isFirstFrame)) {\n                    var feMorph = this.storedData[i].expan;\n                    if (this.storedData[i].x.v < 0) {\n                        if (this.storedData[i].lastOperator !== \"erode\") {\n                            this.storedData[i].lastOperator = \"erode\";\n                            this.storedData[i].elem.setAttribute(\"filter\", \"url(\" + getLocationHref() + \"#\" + this.storedData[i].filterId + \")\");\n                        }\n                        feMorph.setAttribute(\"radius\", -this.storedData[i].x.v);\n                    } else {\n                        if (this.storedData[i].lastOperator !== \"dilate\") {\n                            this.storedData[i].lastOperator = \"dilate\";\n                            this.storedData[i].elem.setAttribute(\"filter\", null);\n                        }\n                        this.storedData[i].elem.setAttribute(\"stroke-width\", this.storedData[i].x.v * 2);\n                    }\n                }\n            }\n        }\n    };\n    MaskElement.prototype.getMaskelement = function() {\n        return this.maskElement;\n    };\n    MaskElement.prototype.createLayerSolidPath = function() {\n        var path = \"M0,0 \";\n        path += \" h\" + this.globalData.compSize.w;\n        path += \" v\" + this.globalData.compSize.h;\n        path += \" h-\" + this.globalData.compSize.w;\n        path += \" v-\" + this.globalData.compSize.h + \" \";\n        return path;\n    };\n    MaskElement.prototype.drawPath = function(pathData, pathNodes, viewData) {\n        var pathString = \" M\" + pathNodes.v[0][0] + \",\" + pathNodes.v[0][1];\n        var i;\n        var len;\n        len = pathNodes._length;\n        for(i = 1; i < len; i += 1){\n            // pathString += \" C\"+pathNodes.o[i-1][0]+','+pathNodes.o[i-1][1] + \" \"+pathNodes.i[i][0]+','+pathNodes.i[i][1] + \" \"+pathNodes.v[i][0]+','+pathNodes.v[i][1];\n            pathString += \" C\" + pathNodes.o[i - 1][0] + \",\" + pathNodes.o[i - 1][1] + \" \" + pathNodes.i[i][0] + \",\" + pathNodes.i[i][1] + \" \" + pathNodes.v[i][0] + \",\" + pathNodes.v[i][1];\n        } // pathString += \" C\"+pathNodes.o[i-1][0]+','+pathNodes.o[i-1][1] + \" \"+pathNodes.i[0][0]+','+pathNodes.i[0][1] + \" \"+pathNodes.v[0][0]+','+pathNodes.v[0][1];\n        if (pathNodes.c && len > 1) {\n            pathString += \" C\" + pathNodes.o[i - 1][0] + \",\" + pathNodes.o[i - 1][1] + \" \" + pathNodes.i[0][0] + \",\" + pathNodes.i[0][1] + \" \" + pathNodes.v[0][0] + \",\" + pathNodes.v[0][1];\n        } // pathNodes.__renderedString = pathString;\n        if (viewData.lastPath !== pathString) {\n            var pathShapeValue = \"\";\n            if (viewData.elem) {\n                if (pathNodes.c) {\n                    pathShapeValue = pathData.inv ? this.solidPath + pathString : pathString;\n                }\n                viewData.elem.setAttribute(\"d\", pathShapeValue);\n            }\n            viewData.lastPath = pathString;\n        }\n    };\n    MaskElement.prototype.destroy = function() {\n        this.element = null;\n        this.globalData = null;\n        this.maskElement = null;\n        this.data = null;\n        this.masksProperties = null;\n    };\n    var filtersFactory = function() {\n        var ob = {};\n        ob.createFilter = createFilter;\n        ob.createAlphaToLuminanceFilter = createAlphaToLuminanceFilter;\n        function createFilter(filId, skipCoordinates) {\n            var fil = createNS(\"filter\");\n            fil.setAttribute(\"id\", filId);\n            if (skipCoordinates !== true) {\n                fil.setAttribute(\"filterUnits\", \"objectBoundingBox\");\n                fil.setAttribute(\"x\", \"0%\");\n                fil.setAttribute(\"y\", \"0%\");\n                fil.setAttribute(\"width\", \"100%\");\n                fil.setAttribute(\"height\", \"100%\");\n            }\n            return fil;\n        }\n        function createAlphaToLuminanceFilter() {\n            var feColorMatrix = createNS(\"feColorMatrix\");\n            feColorMatrix.setAttribute(\"type\", \"matrix\");\n            feColorMatrix.setAttribute(\"color-interpolation-filters\", \"sRGB\");\n            feColorMatrix.setAttribute(\"values\", \"0 0 0 1 0  0 0 0 1 0  0 0 0 1 0  0 0 0 1 1\");\n            return feColorMatrix;\n        }\n        return ob;\n    }();\n    var featureSupport = function() {\n        var ob = {\n            maskType: true,\n            svgLumaHidden: true,\n            offscreenCanvas: typeof OffscreenCanvas !== \"undefined\"\n        };\n        if (/MSIE 10/i.test(navigator.userAgent) || /MSIE 9/i.test(navigator.userAgent) || /rv:11.0/i.test(navigator.userAgent) || /Edge\\/\\d./i.test(navigator.userAgent)) {\n            ob.maskType = false;\n        }\n        if (/firefox/i.test(navigator.userAgent)) {\n            ob.svgLumaHidden = false;\n        }\n        return ob;\n    }();\n    var registeredEffects$1 = {};\n    var idPrefix = \"filter_result_\";\n    function SVGEffects(elem) {\n        var i;\n        var source = \"SourceGraphic\";\n        var len = elem.data.ef ? elem.data.ef.length : 0;\n        var filId = createElementID();\n        var fil = filtersFactory.createFilter(filId, true);\n        var count = 0;\n        this.filters = [];\n        var filterManager;\n        for(i = 0; i < len; i += 1){\n            filterManager = null;\n            var type = elem.data.ef[i].ty;\n            if (registeredEffects$1[type]) {\n                var Effect = registeredEffects$1[type].effect;\n                filterManager = new Effect(fil, elem.effectsManager.effectElements[i], elem, idPrefix + count, source);\n                source = idPrefix + count;\n                if (registeredEffects$1[type].countsAsEffect) {\n                    count += 1;\n                }\n            }\n            if (filterManager) {\n                this.filters.push(filterManager);\n            }\n        }\n        if (count) {\n            elem.globalData.defs.appendChild(fil);\n            elem.layerElement.setAttribute(\"filter\", \"url(\" + getLocationHref() + \"#\" + filId + \")\");\n        }\n        if (this.filters.length) {\n            elem.addRenderableComponent(this);\n        }\n    }\n    SVGEffects.prototype.renderFrame = function(_isFirstFrame) {\n        var i;\n        var len = this.filters.length;\n        for(i = 0; i < len; i += 1){\n            this.filters[i].renderFrame(_isFirstFrame);\n        }\n    };\n    SVGEffects.prototype.getEffects = function(type) {\n        var i;\n        var len = this.filters.length;\n        var effects = [];\n        for(i = 0; i < len; i += 1){\n            if (this.filters[i].type === type) {\n                effects.push(this.filters[i]);\n            }\n        }\n        return effects;\n    };\n    function registerEffect$1(id, effect, countsAsEffect) {\n        registeredEffects$1[id] = {\n            effect: effect,\n            countsAsEffect: countsAsEffect\n        };\n    }\n    function SVGBaseElement() {}\n    SVGBaseElement.prototype = {\n        initRendererElement: function initRendererElement() {\n            this.layerElement = createNS(\"g\");\n        },\n        createContainerElements: function createContainerElements() {\n            this.matteElement = createNS(\"g\");\n            this.transformedElement = this.layerElement;\n            this.maskedElement = this.layerElement;\n            this._sizeChanged = false;\n            var layerElementParent = null; // If this layer acts as a mask for the following layer\n            if (this.data.td) {\n                this.matteMasks = {};\n                var gg = createNS(\"g\");\n                gg.setAttribute(\"id\", this.layerId);\n                gg.appendChild(this.layerElement);\n                layerElementParent = gg;\n                this.globalData.defs.appendChild(gg);\n            } else if (this.data.tt) {\n                this.matteElement.appendChild(this.layerElement);\n                layerElementParent = this.matteElement;\n                this.baseElement = this.matteElement;\n            } else {\n                this.baseElement = this.layerElement;\n            }\n            if (this.data.ln) {\n                this.layerElement.setAttribute(\"id\", this.data.ln);\n            }\n            if (this.data.cl) {\n                this.layerElement.setAttribute(\"class\", this.data.cl);\n            } // Clipping compositions to hide content that exceeds boundaries. If collapsed transformations is on, component should not be clipped\n            if (this.data.ty === 0 && !this.data.hd) {\n                var cp = createNS(\"clipPath\");\n                var pt = createNS(\"path\");\n                pt.setAttribute(\"d\", \"M0,0 L\" + this.data.w + \",0 L\" + this.data.w + \",\" + this.data.h + \" L0,\" + this.data.h + \"z\");\n                var clipId = createElementID();\n                cp.setAttribute(\"id\", clipId);\n                cp.appendChild(pt);\n                this.globalData.defs.appendChild(cp);\n                if (this.checkMasks()) {\n                    var cpGroup = createNS(\"g\");\n                    cpGroup.setAttribute(\"clip-path\", \"url(\" + getLocationHref() + \"#\" + clipId + \")\");\n                    cpGroup.appendChild(this.layerElement);\n                    this.transformedElement = cpGroup;\n                    if (layerElementParent) {\n                        layerElementParent.appendChild(this.transformedElement);\n                    } else {\n                        this.baseElement = this.transformedElement;\n                    }\n                } else {\n                    this.layerElement.setAttribute(\"clip-path\", \"url(\" + getLocationHref() + \"#\" + clipId + \")\");\n                }\n            }\n            if (this.data.bm !== 0) {\n                this.setBlendMode();\n            }\n        },\n        renderElement: function renderElement() {\n            if (this.finalTransform._localMatMdf) {\n                this.transformedElement.setAttribute(\"transform\", this.finalTransform.localMat.to2dCSS());\n            }\n            if (this.finalTransform._opMdf) {\n                this.transformedElement.setAttribute(\"opacity\", this.finalTransform.localOpacity);\n            }\n        },\n        destroyBaseElement: function destroyBaseElement() {\n            this.layerElement = null;\n            this.matteElement = null;\n            this.maskManager.destroy();\n        },\n        getBaseElement: function getBaseElement() {\n            if (this.data.hd) {\n                return null;\n            }\n            return this.baseElement;\n        },\n        createRenderableComponents: function createRenderableComponents() {\n            this.maskManager = new MaskElement(this.data, this, this.globalData);\n            this.renderableEffectsManager = new SVGEffects(this);\n            this.searchEffectTransforms();\n        },\n        getMatte: function getMatte(matteType) {\n            // This should not be a common case. But for backward compatibility, we'll create the matte object.\n            // It solves animations that have two consecutive layers marked as matte masks.\n            // Which is an undefined behavior in AE.\n            if (!this.matteMasks) {\n                this.matteMasks = {};\n            }\n            if (!this.matteMasks[matteType]) {\n                var id = this.layerId + \"_\" + matteType;\n                var filId;\n                var fil;\n                var useElement;\n                var gg;\n                if (matteType === 1 || matteType === 3) {\n                    var masker = createNS(\"mask\");\n                    masker.setAttribute(\"id\", id);\n                    masker.setAttribute(\"mask-type\", matteType === 3 ? \"luminance\" : \"alpha\");\n                    useElement = createNS(\"use\");\n                    useElement.setAttributeNS(\"http://www.w3.org/1999/xlink\", \"href\", \"#\" + this.layerId);\n                    masker.appendChild(useElement);\n                    this.globalData.defs.appendChild(masker);\n                    if (!featureSupport.maskType && matteType === 1) {\n                        masker.setAttribute(\"mask-type\", \"luminance\");\n                        filId = createElementID();\n                        fil = filtersFactory.createFilter(filId);\n                        this.globalData.defs.appendChild(fil);\n                        fil.appendChild(filtersFactory.createAlphaToLuminanceFilter());\n                        gg = createNS(\"g\");\n                        gg.appendChild(useElement);\n                        masker.appendChild(gg);\n                        gg.setAttribute(\"filter\", \"url(\" + getLocationHref() + \"#\" + filId + \")\");\n                    }\n                } else if (matteType === 2) {\n                    var maskGroup = createNS(\"mask\");\n                    maskGroup.setAttribute(\"id\", id);\n                    maskGroup.setAttribute(\"mask-type\", \"alpha\");\n                    var maskGrouper = createNS(\"g\");\n                    maskGroup.appendChild(maskGrouper);\n                    filId = createElementID();\n                    fil = filtersFactory.createFilter(filId); /// /\n                    var feCTr = createNS(\"feComponentTransfer\");\n                    feCTr.setAttribute(\"in\", \"SourceGraphic\");\n                    fil.appendChild(feCTr);\n                    var feFunc = createNS(\"feFuncA\");\n                    feFunc.setAttribute(\"type\", \"table\");\n                    feFunc.setAttribute(\"tableValues\", \"1.0 0.0\");\n                    feCTr.appendChild(feFunc); /// /\n                    this.globalData.defs.appendChild(fil);\n                    var alphaRect = createNS(\"rect\");\n                    alphaRect.setAttribute(\"width\", this.comp.data.w);\n                    alphaRect.setAttribute(\"height\", this.comp.data.h);\n                    alphaRect.setAttribute(\"x\", \"0\");\n                    alphaRect.setAttribute(\"y\", \"0\");\n                    alphaRect.setAttribute(\"fill\", \"#ffffff\");\n                    alphaRect.setAttribute(\"opacity\", \"0\");\n                    maskGrouper.setAttribute(\"filter\", \"url(\" + getLocationHref() + \"#\" + filId + \")\");\n                    maskGrouper.appendChild(alphaRect);\n                    useElement = createNS(\"use\");\n                    useElement.setAttributeNS(\"http://www.w3.org/1999/xlink\", \"href\", \"#\" + this.layerId);\n                    maskGrouper.appendChild(useElement);\n                    if (!featureSupport.maskType) {\n                        maskGroup.setAttribute(\"mask-type\", \"luminance\");\n                        fil.appendChild(filtersFactory.createAlphaToLuminanceFilter());\n                        gg = createNS(\"g\");\n                        maskGrouper.appendChild(alphaRect);\n                        gg.appendChild(this.layerElement);\n                        maskGrouper.appendChild(gg);\n                    }\n                    this.globalData.defs.appendChild(maskGroup);\n                }\n                this.matteMasks[matteType] = id;\n            }\n            return this.matteMasks[matteType];\n        },\n        setMatte: function setMatte(id) {\n            if (!this.matteElement) {\n                return;\n            }\n            this.matteElement.setAttribute(\"mask\", \"url(\" + getLocationHref() + \"#\" + id + \")\");\n        }\n    };\n    /**\r\n   * @file\r\n   * Handles AE's layer parenting property.\r\n   *\r\n   */ function HierarchyElement() {}\n    HierarchyElement.prototype = {\n        /**\r\n       * @function\r\n       * Initializes hierarchy properties\r\n       *\r\n       */ initHierarchy: function initHierarchy() {\n            // element's parent list\n            this.hierarchy = []; // if element is parent of another layer _isParent will be true\n            this._isParent = false;\n            this.checkParenting();\n        },\n        /**\r\n       * @function\r\n       * Sets layer's hierarchy.\r\n       * @param {array} hierarch\r\n       * layer's parent list\r\n       *\r\n       */ setHierarchy: function setHierarchy(hierarchy) {\n            this.hierarchy = hierarchy;\n        },\n        /**\r\n       * @function\r\n       * Sets layer as parent.\r\n       *\r\n       */ setAsParent: function setAsParent() {\n            this._isParent = true;\n        },\n        /**\r\n       * @function\r\n       * Searches layer's parenting chain\r\n       *\r\n       */ checkParenting: function checkParenting() {\n            if (this.data.parent !== undefined) {\n                this.comp.buildElementParenting(this, this.data.parent, []);\n            }\n        }\n    };\n    function RenderableDOMElement() {}\n    (function() {\n        var _prototype = {\n            initElement: function initElement(data, globalData, comp) {\n                this.initFrame();\n                this.initBaseData(data, globalData, comp);\n                this.initTransform(data, globalData, comp);\n                this.initHierarchy();\n                this.initRenderable();\n                this.initRendererElement();\n                this.createContainerElements();\n                this.createRenderableComponents();\n                this.createContent();\n                this.hide();\n            },\n            hide: function hide() {\n                // console.log('HIDE', this);\n                if (!this.hidden && (!this.isInRange || this.isTransparent)) {\n                    var elem = this.baseElement || this.layerElement;\n                    elem.style.display = \"none\";\n                    this.hidden = true;\n                }\n            },\n            show: function show() {\n                // console.log('SHOW', this);\n                if (this.isInRange && !this.isTransparent) {\n                    if (!this.data.hd) {\n                        var elem = this.baseElement || this.layerElement;\n                        elem.style.display = \"block\";\n                    }\n                    this.hidden = false;\n                    this._isFirstFrame = true;\n                }\n            },\n            renderFrame: function renderFrame() {\n                // If it is exported as hidden (data.hd === true) no need to render\n                // If it is not visible no need to render\n                if (this.data.hd || this.hidden) {\n                    return;\n                }\n                this.renderTransform();\n                this.renderRenderable();\n                this.renderLocalTransform();\n                this.renderElement();\n                this.renderInnerContent();\n                if (this._isFirstFrame) {\n                    this._isFirstFrame = false;\n                }\n            },\n            renderInnerContent: function renderInnerContent() {},\n            prepareFrame: function prepareFrame(num) {\n                this._mdf = false;\n                this.prepareRenderableFrame(num);\n                this.prepareProperties(num, this.isInRange);\n                this.checkTransparency();\n            },\n            destroy: function destroy() {\n                this.innerElem = null;\n                this.destroyBaseElement();\n            }\n        };\n        extendPrototype([\n            RenderableElement,\n            createProxyFunction(_prototype)\n        ], RenderableDOMElement);\n    })();\n    function IImageElement(data, globalData, comp) {\n        this.assetData = globalData.getAssetData(data.refId);\n        if (this.assetData && this.assetData.sid) {\n            this.assetData = globalData.slotManager.getProp(this.assetData);\n        }\n        this.initElement(data, globalData, comp);\n        this.sourceRect = {\n            top: 0,\n            left: 0,\n            width: this.assetData.w,\n            height: this.assetData.h\n        };\n    }\n    extendPrototype([\n        BaseElement,\n        TransformElement,\n        SVGBaseElement,\n        HierarchyElement,\n        FrameElement,\n        RenderableDOMElement\n    ], IImageElement);\n    IImageElement.prototype.createContent = function() {\n        var assetPath = this.globalData.getAssetsPath(this.assetData);\n        this.innerElem = createNS(\"image\");\n        this.innerElem.setAttribute(\"width\", this.assetData.w + \"px\");\n        this.innerElem.setAttribute(\"height\", this.assetData.h + \"px\");\n        this.innerElem.setAttribute(\"preserveAspectRatio\", this.assetData.pr || this.globalData.renderConfig.imagePreserveAspectRatio);\n        this.innerElem.setAttributeNS(\"http://www.w3.org/1999/xlink\", \"href\", assetPath);\n        this.layerElement.appendChild(this.innerElem);\n    };\n    IImageElement.prototype.sourceRectAtTime = function() {\n        return this.sourceRect;\n    };\n    function ProcessedElement(element, position) {\n        this.elem = element;\n        this.pos = position;\n    }\n    function IShapeElement() {}\n    IShapeElement.prototype = {\n        addShapeToModifiers: function addShapeToModifiers(data) {\n            var i;\n            var len = this.shapeModifiers.length;\n            for(i = 0; i < len; i += 1){\n                this.shapeModifiers[i].addShape(data);\n            }\n        },\n        isShapeInAnimatedModifiers: function isShapeInAnimatedModifiers(data) {\n            var i = 0;\n            var len = this.shapeModifiers.length;\n            while(i < len){\n                if (this.shapeModifiers[i].isAnimatedWithShape(data)) {\n                    return true;\n                }\n            }\n            return false;\n        },\n        renderModifiers: function renderModifiers() {\n            if (!this.shapeModifiers.length) {\n                return;\n            }\n            var i;\n            var len = this.shapes.length;\n            for(i = 0; i < len; i += 1){\n                this.shapes[i].sh.reset();\n            }\n            len = this.shapeModifiers.length;\n            var shouldBreakProcess;\n            for(i = len - 1; i >= 0; i -= 1){\n                shouldBreakProcess = this.shapeModifiers[i].processShapes(this._isFirstFrame); // workaround to fix cases where a repeater resets the shape so the following processes get called twice\n                // TODO: find a better solution for this\n                if (shouldBreakProcess) {\n                    break;\n                }\n            }\n        },\n        searchProcessedElement: function searchProcessedElement(elem) {\n            var elements = this.processedElements;\n            var i = 0;\n            var len = elements.length;\n            while(i < len){\n                if (elements[i].elem === elem) {\n                    return elements[i].pos;\n                }\n                i += 1;\n            }\n            return 0;\n        },\n        addProcessedElement: function addProcessedElement(elem, pos) {\n            var elements = this.processedElements;\n            var i = elements.length;\n            while(i){\n                i -= 1;\n                if (elements[i].elem === elem) {\n                    elements[i].pos = pos;\n                    return;\n                }\n            }\n            elements.push(new ProcessedElement(elem, pos));\n        },\n        prepareFrame: function prepareFrame(num) {\n            this.prepareRenderableFrame(num);\n            this.prepareProperties(num, this.isInRange);\n        }\n    };\n    var lineCapEnum = {\n        1: \"butt\",\n        2: \"round\",\n        3: \"square\"\n    };\n    var lineJoinEnum = {\n        1: \"miter\",\n        2: \"round\",\n        3: \"bevel\"\n    };\n    function SVGShapeData(transformers, level, shape) {\n        this.caches = [];\n        this.styles = [];\n        this.transformers = transformers;\n        this.lStr = \"\";\n        this.sh = shape;\n        this.lvl = level; // TODO find if there are some cases where _isAnimated can be false.\n        // For now, since shapes add up with other shapes. They have to be calculated every time.\n        // One way of finding out is checking if all styles associated to this shape depend only of this shape\n        this._isAnimated = !!shape.k; // TODO: commenting this for now since all shapes are animated\n        var i = 0;\n        var len = transformers.length;\n        while(i < len){\n            if (transformers[i].mProps.dynamicProperties.length) {\n                this._isAnimated = true;\n                break;\n            }\n            i += 1;\n        }\n    }\n    SVGShapeData.prototype.setAsAnimated = function() {\n        this._isAnimated = true;\n    };\n    function SVGStyleData(data, level) {\n        this.data = data;\n        this.type = data.ty;\n        this.d = \"\";\n        this.lvl = level;\n        this._mdf = false;\n        this.closed = data.hd === true;\n        this.pElem = createNS(\"path\");\n        this.msElem = null;\n    }\n    SVGStyleData.prototype.reset = function() {\n        this.d = \"\";\n        this._mdf = false;\n    };\n    function DashProperty(elem, data, renderer, container) {\n        this.elem = elem;\n        this.frameId = -1;\n        this.dataProps = createSizedArray(data.length);\n        this.renderer = renderer;\n        this.k = false;\n        this.dashStr = \"\";\n        this.dashArray = createTypedArray(\"float32\", data.length ? data.length - 1 : 0);\n        this.dashoffset = createTypedArray(\"float32\", 1);\n        this.initDynamicPropertyContainer(container);\n        var i;\n        var len = data.length || 0;\n        var prop;\n        for(i = 0; i < len; i += 1){\n            prop = PropertyFactory.getProp(elem, data[i].v, 0, 0, this);\n            this.k = prop.k || this.k;\n            this.dataProps[i] = {\n                n: data[i].n,\n                p: prop\n            };\n        }\n        if (!this.k) {\n            this.getValue(true);\n        }\n        this._isAnimated = this.k;\n    }\n    DashProperty.prototype.getValue = function(forceRender) {\n        if (this.elem.globalData.frameId === this.frameId && !forceRender) {\n            return;\n        }\n        this.frameId = this.elem.globalData.frameId;\n        this.iterateDynamicProperties();\n        this._mdf = this._mdf || forceRender;\n        if (this._mdf) {\n            var i = 0;\n            var len = this.dataProps.length;\n            if (this.renderer === \"svg\") {\n                this.dashStr = \"\";\n            }\n            for(i = 0; i < len; i += 1){\n                if (this.dataProps[i].n !== \"o\") {\n                    if (this.renderer === \"svg\") {\n                        this.dashStr += \" \" + this.dataProps[i].p.v;\n                    } else {\n                        this.dashArray[i] = this.dataProps[i].p.v;\n                    }\n                } else {\n                    this.dashoffset[0] = this.dataProps[i].p.v;\n                }\n            }\n        }\n    };\n    extendPrototype([\n        DynamicPropertyContainer\n    ], DashProperty);\n    function SVGStrokeStyleData(elem, data, styleOb) {\n        this.initDynamicPropertyContainer(elem);\n        this.getValue = this.iterateDynamicProperties;\n        this.o = PropertyFactory.getProp(elem, data.o, 0, 0.01, this);\n        this.w = PropertyFactory.getProp(elem, data.w, 0, null, this);\n        this.d = new DashProperty(elem, data.d || {}, \"svg\", this);\n        this.c = PropertyFactory.getProp(elem, data.c, 1, 255, this);\n        this.style = styleOb;\n        this._isAnimated = !!this._isAnimated;\n    }\n    extendPrototype([\n        DynamicPropertyContainer\n    ], SVGStrokeStyleData);\n    function SVGFillStyleData(elem, data, styleOb) {\n        this.initDynamicPropertyContainer(elem);\n        this.getValue = this.iterateDynamicProperties;\n        this.o = PropertyFactory.getProp(elem, data.o, 0, 0.01, this);\n        this.c = PropertyFactory.getProp(elem, data.c, 1, 255, this);\n        this.style = styleOb;\n    }\n    extendPrototype([\n        DynamicPropertyContainer\n    ], SVGFillStyleData);\n    function SVGNoStyleData(elem, data, styleOb) {\n        this.initDynamicPropertyContainer(elem);\n        this.getValue = this.iterateDynamicProperties;\n        this.style = styleOb;\n    }\n    extendPrototype([\n        DynamicPropertyContainer\n    ], SVGNoStyleData);\n    function GradientProperty(elem, data, container) {\n        this.data = data;\n        this.c = createTypedArray(\"uint8c\", data.p * 4);\n        var cLength = data.k.k[0].s ? data.k.k[0].s.length - data.p * 4 : data.k.k.length - data.p * 4;\n        this.o = createTypedArray(\"float32\", cLength);\n        this._cmdf = false;\n        this._omdf = false;\n        this._collapsable = this.checkCollapsable();\n        this._hasOpacity = cLength;\n        this.initDynamicPropertyContainer(container);\n        this.prop = PropertyFactory.getProp(elem, data.k, 1, null, this);\n        this.k = this.prop.k;\n        this.getValue(true);\n    }\n    GradientProperty.prototype.comparePoints = function(values, points) {\n        var i = 0;\n        var len = this.o.length / 2;\n        var diff;\n        while(i < len){\n            diff = Math.abs(values[i * 4] - values[points * 4 + i * 2]);\n            if (diff > 0.01) {\n                return false;\n            }\n            i += 1;\n        }\n        return true;\n    };\n    GradientProperty.prototype.checkCollapsable = function() {\n        if (this.o.length / 2 !== this.c.length / 4) {\n            return false;\n        }\n        if (this.data.k.k[0].s) {\n            var i = 0;\n            var len = this.data.k.k.length;\n            while(i < len){\n                if (!this.comparePoints(this.data.k.k[i].s, this.data.p)) {\n                    return false;\n                }\n                i += 1;\n            }\n        } else if (!this.comparePoints(this.data.k.k, this.data.p)) {\n            return false;\n        }\n        return true;\n    };\n    GradientProperty.prototype.getValue = function(forceRender) {\n        this.prop.getValue();\n        this._mdf = false;\n        this._cmdf = false;\n        this._omdf = false;\n        if (this.prop._mdf || forceRender) {\n            var i;\n            var len = this.data.p * 4;\n            var mult;\n            var val;\n            for(i = 0; i < len; i += 1){\n                mult = i % 4 === 0 ? 100 : 255;\n                val = Math.round(this.prop.v[i] * mult);\n                if (this.c[i] !== val) {\n                    this.c[i] = val;\n                    this._cmdf = !forceRender;\n                }\n            }\n            if (this.o.length) {\n                len = this.prop.v.length;\n                for(i = this.data.p * 4; i < len; i += 1){\n                    mult = i % 2 === 0 ? 100 : 1;\n                    val = i % 2 === 0 ? Math.round(this.prop.v[i] * 100) : this.prop.v[i];\n                    if (this.o[i - this.data.p * 4] !== val) {\n                        this.o[i - this.data.p * 4] = val;\n                        this._omdf = !forceRender;\n                    }\n                }\n            }\n            this._mdf = !forceRender;\n        }\n    };\n    extendPrototype([\n        DynamicPropertyContainer\n    ], GradientProperty);\n    function SVGGradientFillStyleData(elem, data, styleOb) {\n        this.initDynamicPropertyContainer(elem);\n        this.getValue = this.iterateDynamicProperties;\n        this.initGradientData(elem, data, styleOb);\n    }\n    SVGGradientFillStyleData.prototype.initGradientData = function(elem, data, styleOb) {\n        this.o = PropertyFactory.getProp(elem, data.o, 0, 0.01, this);\n        this.s = PropertyFactory.getProp(elem, data.s, 1, null, this);\n        this.e = PropertyFactory.getProp(elem, data.e, 1, null, this);\n        this.h = PropertyFactory.getProp(elem, data.h || {\n            k: 0\n        }, 0, 0.01, this);\n        this.a = PropertyFactory.getProp(elem, data.a || {\n            k: 0\n        }, 0, degToRads, this);\n        this.g = new GradientProperty(elem, data.g, this);\n        this.style = styleOb;\n        this.stops = [];\n        this.setGradientData(styleOb.pElem, data);\n        this.setGradientOpacity(data, styleOb);\n        this._isAnimated = !!this._isAnimated;\n    };\n    SVGGradientFillStyleData.prototype.setGradientData = function(pathElement, data) {\n        var gradientId = createElementID();\n        var gfill = createNS(data.t === 1 ? \"linearGradient\" : \"radialGradient\");\n        gfill.setAttribute(\"id\", gradientId);\n        gfill.setAttribute(\"spreadMethod\", \"pad\");\n        gfill.setAttribute(\"gradientUnits\", \"userSpaceOnUse\");\n        var stops = [];\n        var stop;\n        var j;\n        var jLen;\n        jLen = data.g.p * 4;\n        for(j = 0; j < jLen; j += 4){\n            stop = createNS(\"stop\");\n            gfill.appendChild(stop);\n            stops.push(stop);\n        }\n        pathElement.setAttribute(data.ty === \"gf\" ? \"fill\" : \"stroke\", \"url(\" + getLocationHref() + \"#\" + gradientId + \")\");\n        this.gf = gfill;\n        this.cst = stops;\n    };\n    SVGGradientFillStyleData.prototype.setGradientOpacity = function(data, styleOb) {\n        if (this.g._hasOpacity && !this.g._collapsable) {\n            var stop;\n            var j;\n            var jLen;\n            var mask = createNS(\"mask\");\n            var maskElement = createNS(\"path\");\n            mask.appendChild(maskElement);\n            var opacityId = createElementID();\n            var maskId = createElementID();\n            mask.setAttribute(\"id\", maskId);\n            var opFill = createNS(data.t === 1 ? \"linearGradient\" : \"radialGradient\");\n            opFill.setAttribute(\"id\", opacityId);\n            opFill.setAttribute(\"spreadMethod\", \"pad\");\n            opFill.setAttribute(\"gradientUnits\", \"userSpaceOnUse\");\n            jLen = data.g.k.k[0].s ? data.g.k.k[0].s.length : data.g.k.k.length;\n            var stops = this.stops;\n            for(j = data.g.p * 4; j < jLen; j += 2){\n                stop = createNS(\"stop\");\n                stop.setAttribute(\"stop-color\", \"rgb(255,255,255)\");\n                opFill.appendChild(stop);\n                stops.push(stop);\n            }\n            maskElement.setAttribute(data.ty === \"gf\" ? \"fill\" : \"stroke\", \"url(\" + getLocationHref() + \"#\" + opacityId + \")\");\n            if (data.ty === \"gs\") {\n                maskElement.setAttribute(\"stroke-linecap\", lineCapEnum[data.lc || 2]);\n                maskElement.setAttribute(\"stroke-linejoin\", lineJoinEnum[data.lj || 2]);\n                if (data.lj === 1) {\n                    maskElement.setAttribute(\"stroke-miterlimit\", data.ml);\n                }\n            }\n            this.of = opFill;\n            this.ms = mask;\n            this.ost = stops;\n            this.maskId = maskId;\n            styleOb.msElem = maskElement;\n        }\n    };\n    extendPrototype([\n        DynamicPropertyContainer\n    ], SVGGradientFillStyleData);\n    function SVGGradientStrokeStyleData(elem, data, styleOb) {\n        this.initDynamicPropertyContainer(elem);\n        this.getValue = this.iterateDynamicProperties;\n        this.w = PropertyFactory.getProp(elem, data.w, 0, null, this);\n        this.d = new DashProperty(elem, data.d || {}, \"svg\", this);\n        this.initGradientData(elem, data, styleOb);\n        this._isAnimated = !!this._isAnimated;\n    }\n    extendPrototype([\n        SVGGradientFillStyleData,\n        DynamicPropertyContainer\n    ], SVGGradientStrokeStyleData);\n    function ShapeGroupData() {\n        this.it = [];\n        this.prevViewData = [];\n        this.gr = createNS(\"g\");\n    }\n    function SVGTransformData(mProps, op, container) {\n        this.transform = {\n            mProps: mProps,\n            op: op,\n            container: container\n        };\n        this.elements = [];\n        this._isAnimated = this.transform.mProps.dynamicProperties.length || this.transform.op.effectsSequence.length;\n    }\n    var buildShapeString = function buildShapeString(pathNodes, length, closed, mat) {\n        if (length === 0) {\n            return \"\";\n        }\n        var _o = pathNodes.o;\n        var _i = pathNodes.i;\n        var _v = pathNodes.v;\n        var i;\n        var shapeString = \" M\" + mat.applyToPointStringified(_v[0][0], _v[0][1]);\n        for(i = 1; i < length; i += 1){\n            shapeString += \" C\" + mat.applyToPointStringified(_o[i - 1][0], _o[i - 1][1]) + \" \" + mat.applyToPointStringified(_i[i][0], _i[i][1]) + \" \" + mat.applyToPointStringified(_v[i][0], _v[i][1]);\n        }\n        if (closed && length) {\n            shapeString += \" C\" + mat.applyToPointStringified(_o[i - 1][0], _o[i - 1][1]) + \" \" + mat.applyToPointStringified(_i[0][0], _i[0][1]) + \" \" + mat.applyToPointStringified(_v[0][0], _v[0][1]);\n            shapeString += \"z\";\n        }\n        return shapeString;\n    };\n    var SVGElementsRenderer = function() {\n        var _identityMatrix = new Matrix();\n        var _matrixHelper = new Matrix();\n        var ob = {\n            createRenderFunction: createRenderFunction\n        };\n        function createRenderFunction(data) {\n            switch(data.ty){\n                case \"fl\":\n                    return renderFill;\n                case \"gf\":\n                    return renderGradient;\n                case \"gs\":\n                    return renderGradientStroke;\n                case \"st\":\n                    return renderStroke;\n                case \"sh\":\n                case \"el\":\n                case \"rc\":\n                case \"sr\":\n                    return renderPath;\n                case \"tr\":\n                    return renderContentTransform;\n                case \"no\":\n                    return renderNoop;\n                default:\n                    return null;\n            }\n        }\n        function renderContentTransform(styleData, itemData, isFirstFrame) {\n            if (isFirstFrame || itemData.transform.op._mdf) {\n                itemData.transform.container.setAttribute(\"opacity\", itemData.transform.op.v);\n            }\n            if (isFirstFrame || itemData.transform.mProps._mdf) {\n                itemData.transform.container.setAttribute(\"transform\", itemData.transform.mProps.v.to2dCSS());\n            }\n        }\n        function renderNoop() {}\n        function renderPath(styleData, itemData, isFirstFrame) {\n            var j;\n            var jLen;\n            var pathStringTransformed;\n            var redraw;\n            var pathNodes;\n            var l;\n            var lLen = itemData.styles.length;\n            var lvl = itemData.lvl;\n            var paths;\n            var mat;\n            var iterations;\n            var k;\n            for(l = 0; l < lLen; l += 1){\n                redraw = itemData.sh._mdf || isFirstFrame;\n                if (itemData.styles[l].lvl < lvl) {\n                    mat = _matrixHelper.reset();\n                    iterations = lvl - itemData.styles[l].lvl;\n                    k = itemData.transformers.length - 1;\n                    while(!redraw && iterations > 0){\n                        redraw = itemData.transformers[k].mProps._mdf || redraw;\n                        iterations -= 1;\n                        k -= 1;\n                    }\n                    if (redraw) {\n                        iterations = lvl - itemData.styles[l].lvl;\n                        k = itemData.transformers.length - 1;\n                        while(iterations > 0){\n                            mat.multiply(itemData.transformers[k].mProps.v);\n                            iterations -= 1;\n                            k -= 1;\n                        }\n                    }\n                } else {\n                    mat = _identityMatrix;\n                }\n                paths = itemData.sh.paths;\n                jLen = paths._length;\n                if (redraw) {\n                    pathStringTransformed = \"\";\n                    for(j = 0; j < jLen; j += 1){\n                        pathNodes = paths.shapes[j];\n                        if (pathNodes && pathNodes._length) {\n                            pathStringTransformed += buildShapeString(pathNodes, pathNodes._length, pathNodes.c, mat);\n                        }\n                    }\n                    itemData.caches[l] = pathStringTransformed;\n                } else {\n                    pathStringTransformed = itemData.caches[l];\n                }\n                itemData.styles[l].d += styleData.hd === true ? \"\" : pathStringTransformed;\n                itemData.styles[l]._mdf = redraw || itemData.styles[l]._mdf;\n            }\n        }\n        function renderFill(styleData, itemData, isFirstFrame) {\n            var styleElem = itemData.style;\n            if (itemData.c._mdf || isFirstFrame) {\n                styleElem.pElem.setAttribute(\"fill\", \"rgb(\" + bmFloor(itemData.c.v[0]) + \",\" + bmFloor(itemData.c.v[1]) + \",\" + bmFloor(itemData.c.v[2]) + \")\");\n            }\n            if (itemData.o._mdf || isFirstFrame) {\n                styleElem.pElem.setAttribute(\"fill-opacity\", itemData.o.v);\n            }\n        }\n        function renderGradientStroke(styleData, itemData, isFirstFrame) {\n            renderGradient(styleData, itemData, isFirstFrame);\n            renderStroke(styleData, itemData, isFirstFrame);\n        }\n        function renderGradient(styleData, itemData, isFirstFrame) {\n            var gfill = itemData.gf;\n            var hasOpacity = itemData.g._hasOpacity;\n            var pt1 = itemData.s.v;\n            var pt2 = itemData.e.v;\n            if (itemData.o._mdf || isFirstFrame) {\n                var attr = styleData.ty === \"gf\" ? \"fill-opacity\" : \"stroke-opacity\";\n                itemData.style.pElem.setAttribute(attr, itemData.o.v);\n            }\n            if (itemData.s._mdf || isFirstFrame) {\n                var attr1 = styleData.t === 1 ? \"x1\" : \"cx\";\n                var attr2 = attr1 === \"x1\" ? \"y1\" : \"cy\";\n                gfill.setAttribute(attr1, pt1[0]);\n                gfill.setAttribute(attr2, pt1[1]);\n                if (hasOpacity && !itemData.g._collapsable) {\n                    itemData.of.setAttribute(attr1, pt1[0]);\n                    itemData.of.setAttribute(attr2, pt1[1]);\n                }\n            }\n            var stops;\n            var i;\n            var len;\n            var stop;\n            if (itemData.g._cmdf || isFirstFrame) {\n                stops = itemData.cst;\n                var cValues = itemData.g.c;\n                len = stops.length;\n                for(i = 0; i < len; i += 1){\n                    stop = stops[i];\n                    stop.setAttribute(\"offset\", cValues[i * 4] + \"%\");\n                    stop.setAttribute(\"stop-color\", \"rgb(\" + cValues[i * 4 + 1] + \",\" + cValues[i * 4 + 2] + \",\" + cValues[i * 4 + 3] + \")\");\n                }\n            }\n            if (hasOpacity && (itemData.g._omdf || isFirstFrame)) {\n                var oValues = itemData.g.o;\n                if (itemData.g._collapsable) {\n                    stops = itemData.cst;\n                } else {\n                    stops = itemData.ost;\n                }\n                len = stops.length;\n                for(i = 0; i < len; i += 1){\n                    stop = stops[i];\n                    if (!itemData.g._collapsable) {\n                        stop.setAttribute(\"offset\", oValues[i * 2] + \"%\");\n                    }\n                    stop.setAttribute(\"stop-opacity\", oValues[i * 2 + 1]);\n                }\n            }\n            if (styleData.t === 1) {\n                if (itemData.e._mdf || isFirstFrame) {\n                    gfill.setAttribute(\"x2\", pt2[0]);\n                    gfill.setAttribute(\"y2\", pt2[1]);\n                    if (hasOpacity && !itemData.g._collapsable) {\n                        itemData.of.setAttribute(\"x2\", pt2[0]);\n                        itemData.of.setAttribute(\"y2\", pt2[1]);\n                    }\n                }\n            } else {\n                var rad;\n                if (itemData.s._mdf || itemData.e._mdf || isFirstFrame) {\n                    rad = Math.sqrt(Math.pow(pt1[0] - pt2[0], 2) + Math.pow(pt1[1] - pt2[1], 2));\n                    gfill.setAttribute(\"r\", rad);\n                    if (hasOpacity && !itemData.g._collapsable) {\n                        itemData.of.setAttribute(\"r\", rad);\n                    }\n                }\n                if (itemData.e._mdf || itemData.h._mdf || itemData.a._mdf || isFirstFrame) {\n                    if (!rad) {\n                        rad = Math.sqrt(Math.pow(pt1[0] - pt2[0], 2) + Math.pow(pt1[1] - pt2[1], 2));\n                    }\n                    var ang = Math.atan2(pt2[1] - pt1[1], pt2[0] - pt1[0]);\n                    var percent = itemData.h.v;\n                    if (percent >= 1) {\n                        percent = 0.99;\n                    } else if (percent <= -1) {\n                        percent = -0.99;\n                    }\n                    var dist = rad * percent;\n                    var x = Math.cos(ang + itemData.a.v) * dist + pt1[0];\n                    var y = Math.sin(ang + itemData.a.v) * dist + pt1[1];\n                    gfill.setAttribute(\"fx\", x);\n                    gfill.setAttribute(\"fy\", y);\n                    if (hasOpacity && !itemData.g._collapsable) {\n                        itemData.of.setAttribute(\"fx\", x);\n                        itemData.of.setAttribute(\"fy\", y);\n                    }\n                } // gfill.setAttribute('fy','200');\n            }\n        }\n        function renderStroke(styleData, itemData, isFirstFrame) {\n            var styleElem = itemData.style;\n            var d = itemData.d;\n            if (d && (d._mdf || isFirstFrame) && d.dashStr) {\n                styleElem.pElem.setAttribute(\"stroke-dasharray\", d.dashStr);\n                styleElem.pElem.setAttribute(\"stroke-dashoffset\", d.dashoffset[0]);\n            }\n            if (itemData.c && (itemData.c._mdf || isFirstFrame)) {\n                styleElem.pElem.setAttribute(\"stroke\", \"rgb(\" + bmFloor(itemData.c.v[0]) + \",\" + bmFloor(itemData.c.v[1]) + \",\" + bmFloor(itemData.c.v[2]) + \")\");\n            }\n            if (itemData.o._mdf || isFirstFrame) {\n                styleElem.pElem.setAttribute(\"stroke-opacity\", itemData.o.v);\n            }\n            if (itemData.w._mdf || isFirstFrame) {\n                styleElem.pElem.setAttribute(\"stroke-width\", itemData.w.v);\n                if (styleElem.msElem) {\n                    styleElem.msElem.setAttribute(\"stroke-width\", itemData.w.v);\n                }\n            }\n        }\n        return ob;\n    }();\n    function SVGShapeElement(data, globalData, comp) {\n        // List of drawable elements\n        this.shapes = []; // Full shape data\n        this.shapesData = data.shapes; // List of styles that will be applied to shapes\n        this.stylesList = []; // List of modifiers that will be applied to shapes\n        this.shapeModifiers = []; // List of items in shape tree\n        this.itemsData = []; // List of items in previous shape tree\n        this.processedElements = []; // List of animated components\n        this.animatedContents = [];\n        this.initElement(data, globalData, comp); // Moving any property that doesn't get too much access after initialization because of v8 way of handling more than 10 properties.\n        // List of elements that have been created\n        this.prevViewData = []; // Moving any property that doesn't get too much access after initialization because of v8 way of handling more than 10 properties.\n    }\n    extendPrototype([\n        BaseElement,\n        TransformElement,\n        SVGBaseElement,\n        IShapeElement,\n        HierarchyElement,\n        FrameElement,\n        RenderableDOMElement\n    ], SVGShapeElement);\n    SVGShapeElement.prototype.initSecondaryElement = function() {};\n    SVGShapeElement.prototype.identityMatrix = new Matrix();\n    SVGShapeElement.prototype.buildExpressionInterface = function() {};\n    SVGShapeElement.prototype.createContent = function() {\n        this.searchShapes(this.shapesData, this.itemsData, this.prevViewData, this.layerElement, 0, [], true);\n        this.filterUniqueShapes();\n    };\n    /*\r\n  This method searches for multiple shapes that affect a single element and one of them is animated\r\n  */ SVGShapeElement.prototype.filterUniqueShapes = function() {\n        var i;\n        var len = this.shapes.length;\n        var shape;\n        var j;\n        var jLen = this.stylesList.length;\n        var style;\n        var tempShapes = [];\n        var areAnimated = false;\n        for(j = 0; j < jLen; j += 1){\n            style = this.stylesList[j];\n            areAnimated = false;\n            tempShapes.length = 0;\n            for(i = 0; i < len; i += 1){\n                shape = this.shapes[i];\n                if (shape.styles.indexOf(style) !== -1) {\n                    tempShapes.push(shape);\n                    areAnimated = shape._isAnimated || areAnimated;\n                }\n            }\n            if (tempShapes.length > 1 && areAnimated) {\n                this.setShapesAsAnimated(tempShapes);\n            }\n        }\n    };\n    SVGShapeElement.prototype.setShapesAsAnimated = function(shapes) {\n        var i;\n        var len = shapes.length;\n        for(i = 0; i < len; i += 1){\n            shapes[i].setAsAnimated();\n        }\n    };\n    SVGShapeElement.prototype.createStyleElement = function(data, level) {\n        // TODO: prevent drawing of hidden styles\n        var elementData;\n        var styleOb = new SVGStyleData(data, level);\n        var pathElement = styleOb.pElem;\n        if (data.ty === \"st\") {\n            elementData = new SVGStrokeStyleData(this, data, styleOb);\n        } else if (data.ty === \"fl\") {\n            elementData = new SVGFillStyleData(this, data, styleOb);\n        } else if (data.ty === \"gf\" || data.ty === \"gs\") {\n            var GradientConstructor = data.ty === \"gf\" ? SVGGradientFillStyleData : SVGGradientStrokeStyleData;\n            elementData = new GradientConstructor(this, data, styleOb);\n            this.globalData.defs.appendChild(elementData.gf);\n            if (elementData.maskId) {\n                this.globalData.defs.appendChild(elementData.ms);\n                this.globalData.defs.appendChild(elementData.of);\n                pathElement.setAttribute(\"mask\", \"url(\" + getLocationHref() + \"#\" + elementData.maskId + \")\");\n            }\n        } else if (data.ty === \"no\") {\n            elementData = new SVGNoStyleData(this, data, styleOb);\n        }\n        if (data.ty === \"st\" || data.ty === \"gs\") {\n            pathElement.setAttribute(\"stroke-linecap\", lineCapEnum[data.lc || 2]);\n            pathElement.setAttribute(\"stroke-linejoin\", lineJoinEnum[data.lj || 2]);\n            pathElement.setAttribute(\"fill-opacity\", \"0\");\n            if (data.lj === 1) {\n                pathElement.setAttribute(\"stroke-miterlimit\", data.ml);\n            }\n        }\n        if (data.r === 2) {\n            pathElement.setAttribute(\"fill-rule\", \"evenodd\");\n        }\n        if (data.ln) {\n            pathElement.setAttribute(\"id\", data.ln);\n        }\n        if (data.cl) {\n            pathElement.setAttribute(\"class\", data.cl);\n        }\n        if (data.bm) {\n            pathElement.style[\"mix-blend-mode\"] = getBlendMode(data.bm);\n        }\n        this.stylesList.push(styleOb);\n        this.addToAnimatedContents(data, elementData);\n        return elementData;\n    };\n    SVGShapeElement.prototype.createGroupElement = function(data) {\n        var elementData = new ShapeGroupData();\n        if (data.ln) {\n            elementData.gr.setAttribute(\"id\", data.ln);\n        }\n        if (data.cl) {\n            elementData.gr.setAttribute(\"class\", data.cl);\n        }\n        if (data.bm) {\n            elementData.gr.style[\"mix-blend-mode\"] = getBlendMode(data.bm);\n        }\n        return elementData;\n    };\n    SVGShapeElement.prototype.createTransformElement = function(data, container) {\n        var transformProperty = TransformPropertyFactory.getTransformProperty(this, data, this);\n        var elementData = new SVGTransformData(transformProperty, transformProperty.o, container);\n        this.addToAnimatedContents(data, elementData);\n        return elementData;\n    };\n    SVGShapeElement.prototype.createShapeElement = function(data, ownTransformers, level) {\n        var ty = 4;\n        if (data.ty === \"rc\") {\n            ty = 5;\n        } else if (data.ty === \"el\") {\n            ty = 6;\n        } else if (data.ty === \"sr\") {\n            ty = 7;\n        }\n        var shapeProperty = ShapePropertyFactory.getShapeProp(this, data, ty, this);\n        var elementData = new SVGShapeData(ownTransformers, level, shapeProperty);\n        this.shapes.push(elementData);\n        this.addShapeToModifiers(elementData);\n        this.addToAnimatedContents(data, elementData);\n        return elementData;\n    };\n    SVGShapeElement.prototype.addToAnimatedContents = function(data, element) {\n        var i = 0;\n        var len = this.animatedContents.length;\n        while(i < len){\n            if (this.animatedContents[i].element === element) {\n                return;\n            }\n            i += 1;\n        }\n        this.animatedContents.push({\n            fn: SVGElementsRenderer.createRenderFunction(data),\n            element: element,\n            data: data\n        });\n    };\n    SVGShapeElement.prototype.setElementStyles = function(elementData) {\n        var arr = elementData.styles;\n        var j;\n        var jLen = this.stylesList.length;\n        for(j = 0; j < jLen; j += 1){\n            if (!this.stylesList[j].closed) {\n                arr.push(this.stylesList[j]);\n            }\n        }\n    };\n    SVGShapeElement.prototype.reloadShapes = function() {\n        this._isFirstFrame = true;\n        var i;\n        var len = this.itemsData.length;\n        for(i = 0; i < len; i += 1){\n            this.prevViewData[i] = this.itemsData[i];\n        }\n        this.searchShapes(this.shapesData, this.itemsData, this.prevViewData, this.layerElement, 0, [], true);\n        this.filterUniqueShapes();\n        len = this.dynamicProperties.length;\n        for(i = 0; i < len; i += 1){\n            this.dynamicProperties[i].getValue();\n        }\n        this.renderModifiers();\n    };\n    SVGShapeElement.prototype.searchShapes = function(arr, itemsData, prevViewData, container, level, transformers, render) {\n        var ownTransformers = [].concat(transformers);\n        var i;\n        var len = arr.length - 1;\n        var j;\n        var jLen;\n        var ownStyles = [];\n        var ownModifiers = [];\n        var currentTransform;\n        var modifier;\n        var processedPos;\n        for(i = len; i >= 0; i -= 1){\n            processedPos = this.searchProcessedElement(arr[i]);\n            if (!processedPos) {\n                arr[i]._render = render;\n            } else {\n                itemsData[i] = prevViewData[processedPos - 1];\n            }\n            if (arr[i].ty === \"fl\" || arr[i].ty === \"st\" || arr[i].ty === \"gf\" || arr[i].ty === \"gs\" || arr[i].ty === \"no\") {\n                if (!processedPos) {\n                    itemsData[i] = this.createStyleElement(arr[i], level);\n                } else {\n                    itemsData[i].style.closed = false;\n                }\n                if (arr[i]._render) {\n                    if (itemsData[i].style.pElem.parentNode !== container) {\n                        container.appendChild(itemsData[i].style.pElem);\n                    }\n                }\n                ownStyles.push(itemsData[i].style);\n            } else if (arr[i].ty === \"gr\") {\n                if (!processedPos) {\n                    itemsData[i] = this.createGroupElement(arr[i]);\n                } else {\n                    jLen = itemsData[i].it.length;\n                    for(j = 0; j < jLen; j += 1){\n                        itemsData[i].prevViewData[j] = itemsData[i].it[j];\n                    }\n                }\n                this.searchShapes(arr[i].it, itemsData[i].it, itemsData[i].prevViewData, itemsData[i].gr, level + 1, ownTransformers, render);\n                if (arr[i]._render) {\n                    if (itemsData[i].gr.parentNode !== container) {\n                        container.appendChild(itemsData[i].gr);\n                    }\n                }\n            } else if (arr[i].ty === \"tr\") {\n                if (!processedPos) {\n                    itemsData[i] = this.createTransformElement(arr[i], container);\n                }\n                currentTransform = itemsData[i].transform;\n                ownTransformers.push(currentTransform);\n            } else if (arr[i].ty === \"sh\" || arr[i].ty === \"rc\" || arr[i].ty === \"el\" || arr[i].ty === \"sr\") {\n                if (!processedPos) {\n                    itemsData[i] = this.createShapeElement(arr[i], ownTransformers, level);\n                }\n                this.setElementStyles(itemsData[i]);\n            } else if (arr[i].ty === \"tm\" || arr[i].ty === \"rd\" || arr[i].ty === \"ms\" || arr[i].ty === \"pb\" || arr[i].ty === \"zz\" || arr[i].ty === \"op\") {\n                if (!processedPos) {\n                    modifier = ShapeModifiers.getModifier(arr[i].ty);\n                    modifier.init(this, arr[i]);\n                    itemsData[i] = modifier;\n                    this.shapeModifiers.push(modifier);\n                } else {\n                    modifier = itemsData[i];\n                    modifier.closed = false;\n                }\n                ownModifiers.push(modifier);\n            } else if (arr[i].ty === \"rp\") {\n                if (!processedPos) {\n                    modifier = ShapeModifiers.getModifier(arr[i].ty);\n                    itemsData[i] = modifier;\n                    modifier.init(this, arr, i, itemsData);\n                    this.shapeModifiers.push(modifier);\n                    render = false;\n                } else {\n                    modifier = itemsData[i];\n                    modifier.closed = true;\n                }\n                ownModifiers.push(modifier);\n            }\n            this.addProcessedElement(arr[i], i + 1);\n        }\n        len = ownStyles.length;\n        for(i = 0; i < len; i += 1){\n            ownStyles[i].closed = true;\n        }\n        len = ownModifiers.length;\n        for(i = 0; i < len; i += 1){\n            ownModifiers[i].closed = true;\n        }\n    };\n    SVGShapeElement.prototype.renderInnerContent = function() {\n        this.renderModifiers();\n        var i;\n        var len = this.stylesList.length;\n        for(i = 0; i < len; i += 1){\n            this.stylesList[i].reset();\n        }\n        this.renderShape();\n        for(i = 0; i < len; i += 1){\n            if (this.stylesList[i]._mdf || this._isFirstFrame) {\n                if (this.stylesList[i].msElem) {\n                    this.stylesList[i].msElem.setAttribute(\"d\", this.stylesList[i].d); // Adding M0 0 fixes same mask bug on all browsers\n                    this.stylesList[i].d = \"M0 0\" + this.stylesList[i].d;\n                }\n                this.stylesList[i].pElem.setAttribute(\"d\", this.stylesList[i].d || \"M0 0\");\n            }\n        }\n    };\n    SVGShapeElement.prototype.renderShape = function() {\n        var i;\n        var len = this.animatedContents.length;\n        var animatedContent;\n        for(i = 0; i < len; i += 1){\n            animatedContent = this.animatedContents[i];\n            if ((this._isFirstFrame || animatedContent.element._isAnimated) && animatedContent.data !== true) {\n                animatedContent.fn(animatedContent.data, animatedContent.element, this._isFirstFrame);\n            }\n        }\n    };\n    SVGShapeElement.prototype.destroy = function() {\n        this.destroyBaseElement();\n        this.shapesData = null;\n        this.itemsData = null;\n    };\n    function LetterProps(o, sw, sc, fc, m, p) {\n        this.o = o;\n        this.sw = sw;\n        this.sc = sc;\n        this.fc = fc;\n        this.m = m;\n        this.p = p;\n        this._mdf = {\n            o: true,\n            sw: !!sw,\n            sc: !!sc,\n            fc: !!fc,\n            m: true,\n            p: true\n        };\n    }\n    LetterProps.prototype.update = function(o, sw, sc, fc, m, p) {\n        this._mdf.o = false;\n        this._mdf.sw = false;\n        this._mdf.sc = false;\n        this._mdf.fc = false;\n        this._mdf.m = false;\n        this._mdf.p = false;\n        var updated = false;\n        if (this.o !== o) {\n            this.o = o;\n            this._mdf.o = true;\n            updated = true;\n        }\n        if (this.sw !== sw) {\n            this.sw = sw;\n            this._mdf.sw = true;\n            updated = true;\n        }\n        if (this.sc !== sc) {\n            this.sc = sc;\n            this._mdf.sc = true;\n            updated = true;\n        }\n        if (this.fc !== fc) {\n            this.fc = fc;\n            this._mdf.fc = true;\n            updated = true;\n        }\n        if (this.m !== m) {\n            this.m = m;\n            this._mdf.m = true;\n            updated = true;\n        }\n        if (p.length && (this.p[0] !== p[0] || this.p[1] !== p[1] || this.p[4] !== p[4] || this.p[5] !== p[5] || this.p[12] !== p[12] || this.p[13] !== p[13])) {\n            this.p = p;\n            this._mdf.p = true;\n            updated = true;\n        }\n        return updated;\n    };\n    function TextProperty(elem, data) {\n        this._frameId = initialDefaultFrame;\n        this.pv = \"\";\n        this.v = \"\";\n        this.kf = false;\n        this._isFirstFrame = true;\n        this._mdf = false;\n        if (data.d && data.d.sid) {\n            data.d = elem.globalData.slotManager.getProp(data.d);\n        }\n        this.data = data;\n        this.elem = elem;\n        this.comp = this.elem.comp;\n        this.keysIndex = 0;\n        this.canResize = false;\n        this.minimumFontSize = 1;\n        this.effectsSequence = [];\n        this.currentData = {\n            ascent: 0,\n            boxWidth: this.defaultBoxWidth,\n            f: \"\",\n            fStyle: \"\",\n            fWeight: \"\",\n            fc: \"\",\n            j: \"\",\n            justifyOffset: \"\",\n            l: [],\n            lh: 0,\n            lineWidths: [],\n            ls: \"\",\n            of: \"\",\n            s: \"\",\n            sc: \"\",\n            sw: 0,\n            t: 0,\n            tr: 0,\n            sz: 0,\n            ps: null,\n            fillColorAnim: false,\n            strokeColorAnim: false,\n            strokeWidthAnim: false,\n            yOffset: 0,\n            finalSize: 0,\n            finalText: [],\n            finalLineHeight: 0,\n            __complete: false\n        };\n        this.copyData(this.currentData, this.data.d.k[0].s);\n        if (!this.searchProperty()) {\n            this.completeTextData(this.currentData);\n        }\n    }\n    TextProperty.prototype.defaultBoxWidth = [\n        0,\n        0\n    ];\n    TextProperty.prototype.copyData = function(obj, data) {\n        for(var s in data){\n            if (Object.prototype.hasOwnProperty.call(data, s)) {\n                obj[s] = data[s];\n            }\n        }\n        return obj;\n    };\n    TextProperty.prototype.setCurrentData = function(data) {\n        if (!data.__complete) {\n            this.completeTextData(data);\n        }\n        this.currentData = data;\n        this.currentData.boxWidth = this.currentData.boxWidth || this.defaultBoxWidth;\n        this._mdf = true;\n    };\n    TextProperty.prototype.searchProperty = function() {\n        return this.searchKeyframes();\n    };\n    TextProperty.prototype.searchKeyframes = function() {\n        this.kf = this.data.d.k.length > 1;\n        if (this.kf) {\n            this.addEffect(this.getKeyframeValue.bind(this));\n        }\n        return this.kf;\n    };\n    TextProperty.prototype.addEffect = function(effectFunction) {\n        this.effectsSequence.push(effectFunction);\n        this.elem.addDynamicProperty(this);\n    };\n    TextProperty.prototype.getValue = function(_finalValue) {\n        if ((this.elem.globalData.frameId === this.frameId || !this.effectsSequence.length) && !_finalValue) {\n            return;\n        }\n        this.currentData.t = this.data.d.k[this.keysIndex].s.t;\n        var currentValue = this.currentData;\n        var currentIndex = this.keysIndex;\n        if (this.lock) {\n            this.setCurrentData(this.currentData);\n            return;\n        }\n        this.lock = true;\n        this._mdf = false;\n        var i;\n        var len = this.effectsSequence.length;\n        var finalValue = _finalValue || this.data.d.k[this.keysIndex].s;\n        for(i = 0; i < len; i += 1){\n            // Checking if index changed to prevent creating a new object every time the expression updates.\n            if (currentIndex !== this.keysIndex) {\n                finalValue = this.effectsSequence[i](finalValue, finalValue.t);\n            } else {\n                finalValue = this.effectsSequence[i](this.currentData, finalValue.t);\n            }\n        }\n        if (currentValue !== finalValue) {\n            this.setCurrentData(finalValue);\n        }\n        this.v = this.currentData;\n        this.pv = this.v;\n        this.lock = false;\n        this.frameId = this.elem.globalData.frameId;\n    };\n    TextProperty.prototype.getKeyframeValue = function() {\n        var textKeys = this.data.d.k;\n        var frameNum = this.elem.comp.renderedFrame;\n        var i = 0;\n        var len = textKeys.length;\n        while(i <= len - 1){\n            if (i === len - 1 || textKeys[i + 1].t > frameNum) {\n                break;\n            }\n            i += 1;\n        }\n        if (this.keysIndex !== i) {\n            this.keysIndex = i;\n        }\n        return this.data.d.k[this.keysIndex].s;\n    };\n    TextProperty.prototype.buildFinalText = function(text) {\n        var charactersArray = [];\n        var i = 0;\n        var len = text.length;\n        var charCode;\n        var secondCharCode;\n        var shouldCombine = false;\n        var shouldCombineNext = false;\n        var currentChars = \"\";\n        while(i < len){\n            shouldCombine = shouldCombineNext;\n            shouldCombineNext = false;\n            charCode = text.charCodeAt(i);\n            currentChars = text.charAt(i);\n            if (FontManager.isCombinedCharacter(charCode)) {\n                shouldCombine = true; // It's a potential surrogate pair (this is the High surrogate)\n            } else if (charCode >= 0xD800 && charCode <= 0xDBFF) {\n                if (FontManager.isRegionalFlag(text, i)) {\n                    currentChars = text.substr(i, 14);\n                } else {\n                    secondCharCode = text.charCodeAt(i + 1); // It's a surrogate pair (this is the Low surrogate)\n                    if (secondCharCode >= 0xDC00 && secondCharCode <= 0xDFFF) {\n                        if (FontManager.isModifier(charCode, secondCharCode)) {\n                            currentChars = text.substr(i, 2);\n                            shouldCombine = true;\n                        } else if (FontManager.isFlagEmoji(text.substr(i, 4))) {\n                            currentChars = text.substr(i, 4);\n                        } else {\n                            currentChars = text.substr(i, 2);\n                        }\n                    }\n                }\n            } else if (charCode > 0xDBFF) {\n                secondCharCode = text.charCodeAt(i + 1);\n                if (FontManager.isVariationSelector(charCode)) {\n                    shouldCombine = true;\n                }\n            } else if (FontManager.isZeroWidthJoiner(charCode)) {\n                shouldCombine = true;\n                shouldCombineNext = true;\n            }\n            if (shouldCombine) {\n                charactersArray[charactersArray.length - 1] += currentChars;\n                shouldCombine = false;\n            } else {\n                charactersArray.push(currentChars);\n            }\n            i += currentChars.length;\n        }\n        return charactersArray;\n    };\n    TextProperty.prototype.completeTextData = function(documentData) {\n        documentData.__complete = true;\n        var fontManager = this.elem.globalData.fontManager;\n        var data = this.data;\n        var letters = [];\n        var i;\n        var len;\n        var newLineFlag;\n        var index = 0;\n        var val;\n        var anchorGrouping = data.m.g;\n        var currentSize = 0;\n        var currentPos = 0;\n        var currentLine = 0;\n        var lineWidths = [];\n        var lineWidth = 0;\n        var maxLineWidth = 0;\n        var j;\n        var jLen;\n        var fontData = fontManager.getFontByName(documentData.f);\n        var charData;\n        var cLength = 0;\n        var fontProps = getFontProperties(fontData);\n        documentData.fWeight = fontProps.weight;\n        documentData.fStyle = fontProps.style;\n        documentData.finalSize = documentData.s;\n        documentData.finalText = this.buildFinalText(documentData.t);\n        len = documentData.finalText.length;\n        documentData.finalLineHeight = documentData.lh;\n        var trackingOffset = documentData.tr / 1000 * documentData.finalSize;\n        var charCode;\n        if (documentData.sz) {\n            var flag = true;\n            var boxWidth = documentData.sz[0];\n            var boxHeight = documentData.sz[1];\n            var currentHeight;\n            var finalText;\n            while(flag){\n                finalText = this.buildFinalText(documentData.t);\n                currentHeight = 0;\n                lineWidth = 0;\n                len = finalText.length;\n                trackingOffset = documentData.tr / 1000 * documentData.finalSize;\n                var lastSpaceIndex = -1;\n                for(i = 0; i < len; i += 1){\n                    charCode = finalText[i].charCodeAt(0);\n                    newLineFlag = false;\n                    if (finalText[i] === \" \") {\n                        lastSpaceIndex = i;\n                    } else if (charCode === 13 || charCode === 3) {\n                        lineWidth = 0;\n                        newLineFlag = true;\n                        currentHeight += documentData.finalLineHeight || documentData.finalSize * 1.2;\n                    }\n                    if (fontManager.chars) {\n                        charData = fontManager.getCharData(finalText[i], fontData.fStyle, fontData.fFamily);\n                        cLength = newLineFlag ? 0 : charData.w * documentData.finalSize / 100;\n                    } else {\n                        // tCanvasHelper.font = documentData.s + 'px '+ fontData.fFamily;\n                        cLength = fontManager.measureText(finalText[i], documentData.f, documentData.finalSize);\n                    }\n                    if (lineWidth + cLength > boxWidth && finalText[i] !== \" \") {\n                        if (lastSpaceIndex === -1) {\n                            len += 1;\n                        } else {\n                            i = lastSpaceIndex;\n                        }\n                        currentHeight += documentData.finalLineHeight || documentData.finalSize * 1.2;\n                        finalText.splice(i, lastSpaceIndex === i ? 1 : 0, \"\\r\"); // finalText = finalText.substr(0,i) + \"\\r\" + finalText.substr(i === lastSpaceIndex ? i + 1 : i);\n                        lastSpaceIndex = -1;\n                        lineWidth = 0;\n                    } else {\n                        lineWidth += cLength;\n                        lineWidth += trackingOffset;\n                    }\n                }\n                currentHeight += fontData.ascent * documentData.finalSize / 100;\n                if (this.canResize && documentData.finalSize > this.minimumFontSize && boxHeight < currentHeight) {\n                    documentData.finalSize -= 1;\n                    documentData.finalLineHeight = documentData.finalSize * documentData.lh / documentData.s;\n                } else {\n                    documentData.finalText = finalText;\n                    len = documentData.finalText.length;\n                    flag = false;\n                }\n            }\n        }\n        lineWidth = -trackingOffset;\n        cLength = 0;\n        var uncollapsedSpaces = 0;\n        var currentChar;\n        for(i = 0; i < len; i += 1){\n            newLineFlag = false;\n            currentChar = documentData.finalText[i];\n            charCode = currentChar.charCodeAt(0);\n            if (charCode === 13 || charCode === 3) {\n                uncollapsedSpaces = 0;\n                lineWidths.push(lineWidth);\n                maxLineWidth = lineWidth > maxLineWidth ? lineWidth : maxLineWidth;\n                lineWidth = -2 * trackingOffset;\n                val = \"\";\n                newLineFlag = true;\n                currentLine += 1;\n            } else {\n                val = currentChar;\n            }\n            if (fontManager.chars) {\n                charData = fontManager.getCharData(currentChar, fontData.fStyle, fontManager.getFontByName(documentData.f).fFamily);\n                cLength = newLineFlag ? 0 : charData.w * documentData.finalSize / 100;\n            } else {\n                // var charWidth = fontManager.measureText(val, documentData.f, documentData.finalSize);\n                // tCanvasHelper.font = documentData.finalSize + 'px '+ fontManager.getFontByName(documentData.f).fFamily;\n                cLength = fontManager.measureText(val, documentData.f, documentData.finalSize);\n            } //\n            if (currentChar === \" \") {\n                uncollapsedSpaces += cLength + trackingOffset;\n            } else {\n                lineWidth += cLength + trackingOffset + uncollapsedSpaces;\n                uncollapsedSpaces = 0;\n            }\n            letters.push({\n                l: cLength,\n                an: cLength,\n                add: currentSize,\n                n: newLineFlag,\n                anIndexes: [],\n                val: val,\n                line: currentLine,\n                animatorJustifyOffset: 0\n            });\n            if (anchorGrouping == 2) {\n                // eslint-disable-line eqeqeq\n                currentSize += cLength;\n                if (val === \"\" || val === \" \" || i === len - 1) {\n                    if (val === \"\" || val === \" \") {\n                        currentSize -= cLength;\n                    }\n                    while(currentPos <= i){\n                        letters[currentPos].an = currentSize;\n                        letters[currentPos].ind = index;\n                        letters[currentPos].extra = cLength;\n                        currentPos += 1;\n                    }\n                    index += 1;\n                    currentSize = 0;\n                }\n            } else if (anchorGrouping == 3) {\n                // eslint-disable-line eqeqeq\n                currentSize += cLength;\n                if (val === \"\" || i === len - 1) {\n                    if (val === \"\") {\n                        currentSize -= cLength;\n                    }\n                    while(currentPos <= i){\n                        letters[currentPos].an = currentSize;\n                        letters[currentPos].ind = index;\n                        letters[currentPos].extra = cLength;\n                        currentPos += 1;\n                    }\n                    currentSize = 0;\n                    index += 1;\n                }\n            } else {\n                letters[index].ind = index;\n                letters[index].extra = 0;\n                index += 1;\n            }\n        }\n        documentData.l = letters;\n        maxLineWidth = lineWidth > maxLineWidth ? lineWidth : maxLineWidth;\n        lineWidths.push(lineWidth);\n        if (documentData.sz) {\n            documentData.boxWidth = documentData.sz[0];\n            documentData.justifyOffset = 0;\n        } else {\n            documentData.boxWidth = maxLineWidth;\n            switch(documentData.j){\n                case 1:\n                    documentData.justifyOffset = -documentData.boxWidth;\n                    break;\n                case 2:\n                    documentData.justifyOffset = -documentData.boxWidth / 2;\n                    break;\n                default:\n                    documentData.justifyOffset = 0;\n            }\n        }\n        documentData.lineWidths = lineWidths;\n        var animators = data.a;\n        var animatorData;\n        var letterData;\n        jLen = animators.length;\n        var based;\n        var ind;\n        var indexes = [];\n        for(j = 0; j < jLen; j += 1){\n            animatorData = animators[j];\n            if (animatorData.a.sc) {\n                documentData.strokeColorAnim = true;\n            }\n            if (animatorData.a.sw) {\n                documentData.strokeWidthAnim = true;\n            }\n            if (animatorData.a.fc || animatorData.a.fh || animatorData.a.fs || animatorData.a.fb) {\n                documentData.fillColorAnim = true;\n            }\n            ind = 0;\n            based = animatorData.s.b;\n            for(i = 0; i < len; i += 1){\n                letterData = letters[i];\n                letterData.anIndexes[j] = ind;\n                if (based == 1 && letterData.val !== \"\" || based == 2 && letterData.val !== \"\" && letterData.val !== \" \" || based == 3 && (letterData.n || letterData.val == \" \" || i == len - 1) || based == 4 && (letterData.n || i == len - 1)) {\n                    // eslint-disable-line eqeqeq\n                    if (animatorData.s.rn === 1) {\n                        indexes.push(ind);\n                    }\n                    ind += 1;\n                }\n            }\n            data.a[j].s.totalChars = ind;\n            var currentInd = -1;\n            var newInd;\n            if (animatorData.s.rn === 1) {\n                for(i = 0; i < len; i += 1){\n                    letterData = letters[i];\n                    if (currentInd != letterData.anIndexes[j]) {\n                        // eslint-disable-line eqeqeq\n                        currentInd = letterData.anIndexes[j];\n                        newInd = indexes.splice(Math.floor(Math.random() * indexes.length), 1)[0];\n                    }\n                    letterData.anIndexes[j] = newInd;\n                }\n            }\n        }\n        documentData.yOffset = documentData.finalLineHeight || documentData.finalSize * 1.2;\n        documentData.ls = documentData.ls || 0;\n        documentData.ascent = fontData.ascent * documentData.finalSize / 100;\n    };\n    TextProperty.prototype.updateDocumentData = function(newData, index) {\n        index = index === undefined ? this.keysIndex : index;\n        var dData = this.copyData({}, this.data.d.k[index].s);\n        dData = this.copyData(dData, newData);\n        this.data.d.k[index].s = dData;\n        this.recalculate(index);\n        this.setCurrentData(dData);\n        this.elem.addDynamicProperty(this);\n    };\n    TextProperty.prototype.recalculate = function(index) {\n        var dData = this.data.d.k[index].s;\n        dData.__complete = false;\n        this.keysIndex = 0;\n        this._isFirstFrame = true;\n        this.getValue(dData);\n    };\n    TextProperty.prototype.canResizeFont = function(_canResize) {\n        this.canResize = _canResize;\n        this.recalculate(this.keysIndex);\n        this.elem.addDynamicProperty(this);\n    };\n    TextProperty.prototype.setMinimumFontSize = function(_fontValue) {\n        this.minimumFontSize = Math.floor(_fontValue) || 1;\n        this.recalculate(this.keysIndex);\n        this.elem.addDynamicProperty(this);\n    };\n    var TextSelectorProp = function() {\n        var max = Math.max;\n        var min = Math.min;\n        var floor = Math.floor;\n        function TextSelectorPropFactory(elem, data) {\n            this._currentTextLength = -1;\n            this.k = false;\n            this.data = data;\n            this.elem = elem;\n            this.comp = elem.comp;\n            this.finalS = 0;\n            this.finalE = 0;\n            this.initDynamicPropertyContainer(elem);\n            this.s = PropertyFactory.getProp(elem, data.s || {\n                k: 0\n            }, 0, 0, this);\n            if (\"e\" in data) {\n                this.e = PropertyFactory.getProp(elem, data.e, 0, 0, this);\n            } else {\n                this.e = {\n                    v: 100\n                };\n            }\n            this.o = PropertyFactory.getProp(elem, data.o || {\n                k: 0\n            }, 0, 0, this);\n            this.xe = PropertyFactory.getProp(elem, data.xe || {\n                k: 0\n            }, 0, 0, this);\n            this.ne = PropertyFactory.getProp(elem, data.ne || {\n                k: 0\n            }, 0, 0, this);\n            this.sm = PropertyFactory.getProp(elem, data.sm || {\n                k: 100\n            }, 0, 0, this);\n            this.a = PropertyFactory.getProp(elem, data.a, 0, 0.01, this);\n            if (!this.dynamicProperties.length) {\n                this.getValue();\n            }\n        }\n        TextSelectorPropFactory.prototype = {\n            getMult: function getMult(ind) {\n                if (this._currentTextLength !== this.elem.textProperty.currentData.l.length) {\n                    this.getValue();\n                }\n                var x1 = 0;\n                var y1 = 0;\n                var x2 = 1;\n                var y2 = 1;\n                if (this.ne.v > 0) {\n                    x1 = this.ne.v / 100.0;\n                } else {\n                    y1 = -this.ne.v / 100.0;\n                }\n                if (this.xe.v > 0) {\n                    x2 = 1.0 - this.xe.v / 100.0;\n                } else {\n                    y2 = 1.0 + this.xe.v / 100.0;\n                }\n                var easer = BezierFactory.getBezierEasing(x1, y1, x2, y2).get;\n                var mult = 0;\n                var s = this.finalS;\n                var e = this.finalE;\n                var type = this.data.sh;\n                if (type === 2) {\n                    if (e === s) {\n                        mult = ind >= e ? 1 : 0;\n                    } else {\n                        mult = max(0, min(0.5 / (e - s) + (ind - s) / (e - s), 1));\n                    }\n                    mult = easer(mult);\n                } else if (type === 3) {\n                    if (e === s) {\n                        mult = ind >= e ? 0 : 1;\n                    } else {\n                        mult = 1 - max(0, min(0.5 / (e - s) + (ind - s) / (e - s), 1));\n                    }\n                    mult = easer(mult);\n                } else if (type === 4) {\n                    if (e === s) {\n                        mult = 0;\n                    } else {\n                        mult = max(0, min(0.5 / (e - s) + (ind - s) / (e - s), 1));\n                        if (mult < 0.5) {\n                            mult *= 2;\n                        } else {\n                            mult = 1 - 2 * (mult - 0.5);\n                        }\n                    }\n                    mult = easer(mult);\n                } else if (type === 5) {\n                    if (e === s) {\n                        mult = 0;\n                    } else {\n                        var tot = e - s;\n                        /* ind += 0.5;\r\n                      mult = -4/(tot*tot)*(ind*ind)+(4/tot)*ind; */ ind = min(max(0, ind + 0.5 - s), e - s);\n                        var x = -tot / 2 + ind;\n                        var a = tot / 2;\n                        mult = Math.sqrt(1 - x * x / (a * a));\n                    }\n                    mult = easer(mult);\n                } else if (type === 6) {\n                    if (e === s) {\n                        mult = 0;\n                    } else {\n                        ind = min(max(0, ind + 0.5 - s), e - s);\n                        mult = (1 + Math.cos(Math.PI + Math.PI * 2 * ind / (e - s))) / 2; // eslint-disable-line\n                    }\n                    mult = easer(mult);\n                } else {\n                    if (ind >= floor(s)) {\n                        if (ind - s < 0) {\n                            mult = max(0, min(min(e, 1) - (s - ind), 1));\n                        } else {\n                            mult = max(0, min(e - ind, 1));\n                        }\n                    }\n                    mult = easer(mult);\n                } // Smoothness implementation.\n                // The smoothness represents a reduced range of the original [0; 1] range.\n                // if smoothness is 25%, the new range will be [0.375; 0.625]\n                // Steps are:\n                // - find the lower value of the new range (threshold)\n                // - if multiplier is smaller than that value, floor it to 0\n                // - if it is larger,\n                //     - subtract the threshold\n                //     - divide it by the smoothness (this will return the range to [0; 1])\n                // Note: If it doesn't work on some scenarios, consider applying it before the easer.\n                if (this.sm.v !== 100) {\n                    var smoothness = this.sm.v * 0.01;\n                    if (smoothness === 0) {\n                        smoothness = 0.00000001;\n                    }\n                    var threshold = 0.5 - smoothness * 0.5;\n                    if (mult < threshold) {\n                        mult = 0;\n                    } else {\n                        mult = (mult - threshold) / smoothness;\n                        if (mult > 1) {\n                            mult = 1;\n                        }\n                    }\n                }\n                return mult * this.a.v;\n            },\n            getValue: function getValue(newCharsFlag) {\n                this.iterateDynamicProperties();\n                this._mdf = newCharsFlag || this._mdf;\n                this._currentTextLength = this.elem.textProperty.currentData.l.length || 0;\n                if (newCharsFlag && this.data.r === 2) {\n                    this.e.v = this._currentTextLength;\n                }\n                var divisor = this.data.r === 2 ? 1 : 100 / this.data.totalChars;\n                var o = this.o.v / divisor;\n                var s = this.s.v / divisor + o;\n                var e = this.e.v / divisor + o;\n                if (s > e) {\n                    var _s = s;\n                    s = e;\n                    e = _s;\n                }\n                this.finalS = s;\n                this.finalE = e;\n            }\n        };\n        extendPrototype([\n            DynamicPropertyContainer\n        ], TextSelectorPropFactory);\n        function getTextSelectorProp(elem, data, arr) {\n            return new TextSelectorPropFactory(elem, data, arr);\n        }\n        return {\n            getTextSelectorProp: getTextSelectorProp\n        };\n    }();\n    function TextAnimatorDataProperty(elem, animatorProps, container) {\n        var defaultData = {\n            propType: false\n        };\n        var getProp = PropertyFactory.getProp;\n        var textAnimatorAnimatables = animatorProps.a;\n        this.a = {\n            r: textAnimatorAnimatables.r ? getProp(elem, textAnimatorAnimatables.r, 0, degToRads, container) : defaultData,\n            rx: textAnimatorAnimatables.rx ? getProp(elem, textAnimatorAnimatables.rx, 0, degToRads, container) : defaultData,\n            ry: textAnimatorAnimatables.ry ? getProp(elem, textAnimatorAnimatables.ry, 0, degToRads, container) : defaultData,\n            sk: textAnimatorAnimatables.sk ? getProp(elem, textAnimatorAnimatables.sk, 0, degToRads, container) : defaultData,\n            sa: textAnimatorAnimatables.sa ? getProp(elem, textAnimatorAnimatables.sa, 0, degToRads, container) : defaultData,\n            s: textAnimatorAnimatables.s ? getProp(elem, textAnimatorAnimatables.s, 1, 0.01, container) : defaultData,\n            a: textAnimatorAnimatables.a ? getProp(elem, textAnimatorAnimatables.a, 1, 0, container) : defaultData,\n            o: textAnimatorAnimatables.o ? getProp(elem, textAnimatorAnimatables.o, 0, 0.01, container) : defaultData,\n            p: textAnimatorAnimatables.p ? getProp(elem, textAnimatorAnimatables.p, 1, 0, container) : defaultData,\n            sw: textAnimatorAnimatables.sw ? getProp(elem, textAnimatorAnimatables.sw, 0, 0, container) : defaultData,\n            sc: textAnimatorAnimatables.sc ? getProp(elem, textAnimatorAnimatables.sc, 1, 0, container) : defaultData,\n            fc: textAnimatorAnimatables.fc ? getProp(elem, textAnimatorAnimatables.fc, 1, 0, container) : defaultData,\n            fh: textAnimatorAnimatables.fh ? getProp(elem, textAnimatorAnimatables.fh, 0, 0, container) : defaultData,\n            fs: textAnimatorAnimatables.fs ? getProp(elem, textAnimatorAnimatables.fs, 0, 0.01, container) : defaultData,\n            fb: textAnimatorAnimatables.fb ? getProp(elem, textAnimatorAnimatables.fb, 0, 0.01, container) : defaultData,\n            t: textAnimatorAnimatables.t ? getProp(elem, textAnimatorAnimatables.t, 0, 0, container) : defaultData\n        };\n        this.s = TextSelectorProp.getTextSelectorProp(elem, animatorProps.s, container);\n        this.s.t = animatorProps.s.t;\n    }\n    function TextAnimatorProperty(textData, renderType, elem) {\n        this._isFirstFrame = true;\n        this._hasMaskedPath = false;\n        this._frameId = -1;\n        this._textData = textData;\n        this._renderType = renderType;\n        this._elem = elem;\n        this._animatorsData = createSizedArray(this._textData.a.length);\n        this._pathData = {};\n        this._moreOptions = {\n            alignment: {}\n        };\n        this.renderedLetters = [];\n        this.lettersChangedFlag = false;\n        this.initDynamicPropertyContainer(elem);\n    }\n    TextAnimatorProperty.prototype.searchProperties = function() {\n        var i;\n        var len = this._textData.a.length;\n        var animatorProps;\n        var getProp = PropertyFactory.getProp;\n        for(i = 0; i < len; i += 1){\n            animatorProps = this._textData.a[i];\n            this._animatorsData[i] = new TextAnimatorDataProperty(this._elem, animatorProps, this);\n        }\n        if (this._textData.p && \"m\" in this._textData.p) {\n            this._pathData = {\n                a: getProp(this._elem, this._textData.p.a, 0, 0, this),\n                f: getProp(this._elem, this._textData.p.f, 0, 0, this),\n                l: getProp(this._elem, this._textData.p.l, 0, 0, this),\n                r: getProp(this._elem, this._textData.p.r, 0, 0, this),\n                p: getProp(this._elem, this._textData.p.p, 0, 0, this),\n                m: this._elem.maskManager.getMaskProperty(this._textData.p.m)\n            };\n            this._hasMaskedPath = true;\n        } else {\n            this._hasMaskedPath = false;\n        }\n        this._moreOptions.alignment = getProp(this._elem, this._textData.m.a, 1, 0, this);\n    };\n    TextAnimatorProperty.prototype.getMeasures = function(documentData, lettersChangedFlag) {\n        this.lettersChangedFlag = lettersChangedFlag;\n        if (!this._mdf && !this._isFirstFrame && !lettersChangedFlag && (!this._hasMaskedPath || !this._pathData.m._mdf)) {\n            return;\n        }\n        this._isFirstFrame = false;\n        var alignment = this._moreOptions.alignment.v;\n        var animators = this._animatorsData;\n        var textData = this._textData;\n        var matrixHelper = this.mHelper;\n        var renderType = this._renderType;\n        var renderedLettersCount = this.renderedLetters.length;\n        var xPos;\n        var yPos;\n        var i;\n        var len;\n        var letters = documentData.l;\n        var pathInfo;\n        var currentLength;\n        var currentPoint;\n        var segmentLength;\n        var flag;\n        var pointInd;\n        var segmentInd;\n        var prevPoint;\n        var points;\n        var segments;\n        var partialLength;\n        var totalLength;\n        var perc;\n        var tanAngle;\n        var mask;\n        if (this._hasMaskedPath) {\n            mask = this._pathData.m;\n            if (!this._pathData.n || this._pathData._mdf) {\n                var paths = mask.v;\n                if (this._pathData.r.v) {\n                    paths = paths.reverse();\n                } // TODO: release bezier data cached from previous pathInfo: this._pathData.pi\n                pathInfo = {\n                    tLength: 0,\n                    segments: []\n                };\n                len = paths._length - 1;\n                var bezierData;\n                totalLength = 0;\n                for(i = 0; i < len; i += 1){\n                    bezierData = bez.buildBezierData(paths.v[i], paths.v[i + 1], [\n                        paths.o[i][0] - paths.v[i][0],\n                        paths.o[i][1] - paths.v[i][1]\n                    ], [\n                        paths.i[i + 1][0] - paths.v[i + 1][0],\n                        paths.i[i + 1][1] - paths.v[i + 1][1]\n                    ]);\n                    pathInfo.tLength += bezierData.segmentLength;\n                    pathInfo.segments.push(bezierData);\n                    totalLength += bezierData.segmentLength;\n                }\n                i = len;\n                if (mask.v.c) {\n                    bezierData = bez.buildBezierData(paths.v[i], paths.v[0], [\n                        paths.o[i][0] - paths.v[i][0],\n                        paths.o[i][1] - paths.v[i][1]\n                    ], [\n                        paths.i[0][0] - paths.v[0][0],\n                        paths.i[0][1] - paths.v[0][1]\n                    ]);\n                    pathInfo.tLength += bezierData.segmentLength;\n                    pathInfo.segments.push(bezierData);\n                    totalLength += bezierData.segmentLength;\n                }\n                this._pathData.pi = pathInfo;\n            }\n            pathInfo = this._pathData.pi;\n            currentLength = this._pathData.f.v;\n            segmentInd = 0;\n            pointInd = 1;\n            segmentLength = 0;\n            flag = true;\n            segments = pathInfo.segments;\n            if (currentLength < 0 && mask.v.c) {\n                if (pathInfo.tLength < Math.abs(currentLength)) {\n                    currentLength = -Math.abs(currentLength) % pathInfo.tLength;\n                }\n                segmentInd = segments.length - 1;\n                points = segments[segmentInd].points;\n                pointInd = points.length - 1;\n                while(currentLength < 0){\n                    currentLength += points[pointInd].partialLength;\n                    pointInd -= 1;\n                    if (pointInd < 0) {\n                        segmentInd -= 1;\n                        points = segments[segmentInd].points;\n                        pointInd = points.length - 1;\n                    }\n                }\n            }\n            points = segments[segmentInd].points;\n            prevPoint = points[pointInd - 1];\n            currentPoint = points[pointInd];\n            partialLength = currentPoint.partialLength;\n        }\n        len = letters.length;\n        xPos = 0;\n        yPos = 0;\n        var yOff = documentData.finalSize * 1.2 * 0.714;\n        var firstLine = true;\n        var animatorProps;\n        var animatorSelector;\n        var j;\n        var jLen;\n        var letterValue;\n        jLen = animators.length;\n        var mult;\n        var ind = -1;\n        var offf;\n        var xPathPos;\n        var yPathPos;\n        var initPathPos = currentLength;\n        var initSegmentInd = segmentInd;\n        var initPointInd = pointInd;\n        var currentLine = -1;\n        var elemOpacity;\n        var sc;\n        var sw;\n        var fc;\n        var k;\n        var letterSw;\n        var letterSc;\n        var letterFc;\n        var letterM = \"\";\n        var letterP = this.defaultPropsArray;\n        var letterO; //\n        if (documentData.j === 2 || documentData.j === 1) {\n            var animatorJustifyOffset = 0;\n            var animatorFirstCharOffset = 0;\n            var justifyOffsetMult = documentData.j === 2 ? -0.5 : -1;\n            var lastIndex = 0;\n            var isNewLine = true;\n            for(i = 0; i < len; i += 1){\n                if (letters[i].n) {\n                    if (animatorJustifyOffset) {\n                        animatorJustifyOffset += animatorFirstCharOffset;\n                    }\n                    while(lastIndex < i){\n                        letters[lastIndex].animatorJustifyOffset = animatorJustifyOffset;\n                        lastIndex += 1;\n                    }\n                    animatorJustifyOffset = 0;\n                    isNewLine = true;\n                } else {\n                    for(j = 0; j < jLen; j += 1){\n                        animatorProps = animators[j].a;\n                        if (animatorProps.t.propType) {\n                            if (isNewLine && documentData.j === 2) {\n                                animatorFirstCharOffset += animatorProps.t.v * justifyOffsetMult;\n                            }\n                            animatorSelector = animators[j].s;\n                            mult = animatorSelector.getMult(letters[i].anIndexes[j], textData.a[j].s.totalChars);\n                            if (mult.length) {\n                                animatorJustifyOffset += animatorProps.t.v * mult[0] * justifyOffsetMult;\n                            } else {\n                                animatorJustifyOffset += animatorProps.t.v * mult * justifyOffsetMult;\n                            }\n                        }\n                    }\n                    isNewLine = false;\n                }\n            }\n            if (animatorJustifyOffset) {\n                animatorJustifyOffset += animatorFirstCharOffset;\n            }\n            while(lastIndex < i){\n                letters[lastIndex].animatorJustifyOffset = animatorJustifyOffset;\n                lastIndex += 1;\n            }\n        } //\n        for(i = 0; i < len; i += 1){\n            matrixHelper.reset();\n            elemOpacity = 1;\n            if (letters[i].n) {\n                xPos = 0;\n                yPos += documentData.yOffset;\n                yPos += firstLine ? 1 : 0;\n                currentLength = initPathPos;\n                firstLine = false;\n                if (this._hasMaskedPath) {\n                    segmentInd = initSegmentInd;\n                    pointInd = initPointInd;\n                    points = segments[segmentInd].points;\n                    prevPoint = points[pointInd - 1];\n                    currentPoint = points[pointInd];\n                    partialLength = currentPoint.partialLength;\n                    segmentLength = 0;\n                }\n                letterM = \"\";\n                letterFc = \"\";\n                letterSw = \"\";\n                letterO = \"\";\n                letterP = this.defaultPropsArray;\n            } else {\n                if (this._hasMaskedPath) {\n                    if (currentLine !== letters[i].line) {\n                        switch(documentData.j){\n                            case 1:\n                                currentLength += totalLength - documentData.lineWidths[letters[i].line];\n                                break;\n                            case 2:\n                                currentLength += (totalLength - documentData.lineWidths[letters[i].line]) / 2;\n                                break;\n                            default:\n                                break;\n                        }\n                        currentLine = letters[i].line;\n                    }\n                    if (ind !== letters[i].ind) {\n                        if (letters[ind]) {\n                            currentLength += letters[ind].extra;\n                        }\n                        currentLength += letters[i].an / 2;\n                        ind = letters[i].ind;\n                    }\n                    currentLength += alignment[0] * letters[i].an * 0.005;\n                    var animatorOffset = 0;\n                    for(j = 0; j < jLen; j += 1){\n                        animatorProps = animators[j].a;\n                        if (animatorProps.p.propType) {\n                            animatorSelector = animators[j].s;\n                            mult = animatorSelector.getMult(letters[i].anIndexes[j], textData.a[j].s.totalChars);\n                            if (mult.length) {\n                                animatorOffset += animatorProps.p.v[0] * mult[0];\n                            } else {\n                                animatorOffset += animatorProps.p.v[0] * mult;\n                            }\n                        }\n                        if (animatorProps.a.propType) {\n                            animatorSelector = animators[j].s;\n                            mult = animatorSelector.getMult(letters[i].anIndexes[j], textData.a[j].s.totalChars);\n                            if (mult.length) {\n                                animatorOffset += animatorProps.a.v[0] * mult[0];\n                            } else {\n                                animatorOffset += animatorProps.a.v[0] * mult;\n                            }\n                        }\n                    }\n                    flag = true; // Force alignment only works with a single line for now\n                    if (this._pathData.a.v) {\n                        currentLength = letters[0].an * 0.5 + (totalLength - this._pathData.f.v - letters[0].an * 0.5 - letters[letters.length - 1].an * 0.5) * ind / (len - 1);\n                        currentLength += this._pathData.f.v;\n                    }\n                    while(flag){\n                        if (segmentLength + partialLength >= currentLength + animatorOffset || !points) {\n                            perc = (currentLength + animatorOffset - segmentLength) / currentPoint.partialLength;\n                            xPathPos = prevPoint.point[0] + (currentPoint.point[0] - prevPoint.point[0]) * perc;\n                            yPathPos = prevPoint.point[1] + (currentPoint.point[1] - prevPoint.point[1]) * perc;\n                            matrixHelper.translate(-alignment[0] * letters[i].an * 0.005, -(alignment[1] * yOff) * 0.01);\n                            flag = false;\n                        } else if (points) {\n                            segmentLength += currentPoint.partialLength;\n                            pointInd += 1;\n                            if (pointInd >= points.length) {\n                                pointInd = 0;\n                                segmentInd += 1;\n                                if (!segments[segmentInd]) {\n                                    if (mask.v.c) {\n                                        pointInd = 0;\n                                        segmentInd = 0;\n                                        points = segments[segmentInd].points;\n                                    } else {\n                                        segmentLength -= currentPoint.partialLength;\n                                        points = null;\n                                    }\n                                } else {\n                                    points = segments[segmentInd].points;\n                                }\n                            }\n                            if (points) {\n                                prevPoint = currentPoint;\n                                currentPoint = points[pointInd];\n                                partialLength = currentPoint.partialLength;\n                            }\n                        }\n                    }\n                    offf = letters[i].an / 2 - letters[i].add;\n                    matrixHelper.translate(-offf, 0, 0);\n                } else {\n                    offf = letters[i].an / 2 - letters[i].add;\n                    matrixHelper.translate(-offf, 0, 0); // Grouping alignment\n                    matrixHelper.translate(-alignment[0] * letters[i].an * 0.005, -alignment[1] * yOff * 0.01, 0);\n                }\n                for(j = 0; j < jLen; j += 1){\n                    animatorProps = animators[j].a;\n                    if (animatorProps.t.propType) {\n                        animatorSelector = animators[j].s;\n                        mult = animatorSelector.getMult(letters[i].anIndexes[j], textData.a[j].s.totalChars); // This condition is to prevent applying tracking to first character in each line. Might be better to use a boolean \"isNewLine\"\n                        if (xPos !== 0 || documentData.j !== 0) {\n                            if (this._hasMaskedPath) {\n                                if (mult.length) {\n                                    currentLength += animatorProps.t.v * mult[0];\n                                } else {\n                                    currentLength += animatorProps.t.v * mult;\n                                }\n                            } else if (mult.length) {\n                                xPos += animatorProps.t.v * mult[0];\n                            } else {\n                                xPos += animatorProps.t.v * mult;\n                            }\n                        }\n                    }\n                }\n                if (documentData.strokeWidthAnim) {\n                    sw = documentData.sw || 0;\n                }\n                if (documentData.strokeColorAnim) {\n                    if (documentData.sc) {\n                        sc = [\n                            documentData.sc[0],\n                            documentData.sc[1],\n                            documentData.sc[2]\n                        ];\n                    } else {\n                        sc = [\n                            0,\n                            0,\n                            0\n                        ];\n                    }\n                }\n                if (documentData.fillColorAnim && documentData.fc) {\n                    fc = [\n                        documentData.fc[0],\n                        documentData.fc[1],\n                        documentData.fc[2]\n                    ];\n                }\n                for(j = 0; j < jLen; j += 1){\n                    animatorProps = animators[j].a;\n                    if (animatorProps.a.propType) {\n                        animatorSelector = animators[j].s;\n                        mult = animatorSelector.getMult(letters[i].anIndexes[j], textData.a[j].s.totalChars);\n                        if (mult.length) {\n                            matrixHelper.translate(-animatorProps.a.v[0] * mult[0], -animatorProps.a.v[1] * mult[1], animatorProps.a.v[2] * mult[2]);\n                        } else {\n                            matrixHelper.translate(-animatorProps.a.v[0] * mult, -animatorProps.a.v[1] * mult, animatorProps.a.v[2] * mult);\n                        }\n                    }\n                }\n                for(j = 0; j < jLen; j += 1){\n                    animatorProps = animators[j].a;\n                    if (animatorProps.s.propType) {\n                        animatorSelector = animators[j].s;\n                        mult = animatorSelector.getMult(letters[i].anIndexes[j], textData.a[j].s.totalChars);\n                        if (mult.length) {\n                            matrixHelper.scale(1 + (animatorProps.s.v[0] - 1) * mult[0], 1 + (animatorProps.s.v[1] - 1) * mult[1], 1);\n                        } else {\n                            matrixHelper.scale(1 + (animatorProps.s.v[0] - 1) * mult, 1 + (animatorProps.s.v[1] - 1) * mult, 1);\n                        }\n                    }\n                }\n                for(j = 0; j < jLen; j += 1){\n                    animatorProps = animators[j].a;\n                    animatorSelector = animators[j].s;\n                    mult = animatorSelector.getMult(letters[i].anIndexes[j], textData.a[j].s.totalChars);\n                    if (animatorProps.sk.propType) {\n                        if (mult.length) {\n                            matrixHelper.skewFromAxis(-animatorProps.sk.v * mult[0], animatorProps.sa.v * mult[1]);\n                        } else {\n                            matrixHelper.skewFromAxis(-animatorProps.sk.v * mult, animatorProps.sa.v * mult);\n                        }\n                    }\n                    if (animatorProps.r.propType) {\n                        if (mult.length) {\n                            matrixHelper.rotateZ(-animatorProps.r.v * mult[2]);\n                        } else {\n                            matrixHelper.rotateZ(-animatorProps.r.v * mult);\n                        }\n                    }\n                    if (animatorProps.ry.propType) {\n                        if (mult.length) {\n                            matrixHelper.rotateY(animatorProps.ry.v * mult[1]);\n                        } else {\n                            matrixHelper.rotateY(animatorProps.ry.v * mult);\n                        }\n                    }\n                    if (animatorProps.rx.propType) {\n                        if (mult.length) {\n                            matrixHelper.rotateX(animatorProps.rx.v * mult[0]);\n                        } else {\n                            matrixHelper.rotateX(animatorProps.rx.v * mult);\n                        }\n                    }\n                    if (animatorProps.o.propType) {\n                        if (mult.length) {\n                            elemOpacity += (animatorProps.o.v * mult[0] - elemOpacity) * mult[0];\n                        } else {\n                            elemOpacity += (animatorProps.o.v * mult - elemOpacity) * mult;\n                        }\n                    }\n                    if (documentData.strokeWidthAnim && animatorProps.sw.propType) {\n                        if (mult.length) {\n                            sw += animatorProps.sw.v * mult[0];\n                        } else {\n                            sw += animatorProps.sw.v * mult;\n                        }\n                    }\n                    if (documentData.strokeColorAnim && animatorProps.sc.propType) {\n                        for(k = 0; k < 3; k += 1){\n                            if (mult.length) {\n                                sc[k] += (animatorProps.sc.v[k] - sc[k]) * mult[0];\n                            } else {\n                                sc[k] += (animatorProps.sc.v[k] - sc[k]) * mult;\n                            }\n                        }\n                    }\n                    if (documentData.fillColorAnim && documentData.fc) {\n                        if (animatorProps.fc.propType) {\n                            for(k = 0; k < 3; k += 1){\n                                if (mult.length) {\n                                    fc[k] += (animatorProps.fc.v[k] - fc[k]) * mult[0];\n                                } else {\n                                    fc[k] += (animatorProps.fc.v[k] - fc[k]) * mult;\n                                }\n                            }\n                        }\n                        if (animatorProps.fh.propType) {\n                            if (mult.length) {\n                                fc = addHueToRGB(fc, animatorProps.fh.v * mult[0]);\n                            } else {\n                                fc = addHueToRGB(fc, animatorProps.fh.v * mult);\n                            }\n                        }\n                        if (animatorProps.fs.propType) {\n                            if (mult.length) {\n                                fc = addSaturationToRGB(fc, animatorProps.fs.v * mult[0]);\n                            } else {\n                                fc = addSaturationToRGB(fc, animatorProps.fs.v * mult);\n                            }\n                        }\n                        if (animatorProps.fb.propType) {\n                            if (mult.length) {\n                                fc = addBrightnessToRGB(fc, animatorProps.fb.v * mult[0]);\n                            } else {\n                                fc = addBrightnessToRGB(fc, animatorProps.fb.v * mult);\n                            }\n                        }\n                    }\n                }\n                for(j = 0; j < jLen; j += 1){\n                    animatorProps = animators[j].a;\n                    if (animatorProps.p.propType) {\n                        animatorSelector = animators[j].s;\n                        mult = animatorSelector.getMult(letters[i].anIndexes[j], textData.a[j].s.totalChars);\n                        if (this._hasMaskedPath) {\n                            if (mult.length) {\n                                matrixHelper.translate(0, animatorProps.p.v[1] * mult[0], -animatorProps.p.v[2] * mult[1]);\n                            } else {\n                                matrixHelper.translate(0, animatorProps.p.v[1] * mult, -animatorProps.p.v[2] * mult);\n                            }\n                        } else if (mult.length) {\n                            matrixHelper.translate(animatorProps.p.v[0] * mult[0], animatorProps.p.v[1] * mult[1], -animatorProps.p.v[2] * mult[2]);\n                        } else {\n                            matrixHelper.translate(animatorProps.p.v[0] * mult, animatorProps.p.v[1] * mult, -animatorProps.p.v[2] * mult);\n                        }\n                    }\n                }\n                if (documentData.strokeWidthAnim) {\n                    letterSw = sw < 0 ? 0 : sw;\n                }\n                if (documentData.strokeColorAnim) {\n                    letterSc = \"rgb(\" + Math.round(sc[0] * 255) + \",\" + Math.round(sc[1] * 255) + \",\" + Math.round(sc[2] * 255) + \")\";\n                }\n                if (documentData.fillColorAnim && documentData.fc) {\n                    letterFc = \"rgb(\" + Math.round(fc[0] * 255) + \",\" + Math.round(fc[1] * 255) + \",\" + Math.round(fc[2] * 255) + \")\";\n                }\n                if (this._hasMaskedPath) {\n                    matrixHelper.translate(0, -documentData.ls);\n                    matrixHelper.translate(0, alignment[1] * yOff * 0.01 + yPos, 0);\n                    if (this._pathData.p.v) {\n                        tanAngle = (currentPoint.point[1] - prevPoint.point[1]) / (currentPoint.point[0] - prevPoint.point[0]);\n                        var rot = Math.atan(tanAngle) * 180 / Math.PI;\n                        if (currentPoint.point[0] < prevPoint.point[0]) {\n                            rot += 180;\n                        }\n                        matrixHelper.rotate(-rot * Math.PI / 180);\n                    }\n                    matrixHelper.translate(xPathPos, yPathPos, 0);\n                    currentLength -= alignment[0] * letters[i].an * 0.005;\n                    if (letters[i + 1] && ind !== letters[i + 1].ind) {\n                        currentLength += letters[i].an / 2;\n                        currentLength += documentData.tr * 0.001 * documentData.finalSize;\n                    }\n                } else {\n                    matrixHelper.translate(xPos, yPos, 0);\n                    if (documentData.ps) {\n                        // matrixHelper.translate(documentData.ps[0],documentData.ps[1],0);\n                        matrixHelper.translate(documentData.ps[0], documentData.ps[1] + documentData.ascent, 0);\n                    }\n                    switch(documentData.j){\n                        case 1:\n                            matrixHelper.translate(letters[i].animatorJustifyOffset + documentData.justifyOffset + (documentData.boxWidth - documentData.lineWidths[letters[i].line]), 0, 0);\n                            break;\n                        case 2:\n                            matrixHelper.translate(letters[i].animatorJustifyOffset + documentData.justifyOffset + (documentData.boxWidth - documentData.lineWidths[letters[i].line]) / 2, 0, 0);\n                            break;\n                        default:\n                            break;\n                    }\n                    matrixHelper.translate(0, -documentData.ls);\n                    matrixHelper.translate(offf, 0, 0);\n                    matrixHelper.translate(alignment[0] * letters[i].an * 0.005, alignment[1] * yOff * 0.01, 0);\n                    xPos += letters[i].l + documentData.tr * 0.001 * documentData.finalSize;\n                }\n                if (renderType === \"html\") {\n                    letterM = matrixHelper.toCSS();\n                } else if (renderType === \"svg\") {\n                    letterM = matrixHelper.to2dCSS();\n                } else {\n                    letterP = [\n                        matrixHelper.props[0],\n                        matrixHelper.props[1],\n                        matrixHelper.props[2],\n                        matrixHelper.props[3],\n                        matrixHelper.props[4],\n                        matrixHelper.props[5],\n                        matrixHelper.props[6],\n                        matrixHelper.props[7],\n                        matrixHelper.props[8],\n                        matrixHelper.props[9],\n                        matrixHelper.props[10],\n                        matrixHelper.props[11],\n                        matrixHelper.props[12],\n                        matrixHelper.props[13],\n                        matrixHelper.props[14],\n                        matrixHelper.props[15]\n                    ];\n                }\n                letterO = elemOpacity;\n            }\n            if (renderedLettersCount <= i) {\n                letterValue = new LetterProps(letterO, letterSw, letterSc, letterFc, letterM, letterP);\n                this.renderedLetters.push(letterValue);\n                renderedLettersCount += 1;\n                this.lettersChangedFlag = true;\n            } else {\n                letterValue = this.renderedLetters[i];\n                this.lettersChangedFlag = letterValue.update(letterO, letterSw, letterSc, letterFc, letterM, letterP) || this.lettersChangedFlag;\n            }\n        }\n    };\n    TextAnimatorProperty.prototype.getValue = function() {\n        if (this._elem.globalData.frameId === this._frameId) {\n            return;\n        }\n        this._frameId = this._elem.globalData.frameId;\n        this.iterateDynamicProperties();\n    };\n    TextAnimatorProperty.prototype.mHelper = new Matrix();\n    TextAnimatorProperty.prototype.defaultPropsArray = [];\n    extendPrototype([\n        DynamicPropertyContainer\n    ], TextAnimatorProperty);\n    function ITextElement() {}\n    ITextElement.prototype.initElement = function(data, globalData, comp) {\n        this.lettersChangedFlag = true;\n        this.initFrame();\n        this.initBaseData(data, globalData, comp);\n        this.textProperty = new TextProperty(this, data.t, this.dynamicProperties);\n        this.textAnimator = new TextAnimatorProperty(data.t, this.renderType, this);\n        this.initTransform(data, globalData, comp);\n        this.initHierarchy();\n        this.initRenderable();\n        this.initRendererElement();\n        this.createContainerElements();\n        this.createRenderableComponents();\n        this.createContent();\n        this.hide();\n        this.textAnimator.searchProperties(this.dynamicProperties);\n    };\n    ITextElement.prototype.prepareFrame = function(num) {\n        this._mdf = false;\n        this.prepareRenderableFrame(num);\n        this.prepareProperties(num, this.isInRange);\n    };\n    ITextElement.prototype.createPathShape = function(matrixHelper, shapes) {\n        var j;\n        var jLen = shapes.length;\n        var pathNodes;\n        var shapeStr = \"\";\n        for(j = 0; j < jLen; j += 1){\n            if (shapes[j].ty === \"sh\") {\n                pathNodes = shapes[j].ks.k;\n                shapeStr += buildShapeString(pathNodes, pathNodes.i.length, true, matrixHelper);\n            }\n        }\n        return shapeStr;\n    };\n    ITextElement.prototype.updateDocumentData = function(newData, index) {\n        this.textProperty.updateDocumentData(newData, index);\n    };\n    ITextElement.prototype.canResizeFont = function(_canResize) {\n        this.textProperty.canResizeFont(_canResize);\n    };\n    ITextElement.prototype.setMinimumFontSize = function(_fontSize) {\n        this.textProperty.setMinimumFontSize(_fontSize);\n    };\n    ITextElement.prototype.applyTextPropertiesToMatrix = function(documentData, matrixHelper, lineNumber, xPos, yPos) {\n        if (documentData.ps) {\n            matrixHelper.translate(documentData.ps[0], documentData.ps[1] + documentData.ascent, 0);\n        }\n        matrixHelper.translate(0, -documentData.ls, 0);\n        switch(documentData.j){\n            case 1:\n                matrixHelper.translate(documentData.justifyOffset + (documentData.boxWidth - documentData.lineWidths[lineNumber]), 0, 0);\n                break;\n            case 2:\n                matrixHelper.translate(documentData.justifyOffset + (documentData.boxWidth - documentData.lineWidths[lineNumber]) / 2, 0, 0);\n                break;\n            default:\n                break;\n        }\n        matrixHelper.translate(xPos, yPos, 0);\n    };\n    ITextElement.prototype.buildColor = function(colorData) {\n        return \"rgb(\" + Math.round(colorData[0] * 255) + \",\" + Math.round(colorData[1] * 255) + \",\" + Math.round(colorData[2] * 255) + \")\";\n    };\n    ITextElement.prototype.emptyProp = new LetterProps();\n    ITextElement.prototype.destroy = function() {};\n    ITextElement.prototype.validateText = function() {\n        if (this.textProperty._mdf || this.textProperty._isFirstFrame) {\n            this.buildNewText();\n            this.textProperty._isFirstFrame = false;\n            this.textProperty._mdf = false;\n        }\n    };\n    var emptyShapeData = {\n        shapes: []\n    };\n    function SVGTextLottieElement(data, globalData, comp) {\n        this.textSpans = [];\n        this.renderType = \"svg\";\n        this.initElement(data, globalData, comp);\n    }\n    extendPrototype([\n        BaseElement,\n        TransformElement,\n        SVGBaseElement,\n        HierarchyElement,\n        FrameElement,\n        RenderableDOMElement,\n        ITextElement\n    ], SVGTextLottieElement);\n    SVGTextLottieElement.prototype.createContent = function() {\n        if (this.data.singleShape && !this.globalData.fontManager.chars) {\n            this.textContainer = createNS(\"text\");\n        }\n    };\n    SVGTextLottieElement.prototype.buildTextContents = function(textArray) {\n        var i = 0;\n        var len = textArray.length;\n        var textContents = [];\n        var currentTextContent = \"\";\n        while(i < len){\n            if (textArray[i] === String.fromCharCode(13) || textArray[i] === String.fromCharCode(3)) {\n                textContents.push(currentTextContent);\n                currentTextContent = \"\";\n            } else {\n                currentTextContent += textArray[i];\n            }\n            i += 1;\n        }\n        textContents.push(currentTextContent);\n        return textContents;\n    };\n    SVGTextLottieElement.prototype.buildShapeData = function(data, scale) {\n        // data should probably be cloned to apply scale separately to each instance of a text on different layers\n        // but since text internal content gets only rendered once and then it's never rerendered,\n        // it's probably safe not to clone data and reuse always the same instance even if the object is mutated.\n        // Avoiding cloning is preferred since cloning each character shape data is expensive\n        if (data.shapes && data.shapes.length) {\n            var shape = data.shapes[0];\n            if (shape.it) {\n                var shapeItem = shape.it[shape.it.length - 1];\n                if (shapeItem.s) {\n                    shapeItem.s.k[0] = scale;\n                    shapeItem.s.k[1] = scale;\n                }\n            }\n        }\n        return data;\n    };\n    SVGTextLottieElement.prototype.buildNewText = function() {\n        this.addDynamicProperty(this);\n        var i;\n        var len;\n        var documentData = this.textProperty.currentData;\n        this.renderedLetters = createSizedArray(documentData ? documentData.l.length : 0);\n        if (documentData.fc) {\n            this.layerElement.setAttribute(\"fill\", this.buildColor(documentData.fc));\n        } else {\n            this.layerElement.setAttribute(\"fill\", \"rgba(0,0,0,0)\");\n        }\n        if (documentData.sc) {\n            this.layerElement.setAttribute(\"stroke\", this.buildColor(documentData.sc));\n            this.layerElement.setAttribute(\"stroke-width\", documentData.sw);\n        }\n        this.layerElement.setAttribute(\"font-size\", documentData.finalSize);\n        var fontData = this.globalData.fontManager.getFontByName(documentData.f);\n        if (fontData.fClass) {\n            this.layerElement.setAttribute(\"class\", fontData.fClass);\n        } else {\n            this.layerElement.setAttribute(\"font-family\", fontData.fFamily);\n            var fWeight = documentData.fWeight;\n            var fStyle = documentData.fStyle;\n            this.layerElement.setAttribute(\"font-style\", fStyle);\n            this.layerElement.setAttribute(\"font-weight\", fWeight);\n        }\n        this.layerElement.setAttribute(\"aria-label\", documentData.t);\n        var letters = documentData.l || [];\n        var usesGlyphs = !!this.globalData.fontManager.chars;\n        len = letters.length;\n        var tSpan;\n        var matrixHelper = this.mHelper;\n        var shapeStr = \"\";\n        var singleShape = this.data.singleShape;\n        var xPos = 0;\n        var yPos = 0;\n        var firstLine = true;\n        var trackingOffset = documentData.tr * 0.001 * documentData.finalSize;\n        if (singleShape && !usesGlyphs && !documentData.sz) {\n            var tElement = this.textContainer;\n            var justify = \"start\";\n            switch(documentData.j){\n                case 1:\n                    justify = \"end\";\n                    break;\n                case 2:\n                    justify = \"middle\";\n                    break;\n                default:\n                    justify = \"start\";\n                    break;\n            }\n            tElement.setAttribute(\"text-anchor\", justify);\n            tElement.setAttribute(\"letter-spacing\", trackingOffset);\n            var textContent = this.buildTextContents(documentData.finalText);\n            len = textContent.length;\n            yPos = documentData.ps ? documentData.ps[1] + documentData.ascent : 0;\n            for(i = 0; i < len; i += 1){\n                tSpan = this.textSpans[i].span || createNS(\"tspan\");\n                tSpan.textContent = textContent[i];\n                tSpan.setAttribute(\"x\", 0);\n                tSpan.setAttribute(\"y\", yPos);\n                tSpan.style.display = \"inherit\";\n                tElement.appendChild(tSpan);\n                if (!this.textSpans[i]) {\n                    this.textSpans[i] = {\n                        span: null,\n                        glyph: null\n                    };\n                }\n                this.textSpans[i].span = tSpan;\n                yPos += documentData.finalLineHeight;\n            }\n            this.layerElement.appendChild(tElement);\n        } else {\n            var cachedSpansLength = this.textSpans.length;\n            var charData;\n            for(i = 0; i < len; i += 1){\n                if (!this.textSpans[i]) {\n                    this.textSpans[i] = {\n                        span: null,\n                        childSpan: null,\n                        glyph: null\n                    };\n                }\n                if (!usesGlyphs || !singleShape || i === 0) {\n                    tSpan = cachedSpansLength > i ? this.textSpans[i].span : createNS(usesGlyphs ? \"g\" : \"text\");\n                    if (cachedSpansLength <= i) {\n                        tSpan.setAttribute(\"stroke-linecap\", \"butt\");\n                        tSpan.setAttribute(\"stroke-linejoin\", \"round\");\n                        tSpan.setAttribute(\"stroke-miterlimit\", \"4\");\n                        this.textSpans[i].span = tSpan;\n                        if (usesGlyphs) {\n                            var childSpan = createNS(\"g\");\n                            tSpan.appendChild(childSpan);\n                            this.textSpans[i].childSpan = childSpan;\n                        }\n                        this.textSpans[i].span = tSpan;\n                        this.layerElement.appendChild(tSpan);\n                    }\n                    tSpan.style.display = \"inherit\";\n                }\n                matrixHelper.reset();\n                if (singleShape) {\n                    if (letters[i].n) {\n                        xPos = -trackingOffset;\n                        yPos += documentData.yOffset;\n                        yPos += firstLine ? 1 : 0;\n                        firstLine = false;\n                    }\n                    this.applyTextPropertiesToMatrix(documentData, matrixHelper, letters[i].line, xPos, yPos);\n                    xPos += letters[i].l || 0; // xPos += letters[i].val === ' ' ? 0 : trackingOffset;\n                    xPos += trackingOffset;\n                }\n                if (usesGlyphs) {\n                    charData = this.globalData.fontManager.getCharData(documentData.finalText[i], fontData.fStyle, this.globalData.fontManager.getFontByName(documentData.f).fFamily);\n                    var glyphElement; // t === 1 means the character has been replaced with an animated shaped\n                    if (charData.t === 1) {\n                        glyphElement = new SVGCompElement(charData.data, this.globalData, this);\n                    } else {\n                        var data = emptyShapeData;\n                        if (charData.data && charData.data.shapes) {\n                            data = this.buildShapeData(charData.data, documentData.finalSize);\n                        }\n                        glyphElement = new SVGShapeElement(data, this.globalData, this);\n                    }\n                    if (this.textSpans[i].glyph) {\n                        var glyph = this.textSpans[i].glyph;\n                        this.textSpans[i].childSpan.removeChild(glyph.layerElement);\n                        glyph.destroy();\n                    }\n                    this.textSpans[i].glyph = glyphElement;\n                    glyphElement._debug = true;\n                    glyphElement.prepareFrame(0);\n                    glyphElement.renderFrame();\n                    this.textSpans[i].childSpan.appendChild(glyphElement.layerElement); // when using animated shapes, the layer will be scaled instead of replacing the internal scale\n                    // this might have issues with strokes and might need a different solution\n                    if (charData.t === 1) {\n                        this.textSpans[i].childSpan.setAttribute(\"transform\", \"scale(\" + documentData.finalSize / 100 + \",\" + documentData.finalSize / 100 + \")\");\n                    }\n                } else {\n                    if (singleShape) {\n                        tSpan.setAttribute(\"transform\", \"translate(\" + matrixHelper.props[12] + \",\" + matrixHelper.props[13] + \")\");\n                    }\n                    tSpan.textContent = letters[i].val;\n                    tSpan.setAttributeNS(\"http://www.w3.org/XML/1998/namespace\", \"xml:space\", \"preserve\");\n                } //\n            }\n            if (singleShape && tSpan) {\n                tSpan.setAttribute(\"d\", shapeStr);\n            }\n        }\n        while(i < this.textSpans.length){\n            this.textSpans[i].span.style.display = \"none\";\n            i += 1;\n        }\n        this._sizeChanged = true;\n    };\n    SVGTextLottieElement.prototype.sourceRectAtTime = function() {\n        this.prepareFrame(this.comp.renderedFrame - this.data.st);\n        this.renderInnerContent();\n        if (this._sizeChanged) {\n            this._sizeChanged = false;\n            var textBox = this.layerElement.getBBox();\n            this.bbox = {\n                top: textBox.y,\n                left: textBox.x,\n                width: textBox.width,\n                height: textBox.height\n            };\n        }\n        return this.bbox;\n    };\n    SVGTextLottieElement.prototype.getValue = function() {\n        var i;\n        var len = this.textSpans.length;\n        var glyphElement;\n        this.renderedFrame = this.comp.renderedFrame;\n        for(i = 0; i < len; i += 1){\n            glyphElement = this.textSpans[i].glyph;\n            if (glyphElement) {\n                glyphElement.prepareFrame(this.comp.renderedFrame - this.data.st);\n                if (glyphElement._mdf) {\n                    this._mdf = true;\n                }\n            }\n        }\n    };\n    SVGTextLottieElement.prototype.renderInnerContent = function() {\n        this.validateText();\n        if (!this.data.singleShape || this._mdf) {\n            this.textAnimator.getMeasures(this.textProperty.currentData, this.lettersChangedFlag);\n            if (this.lettersChangedFlag || this.textAnimator.lettersChangedFlag) {\n                this._sizeChanged = true;\n                var i;\n                var len;\n                var renderedLetters = this.textAnimator.renderedLetters;\n                var letters = this.textProperty.currentData.l;\n                len = letters.length;\n                var renderedLetter;\n                var textSpan;\n                var glyphElement;\n                for(i = 0; i < len; i += 1){\n                    if (!letters[i].n) {\n                        renderedLetter = renderedLetters[i];\n                        textSpan = this.textSpans[i].span;\n                        glyphElement = this.textSpans[i].glyph;\n                        if (glyphElement) {\n                            glyphElement.renderFrame();\n                        }\n                        if (renderedLetter._mdf.m) {\n                            textSpan.setAttribute(\"transform\", renderedLetter.m);\n                        }\n                        if (renderedLetter._mdf.o) {\n                            textSpan.setAttribute(\"opacity\", renderedLetter.o);\n                        }\n                        if (renderedLetter._mdf.sw) {\n                            textSpan.setAttribute(\"stroke-width\", renderedLetter.sw);\n                        }\n                        if (renderedLetter._mdf.sc) {\n                            textSpan.setAttribute(\"stroke\", renderedLetter.sc);\n                        }\n                        if (renderedLetter._mdf.fc) {\n                            textSpan.setAttribute(\"fill\", renderedLetter.fc);\n                        }\n                    }\n                }\n            }\n        }\n    };\n    function ISolidElement(data, globalData, comp) {\n        this.initElement(data, globalData, comp);\n    }\n    extendPrototype([\n        IImageElement\n    ], ISolidElement);\n    ISolidElement.prototype.createContent = function() {\n        var rect = createNS(\"rect\"); /// /rect.style.width = this.data.sw;\n        /// /rect.style.height = this.data.sh;\n        /// /rect.style.fill = this.data.sc;\n        rect.setAttribute(\"width\", this.data.sw);\n        rect.setAttribute(\"height\", this.data.sh);\n        rect.setAttribute(\"fill\", this.data.sc);\n        this.layerElement.appendChild(rect);\n    };\n    function NullElement(data, globalData, comp) {\n        this.initFrame();\n        this.initBaseData(data, globalData, comp);\n        this.initFrame();\n        this.initTransform(data, globalData, comp);\n        this.initHierarchy();\n    }\n    NullElement.prototype.prepareFrame = function(num) {\n        this.prepareProperties(num, true);\n    };\n    NullElement.prototype.renderFrame = function() {};\n    NullElement.prototype.getBaseElement = function() {\n        return null;\n    };\n    NullElement.prototype.destroy = function() {};\n    NullElement.prototype.sourceRectAtTime = function() {};\n    NullElement.prototype.hide = function() {};\n    extendPrototype([\n        BaseElement,\n        TransformElement,\n        HierarchyElement,\n        FrameElement\n    ], NullElement);\n    function SVGRendererBase() {}\n    extendPrototype([\n        BaseRenderer\n    ], SVGRendererBase);\n    SVGRendererBase.prototype.createNull = function(data) {\n        return new NullElement(data, this.globalData, this);\n    };\n    SVGRendererBase.prototype.createShape = function(data) {\n        return new SVGShapeElement(data, this.globalData, this);\n    };\n    SVGRendererBase.prototype.createText = function(data) {\n        return new SVGTextLottieElement(data, this.globalData, this);\n    };\n    SVGRendererBase.prototype.createImage = function(data) {\n        return new IImageElement(data, this.globalData, this);\n    };\n    SVGRendererBase.prototype.createSolid = function(data) {\n        return new ISolidElement(data, this.globalData, this);\n    };\n    SVGRendererBase.prototype.configAnimation = function(animData) {\n        this.svgElement.setAttribute(\"xmlns\", \"http://www.w3.org/2000/svg\");\n        this.svgElement.setAttribute(\"xmlns:xlink\", \"http://www.w3.org/1999/xlink\");\n        if (this.renderConfig.viewBoxSize) {\n            this.svgElement.setAttribute(\"viewBox\", this.renderConfig.viewBoxSize);\n        } else {\n            this.svgElement.setAttribute(\"viewBox\", \"0 0 \" + animData.w + \" \" + animData.h);\n        }\n        if (!this.renderConfig.viewBoxOnly) {\n            this.svgElement.setAttribute(\"width\", animData.w);\n            this.svgElement.setAttribute(\"height\", animData.h);\n            this.svgElement.style.width = \"100%\";\n            this.svgElement.style.height = \"100%\";\n            this.svgElement.style.transform = \"translate3d(0,0,0)\";\n            this.svgElement.style.contentVisibility = this.renderConfig.contentVisibility;\n        }\n        if (this.renderConfig.width) {\n            this.svgElement.setAttribute(\"width\", this.renderConfig.width);\n        }\n        if (this.renderConfig.height) {\n            this.svgElement.setAttribute(\"height\", this.renderConfig.height);\n        }\n        if (this.renderConfig.className) {\n            this.svgElement.setAttribute(\"class\", this.renderConfig.className);\n        }\n        if (this.renderConfig.id) {\n            this.svgElement.setAttribute(\"id\", this.renderConfig.id);\n        }\n        if (this.renderConfig.focusable !== undefined) {\n            this.svgElement.setAttribute(\"focusable\", this.renderConfig.focusable);\n        }\n        this.svgElement.setAttribute(\"preserveAspectRatio\", this.renderConfig.preserveAspectRatio); // this.layerElement.style.transform = 'translate3d(0,0,0)';\n        // this.layerElement.style.transformOrigin = this.layerElement.style.mozTransformOrigin = this.layerElement.style.webkitTransformOrigin = this.layerElement.style['-webkit-transform'] = \"0px 0px 0px\";\n        this.animationItem.wrapper.appendChild(this.svgElement); // Mask animation\n        var defs = this.globalData.defs;\n        this.setupGlobalData(animData, defs);\n        this.globalData.progressiveLoad = this.renderConfig.progressiveLoad;\n        this.data = animData;\n        var maskElement = createNS(\"clipPath\");\n        var rect = createNS(\"rect\");\n        rect.setAttribute(\"width\", animData.w);\n        rect.setAttribute(\"height\", animData.h);\n        rect.setAttribute(\"x\", 0);\n        rect.setAttribute(\"y\", 0);\n        var maskId = createElementID();\n        maskElement.setAttribute(\"id\", maskId);\n        maskElement.appendChild(rect);\n        this.layerElement.setAttribute(\"clip-path\", \"url(\" + getLocationHref() + \"#\" + maskId + \")\");\n        defs.appendChild(maskElement);\n        this.layers = animData.layers;\n        this.elements = createSizedArray(animData.layers.length);\n    };\n    SVGRendererBase.prototype.destroy = function() {\n        if (this.animationItem.wrapper) {\n            this.animationItem.wrapper.innerText = \"\";\n        }\n        this.layerElement = null;\n        this.globalData.defs = null;\n        var i;\n        var len = this.layers ? this.layers.length : 0;\n        for(i = 0; i < len; i += 1){\n            if (this.elements[i] && this.elements[i].destroy) {\n                this.elements[i].destroy();\n            }\n        }\n        this.elements.length = 0;\n        this.destroyed = true;\n        this.animationItem = null;\n    };\n    SVGRendererBase.prototype.updateContainerSize = function() {};\n    SVGRendererBase.prototype.findIndexByInd = function(ind) {\n        var i = 0;\n        var len = this.layers.length;\n        for(i = 0; i < len; i += 1){\n            if (this.layers[i].ind === ind) {\n                return i;\n            }\n        }\n        return -1;\n    };\n    SVGRendererBase.prototype.buildItem = function(pos) {\n        var elements = this.elements;\n        if (elements[pos] || this.layers[pos].ty === 99) {\n            return;\n        }\n        elements[pos] = true;\n        var element = this.createItem(this.layers[pos]);\n        elements[pos] = element;\n        if (getExpressionsPlugin()) {\n            if (this.layers[pos].ty === 0) {\n                this.globalData.projectInterface.registerComposition(element);\n            }\n            element.initExpressions();\n        }\n        this.appendElementInPos(element, pos);\n        if (this.layers[pos].tt) {\n            var elementIndex = \"tp\" in this.layers[pos] ? this.findIndexByInd(this.layers[pos].tp) : pos - 1;\n            if (elementIndex === -1) {\n                return;\n            }\n            if (!this.elements[elementIndex] || this.elements[elementIndex] === true) {\n                this.buildItem(elementIndex);\n                this.addPendingElement(element);\n            } else {\n                var matteElement = elements[elementIndex];\n                var matteMask = matteElement.getMatte(this.layers[pos].tt);\n                element.setMatte(matteMask);\n            }\n        }\n    };\n    SVGRendererBase.prototype.checkPendingElements = function() {\n        while(this.pendingElements.length){\n            var element = this.pendingElements.pop();\n            element.checkParenting();\n            if (element.data.tt) {\n                var i = 0;\n                var len = this.elements.length;\n                while(i < len){\n                    if (this.elements[i] === element) {\n                        var elementIndex = \"tp\" in element.data ? this.findIndexByInd(element.data.tp) : i - 1;\n                        var matteElement = this.elements[elementIndex];\n                        var matteMask = matteElement.getMatte(this.layers[i].tt);\n                        element.setMatte(matteMask);\n                        break;\n                    }\n                    i += 1;\n                }\n            }\n        }\n    };\n    SVGRendererBase.prototype.renderFrame = function(num) {\n        if (this.renderedFrame === num || this.destroyed) {\n            return;\n        }\n        if (num === null) {\n            num = this.renderedFrame;\n        } else {\n            this.renderedFrame = num;\n        } // console.log('-------');\n        // console.log('FRAME ',num);\n        this.globalData.frameNum = num;\n        this.globalData.frameId += 1;\n        this.globalData.projectInterface.currentFrame = num;\n        this.globalData._mdf = false;\n        var i;\n        var len = this.layers.length;\n        if (!this.completeLayers) {\n            this.checkLayers(num);\n        }\n        for(i = len - 1; i >= 0; i -= 1){\n            if (this.completeLayers || this.elements[i]) {\n                this.elements[i].prepareFrame(num - this.layers[i].st);\n            }\n        }\n        if (this.globalData._mdf) {\n            for(i = 0; i < len; i += 1){\n                if (this.completeLayers || this.elements[i]) {\n                    this.elements[i].renderFrame();\n                }\n            }\n        }\n    };\n    SVGRendererBase.prototype.appendElementInPos = function(element, pos) {\n        var newElement = element.getBaseElement();\n        if (!newElement) {\n            return;\n        }\n        var i = 0;\n        var nextElement;\n        while(i < pos){\n            if (this.elements[i] && this.elements[i] !== true && this.elements[i].getBaseElement()) {\n                nextElement = this.elements[i].getBaseElement();\n            }\n            i += 1;\n        }\n        if (nextElement) {\n            this.layerElement.insertBefore(newElement, nextElement);\n        } else {\n            this.layerElement.appendChild(newElement);\n        }\n    };\n    SVGRendererBase.prototype.hide = function() {\n        this.layerElement.style.display = \"none\";\n    };\n    SVGRendererBase.prototype.show = function() {\n        this.layerElement.style.display = \"block\";\n    };\n    function ICompElement() {}\n    extendPrototype([\n        BaseElement,\n        TransformElement,\n        HierarchyElement,\n        FrameElement,\n        RenderableDOMElement\n    ], ICompElement);\n    ICompElement.prototype.initElement = function(data, globalData, comp) {\n        this.initFrame();\n        this.initBaseData(data, globalData, comp);\n        this.initTransform(data, globalData, comp);\n        this.initRenderable();\n        this.initHierarchy();\n        this.initRendererElement();\n        this.createContainerElements();\n        this.createRenderableComponents();\n        if (this.data.xt || !globalData.progressiveLoad) {\n            this.buildAllItems();\n        }\n        this.hide();\n    };\n    /* ICompElement.prototype.hide = function(){\r\n      if(!this.hidden){\r\n          this.hideElement();\r\n          var i,len = this.elements.length;\r\n          for( i = 0; i < len; i+=1 ){\r\n              if(this.elements[i]){\r\n                  this.elements[i].hide();\r\n              }\r\n          }\r\n      }\r\n  }; */ ICompElement.prototype.prepareFrame = function(num) {\n        this._mdf = false;\n        this.prepareRenderableFrame(num);\n        this.prepareProperties(num, this.isInRange);\n        if (!this.isInRange && !this.data.xt) {\n            return;\n        }\n        if (!this.tm._placeholder) {\n            var timeRemapped = this.tm.v;\n            if (timeRemapped === this.data.op) {\n                timeRemapped = this.data.op - 1;\n            }\n            this.renderedFrame = timeRemapped;\n        } else {\n            this.renderedFrame = num / this.data.sr;\n        }\n        var i;\n        var len = this.elements.length;\n        if (!this.completeLayers) {\n            this.checkLayers(this.renderedFrame);\n        } // This iteration needs to be backwards because of how expressions connect between each other\n        for(i = len - 1; i >= 0; i -= 1){\n            if (this.completeLayers || this.elements[i]) {\n                this.elements[i].prepareFrame(this.renderedFrame - this.layers[i].st);\n                if (this.elements[i]._mdf) {\n                    this._mdf = true;\n                }\n            }\n        }\n    };\n    ICompElement.prototype.renderInnerContent = function() {\n        var i;\n        var len = this.layers.length;\n        for(i = 0; i < len; i += 1){\n            if (this.completeLayers || this.elements[i]) {\n                this.elements[i].renderFrame();\n            }\n        }\n    };\n    ICompElement.prototype.setElements = function(elems) {\n        this.elements = elems;\n    };\n    ICompElement.prototype.getElements = function() {\n        return this.elements;\n    };\n    ICompElement.prototype.destroyElements = function() {\n        var i;\n        var len = this.layers.length;\n        for(i = 0; i < len; i += 1){\n            if (this.elements[i]) {\n                this.elements[i].destroy();\n            }\n        }\n    };\n    ICompElement.prototype.destroy = function() {\n        this.destroyElements();\n        this.destroyBaseElement();\n    };\n    function SVGCompElement(data, globalData, comp) {\n        this.layers = data.layers;\n        this.supports3d = true;\n        this.completeLayers = false;\n        this.pendingElements = [];\n        this.elements = this.layers ? createSizedArray(this.layers.length) : [];\n        this.initElement(data, globalData, comp);\n        this.tm = data.tm ? PropertyFactory.getProp(this, data.tm, 0, globalData.frameRate, this) : {\n            _placeholder: true\n        };\n    }\n    extendPrototype([\n        SVGRendererBase,\n        ICompElement,\n        SVGBaseElement\n    ], SVGCompElement);\n    SVGCompElement.prototype.createComp = function(data) {\n        return new SVGCompElement(data, this.globalData, this);\n    };\n    function SVGRenderer(animationItem, config) {\n        this.animationItem = animationItem;\n        this.layers = null;\n        this.renderedFrame = -1;\n        this.svgElement = createNS(\"svg\");\n        var ariaLabel = \"\";\n        if (config && config.title) {\n            var titleElement = createNS(\"title\");\n            var titleId = createElementID();\n            titleElement.setAttribute(\"id\", titleId);\n            titleElement.textContent = config.title;\n            this.svgElement.appendChild(titleElement);\n            ariaLabel += titleId;\n        }\n        if (config && config.description) {\n            var descElement = createNS(\"desc\");\n            var descId = createElementID();\n            descElement.setAttribute(\"id\", descId);\n            descElement.textContent = config.description;\n            this.svgElement.appendChild(descElement);\n            ariaLabel += \" \" + descId;\n        }\n        if (ariaLabel) {\n            this.svgElement.setAttribute(\"aria-labelledby\", ariaLabel);\n        }\n        var defs = createNS(\"defs\");\n        this.svgElement.appendChild(defs);\n        var maskElement = createNS(\"g\");\n        this.svgElement.appendChild(maskElement);\n        this.layerElement = maskElement;\n        this.renderConfig = {\n            preserveAspectRatio: config && config.preserveAspectRatio || \"xMidYMid meet\",\n            imagePreserveAspectRatio: config && config.imagePreserveAspectRatio || \"xMidYMid slice\",\n            contentVisibility: config && config.contentVisibility || \"visible\",\n            progressiveLoad: config && config.progressiveLoad || false,\n            hideOnTransparent: !(config && config.hideOnTransparent === false),\n            viewBoxOnly: config && config.viewBoxOnly || false,\n            viewBoxSize: config && config.viewBoxSize || false,\n            className: config && config.className || \"\",\n            id: config && config.id || \"\",\n            focusable: config && config.focusable,\n            filterSize: {\n                width: config && config.filterSize && config.filterSize.width || \"100%\",\n                height: config && config.filterSize && config.filterSize.height || \"100%\",\n                x: config && config.filterSize && config.filterSize.x || \"0%\",\n                y: config && config.filterSize && config.filterSize.y || \"0%\"\n            },\n            width: config && config.width,\n            height: config && config.height,\n            runExpressions: !config || config.runExpressions === undefined || config.runExpressions\n        };\n        this.globalData = {\n            _mdf: false,\n            frameNum: -1,\n            defs: defs,\n            renderConfig: this.renderConfig\n        };\n        this.elements = [];\n        this.pendingElements = [];\n        this.destroyed = false;\n        this.rendererType = \"svg\";\n    }\n    extendPrototype([\n        SVGRendererBase\n    ], SVGRenderer);\n    SVGRenderer.prototype.createComp = function(data) {\n        return new SVGCompElement(data, this.globalData, this);\n    };\n    function ShapeTransformManager() {\n        this.sequences = {};\n        this.sequenceList = [];\n        this.transform_key_count = 0;\n    }\n    ShapeTransformManager.prototype = {\n        addTransformSequence: function addTransformSequence(transforms) {\n            var i;\n            var len = transforms.length;\n            var key = \"_\";\n            for(i = 0; i < len; i += 1){\n                key += transforms[i].transform.key + \"_\";\n            }\n            var sequence = this.sequences[key];\n            if (!sequence) {\n                sequence = {\n                    transforms: [].concat(transforms),\n                    finalTransform: new Matrix(),\n                    _mdf: false\n                };\n                this.sequences[key] = sequence;\n                this.sequenceList.push(sequence);\n            }\n            return sequence;\n        },\n        processSequence: function processSequence(sequence, isFirstFrame) {\n            var i = 0;\n            var len = sequence.transforms.length;\n            var _mdf = isFirstFrame;\n            while(i < len && !isFirstFrame){\n                if (sequence.transforms[i].transform.mProps._mdf) {\n                    _mdf = true;\n                    break;\n                }\n                i += 1;\n            }\n            if (_mdf) {\n                sequence.finalTransform.reset();\n                for(i = len - 1; i >= 0; i -= 1){\n                    sequence.finalTransform.multiply(sequence.transforms[i].transform.mProps.v);\n                }\n            }\n            sequence._mdf = _mdf;\n        },\n        processSequences: function processSequences(isFirstFrame) {\n            var i;\n            var len = this.sequenceList.length;\n            for(i = 0; i < len; i += 1){\n                this.processSequence(this.sequenceList[i], isFirstFrame);\n            }\n        },\n        getNewKey: function getNewKey() {\n            this.transform_key_count += 1;\n            return \"_\" + this.transform_key_count;\n        }\n    };\n    var lumaLoader = function lumaLoader() {\n        var id = \"__lottie_element_luma_buffer\";\n        var lumaBuffer = null;\n        var lumaBufferCtx = null;\n        var svg = null; // This alternate solution has a slight delay before the filter is applied, resulting in a flicker on the first frame.\n        // Keeping this here for reference, and in the future, if offscreen canvas supports url filters, this can be used.\n        // For now, neither of them work for offscreen canvas, so canvas workers can't support the luma track matte mask.\n        // Naming it solution 2 to mark the extra comment lines.\n        /*\r\n    var svgString = [\r\n      '<svg xmlns=\"http://www.w3.org/2000/svg\">',\r\n      '<filter id=\"' + id + '\">',\r\n      '<feColorMatrix type=\"matrix\" color-interpolation-filters=\"sRGB\" values=\"',\r\n      '0.3, 0.3, 0.3, 0, 0, ',\r\n      '0.3, 0.3, 0.3, 0, 0, ',\r\n      '0.3, 0.3, 0.3, 0, 0, ',\r\n      '0.3, 0.3, 0.3, 0, 0',\r\n      '\"/>',\r\n      '</filter>',\r\n      '</svg>',\r\n    ].join('');\r\n    var blob = new Blob([svgString], { type: 'image/svg+xml' });\r\n    var url = URL.createObjectURL(blob);\r\n    */ function createLumaSvgFilter() {\n            var _svg = createNS(\"svg\");\n            var fil = createNS(\"filter\");\n            var matrix = createNS(\"feColorMatrix\");\n            fil.setAttribute(\"id\", id);\n            matrix.setAttribute(\"type\", \"matrix\");\n            matrix.setAttribute(\"color-interpolation-filters\", \"sRGB\");\n            matrix.setAttribute(\"values\", \"0.3, 0.3, 0.3, 0, 0, 0.3, 0.3, 0.3, 0, 0, 0.3, 0.3, 0.3, 0, 0, 0.3, 0.3, 0.3, 0, 0\");\n            fil.appendChild(matrix);\n            _svg.appendChild(fil);\n            _svg.setAttribute(\"id\", id + \"_svg\");\n            if (featureSupport.svgLumaHidden) {\n                _svg.style.display = \"none\";\n            }\n            return _svg;\n        }\n        function loadLuma() {\n            if (!lumaBuffer) {\n                svg = createLumaSvgFilter();\n                document.body.appendChild(svg);\n                lumaBuffer = createTag(\"canvas\");\n                lumaBufferCtx = lumaBuffer.getContext(\"2d\"); // lumaBufferCtx.filter = `url('${url}#__lottie_element_luma_buffer')`; // part of solution 2\n                lumaBufferCtx.filter = \"url(#\" + id + \")\";\n                lumaBufferCtx.fillStyle = \"rgba(0,0,0,0)\";\n                lumaBufferCtx.fillRect(0, 0, 1, 1);\n            }\n        }\n        function getLuma(canvas) {\n            if (!lumaBuffer) {\n                loadLuma();\n            }\n            lumaBuffer.width = canvas.width;\n            lumaBuffer.height = canvas.height; // lumaBufferCtx.filter = `url('${url}#__lottie_element_luma_buffer')`; // part of solution 2\n            lumaBufferCtx.filter = \"url(#\" + id + \")\";\n            return lumaBuffer;\n        }\n        return {\n            load: loadLuma,\n            get: getLuma\n        };\n    };\n    function createCanvas(width, height) {\n        if (featureSupport.offscreenCanvas) {\n            return new OffscreenCanvas(width, height);\n        }\n        var canvas = createTag(\"canvas\");\n        canvas.width = width;\n        canvas.height = height;\n        return canvas;\n    }\n    var assetLoader = function() {\n        return {\n            loadLumaCanvas: lumaLoader.load,\n            getLumaCanvas: lumaLoader.get,\n            createCanvas: createCanvas\n        };\n    }();\n    var registeredEffects = {};\n    function CVEffects(elem) {\n        var i;\n        var len = elem.data.ef ? elem.data.ef.length : 0;\n        this.filters = [];\n        var filterManager;\n        for(i = 0; i < len; i += 1){\n            filterManager = null;\n            var type = elem.data.ef[i].ty;\n            if (registeredEffects[type]) {\n                var Effect = registeredEffects[type].effect;\n                filterManager = new Effect(elem.effectsManager.effectElements[i], elem);\n            }\n            if (filterManager) {\n                this.filters.push(filterManager);\n            }\n        }\n        if (this.filters.length) {\n            elem.addRenderableComponent(this);\n        }\n    }\n    CVEffects.prototype.renderFrame = function(_isFirstFrame) {\n        var i;\n        var len = this.filters.length;\n        for(i = 0; i < len; i += 1){\n            this.filters[i].renderFrame(_isFirstFrame);\n        }\n    };\n    CVEffects.prototype.getEffects = function(type) {\n        var i;\n        var len = this.filters.length;\n        var effects = [];\n        for(i = 0; i < len; i += 1){\n            if (this.filters[i].type === type) {\n                effects.push(this.filters[i]);\n            }\n        }\n        return effects;\n    };\n    function registerEffect(id, effect) {\n        registeredEffects[id] = {\n            effect: effect\n        };\n    }\n    function CVMaskElement(data, element) {\n        this.data = data;\n        this.element = element;\n        this.masksProperties = this.data.masksProperties || [];\n        this.viewData = createSizedArray(this.masksProperties.length);\n        var i;\n        var len = this.masksProperties.length;\n        var hasMasks = false;\n        for(i = 0; i < len; i += 1){\n            if (this.masksProperties[i].mode !== \"n\") {\n                hasMasks = true;\n            }\n            this.viewData[i] = ShapePropertyFactory.getShapeProp(this.element, this.masksProperties[i], 3);\n        }\n        this.hasMasks = hasMasks;\n        if (hasMasks) {\n            this.element.addRenderableComponent(this);\n        }\n    }\n    CVMaskElement.prototype.renderFrame = function() {\n        if (!this.hasMasks) {\n            return;\n        }\n        var transform = this.element.finalTransform.mat;\n        var ctx = this.element.canvasContext;\n        var i;\n        var len = this.masksProperties.length;\n        var pt;\n        var pts;\n        var data;\n        ctx.beginPath();\n        for(i = 0; i < len; i += 1){\n            if (this.masksProperties[i].mode !== \"n\") {\n                if (this.masksProperties[i].inv) {\n                    ctx.moveTo(0, 0);\n                    ctx.lineTo(this.element.globalData.compSize.w, 0);\n                    ctx.lineTo(this.element.globalData.compSize.w, this.element.globalData.compSize.h);\n                    ctx.lineTo(0, this.element.globalData.compSize.h);\n                    ctx.lineTo(0, 0);\n                }\n                data = this.viewData[i].v;\n                pt = transform.applyToPointArray(data.v[0][0], data.v[0][1], 0);\n                ctx.moveTo(pt[0], pt[1]);\n                var j;\n                var jLen = data._length;\n                for(j = 1; j < jLen; j += 1){\n                    pts = transform.applyToTriplePoints(data.o[j - 1], data.i[j], data.v[j]);\n                    ctx.bezierCurveTo(pts[0], pts[1], pts[2], pts[3], pts[4], pts[5]);\n                }\n                pts = transform.applyToTriplePoints(data.o[j - 1], data.i[0], data.v[0]);\n                ctx.bezierCurveTo(pts[0], pts[1], pts[2], pts[3], pts[4], pts[5]);\n            }\n        }\n        this.element.globalData.renderer.save(true);\n        ctx.clip();\n    };\n    CVMaskElement.prototype.getMaskProperty = MaskElement.prototype.getMaskProperty;\n    CVMaskElement.prototype.destroy = function() {\n        this.element = null;\n    };\n    function CVBaseElement() {}\n    var operationsMap = {\n        1: \"source-in\",\n        2: \"source-out\",\n        3: \"source-in\",\n        4: \"source-out\"\n    };\n    CVBaseElement.prototype = {\n        createElements: function createElements() {},\n        initRendererElement: function initRendererElement() {},\n        createContainerElements: function createContainerElements() {\n            // If the layer is masked we will use two buffers to store each different states of the drawing\n            // This solution is not ideal for several reason. But unfortunately, because of the recursive\n            // nature of the render tree, it's the only simple way to make sure one inner mask doesn't override an outer mask.\n            // TODO: try to reduce the size of these buffers to the size of the composition contaning the layer\n            // It might be challenging because the layer most likely is transformed in some way\n            if (this.data.tt >= 1) {\n                this.buffers = [];\n                var canvasContext = this.globalData.canvasContext;\n                var bufferCanvas = assetLoader.createCanvas(canvasContext.canvas.width, canvasContext.canvas.height);\n                this.buffers.push(bufferCanvas);\n                var bufferCanvas2 = assetLoader.createCanvas(canvasContext.canvas.width, canvasContext.canvas.height);\n                this.buffers.push(bufferCanvas2);\n                if (this.data.tt >= 3 && !document._isProxy) {\n                    assetLoader.loadLumaCanvas();\n                }\n            }\n            this.canvasContext = this.globalData.canvasContext;\n            this.transformCanvas = this.globalData.transformCanvas;\n            this.renderableEffectsManager = new CVEffects(this);\n            this.searchEffectTransforms();\n        },\n        createContent: function createContent() {},\n        setBlendMode: function setBlendMode() {\n            var globalData = this.globalData;\n            if (globalData.blendMode !== this.data.bm) {\n                globalData.blendMode = this.data.bm;\n                var blendModeValue = getBlendMode(this.data.bm);\n                globalData.canvasContext.globalCompositeOperation = blendModeValue;\n            }\n        },\n        createRenderableComponents: function createRenderableComponents() {\n            this.maskManager = new CVMaskElement(this.data, this);\n            this.transformEffects = this.renderableEffectsManager.getEffects(effectTypes.TRANSFORM_EFFECT);\n        },\n        hideElement: function hideElement() {\n            if (!this.hidden && (!this.isInRange || this.isTransparent)) {\n                this.hidden = true;\n            }\n        },\n        showElement: function showElement() {\n            if (this.isInRange && !this.isTransparent) {\n                this.hidden = false;\n                this._isFirstFrame = true;\n                this.maskManager._isFirstFrame = true;\n            }\n        },\n        clearCanvas: function clearCanvas(canvasContext) {\n            canvasContext.clearRect(this.transformCanvas.tx, this.transformCanvas.ty, this.transformCanvas.w * this.transformCanvas.sx, this.transformCanvas.h * this.transformCanvas.sy);\n        },\n        prepareLayer: function prepareLayer() {\n            if (this.data.tt >= 1) {\n                var buffer = this.buffers[0];\n                var bufferCtx = buffer.getContext(\"2d\");\n                this.clearCanvas(bufferCtx); // on the first buffer we store the current state of the global drawing\n                bufferCtx.drawImage(this.canvasContext.canvas, 0, 0); // The next four lines are to clear the canvas\n                // TODO: Check if there is a way to clear the canvas without resetting the transform\n                this.currentTransform = this.canvasContext.getTransform();\n                this.canvasContext.setTransform(1, 0, 0, 1, 0, 0);\n                this.clearCanvas(this.canvasContext);\n                this.canvasContext.setTransform(this.currentTransform);\n            }\n        },\n        exitLayer: function exitLayer() {\n            if (this.data.tt >= 1) {\n                var buffer = this.buffers[1]; // On the second buffer we store the current state of the global drawing\n                // that only contains the content of this layer\n                // (if it is a composition, it also includes the nested layers)\n                var bufferCtx = buffer.getContext(\"2d\");\n                this.clearCanvas(bufferCtx);\n                bufferCtx.drawImage(this.canvasContext.canvas, 0, 0); // We clear the canvas again\n                this.canvasContext.setTransform(1, 0, 0, 1, 0, 0);\n                this.clearCanvas(this.canvasContext);\n                this.canvasContext.setTransform(this.currentTransform); // We draw the mask\n                var mask = this.comp.getElementById(\"tp\" in this.data ? this.data.tp : this.data.ind - 1);\n                mask.renderFrame(true); // We draw the second buffer (that contains the content of this layer)\n                this.canvasContext.setTransform(1, 0, 0, 1, 0, 0); // If the mask is a Luma matte, we need to do two extra painting operations\n                // the _isProxy check is to avoid drawing a fake canvas in workers that will throw an error\n                if (this.data.tt >= 3 && !document._isProxy) {\n                    // We copy the painted mask to a buffer that has a color matrix filter applied to it\n                    // that applies the rgb values to the alpha channel\n                    var lumaBuffer = assetLoader.getLumaCanvas(this.canvasContext.canvas);\n                    var lumaBufferCtx = lumaBuffer.getContext(\"2d\");\n                    lumaBufferCtx.drawImage(this.canvasContext.canvas, 0, 0);\n                    this.clearCanvas(this.canvasContext); // we repaint the context with the mask applied to it\n                    this.canvasContext.drawImage(lumaBuffer, 0, 0);\n                }\n                this.canvasContext.globalCompositeOperation = operationsMap[this.data.tt];\n                this.canvasContext.drawImage(buffer, 0, 0); // We finally draw the first buffer (that contains the content of the global drawing)\n                // We use destination-over to draw the global drawing below the current layer\n                this.canvasContext.globalCompositeOperation = \"destination-over\";\n                this.canvasContext.drawImage(this.buffers[0], 0, 0);\n                this.canvasContext.setTransform(this.currentTransform); // We reset the globalCompositeOperation to source-over, the standard type of operation\n                this.canvasContext.globalCompositeOperation = \"source-over\";\n            }\n        },\n        renderFrame: function renderFrame(forceRender) {\n            if (this.hidden || this.data.hd) {\n                return;\n            }\n            if (this.data.td === 1 && !forceRender) {\n                return;\n            }\n            this.renderTransform();\n            this.renderRenderable();\n            this.renderLocalTransform();\n            this.setBlendMode();\n            var forceRealStack = this.data.ty === 0;\n            this.prepareLayer();\n            this.globalData.renderer.save(forceRealStack);\n            this.globalData.renderer.ctxTransform(this.finalTransform.localMat.props);\n            this.globalData.renderer.ctxOpacity(this.finalTransform.localOpacity);\n            this.renderInnerContent();\n            this.globalData.renderer.restore(forceRealStack);\n            this.exitLayer();\n            if (this.maskManager.hasMasks) {\n                this.globalData.renderer.restore(true);\n            }\n            if (this._isFirstFrame) {\n                this._isFirstFrame = false;\n            }\n        },\n        destroy: function destroy() {\n            this.canvasContext = null;\n            this.data = null;\n            this.globalData = null;\n            this.maskManager.destroy();\n        },\n        mHelper: new Matrix()\n    };\n    CVBaseElement.prototype.hide = CVBaseElement.prototype.hideElement;\n    CVBaseElement.prototype.show = CVBaseElement.prototype.showElement;\n    function CVShapeData(element, data, styles, transformsManager) {\n        this.styledShapes = [];\n        this.tr = [\n            0,\n            0,\n            0,\n            0,\n            0,\n            0\n        ];\n        var ty = 4;\n        if (data.ty === \"rc\") {\n            ty = 5;\n        } else if (data.ty === \"el\") {\n            ty = 6;\n        } else if (data.ty === \"sr\") {\n            ty = 7;\n        }\n        this.sh = ShapePropertyFactory.getShapeProp(element, data, ty, element);\n        var i;\n        var len = styles.length;\n        var styledShape;\n        for(i = 0; i < len; i += 1){\n            if (!styles[i].closed) {\n                styledShape = {\n                    transforms: transformsManager.addTransformSequence(styles[i].transforms),\n                    trNodes: []\n                };\n                this.styledShapes.push(styledShape);\n                styles[i].elements.push(styledShape);\n            }\n        }\n    }\n    CVShapeData.prototype.setAsAnimated = SVGShapeData.prototype.setAsAnimated;\n    function CVShapeElement(data, globalData, comp) {\n        this.shapes = [];\n        this.shapesData = data.shapes;\n        this.stylesList = [];\n        this.itemsData = [];\n        this.prevViewData = [];\n        this.shapeModifiers = [];\n        this.processedElements = [];\n        this.transformsManager = new ShapeTransformManager();\n        this.initElement(data, globalData, comp);\n    }\n    extendPrototype([\n        BaseElement,\n        TransformElement,\n        CVBaseElement,\n        IShapeElement,\n        HierarchyElement,\n        FrameElement,\n        RenderableElement\n    ], CVShapeElement);\n    CVShapeElement.prototype.initElement = RenderableDOMElement.prototype.initElement;\n    CVShapeElement.prototype.transformHelper = {\n        opacity: 1,\n        _opMdf: false\n    };\n    CVShapeElement.prototype.dashResetter = [];\n    CVShapeElement.prototype.createContent = function() {\n        this.searchShapes(this.shapesData, this.itemsData, this.prevViewData, true, []);\n    };\n    CVShapeElement.prototype.createStyleElement = function(data, transforms) {\n        var styleElem = {\n            data: data,\n            type: data.ty,\n            preTransforms: this.transformsManager.addTransformSequence(transforms),\n            transforms: [],\n            elements: [],\n            closed: data.hd === true\n        };\n        var elementData = {};\n        if (data.ty === \"fl\" || data.ty === \"st\") {\n            elementData.c = PropertyFactory.getProp(this, data.c, 1, 255, this);\n            if (!elementData.c.k) {\n                styleElem.co = \"rgb(\" + bmFloor(elementData.c.v[0]) + \",\" + bmFloor(elementData.c.v[1]) + \",\" + bmFloor(elementData.c.v[2]) + \")\";\n            }\n        } else if (data.ty === \"gf\" || data.ty === \"gs\") {\n            elementData.s = PropertyFactory.getProp(this, data.s, 1, null, this);\n            elementData.e = PropertyFactory.getProp(this, data.e, 1, null, this);\n            elementData.h = PropertyFactory.getProp(this, data.h || {\n                k: 0\n            }, 0, 0.01, this);\n            elementData.a = PropertyFactory.getProp(this, data.a || {\n                k: 0\n            }, 0, degToRads, this);\n            elementData.g = new GradientProperty(this, data.g, this);\n        }\n        elementData.o = PropertyFactory.getProp(this, data.o, 0, 0.01, this);\n        if (data.ty === \"st\" || data.ty === \"gs\") {\n            styleElem.lc = lineCapEnum[data.lc || 2];\n            styleElem.lj = lineJoinEnum[data.lj || 2];\n            if (data.lj == 1) {\n                // eslint-disable-line eqeqeq\n                styleElem.ml = data.ml;\n            }\n            elementData.w = PropertyFactory.getProp(this, data.w, 0, null, this);\n            if (!elementData.w.k) {\n                styleElem.wi = elementData.w.v;\n            }\n            if (data.d) {\n                var d = new DashProperty(this, data.d, \"canvas\", this);\n                elementData.d = d;\n                if (!elementData.d.k) {\n                    styleElem.da = elementData.d.dashArray;\n                    styleElem[\"do\"] = elementData.d.dashoffset[0];\n                }\n            }\n        } else {\n            styleElem.r = data.r === 2 ? \"evenodd\" : \"nonzero\";\n        }\n        this.stylesList.push(styleElem);\n        elementData.style = styleElem;\n        return elementData;\n    };\n    CVShapeElement.prototype.createGroupElement = function() {\n        var elementData = {\n            it: [],\n            prevViewData: []\n        };\n        return elementData;\n    };\n    CVShapeElement.prototype.createTransformElement = function(data) {\n        var elementData = {\n            transform: {\n                opacity: 1,\n                _opMdf: false,\n                key: this.transformsManager.getNewKey(),\n                op: PropertyFactory.getProp(this, data.o, 0, 0.01, this),\n                mProps: TransformPropertyFactory.getTransformProperty(this, data, this)\n            }\n        };\n        return elementData;\n    };\n    CVShapeElement.prototype.createShapeElement = function(data) {\n        var elementData = new CVShapeData(this, data, this.stylesList, this.transformsManager);\n        this.shapes.push(elementData);\n        this.addShapeToModifiers(elementData);\n        return elementData;\n    };\n    CVShapeElement.prototype.reloadShapes = function() {\n        this._isFirstFrame = true;\n        var i;\n        var len = this.itemsData.length;\n        for(i = 0; i < len; i += 1){\n            this.prevViewData[i] = this.itemsData[i];\n        }\n        this.searchShapes(this.shapesData, this.itemsData, this.prevViewData, true, []);\n        len = this.dynamicProperties.length;\n        for(i = 0; i < len; i += 1){\n            this.dynamicProperties[i].getValue();\n        }\n        this.renderModifiers();\n        this.transformsManager.processSequences(this._isFirstFrame);\n    };\n    CVShapeElement.prototype.addTransformToStyleList = function(transform) {\n        var i;\n        var len = this.stylesList.length;\n        for(i = 0; i < len; i += 1){\n            if (!this.stylesList[i].closed) {\n                this.stylesList[i].transforms.push(transform);\n            }\n        }\n    };\n    CVShapeElement.prototype.removeTransformFromStyleList = function() {\n        var i;\n        var len = this.stylesList.length;\n        for(i = 0; i < len; i += 1){\n            if (!this.stylesList[i].closed) {\n                this.stylesList[i].transforms.pop();\n            }\n        }\n    };\n    CVShapeElement.prototype.closeStyles = function(styles) {\n        var i;\n        var len = styles.length;\n        for(i = 0; i < len; i += 1){\n            styles[i].closed = true;\n        }\n    };\n    CVShapeElement.prototype.searchShapes = function(arr, itemsData, prevViewData, shouldRender, transforms) {\n        var i;\n        var len = arr.length - 1;\n        var j;\n        var jLen;\n        var ownStyles = [];\n        var ownModifiers = [];\n        var processedPos;\n        var modifier;\n        var currentTransform;\n        var ownTransforms = [].concat(transforms);\n        for(i = len; i >= 0; i -= 1){\n            processedPos = this.searchProcessedElement(arr[i]);\n            if (!processedPos) {\n                arr[i]._shouldRender = shouldRender;\n            } else {\n                itemsData[i] = prevViewData[processedPos - 1];\n            }\n            if (arr[i].ty === \"fl\" || arr[i].ty === \"st\" || arr[i].ty === \"gf\" || arr[i].ty === \"gs\") {\n                if (!processedPos) {\n                    itemsData[i] = this.createStyleElement(arr[i], ownTransforms);\n                } else {\n                    itemsData[i].style.closed = false;\n                }\n                ownStyles.push(itemsData[i].style);\n            } else if (arr[i].ty === \"gr\") {\n                if (!processedPos) {\n                    itemsData[i] = this.createGroupElement(arr[i]);\n                } else {\n                    jLen = itemsData[i].it.length;\n                    for(j = 0; j < jLen; j += 1){\n                        itemsData[i].prevViewData[j] = itemsData[i].it[j];\n                    }\n                }\n                this.searchShapes(arr[i].it, itemsData[i].it, itemsData[i].prevViewData, shouldRender, ownTransforms);\n            } else if (arr[i].ty === \"tr\") {\n                if (!processedPos) {\n                    currentTransform = this.createTransformElement(arr[i]);\n                    itemsData[i] = currentTransform;\n                }\n                ownTransforms.push(itemsData[i]);\n                this.addTransformToStyleList(itemsData[i]);\n            } else if (arr[i].ty === \"sh\" || arr[i].ty === \"rc\" || arr[i].ty === \"el\" || arr[i].ty === \"sr\") {\n                if (!processedPos) {\n                    itemsData[i] = this.createShapeElement(arr[i]);\n                }\n            } else if (arr[i].ty === \"tm\" || arr[i].ty === \"rd\" || arr[i].ty === \"pb\" || arr[i].ty === \"zz\" || arr[i].ty === \"op\") {\n                if (!processedPos) {\n                    modifier = ShapeModifiers.getModifier(arr[i].ty);\n                    modifier.init(this, arr[i]);\n                    itemsData[i] = modifier;\n                    this.shapeModifiers.push(modifier);\n                } else {\n                    modifier = itemsData[i];\n                    modifier.closed = false;\n                }\n                ownModifiers.push(modifier);\n            } else if (arr[i].ty === \"rp\") {\n                if (!processedPos) {\n                    modifier = ShapeModifiers.getModifier(arr[i].ty);\n                    itemsData[i] = modifier;\n                    modifier.init(this, arr, i, itemsData);\n                    this.shapeModifiers.push(modifier);\n                    shouldRender = false;\n                } else {\n                    modifier = itemsData[i];\n                    modifier.closed = true;\n                }\n                ownModifiers.push(modifier);\n            }\n            this.addProcessedElement(arr[i], i + 1);\n        }\n        this.removeTransformFromStyleList();\n        this.closeStyles(ownStyles);\n        len = ownModifiers.length;\n        for(i = 0; i < len; i += 1){\n            ownModifiers[i].closed = true;\n        }\n    };\n    CVShapeElement.prototype.renderInnerContent = function() {\n        this.transformHelper.opacity = 1;\n        this.transformHelper._opMdf = false;\n        this.renderModifiers();\n        this.transformsManager.processSequences(this._isFirstFrame);\n        this.renderShape(this.transformHelper, this.shapesData, this.itemsData, true);\n    };\n    CVShapeElement.prototype.renderShapeTransform = function(parentTransform, groupTransform) {\n        if (parentTransform._opMdf || groupTransform.op._mdf || this._isFirstFrame) {\n            groupTransform.opacity = parentTransform.opacity;\n            groupTransform.opacity *= groupTransform.op.v;\n            groupTransform._opMdf = true;\n        }\n    };\n    CVShapeElement.prototype.drawLayer = function() {\n        var i;\n        var len = this.stylesList.length;\n        var j;\n        var jLen;\n        var k;\n        var kLen;\n        var elems;\n        var nodes;\n        var renderer = this.globalData.renderer;\n        var ctx = this.globalData.canvasContext;\n        var type;\n        var currentStyle;\n        for(i = 0; i < len; i += 1){\n            currentStyle = this.stylesList[i];\n            type = currentStyle.type; // Skipping style when\n            // Stroke width equals 0\n            // style should not be rendered (extra unused repeaters)\n            // current opacity equals 0\n            // global opacity equals 0\n            if (!((type === \"st\" || type === \"gs\") && currentStyle.wi === 0 || !currentStyle.data._shouldRender || currentStyle.coOp === 0 || this.globalData.currentGlobalAlpha === 0)) {\n                renderer.save();\n                elems = currentStyle.elements;\n                if (type === \"st\" || type === \"gs\") {\n                    renderer.ctxStrokeStyle(type === \"st\" ? currentStyle.co : currentStyle.grd); // ctx.strokeStyle = type === 'st' ? currentStyle.co : currentStyle.grd;\n                    renderer.ctxLineWidth(currentStyle.wi); // ctx.lineWidth = currentStyle.wi;\n                    renderer.ctxLineCap(currentStyle.lc); // ctx.lineCap = currentStyle.lc;\n                    renderer.ctxLineJoin(currentStyle.lj); // ctx.lineJoin = currentStyle.lj;\n                    renderer.ctxMiterLimit(currentStyle.ml || 0); // ctx.miterLimit = currentStyle.ml || 0;\n                } else {\n                    renderer.ctxFillStyle(type === \"fl\" ? currentStyle.co : currentStyle.grd); // ctx.fillStyle = type === 'fl' ? currentStyle.co : currentStyle.grd;\n                }\n                renderer.ctxOpacity(currentStyle.coOp);\n                if (type !== \"st\" && type !== \"gs\") {\n                    ctx.beginPath();\n                }\n                renderer.ctxTransform(currentStyle.preTransforms.finalTransform.props);\n                jLen = elems.length;\n                for(j = 0; j < jLen; j += 1){\n                    if (type === \"st\" || type === \"gs\") {\n                        ctx.beginPath();\n                        if (currentStyle.da) {\n                            ctx.setLineDash(currentStyle.da);\n                            ctx.lineDashOffset = currentStyle[\"do\"];\n                        }\n                    }\n                    nodes = elems[j].trNodes;\n                    kLen = nodes.length;\n                    for(k = 0; k < kLen; k += 1){\n                        if (nodes[k].t === \"m\") {\n                            ctx.moveTo(nodes[k].p[0], nodes[k].p[1]);\n                        } else if (nodes[k].t === \"c\") {\n                            ctx.bezierCurveTo(nodes[k].pts[0], nodes[k].pts[1], nodes[k].pts[2], nodes[k].pts[3], nodes[k].pts[4], nodes[k].pts[5]);\n                        } else {\n                            ctx.closePath();\n                        }\n                    }\n                    if (type === \"st\" || type === \"gs\") {\n                        // ctx.stroke();\n                        renderer.ctxStroke();\n                        if (currentStyle.da) {\n                            ctx.setLineDash(this.dashResetter);\n                        }\n                    }\n                }\n                if (type !== \"st\" && type !== \"gs\") {\n                    // ctx.fill(currentStyle.r);\n                    this.globalData.renderer.ctxFill(currentStyle.r);\n                }\n                renderer.restore();\n            }\n        }\n    };\n    CVShapeElement.prototype.renderShape = function(parentTransform, items, data, isMain) {\n        var i;\n        var len = items.length - 1;\n        var groupTransform;\n        groupTransform = parentTransform;\n        for(i = len; i >= 0; i -= 1){\n            if (items[i].ty === \"tr\") {\n                groupTransform = data[i].transform;\n                this.renderShapeTransform(parentTransform, groupTransform);\n            } else if (items[i].ty === \"sh\" || items[i].ty === \"el\" || items[i].ty === \"rc\" || items[i].ty === \"sr\") {\n                this.renderPath(items[i], data[i]);\n            } else if (items[i].ty === \"fl\") {\n                this.renderFill(items[i], data[i], groupTransform);\n            } else if (items[i].ty === \"st\") {\n                this.renderStroke(items[i], data[i], groupTransform);\n            } else if (items[i].ty === \"gf\" || items[i].ty === \"gs\") {\n                this.renderGradientFill(items[i], data[i], groupTransform);\n            } else if (items[i].ty === \"gr\") {\n                this.renderShape(groupTransform, items[i].it, data[i].it);\n            } else if (items[i].ty === \"tm\") {}\n        }\n        if (isMain) {\n            this.drawLayer();\n        }\n    };\n    CVShapeElement.prototype.renderStyledShape = function(styledShape, shape) {\n        if (this._isFirstFrame || shape._mdf || styledShape.transforms._mdf) {\n            var shapeNodes = styledShape.trNodes;\n            var paths = shape.paths;\n            var i;\n            var len;\n            var j;\n            var jLen = paths._length;\n            shapeNodes.length = 0;\n            var groupTransformMat = styledShape.transforms.finalTransform;\n            for(j = 0; j < jLen; j += 1){\n                var pathNodes = paths.shapes[j];\n                if (pathNodes && pathNodes.v) {\n                    len = pathNodes._length;\n                    for(i = 1; i < len; i += 1){\n                        if (i === 1) {\n                            shapeNodes.push({\n                                t: \"m\",\n                                p: groupTransformMat.applyToPointArray(pathNodes.v[0][0], pathNodes.v[0][1], 0)\n                            });\n                        }\n                        shapeNodes.push({\n                            t: \"c\",\n                            pts: groupTransformMat.applyToTriplePoints(pathNodes.o[i - 1], pathNodes.i[i], pathNodes.v[i])\n                        });\n                    }\n                    if (len === 1) {\n                        shapeNodes.push({\n                            t: \"m\",\n                            p: groupTransformMat.applyToPointArray(pathNodes.v[0][0], pathNodes.v[0][1], 0)\n                        });\n                    }\n                    if (pathNodes.c && len) {\n                        shapeNodes.push({\n                            t: \"c\",\n                            pts: groupTransformMat.applyToTriplePoints(pathNodes.o[i - 1], pathNodes.i[0], pathNodes.v[0])\n                        });\n                        shapeNodes.push({\n                            t: \"z\"\n                        });\n                    }\n                }\n            }\n            styledShape.trNodes = shapeNodes;\n        }\n    };\n    CVShapeElement.prototype.renderPath = function(pathData, itemData) {\n        if (pathData.hd !== true && pathData._shouldRender) {\n            var i;\n            var len = itemData.styledShapes.length;\n            for(i = 0; i < len; i += 1){\n                this.renderStyledShape(itemData.styledShapes[i], itemData.sh);\n            }\n        }\n    };\n    CVShapeElement.prototype.renderFill = function(styleData, itemData, groupTransform) {\n        var styleElem = itemData.style;\n        if (itemData.c._mdf || this._isFirstFrame) {\n            styleElem.co = \"rgb(\" + bmFloor(itemData.c.v[0]) + \",\" + bmFloor(itemData.c.v[1]) + \",\" + bmFloor(itemData.c.v[2]) + \")\";\n        }\n        if (itemData.o._mdf || groupTransform._opMdf || this._isFirstFrame) {\n            styleElem.coOp = itemData.o.v * groupTransform.opacity;\n        }\n    };\n    CVShapeElement.prototype.renderGradientFill = function(styleData, itemData, groupTransform) {\n        var styleElem = itemData.style;\n        var grd;\n        if (!styleElem.grd || itemData.g._mdf || itemData.s._mdf || itemData.e._mdf || styleData.t !== 1 && (itemData.h._mdf || itemData.a._mdf)) {\n            var ctx = this.globalData.canvasContext;\n            var pt1 = itemData.s.v;\n            var pt2 = itemData.e.v;\n            if (styleData.t === 1) {\n                grd = ctx.createLinearGradient(pt1[0], pt1[1], pt2[0], pt2[1]);\n            } else {\n                var rad = Math.sqrt(Math.pow(pt1[0] - pt2[0], 2) + Math.pow(pt1[1] - pt2[1], 2));\n                var ang = Math.atan2(pt2[1] - pt1[1], pt2[0] - pt1[0]);\n                var percent = itemData.h.v;\n                if (percent >= 1) {\n                    percent = 0.99;\n                } else if (percent <= -1) {\n                    percent = -0.99;\n                }\n                var dist = rad * percent;\n                var x = Math.cos(ang + itemData.a.v) * dist + pt1[0];\n                var y = Math.sin(ang + itemData.a.v) * dist + pt1[1];\n                grd = ctx.createRadialGradient(x, y, 0, pt1[0], pt1[1], rad);\n            }\n            var i;\n            var len = styleData.g.p;\n            var cValues = itemData.g.c;\n            var opacity = 1;\n            for(i = 0; i < len; i += 1){\n                if (itemData.g._hasOpacity && itemData.g._collapsable) {\n                    opacity = itemData.g.o[i * 2 + 1];\n                }\n                grd.addColorStop(cValues[i * 4] / 100, \"rgba(\" + cValues[i * 4 + 1] + \",\" + cValues[i * 4 + 2] + \",\" + cValues[i * 4 + 3] + \",\" + opacity + \")\");\n            }\n            styleElem.grd = grd;\n        }\n        styleElem.coOp = itemData.o.v * groupTransform.opacity;\n    };\n    CVShapeElement.prototype.renderStroke = function(styleData, itemData, groupTransform) {\n        var styleElem = itemData.style;\n        var d = itemData.d;\n        if (d && (d._mdf || this._isFirstFrame)) {\n            styleElem.da = d.dashArray;\n            styleElem[\"do\"] = d.dashoffset[0];\n        }\n        if (itemData.c._mdf || this._isFirstFrame) {\n            styleElem.co = \"rgb(\" + bmFloor(itemData.c.v[0]) + \",\" + bmFloor(itemData.c.v[1]) + \",\" + bmFloor(itemData.c.v[2]) + \")\";\n        }\n        if (itemData.o._mdf || groupTransform._opMdf || this._isFirstFrame) {\n            styleElem.coOp = itemData.o.v * groupTransform.opacity;\n        }\n        if (itemData.w._mdf || this._isFirstFrame) {\n            styleElem.wi = itemData.w.v;\n        }\n    };\n    CVShapeElement.prototype.destroy = function() {\n        this.shapesData = null;\n        this.globalData = null;\n        this.canvasContext = null;\n        this.stylesList.length = 0;\n        this.itemsData.length = 0;\n    };\n    function CVTextElement(data, globalData, comp) {\n        this.textSpans = [];\n        this.yOffset = 0;\n        this.fillColorAnim = false;\n        this.strokeColorAnim = false;\n        this.strokeWidthAnim = false;\n        this.stroke = false;\n        this.fill = false;\n        this.justifyOffset = 0;\n        this.currentRender = null;\n        this.renderType = \"canvas\";\n        this.values = {\n            fill: \"rgba(0,0,0,0)\",\n            stroke: \"rgba(0,0,0,0)\",\n            sWidth: 0,\n            fValue: \"\"\n        };\n        this.initElement(data, globalData, comp);\n    }\n    extendPrototype([\n        BaseElement,\n        TransformElement,\n        CVBaseElement,\n        HierarchyElement,\n        FrameElement,\n        RenderableElement,\n        ITextElement\n    ], CVTextElement);\n    CVTextElement.prototype.tHelper = createTag(\"canvas\").getContext(\"2d\");\n    CVTextElement.prototype.buildNewText = function() {\n        var documentData = this.textProperty.currentData;\n        this.renderedLetters = createSizedArray(documentData.l ? documentData.l.length : 0);\n        var hasFill = false;\n        if (documentData.fc) {\n            hasFill = true;\n            this.values.fill = this.buildColor(documentData.fc);\n        } else {\n            this.values.fill = \"rgba(0,0,0,0)\";\n        }\n        this.fill = hasFill;\n        var hasStroke = false;\n        if (documentData.sc) {\n            hasStroke = true;\n            this.values.stroke = this.buildColor(documentData.sc);\n            this.values.sWidth = documentData.sw;\n        }\n        var fontData = this.globalData.fontManager.getFontByName(documentData.f);\n        var i;\n        var len;\n        var letters = documentData.l;\n        var matrixHelper = this.mHelper;\n        this.stroke = hasStroke;\n        this.values.fValue = documentData.finalSize + \"px \" + this.globalData.fontManager.getFontByName(documentData.f).fFamily;\n        len = documentData.finalText.length; // this.tHelper.font = this.values.fValue;\n        var charData;\n        var shapeData;\n        var k;\n        var kLen;\n        var shapes;\n        var j;\n        var jLen;\n        var pathNodes;\n        var commands;\n        var pathArr;\n        var singleShape = this.data.singleShape;\n        var trackingOffset = documentData.tr * 0.001 * documentData.finalSize;\n        var xPos = 0;\n        var yPos = 0;\n        var firstLine = true;\n        var cnt = 0;\n        for(i = 0; i < len; i += 1){\n            charData = this.globalData.fontManager.getCharData(documentData.finalText[i], fontData.fStyle, this.globalData.fontManager.getFontByName(documentData.f).fFamily);\n            shapeData = charData && charData.data || {};\n            matrixHelper.reset();\n            if (singleShape && letters[i].n) {\n                xPos = -trackingOffset;\n                yPos += documentData.yOffset;\n                yPos += firstLine ? 1 : 0;\n                firstLine = false;\n            }\n            shapes = shapeData.shapes ? shapeData.shapes[0].it : [];\n            jLen = shapes.length;\n            matrixHelper.scale(documentData.finalSize / 100, documentData.finalSize / 100);\n            if (singleShape) {\n                this.applyTextPropertiesToMatrix(documentData, matrixHelper, letters[i].line, xPos, yPos);\n            }\n            commands = createSizedArray(jLen - 1);\n            var commandsCounter = 0;\n            for(j = 0; j < jLen; j += 1){\n                if (shapes[j].ty === \"sh\") {\n                    kLen = shapes[j].ks.k.i.length;\n                    pathNodes = shapes[j].ks.k;\n                    pathArr = [];\n                    for(k = 1; k < kLen; k += 1){\n                        if (k === 1) {\n                            pathArr.push(matrixHelper.applyToX(pathNodes.v[0][0], pathNodes.v[0][1], 0), matrixHelper.applyToY(pathNodes.v[0][0], pathNodes.v[0][1], 0));\n                        }\n                        pathArr.push(matrixHelper.applyToX(pathNodes.o[k - 1][0], pathNodes.o[k - 1][1], 0), matrixHelper.applyToY(pathNodes.o[k - 1][0], pathNodes.o[k - 1][1], 0), matrixHelper.applyToX(pathNodes.i[k][0], pathNodes.i[k][1], 0), matrixHelper.applyToY(pathNodes.i[k][0], pathNodes.i[k][1], 0), matrixHelper.applyToX(pathNodes.v[k][0], pathNodes.v[k][1], 0), matrixHelper.applyToY(pathNodes.v[k][0], pathNodes.v[k][1], 0));\n                    }\n                    pathArr.push(matrixHelper.applyToX(pathNodes.o[k - 1][0], pathNodes.o[k - 1][1], 0), matrixHelper.applyToY(pathNodes.o[k - 1][0], pathNodes.o[k - 1][1], 0), matrixHelper.applyToX(pathNodes.i[0][0], pathNodes.i[0][1], 0), matrixHelper.applyToY(pathNodes.i[0][0], pathNodes.i[0][1], 0), matrixHelper.applyToX(pathNodes.v[0][0], pathNodes.v[0][1], 0), matrixHelper.applyToY(pathNodes.v[0][0], pathNodes.v[0][1], 0));\n                    commands[commandsCounter] = pathArr;\n                    commandsCounter += 1;\n                }\n            }\n            if (singleShape) {\n                xPos += letters[i].l;\n                xPos += trackingOffset;\n            }\n            if (this.textSpans[cnt]) {\n                this.textSpans[cnt].elem = commands;\n            } else {\n                this.textSpans[cnt] = {\n                    elem: commands\n                };\n            }\n            cnt += 1;\n        }\n    };\n    CVTextElement.prototype.renderInnerContent = function() {\n        this.validateText();\n        var ctx = this.canvasContext;\n        ctx.font = this.values.fValue;\n        this.globalData.renderer.ctxLineCap(\"butt\"); // ctx.lineCap = 'butt';\n        this.globalData.renderer.ctxLineJoin(\"miter\"); // ctx.lineJoin = 'miter';\n        this.globalData.renderer.ctxMiterLimit(4); // ctx.miterLimit = 4;\n        if (!this.data.singleShape) {\n            this.textAnimator.getMeasures(this.textProperty.currentData, this.lettersChangedFlag);\n        }\n        var i;\n        var len;\n        var j;\n        var jLen;\n        var k;\n        var kLen;\n        var renderedLetters = this.textAnimator.renderedLetters;\n        var letters = this.textProperty.currentData.l;\n        len = letters.length;\n        var renderedLetter;\n        var lastFill = null;\n        var lastStroke = null;\n        var lastStrokeW = null;\n        var commands;\n        var pathArr;\n        var renderer = this.globalData.renderer;\n        for(i = 0; i < len; i += 1){\n            if (!letters[i].n) {\n                renderedLetter = renderedLetters[i];\n                if (renderedLetter) {\n                    renderer.save();\n                    renderer.ctxTransform(renderedLetter.p);\n                    renderer.ctxOpacity(renderedLetter.o);\n                }\n                if (this.fill) {\n                    if (renderedLetter && renderedLetter.fc) {\n                        if (lastFill !== renderedLetter.fc) {\n                            renderer.ctxFillStyle(renderedLetter.fc);\n                            lastFill = renderedLetter.fc; // ctx.fillStyle = renderedLetter.fc;\n                        }\n                    } else if (lastFill !== this.values.fill) {\n                        lastFill = this.values.fill;\n                        renderer.ctxFillStyle(this.values.fill); // ctx.fillStyle = this.values.fill;\n                    }\n                    commands = this.textSpans[i].elem;\n                    jLen = commands.length;\n                    this.globalData.canvasContext.beginPath();\n                    for(j = 0; j < jLen; j += 1){\n                        pathArr = commands[j];\n                        kLen = pathArr.length;\n                        this.globalData.canvasContext.moveTo(pathArr[0], pathArr[1]);\n                        for(k = 2; k < kLen; k += 6){\n                            this.globalData.canvasContext.bezierCurveTo(pathArr[k], pathArr[k + 1], pathArr[k + 2], pathArr[k + 3], pathArr[k + 4], pathArr[k + 5]);\n                        }\n                    }\n                    this.globalData.canvasContext.closePath();\n                    renderer.ctxFill(); // this.globalData.canvasContext.fill();\n                /// ctx.fillText(this.textSpans[i].val,0,0);\n                }\n                if (this.stroke) {\n                    if (renderedLetter && renderedLetter.sw) {\n                        if (lastStrokeW !== renderedLetter.sw) {\n                            lastStrokeW = renderedLetter.sw;\n                            renderer.ctxLineWidth(renderedLetter.sw); // ctx.lineWidth = renderedLetter.sw;\n                        }\n                    } else if (lastStrokeW !== this.values.sWidth) {\n                        lastStrokeW = this.values.sWidth;\n                        renderer.ctxLineWidth(this.values.sWidth); // ctx.lineWidth = this.values.sWidth;\n                    }\n                    if (renderedLetter && renderedLetter.sc) {\n                        if (lastStroke !== renderedLetter.sc) {\n                            lastStroke = renderedLetter.sc;\n                            renderer.ctxStrokeStyle(renderedLetter.sc); // ctx.strokeStyle = renderedLetter.sc;\n                        }\n                    } else if (lastStroke !== this.values.stroke) {\n                        lastStroke = this.values.stroke;\n                        renderer.ctxStrokeStyle(this.values.stroke); // ctx.strokeStyle = this.values.stroke;\n                    }\n                    commands = this.textSpans[i].elem;\n                    jLen = commands.length;\n                    this.globalData.canvasContext.beginPath();\n                    for(j = 0; j < jLen; j += 1){\n                        pathArr = commands[j];\n                        kLen = pathArr.length;\n                        this.globalData.canvasContext.moveTo(pathArr[0], pathArr[1]);\n                        for(k = 2; k < kLen; k += 6){\n                            this.globalData.canvasContext.bezierCurveTo(pathArr[k], pathArr[k + 1], pathArr[k + 2], pathArr[k + 3], pathArr[k + 4], pathArr[k + 5]);\n                        }\n                    }\n                    this.globalData.canvasContext.closePath();\n                    renderer.ctxStroke(); // this.globalData.canvasContext.stroke();\n                /// ctx.strokeText(letters[i].val,0,0);\n                }\n                if (renderedLetter) {\n                    this.globalData.renderer.restore();\n                }\n            }\n        }\n    };\n    function CVImageElement(data, globalData, comp) {\n        this.assetData = globalData.getAssetData(data.refId);\n        this.img = globalData.imageLoader.getAsset(this.assetData);\n        this.initElement(data, globalData, comp);\n    }\n    extendPrototype([\n        BaseElement,\n        TransformElement,\n        CVBaseElement,\n        HierarchyElement,\n        FrameElement,\n        RenderableElement\n    ], CVImageElement);\n    CVImageElement.prototype.initElement = SVGShapeElement.prototype.initElement;\n    CVImageElement.prototype.prepareFrame = IImageElement.prototype.prepareFrame;\n    CVImageElement.prototype.createContent = function() {\n        if (this.img.width && (this.assetData.w !== this.img.width || this.assetData.h !== this.img.height)) {\n            var canvas = createTag(\"canvas\");\n            canvas.width = this.assetData.w;\n            canvas.height = this.assetData.h;\n            var ctx = canvas.getContext(\"2d\");\n            var imgW = this.img.width;\n            var imgH = this.img.height;\n            var imgRel = imgW / imgH;\n            var canvasRel = this.assetData.w / this.assetData.h;\n            var widthCrop;\n            var heightCrop;\n            var par = this.assetData.pr || this.globalData.renderConfig.imagePreserveAspectRatio;\n            if (imgRel > canvasRel && par === \"xMidYMid slice\" || imgRel < canvasRel && par !== \"xMidYMid slice\") {\n                heightCrop = imgH;\n                widthCrop = heightCrop * canvasRel;\n            } else {\n                widthCrop = imgW;\n                heightCrop = widthCrop / canvasRel;\n            }\n            ctx.drawImage(this.img, (imgW - widthCrop) / 2, (imgH - heightCrop) / 2, widthCrop, heightCrop, 0, 0, this.assetData.w, this.assetData.h);\n            this.img = canvas;\n        }\n    };\n    CVImageElement.prototype.renderInnerContent = function() {\n        this.canvasContext.drawImage(this.img, 0, 0);\n    };\n    CVImageElement.prototype.destroy = function() {\n        this.img = null;\n    };\n    function CVSolidElement(data, globalData, comp) {\n        this.initElement(data, globalData, comp);\n    }\n    extendPrototype([\n        BaseElement,\n        TransformElement,\n        CVBaseElement,\n        HierarchyElement,\n        FrameElement,\n        RenderableElement\n    ], CVSolidElement);\n    CVSolidElement.prototype.initElement = SVGShapeElement.prototype.initElement;\n    CVSolidElement.prototype.prepareFrame = IImageElement.prototype.prepareFrame;\n    CVSolidElement.prototype.renderInnerContent = function() {\n        // var ctx = this.canvasContext;\n        this.globalData.renderer.ctxFillStyle(this.data.sc); // ctx.fillStyle = this.data.sc;\n        this.globalData.renderer.ctxFillRect(0, 0, this.data.sw, this.data.sh); // ctx.fillRect(0, 0, this.data.sw, this.data.sh);\n    //\n    };\n    function CanvasRendererBase() {}\n    extendPrototype([\n        BaseRenderer\n    ], CanvasRendererBase);\n    CanvasRendererBase.prototype.createShape = function(data) {\n        return new CVShapeElement(data, this.globalData, this);\n    };\n    CanvasRendererBase.prototype.createText = function(data) {\n        return new CVTextElement(data, this.globalData, this);\n    };\n    CanvasRendererBase.prototype.createImage = function(data) {\n        return new CVImageElement(data, this.globalData, this);\n    };\n    CanvasRendererBase.prototype.createSolid = function(data) {\n        return new CVSolidElement(data, this.globalData, this);\n    };\n    CanvasRendererBase.prototype.createNull = SVGRenderer.prototype.createNull;\n    CanvasRendererBase.prototype.ctxTransform = function(props) {\n        if (props[0] === 1 && props[1] === 0 && props[4] === 0 && props[5] === 1 && props[12] === 0 && props[13] === 0) {\n            return;\n        }\n        this.canvasContext.transform(props[0], props[1], props[4], props[5], props[12], props[13]);\n    };\n    CanvasRendererBase.prototype.ctxOpacity = function(op) {\n        this.canvasContext.globalAlpha *= op < 0 ? 0 : op;\n    };\n    CanvasRendererBase.prototype.ctxFillStyle = function(value) {\n        this.canvasContext.fillStyle = value;\n    };\n    CanvasRendererBase.prototype.ctxStrokeStyle = function(value) {\n        this.canvasContext.strokeStyle = value;\n    };\n    CanvasRendererBase.prototype.ctxLineWidth = function(value) {\n        this.canvasContext.lineWidth = value;\n    };\n    CanvasRendererBase.prototype.ctxLineCap = function(value) {\n        this.canvasContext.lineCap = value;\n    };\n    CanvasRendererBase.prototype.ctxLineJoin = function(value) {\n        this.canvasContext.lineJoin = value;\n    };\n    CanvasRendererBase.prototype.ctxMiterLimit = function(value) {\n        this.canvasContext.miterLimit = value;\n    };\n    CanvasRendererBase.prototype.ctxFill = function(rule) {\n        this.canvasContext.fill(rule);\n    };\n    CanvasRendererBase.prototype.ctxFillRect = function(x, y, w, h) {\n        this.canvasContext.fillRect(x, y, w, h);\n    };\n    CanvasRendererBase.prototype.ctxStroke = function() {\n        this.canvasContext.stroke();\n    };\n    CanvasRendererBase.prototype.reset = function() {\n        if (!this.renderConfig.clearCanvas) {\n            this.canvasContext.restore();\n            return;\n        }\n        this.contextData.reset();\n    };\n    CanvasRendererBase.prototype.save = function() {\n        this.canvasContext.save();\n    };\n    CanvasRendererBase.prototype.restore = function(actionFlag) {\n        if (!this.renderConfig.clearCanvas) {\n            this.canvasContext.restore();\n            return;\n        }\n        if (actionFlag) {\n            this.globalData.blendMode = \"source-over\";\n        }\n        this.contextData.restore(actionFlag);\n    };\n    CanvasRendererBase.prototype.configAnimation = function(animData) {\n        if (this.animationItem.wrapper) {\n            this.animationItem.container = createTag(\"canvas\");\n            var containerStyle = this.animationItem.container.style;\n            containerStyle.width = \"100%\";\n            containerStyle.height = \"100%\";\n            var origin = \"0px 0px 0px\";\n            containerStyle.transformOrigin = origin;\n            containerStyle.mozTransformOrigin = origin;\n            containerStyle.webkitTransformOrigin = origin;\n            containerStyle[\"-webkit-transform\"] = origin;\n            containerStyle.contentVisibility = this.renderConfig.contentVisibility;\n            this.animationItem.wrapper.appendChild(this.animationItem.container);\n            this.canvasContext = this.animationItem.container.getContext(\"2d\");\n            if (this.renderConfig.className) {\n                this.animationItem.container.setAttribute(\"class\", this.renderConfig.className);\n            }\n            if (this.renderConfig.id) {\n                this.animationItem.container.setAttribute(\"id\", this.renderConfig.id);\n            }\n        } else {\n            this.canvasContext = this.renderConfig.context;\n        }\n        this.contextData.setContext(this.canvasContext);\n        this.data = animData;\n        this.layers = animData.layers;\n        this.transformCanvas = {\n            w: animData.w,\n            h: animData.h,\n            sx: 0,\n            sy: 0,\n            tx: 0,\n            ty: 0\n        };\n        this.setupGlobalData(animData, document.body);\n        this.globalData.canvasContext = this.canvasContext;\n        this.globalData.renderer = this;\n        this.globalData.isDashed = false;\n        this.globalData.progressiveLoad = this.renderConfig.progressiveLoad;\n        this.globalData.transformCanvas = this.transformCanvas;\n        this.elements = createSizedArray(animData.layers.length);\n        this.updateContainerSize();\n    };\n    CanvasRendererBase.prototype.updateContainerSize = function(width, height) {\n        this.reset();\n        var elementWidth;\n        var elementHeight;\n        if (width) {\n            elementWidth = width;\n            elementHeight = height;\n            this.canvasContext.canvas.width = elementWidth;\n            this.canvasContext.canvas.height = elementHeight;\n        } else {\n            if (this.animationItem.wrapper && this.animationItem.container) {\n                elementWidth = this.animationItem.wrapper.offsetWidth;\n                elementHeight = this.animationItem.wrapper.offsetHeight;\n            } else {\n                elementWidth = this.canvasContext.canvas.width;\n                elementHeight = this.canvasContext.canvas.height;\n            }\n            this.canvasContext.canvas.width = elementWidth * this.renderConfig.dpr;\n            this.canvasContext.canvas.height = elementHeight * this.renderConfig.dpr;\n        }\n        var elementRel;\n        var animationRel;\n        if (this.renderConfig.preserveAspectRatio.indexOf(\"meet\") !== -1 || this.renderConfig.preserveAspectRatio.indexOf(\"slice\") !== -1) {\n            var par = this.renderConfig.preserveAspectRatio.split(\" \");\n            var fillType = par[1] || \"meet\";\n            var pos = par[0] || \"xMidYMid\";\n            var xPos = pos.substr(0, 4);\n            var yPos = pos.substr(4);\n            elementRel = elementWidth / elementHeight;\n            animationRel = this.transformCanvas.w / this.transformCanvas.h;\n            if (animationRel > elementRel && fillType === \"meet\" || animationRel < elementRel && fillType === \"slice\") {\n                this.transformCanvas.sx = elementWidth / (this.transformCanvas.w / this.renderConfig.dpr);\n                this.transformCanvas.sy = elementWidth / (this.transformCanvas.w / this.renderConfig.dpr);\n            } else {\n                this.transformCanvas.sx = elementHeight / (this.transformCanvas.h / this.renderConfig.dpr);\n                this.transformCanvas.sy = elementHeight / (this.transformCanvas.h / this.renderConfig.dpr);\n            }\n            if (xPos === \"xMid\" && (animationRel < elementRel && fillType === \"meet\" || animationRel > elementRel && fillType === \"slice\")) {\n                this.transformCanvas.tx = (elementWidth - this.transformCanvas.w * (elementHeight / this.transformCanvas.h)) / 2 * this.renderConfig.dpr;\n            } else if (xPos === \"xMax\" && (animationRel < elementRel && fillType === \"meet\" || animationRel > elementRel && fillType === \"slice\")) {\n                this.transformCanvas.tx = (elementWidth - this.transformCanvas.w * (elementHeight / this.transformCanvas.h)) * this.renderConfig.dpr;\n            } else {\n                this.transformCanvas.tx = 0;\n            }\n            if (yPos === \"YMid\" && (animationRel > elementRel && fillType === \"meet\" || animationRel < elementRel && fillType === \"slice\")) {\n                this.transformCanvas.ty = (elementHeight - this.transformCanvas.h * (elementWidth / this.transformCanvas.w)) / 2 * this.renderConfig.dpr;\n            } else if (yPos === \"YMax\" && (animationRel > elementRel && fillType === \"meet\" || animationRel < elementRel && fillType === \"slice\")) {\n                this.transformCanvas.ty = (elementHeight - this.transformCanvas.h * (elementWidth / this.transformCanvas.w)) * this.renderConfig.dpr;\n            } else {\n                this.transformCanvas.ty = 0;\n            }\n        } else if (this.renderConfig.preserveAspectRatio === \"none\") {\n            this.transformCanvas.sx = elementWidth / (this.transformCanvas.w / this.renderConfig.dpr);\n            this.transformCanvas.sy = elementHeight / (this.transformCanvas.h / this.renderConfig.dpr);\n            this.transformCanvas.tx = 0;\n            this.transformCanvas.ty = 0;\n        } else {\n            this.transformCanvas.sx = this.renderConfig.dpr;\n            this.transformCanvas.sy = this.renderConfig.dpr;\n            this.transformCanvas.tx = 0;\n            this.transformCanvas.ty = 0;\n        }\n        this.transformCanvas.props = [\n            this.transformCanvas.sx,\n            0,\n            0,\n            0,\n            0,\n            this.transformCanvas.sy,\n            0,\n            0,\n            0,\n            0,\n            1,\n            0,\n            this.transformCanvas.tx,\n            this.transformCanvas.ty,\n            0,\n            1\n        ];\n        /* var i, len = this.elements.length;\r\n      for(i=0;i<len;i+=1){\r\n          if(this.elements[i] && this.elements[i].data.ty === 0){\r\n              this.elements[i].resize(this.globalData.transformCanvas);\r\n          }\r\n      } */ this.ctxTransform(this.transformCanvas.props);\n        this.canvasContext.beginPath();\n        this.canvasContext.rect(0, 0, this.transformCanvas.w, this.transformCanvas.h);\n        this.canvasContext.closePath();\n        this.canvasContext.clip();\n        this.renderFrame(this.renderedFrame, true);\n    };\n    CanvasRendererBase.prototype.destroy = function() {\n        if (this.renderConfig.clearCanvas && this.animationItem.wrapper) {\n            this.animationItem.wrapper.innerText = \"\";\n        }\n        var i;\n        var len = this.layers ? this.layers.length : 0;\n        for(i = len - 1; i >= 0; i -= 1){\n            if (this.elements[i] && this.elements[i].destroy) {\n                this.elements[i].destroy();\n            }\n        }\n        this.elements.length = 0;\n        this.globalData.canvasContext = null;\n        this.animationItem.container = null;\n        this.destroyed = true;\n    };\n    CanvasRendererBase.prototype.renderFrame = function(num, forceRender) {\n        if (this.renderedFrame === num && this.renderConfig.clearCanvas === true && !forceRender || this.destroyed || num === -1) {\n            return;\n        }\n        this.renderedFrame = num;\n        this.globalData.frameNum = num - this.animationItem._isFirstFrame;\n        this.globalData.frameId += 1;\n        this.globalData._mdf = !this.renderConfig.clearCanvas || forceRender;\n        this.globalData.projectInterface.currentFrame = num; // console.log('--------');\n        // console.log('NEW: ',num);\n        var i;\n        var len = this.layers.length;\n        if (!this.completeLayers) {\n            this.checkLayers(num);\n        }\n        for(i = len - 1; i >= 0; i -= 1){\n            if (this.completeLayers || this.elements[i]) {\n                this.elements[i].prepareFrame(num - this.layers[i].st);\n            }\n        }\n        if (this.globalData._mdf) {\n            if (this.renderConfig.clearCanvas === true) {\n                this.canvasContext.clearRect(0, 0, this.transformCanvas.w, this.transformCanvas.h);\n            } else {\n                this.save();\n            }\n            for(i = len - 1; i >= 0; i -= 1){\n                if (this.completeLayers || this.elements[i]) {\n                    this.elements[i].renderFrame();\n                }\n            }\n            if (this.renderConfig.clearCanvas !== true) {\n                this.restore();\n            }\n        }\n    };\n    CanvasRendererBase.prototype.buildItem = function(pos) {\n        var elements = this.elements;\n        if (elements[pos] || this.layers[pos].ty === 99) {\n            return;\n        }\n        var element = this.createItem(this.layers[pos], this, this.globalData);\n        elements[pos] = element;\n        element.initExpressions();\n    /* if(this.layers[pos].ty === 0){\r\n          element.resize(this.globalData.transformCanvas);\r\n      } */ };\n    CanvasRendererBase.prototype.checkPendingElements = function() {\n        while(this.pendingElements.length){\n            var element = this.pendingElements.pop();\n            element.checkParenting();\n        }\n    };\n    CanvasRendererBase.prototype.hide = function() {\n        this.animationItem.container.style.display = \"none\";\n    };\n    CanvasRendererBase.prototype.show = function() {\n        this.animationItem.container.style.display = \"block\";\n    };\n    function CanvasContext() {\n        this.opacity = -1;\n        this.transform = createTypedArray(\"float32\", 16);\n        this.fillStyle = \"\";\n        this.strokeStyle = \"\";\n        this.lineWidth = \"\";\n        this.lineCap = \"\";\n        this.lineJoin = \"\";\n        this.miterLimit = \"\";\n        this.id = Math.random();\n    }\n    function CVContextData() {\n        this.stack = [];\n        this.cArrPos = 0;\n        this.cTr = new Matrix();\n        var i;\n        var len = 15;\n        for(i = 0; i < len; i += 1){\n            var canvasContext = new CanvasContext();\n            this.stack[i] = canvasContext;\n        }\n        this._length = len;\n        this.nativeContext = null;\n        this.transformMat = new Matrix();\n        this.currentOpacity = 1; //\n        this.currentFillStyle = \"\";\n        this.appliedFillStyle = \"\"; //\n        this.currentStrokeStyle = \"\";\n        this.appliedStrokeStyle = \"\"; //\n        this.currentLineWidth = \"\";\n        this.appliedLineWidth = \"\"; //\n        this.currentLineCap = \"\";\n        this.appliedLineCap = \"\"; //\n        this.currentLineJoin = \"\";\n        this.appliedLineJoin = \"\"; //\n        this.appliedMiterLimit = \"\";\n        this.currentMiterLimit = \"\";\n    }\n    CVContextData.prototype.duplicate = function() {\n        var newLength = this._length * 2;\n        var i = 0;\n        for(i = this._length; i < newLength; i += 1){\n            this.stack[i] = new CanvasContext();\n        }\n        this._length = newLength;\n    };\n    CVContextData.prototype.reset = function() {\n        this.cArrPos = 0;\n        this.cTr.reset();\n        this.stack[this.cArrPos].opacity = 1;\n    };\n    CVContextData.prototype.restore = function(forceRestore) {\n        this.cArrPos -= 1;\n        var currentContext = this.stack[this.cArrPos];\n        var transform = currentContext.transform;\n        var i;\n        var arr = this.cTr.props;\n        for(i = 0; i < 16; i += 1){\n            arr[i] = transform[i];\n        }\n        if (forceRestore) {\n            this.nativeContext.restore();\n            var prevStack = this.stack[this.cArrPos + 1];\n            this.appliedFillStyle = prevStack.fillStyle;\n            this.appliedStrokeStyle = prevStack.strokeStyle;\n            this.appliedLineWidth = prevStack.lineWidth;\n            this.appliedLineCap = prevStack.lineCap;\n            this.appliedLineJoin = prevStack.lineJoin;\n            this.appliedMiterLimit = prevStack.miterLimit;\n        }\n        this.nativeContext.setTransform(transform[0], transform[1], transform[4], transform[5], transform[12], transform[13]);\n        if (forceRestore || currentContext.opacity !== -1 && this.currentOpacity !== currentContext.opacity) {\n            this.nativeContext.globalAlpha = currentContext.opacity;\n            this.currentOpacity = currentContext.opacity;\n        }\n        this.currentFillStyle = currentContext.fillStyle;\n        this.currentStrokeStyle = currentContext.strokeStyle;\n        this.currentLineWidth = currentContext.lineWidth;\n        this.currentLineCap = currentContext.lineCap;\n        this.currentLineJoin = currentContext.lineJoin;\n        this.currentMiterLimit = currentContext.miterLimit;\n    };\n    CVContextData.prototype.save = function(saveOnNativeFlag) {\n        if (saveOnNativeFlag) {\n            this.nativeContext.save();\n        }\n        var props = this.cTr.props;\n        if (this._length <= this.cArrPos) {\n            this.duplicate();\n        }\n        var currentStack = this.stack[this.cArrPos];\n        var i;\n        for(i = 0; i < 16; i += 1){\n            currentStack.transform[i] = props[i];\n        }\n        this.cArrPos += 1;\n        var newStack = this.stack[this.cArrPos];\n        newStack.opacity = currentStack.opacity;\n        newStack.fillStyle = currentStack.fillStyle;\n        newStack.strokeStyle = currentStack.strokeStyle;\n        newStack.lineWidth = currentStack.lineWidth;\n        newStack.lineCap = currentStack.lineCap;\n        newStack.lineJoin = currentStack.lineJoin;\n        newStack.miterLimit = currentStack.miterLimit;\n    };\n    CVContextData.prototype.setOpacity = function(value) {\n        this.stack[this.cArrPos].opacity = value;\n    };\n    CVContextData.prototype.setContext = function(value) {\n        this.nativeContext = value;\n    };\n    CVContextData.prototype.fillStyle = function(value) {\n        if (this.stack[this.cArrPos].fillStyle !== value) {\n            this.currentFillStyle = value;\n            this.stack[this.cArrPos].fillStyle = value;\n        }\n    };\n    CVContextData.prototype.strokeStyle = function(value) {\n        if (this.stack[this.cArrPos].strokeStyle !== value) {\n            this.currentStrokeStyle = value;\n            this.stack[this.cArrPos].strokeStyle = value;\n        }\n    };\n    CVContextData.prototype.lineWidth = function(value) {\n        if (this.stack[this.cArrPos].lineWidth !== value) {\n            this.currentLineWidth = value;\n            this.stack[this.cArrPos].lineWidth = value;\n        }\n    };\n    CVContextData.prototype.lineCap = function(value) {\n        if (this.stack[this.cArrPos].lineCap !== value) {\n            this.currentLineCap = value;\n            this.stack[this.cArrPos].lineCap = value;\n        }\n    };\n    CVContextData.prototype.lineJoin = function(value) {\n        if (this.stack[this.cArrPos].lineJoin !== value) {\n            this.currentLineJoin = value;\n            this.stack[this.cArrPos].lineJoin = value;\n        }\n    };\n    CVContextData.prototype.miterLimit = function(value) {\n        if (this.stack[this.cArrPos].miterLimit !== value) {\n            this.currentMiterLimit = value;\n            this.stack[this.cArrPos].miterLimit = value;\n        }\n    };\n    CVContextData.prototype.transform = function(props) {\n        this.transformMat.cloneFromProps(props); // Taking the last transform value from the stored stack of transforms\n        var currentTransform = this.cTr; // Applying the last transform value after the new transform to respect the order of transformations\n        this.transformMat.multiply(currentTransform); // Storing the new transformed value in the stored transform\n        currentTransform.cloneFromProps(this.transformMat.props);\n        var trProps = currentTransform.props; // Applying the new transform to the canvas\n        this.nativeContext.setTransform(trProps[0], trProps[1], trProps[4], trProps[5], trProps[12], trProps[13]);\n    };\n    CVContextData.prototype.opacity = function(op) {\n        var currentOpacity = this.stack[this.cArrPos].opacity;\n        currentOpacity *= op < 0 ? 0 : op;\n        if (this.stack[this.cArrPos].opacity !== currentOpacity) {\n            if (this.currentOpacity !== op) {\n                this.nativeContext.globalAlpha = op;\n                this.currentOpacity = op;\n            }\n            this.stack[this.cArrPos].opacity = currentOpacity;\n        }\n    };\n    CVContextData.prototype.fill = function(rule) {\n        if (this.appliedFillStyle !== this.currentFillStyle) {\n            this.appliedFillStyle = this.currentFillStyle;\n            this.nativeContext.fillStyle = this.appliedFillStyle;\n        }\n        this.nativeContext.fill(rule);\n    };\n    CVContextData.prototype.fillRect = function(x, y, w, h) {\n        if (this.appliedFillStyle !== this.currentFillStyle) {\n            this.appliedFillStyle = this.currentFillStyle;\n            this.nativeContext.fillStyle = this.appliedFillStyle;\n        }\n        this.nativeContext.fillRect(x, y, w, h);\n    };\n    CVContextData.prototype.stroke = function() {\n        if (this.appliedStrokeStyle !== this.currentStrokeStyle) {\n            this.appliedStrokeStyle = this.currentStrokeStyle;\n            this.nativeContext.strokeStyle = this.appliedStrokeStyle;\n        }\n        if (this.appliedLineWidth !== this.currentLineWidth) {\n            this.appliedLineWidth = this.currentLineWidth;\n            this.nativeContext.lineWidth = this.appliedLineWidth;\n        }\n        if (this.appliedLineCap !== this.currentLineCap) {\n            this.appliedLineCap = this.currentLineCap;\n            this.nativeContext.lineCap = this.appliedLineCap;\n        }\n        if (this.appliedLineJoin !== this.currentLineJoin) {\n            this.appliedLineJoin = this.currentLineJoin;\n            this.nativeContext.lineJoin = this.appliedLineJoin;\n        }\n        if (this.appliedMiterLimit !== this.currentMiterLimit) {\n            this.appliedMiterLimit = this.currentMiterLimit;\n            this.nativeContext.miterLimit = this.appliedMiterLimit;\n        }\n        this.nativeContext.stroke();\n    };\n    function CVCompElement(data, globalData, comp) {\n        this.completeLayers = false;\n        this.layers = data.layers;\n        this.pendingElements = [];\n        this.elements = createSizedArray(this.layers.length);\n        this.initElement(data, globalData, comp);\n        this.tm = data.tm ? PropertyFactory.getProp(this, data.tm, 0, globalData.frameRate, this) : {\n            _placeholder: true\n        };\n    }\n    extendPrototype([\n        CanvasRendererBase,\n        ICompElement,\n        CVBaseElement\n    ], CVCompElement);\n    CVCompElement.prototype.renderInnerContent = function() {\n        var ctx = this.canvasContext;\n        ctx.beginPath();\n        ctx.moveTo(0, 0);\n        ctx.lineTo(this.data.w, 0);\n        ctx.lineTo(this.data.w, this.data.h);\n        ctx.lineTo(0, this.data.h);\n        ctx.lineTo(0, 0);\n        ctx.clip();\n        var i;\n        var len = this.layers.length;\n        for(i = len - 1; i >= 0; i -= 1){\n            if (this.completeLayers || this.elements[i]) {\n                this.elements[i].renderFrame();\n            }\n        }\n    };\n    CVCompElement.prototype.destroy = function() {\n        var i;\n        var len = this.layers.length;\n        for(i = len - 1; i >= 0; i -= 1){\n            if (this.elements[i]) {\n                this.elements[i].destroy();\n            }\n        }\n        this.layers = null;\n        this.elements = null;\n    };\n    CVCompElement.prototype.createComp = function(data) {\n        return new CVCompElement(data, this.globalData, this);\n    };\n    function CanvasRenderer(animationItem, config) {\n        this.animationItem = animationItem;\n        this.renderConfig = {\n            clearCanvas: config && config.clearCanvas !== undefined ? config.clearCanvas : true,\n            context: config && config.context || null,\n            progressiveLoad: config && config.progressiveLoad || false,\n            preserveAspectRatio: config && config.preserveAspectRatio || \"xMidYMid meet\",\n            imagePreserveAspectRatio: config && config.imagePreserveAspectRatio || \"xMidYMid slice\",\n            contentVisibility: config && config.contentVisibility || \"visible\",\n            className: config && config.className || \"\",\n            id: config && config.id || \"\",\n            runExpressions: !config || config.runExpressions === undefined || config.runExpressions\n        };\n        this.renderConfig.dpr = config && config.dpr || 1;\n        if (this.animationItem.wrapper) {\n            this.renderConfig.dpr = config && config.dpr || window.devicePixelRatio || 1;\n        }\n        this.renderedFrame = -1;\n        this.globalData = {\n            frameNum: -1,\n            _mdf: false,\n            renderConfig: this.renderConfig,\n            currentGlobalAlpha: -1\n        };\n        this.contextData = new CVContextData();\n        this.elements = [];\n        this.pendingElements = [];\n        this.transformMat = new Matrix();\n        this.completeLayers = false;\n        this.rendererType = \"canvas\";\n        if (this.renderConfig.clearCanvas) {\n            this.ctxTransform = this.contextData.transform.bind(this.contextData);\n            this.ctxOpacity = this.contextData.opacity.bind(this.contextData);\n            this.ctxFillStyle = this.contextData.fillStyle.bind(this.contextData);\n            this.ctxStrokeStyle = this.contextData.strokeStyle.bind(this.contextData);\n            this.ctxLineWidth = this.contextData.lineWidth.bind(this.contextData);\n            this.ctxLineCap = this.contextData.lineCap.bind(this.contextData);\n            this.ctxLineJoin = this.contextData.lineJoin.bind(this.contextData);\n            this.ctxMiterLimit = this.contextData.miterLimit.bind(this.contextData);\n            this.ctxFill = this.contextData.fill.bind(this.contextData);\n            this.ctxFillRect = this.contextData.fillRect.bind(this.contextData);\n            this.ctxStroke = this.contextData.stroke.bind(this.contextData);\n            this.save = this.contextData.save.bind(this.contextData);\n        }\n    }\n    extendPrototype([\n        CanvasRendererBase\n    ], CanvasRenderer);\n    CanvasRenderer.prototype.createComp = function(data) {\n        return new CVCompElement(data, this.globalData, this);\n    };\n    function HBaseElement() {}\n    HBaseElement.prototype = {\n        checkBlendMode: function checkBlendMode() {},\n        initRendererElement: function initRendererElement() {\n            this.baseElement = createTag(this.data.tg || \"div\");\n            if (this.data.hasMask) {\n                this.svgElement = createNS(\"svg\");\n                this.layerElement = createNS(\"g\");\n                this.maskedElement = this.layerElement;\n                this.svgElement.appendChild(this.layerElement);\n                this.baseElement.appendChild(this.svgElement);\n            } else {\n                this.layerElement = this.baseElement;\n            }\n            styleDiv(this.baseElement);\n        },\n        createContainerElements: function createContainerElements() {\n            this.renderableEffectsManager = new CVEffects(this);\n            this.transformedElement = this.baseElement;\n            this.maskedElement = this.layerElement;\n            if (this.data.ln) {\n                this.layerElement.setAttribute(\"id\", this.data.ln);\n            }\n            if (this.data.cl) {\n                this.layerElement.setAttribute(\"class\", this.data.cl);\n            }\n            if (this.data.bm !== 0) {\n                this.setBlendMode();\n            }\n        },\n        renderElement: function renderElement() {\n            var transformedElementStyle = this.transformedElement ? this.transformedElement.style : {};\n            if (this.finalTransform._matMdf) {\n                var matrixValue = this.finalTransform.mat.toCSS();\n                transformedElementStyle.transform = matrixValue;\n                transformedElementStyle.webkitTransform = matrixValue;\n            }\n            if (this.finalTransform._opMdf) {\n                transformedElementStyle.opacity = this.finalTransform.mProp.o.v;\n            }\n        },\n        renderFrame: function renderFrame() {\n            // If it is exported as hidden (data.hd === true) no need to render\n            // If it is not visible no need to render\n            if (this.data.hd || this.hidden) {\n                return;\n            }\n            this.renderTransform();\n            this.renderRenderable();\n            this.renderElement();\n            this.renderInnerContent();\n            if (this._isFirstFrame) {\n                this._isFirstFrame = false;\n            }\n        },\n        destroy: function destroy() {\n            this.layerElement = null;\n            this.transformedElement = null;\n            if (this.matteElement) {\n                this.matteElement = null;\n            }\n            if (this.maskManager) {\n                this.maskManager.destroy();\n                this.maskManager = null;\n            }\n        },\n        createRenderableComponents: function createRenderableComponents() {\n            this.maskManager = new MaskElement(this.data, this, this.globalData);\n        },\n        addEffects: function addEffects() {},\n        setMatte: function setMatte() {}\n    };\n    HBaseElement.prototype.getBaseElement = SVGBaseElement.prototype.getBaseElement;\n    HBaseElement.prototype.destroyBaseElement = HBaseElement.prototype.destroy;\n    HBaseElement.prototype.buildElementParenting = BaseRenderer.prototype.buildElementParenting;\n    function HSolidElement(data, globalData, comp) {\n        this.initElement(data, globalData, comp);\n    }\n    extendPrototype([\n        BaseElement,\n        TransformElement,\n        HBaseElement,\n        HierarchyElement,\n        FrameElement,\n        RenderableDOMElement\n    ], HSolidElement);\n    HSolidElement.prototype.createContent = function() {\n        var rect;\n        if (this.data.hasMask) {\n            rect = createNS(\"rect\");\n            rect.setAttribute(\"width\", this.data.sw);\n            rect.setAttribute(\"height\", this.data.sh);\n            rect.setAttribute(\"fill\", this.data.sc);\n            this.svgElement.setAttribute(\"width\", this.data.sw);\n            this.svgElement.setAttribute(\"height\", this.data.sh);\n        } else {\n            rect = createTag(\"div\");\n            rect.style.width = this.data.sw + \"px\";\n            rect.style.height = this.data.sh + \"px\";\n            rect.style.backgroundColor = this.data.sc;\n        }\n        this.layerElement.appendChild(rect);\n    };\n    function HShapeElement(data, globalData, comp) {\n        // List of drawable elements\n        this.shapes = []; // Full shape data\n        this.shapesData = data.shapes; // List of styles that will be applied to shapes\n        this.stylesList = []; // List of modifiers that will be applied to shapes\n        this.shapeModifiers = []; // List of items in shape tree\n        this.itemsData = []; // List of items in previous shape tree\n        this.processedElements = []; // List of animated components\n        this.animatedContents = [];\n        this.shapesContainer = createNS(\"g\");\n        this.initElement(data, globalData, comp); // Moving any property that doesn't get too much access after initialization because of v8 way of handling more than 10 properties.\n        // List of elements that have been created\n        this.prevViewData = [];\n        this.currentBBox = {\n            x: 999999,\n            y: -999999,\n            h: 0,\n            w: 0\n        };\n    }\n    extendPrototype([\n        BaseElement,\n        TransformElement,\n        HSolidElement,\n        SVGShapeElement,\n        HBaseElement,\n        HierarchyElement,\n        FrameElement,\n        RenderableElement\n    ], HShapeElement);\n    HShapeElement.prototype._renderShapeFrame = HShapeElement.prototype.renderInnerContent;\n    HShapeElement.prototype.createContent = function() {\n        var cont;\n        this.baseElement.style.fontSize = 0;\n        if (this.data.hasMask) {\n            this.layerElement.appendChild(this.shapesContainer);\n            cont = this.svgElement;\n        } else {\n            cont = createNS(\"svg\");\n            var size = this.comp.data ? this.comp.data : this.globalData.compSize;\n            cont.setAttribute(\"width\", size.w);\n            cont.setAttribute(\"height\", size.h);\n            cont.appendChild(this.shapesContainer);\n            this.layerElement.appendChild(cont);\n        }\n        this.searchShapes(this.shapesData, this.itemsData, this.prevViewData, this.shapesContainer, 0, [], true);\n        this.filterUniqueShapes();\n        this.shapeCont = cont;\n    };\n    HShapeElement.prototype.getTransformedPoint = function(transformers, point) {\n        var i;\n        var len = transformers.length;\n        for(i = 0; i < len; i += 1){\n            point = transformers[i].mProps.v.applyToPointArray(point[0], point[1], 0);\n        }\n        return point;\n    };\n    HShapeElement.prototype.calculateShapeBoundingBox = function(item, boundingBox) {\n        var shape = item.sh.v;\n        var transformers = item.transformers;\n        var i;\n        var len = shape._length;\n        var vPoint;\n        var oPoint;\n        var nextIPoint;\n        var nextVPoint;\n        if (len <= 1) {\n            return;\n        }\n        for(i = 0; i < len - 1; i += 1){\n            vPoint = this.getTransformedPoint(transformers, shape.v[i]);\n            oPoint = this.getTransformedPoint(transformers, shape.o[i]);\n            nextIPoint = this.getTransformedPoint(transformers, shape.i[i + 1]);\n            nextVPoint = this.getTransformedPoint(transformers, shape.v[i + 1]);\n            this.checkBounds(vPoint, oPoint, nextIPoint, nextVPoint, boundingBox);\n        }\n        if (shape.c) {\n            vPoint = this.getTransformedPoint(transformers, shape.v[i]);\n            oPoint = this.getTransformedPoint(transformers, shape.o[i]);\n            nextIPoint = this.getTransformedPoint(transformers, shape.i[0]);\n            nextVPoint = this.getTransformedPoint(transformers, shape.v[0]);\n            this.checkBounds(vPoint, oPoint, nextIPoint, nextVPoint, boundingBox);\n        }\n    };\n    HShapeElement.prototype.checkBounds = function(vPoint, oPoint, nextIPoint, nextVPoint, boundingBox) {\n        this.getBoundsOfCurve(vPoint, oPoint, nextIPoint, nextVPoint);\n        var bounds = this.shapeBoundingBox;\n        boundingBox.x = bmMin(bounds.left, boundingBox.x);\n        boundingBox.xMax = bmMax(bounds.right, boundingBox.xMax);\n        boundingBox.y = bmMin(bounds.top, boundingBox.y);\n        boundingBox.yMax = bmMax(bounds.bottom, boundingBox.yMax);\n    };\n    HShapeElement.prototype.shapeBoundingBox = {\n        left: 0,\n        right: 0,\n        top: 0,\n        bottom: 0\n    };\n    HShapeElement.prototype.tempBoundingBox = {\n        x: 0,\n        xMax: 0,\n        y: 0,\n        yMax: 0,\n        width: 0,\n        height: 0\n    };\n    HShapeElement.prototype.getBoundsOfCurve = function(p0, p1, p2, p3) {\n        var bounds = [\n            [\n                p0[0],\n                p3[0]\n            ],\n            [\n                p0[1],\n                p3[1]\n            ]\n        ];\n        for(var a, b, c, t, b2ac, t1, t2, i = 0; i < 2; ++i){\n            // eslint-disable-line no-plusplus\n            b = 6 * p0[i] - 12 * p1[i] + 6 * p2[i];\n            a = -3 * p0[i] + 9 * p1[i] - 9 * p2[i] + 3 * p3[i];\n            c = 3 * p1[i] - 3 * p0[i];\n            b |= 0; // eslint-disable-line no-bitwise\n            a |= 0; // eslint-disable-line no-bitwise\n            c |= 0; // eslint-disable-line no-bitwise\n            if (a === 0 && b === 0) {} else if (a === 0) {\n                t = -c / b;\n                if (t > 0 && t < 1) {\n                    bounds[i].push(this.calculateF(t, p0, p1, p2, p3, i));\n                }\n            } else {\n                b2ac = b * b - 4 * c * a;\n                if (b2ac >= 0) {\n                    t1 = (-b + bmSqrt(b2ac)) / (2 * a);\n                    if (t1 > 0 && t1 < 1) bounds[i].push(this.calculateF(t1, p0, p1, p2, p3, i));\n                    t2 = (-b - bmSqrt(b2ac)) / (2 * a);\n                    if (t2 > 0 && t2 < 1) bounds[i].push(this.calculateF(t2, p0, p1, p2, p3, i));\n                }\n            }\n        }\n        this.shapeBoundingBox.left = bmMin.apply(null, bounds[0]);\n        this.shapeBoundingBox.top = bmMin.apply(null, bounds[1]);\n        this.shapeBoundingBox.right = bmMax.apply(null, bounds[0]);\n        this.shapeBoundingBox.bottom = bmMax.apply(null, bounds[1]);\n    };\n    HShapeElement.prototype.calculateF = function(t, p0, p1, p2, p3, i) {\n        return bmPow(1 - t, 3) * p0[i] + 3 * bmPow(1 - t, 2) * t * p1[i] + 3 * (1 - t) * bmPow(t, 2) * p2[i] + bmPow(t, 3) * p3[i];\n    };\n    HShapeElement.prototype.calculateBoundingBox = function(itemsData, boundingBox) {\n        var i;\n        var len = itemsData.length;\n        for(i = 0; i < len; i += 1){\n            if (itemsData[i] && itemsData[i].sh) {\n                this.calculateShapeBoundingBox(itemsData[i], boundingBox);\n            } else if (itemsData[i] && itemsData[i].it) {\n                this.calculateBoundingBox(itemsData[i].it, boundingBox);\n            } else if (itemsData[i] && itemsData[i].style && itemsData[i].w) {\n                this.expandStrokeBoundingBox(itemsData[i].w, boundingBox);\n            }\n        }\n    };\n    HShapeElement.prototype.expandStrokeBoundingBox = function(widthProperty, boundingBox) {\n        var width = 0;\n        if (widthProperty.keyframes) {\n            for(var i = 0; i < widthProperty.keyframes.length; i += 1){\n                var kfw = widthProperty.keyframes[i].s;\n                if (kfw > width) {\n                    width = kfw;\n                }\n            }\n            width *= widthProperty.mult;\n        } else {\n            width = widthProperty.v * widthProperty.mult;\n        }\n        boundingBox.x -= width;\n        boundingBox.xMax += width;\n        boundingBox.y -= width;\n        boundingBox.yMax += width;\n    };\n    HShapeElement.prototype.currentBoxContains = function(box) {\n        return this.currentBBox.x <= box.x && this.currentBBox.y <= box.y && this.currentBBox.width + this.currentBBox.x >= box.x + box.width && this.currentBBox.height + this.currentBBox.y >= box.y + box.height;\n    };\n    HShapeElement.prototype.renderInnerContent = function() {\n        this._renderShapeFrame();\n        if (!this.hidden && (this._isFirstFrame || this._mdf)) {\n            var tempBoundingBox = this.tempBoundingBox;\n            var max = 999999;\n            tempBoundingBox.x = max;\n            tempBoundingBox.xMax = -max;\n            tempBoundingBox.y = max;\n            tempBoundingBox.yMax = -max;\n            this.calculateBoundingBox(this.itemsData, tempBoundingBox);\n            tempBoundingBox.width = tempBoundingBox.xMax < tempBoundingBox.x ? 0 : tempBoundingBox.xMax - tempBoundingBox.x;\n            tempBoundingBox.height = tempBoundingBox.yMax < tempBoundingBox.y ? 0 : tempBoundingBox.yMax - tempBoundingBox.y; // var tempBoundingBox = this.shapeCont.getBBox();\n            if (this.currentBoxContains(tempBoundingBox)) {\n                return;\n            }\n            var changed = false;\n            if (this.currentBBox.w !== tempBoundingBox.width) {\n                this.currentBBox.w = tempBoundingBox.width;\n                this.shapeCont.setAttribute(\"width\", tempBoundingBox.width);\n                changed = true;\n            }\n            if (this.currentBBox.h !== tempBoundingBox.height) {\n                this.currentBBox.h = tempBoundingBox.height;\n                this.shapeCont.setAttribute(\"height\", tempBoundingBox.height);\n                changed = true;\n            }\n            if (changed || this.currentBBox.x !== tempBoundingBox.x || this.currentBBox.y !== tempBoundingBox.y) {\n                this.currentBBox.w = tempBoundingBox.width;\n                this.currentBBox.h = tempBoundingBox.height;\n                this.currentBBox.x = tempBoundingBox.x;\n                this.currentBBox.y = tempBoundingBox.y;\n                this.shapeCont.setAttribute(\"viewBox\", this.currentBBox.x + \" \" + this.currentBBox.y + \" \" + this.currentBBox.w + \" \" + this.currentBBox.h);\n                var shapeStyle = this.shapeCont.style;\n                var shapeTransform = \"translate(\" + this.currentBBox.x + \"px,\" + this.currentBBox.y + \"px)\";\n                shapeStyle.transform = shapeTransform;\n                shapeStyle.webkitTransform = shapeTransform;\n            }\n        }\n    };\n    function HTextElement(data, globalData, comp) {\n        this.textSpans = [];\n        this.textPaths = [];\n        this.currentBBox = {\n            x: 999999,\n            y: -999999,\n            h: 0,\n            w: 0\n        };\n        this.renderType = \"svg\";\n        this.isMasked = false;\n        this.initElement(data, globalData, comp);\n    }\n    extendPrototype([\n        BaseElement,\n        TransformElement,\n        HBaseElement,\n        HierarchyElement,\n        FrameElement,\n        RenderableDOMElement,\n        ITextElement\n    ], HTextElement);\n    HTextElement.prototype.createContent = function() {\n        this.isMasked = this.checkMasks();\n        if (this.isMasked) {\n            this.renderType = \"svg\";\n            this.compW = this.comp.data.w;\n            this.compH = this.comp.data.h;\n            this.svgElement.setAttribute(\"width\", this.compW);\n            this.svgElement.setAttribute(\"height\", this.compH);\n            var g = createNS(\"g\");\n            this.maskedElement.appendChild(g);\n            this.innerElem = g;\n        } else {\n            this.renderType = \"html\";\n            this.innerElem = this.layerElement;\n        }\n        this.checkParenting();\n    };\n    HTextElement.prototype.buildNewText = function() {\n        var documentData = this.textProperty.currentData;\n        this.renderedLetters = createSizedArray(documentData.l ? documentData.l.length : 0);\n        var innerElemStyle = this.innerElem.style;\n        var textColor = documentData.fc ? this.buildColor(documentData.fc) : \"rgba(0,0,0,0)\";\n        innerElemStyle.fill = textColor;\n        innerElemStyle.color = textColor;\n        if (documentData.sc) {\n            innerElemStyle.stroke = this.buildColor(documentData.sc);\n            innerElemStyle.strokeWidth = documentData.sw + \"px\";\n        }\n        var fontData = this.globalData.fontManager.getFontByName(documentData.f);\n        if (!this.globalData.fontManager.chars) {\n            innerElemStyle.fontSize = documentData.finalSize + \"px\";\n            innerElemStyle.lineHeight = documentData.finalSize + \"px\";\n            if (fontData.fClass) {\n                this.innerElem.className = fontData.fClass;\n            } else {\n                innerElemStyle.fontFamily = fontData.fFamily;\n                var fWeight = documentData.fWeight;\n                var fStyle = documentData.fStyle;\n                innerElemStyle.fontStyle = fStyle;\n                innerElemStyle.fontWeight = fWeight;\n            }\n        }\n        var i;\n        var len;\n        var letters = documentData.l;\n        len = letters.length;\n        var tSpan;\n        var tParent;\n        var tCont;\n        var matrixHelper = this.mHelper;\n        var shapes;\n        var shapeStr = \"\";\n        var cnt = 0;\n        for(i = 0; i < len; i += 1){\n            if (this.globalData.fontManager.chars) {\n                if (!this.textPaths[cnt]) {\n                    tSpan = createNS(\"path\");\n                    tSpan.setAttribute(\"stroke-linecap\", lineCapEnum[1]);\n                    tSpan.setAttribute(\"stroke-linejoin\", lineJoinEnum[2]);\n                    tSpan.setAttribute(\"stroke-miterlimit\", \"4\");\n                } else {\n                    tSpan = this.textPaths[cnt];\n                }\n                if (!this.isMasked) {\n                    if (this.textSpans[cnt]) {\n                        tParent = this.textSpans[cnt];\n                        tCont = tParent.children[0];\n                    } else {\n                        tParent = createTag(\"div\");\n                        tParent.style.lineHeight = 0;\n                        tCont = createNS(\"svg\");\n                        tCont.appendChild(tSpan);\n                        styleDiv(tParent);\n                    }\n                }\n            } else if (!this.isMasked) {\n                if (this.textSpans[cnt]) {\n                    tParent = this.textSpans[cnt];\n                    tSpan = this.textPaths[cnt];\n                } else {\n                    tParent = createTag(\"span\");\n                    styleDiv(tParent);\n                    tSpan = createTag(\"span\");\n                    styleDiv(tSpan);\n                    tParent.appendChild(tSpan);\n                }\n            } else {\n                tSpan = this.textPaths[cnt] ? this.textPaths[cnt] : createNS(\"text\");\n            } // tSpan.setAttribute('visibility', 'hidden');\n            if (this.globalData.fontManager.chars) {\n                var charData = this.globalData.fontManager.getCharData(documentData.finalText[i], fontData.fStyle, this.globalData.fontManager.getFontByName(documentData.f).fFamily);\n                var shapeData;\n                if (charData) {\n                    shapeData = charData.data;\n                } else {\n                    shapeData = null;\n                }\n                matrixHelper.reset();\n                if (shapeData && shapeData.shapes && shapeData.shapes.length) {\n                    shapes = shapeData.shapes[0].it;\n                    matrixHelper.scale(documentData.finalSize / 100, documentData.finalSize / 100);\n                    shapeStr = this.createPathShape(matrixHelper, shapes);\n                    tSpan.setAttribute(\"d\", shapeStr);\n                }\n                if (!this.isMasked) {\n                    this.innerElem.appendChild(tParent);\n                    if (shapeData && shapeData.shapes) {\n                        // document.body.appendChild is needed to get exact measure of shape\n                        document.body.appendChild(tCont);\n                        var boundingBox = tCont.getBBox();\n                        tCont.setAttribute(\"width\", boundingBox.width + 2);\n                        tCont.setAttribute(\"height\", boundingBox.height + 2);\n                        tCont.setAttribute(\"viewBox\", boundingBox.x - 1 + \" \" + (boundingBox.y - 1) + \" \" + (boundingBox.width + 2) + \" \" + (boundingBox.height + 2));\n                        var tContStyle = tCont.style;\n                        var tContTranslation = \"translate(\" + (boundingBox.x - 1) + \"px,\" + (boundingBox.y - 1) + \"px)\";\n                        tContStyle.transform = tContTranslation;\n                        tContStyle.webkitTransform = tContTranslation;\n                        letters[i].yOffset = boundingBox.y - 1;\n                    } else {\n                        tCont.setAttribute(\"width\", 1);\n                        tCont.setAttribute(\"height\", 1);\n                    }\n                    tParent.appendChild(tCont);\n                } else {\n                    this.innerElem.appendChild(tSpan);\n                }\n            } else {\n                tSpan.textContent = letters[i].val;\n                tSpan.setAttributeNS(\"http://www.w3.org/XML/1998/namespace\", \"xml:space\", \"preserve\");\n                if (!this.isMasked) {\n                    this.innerElem.appendChild(tParent); //\n                    var tStyle = tSpan.style;\n                    var tSpanTranslation = \"translate3d(0,\" + -documentData.finalSize / 1.2 + \"px,0)\";\n                    tStyle.transform = tSpanTranslation;\n                    tStyle.webkitTransform = tSpanTranslation;\n                } else {\n                    this.innerElem.appendChild(tSpan);\n                }\n            } //\n            if (!this.isMasked) {\n                this.textSpans[cnt] = tParent;\n            } else {\n                this.textSpans[cnt] = tSpan;\n            }\n            this.textSpans[cnt].style.display = \"block\";\n            this.textPaths[cnt] = tSpan;\n            cnt += 1;\n        }\n        while(cnt < this.textSpans.length){\n            this.textSpans[cnt].style.display = \"none\";\n            cnt += 1;\n        }\n    };\n    HTextElement.prototype.renderInnerContent = function() {\n        this.validateText();\n        var svgStyle;\n        if (this.data.singleShape) {\n            if (!this._isFirstFrame && !this.lettersChangedFlag) {\n                return;\n            }\n            if (this.isMasked && this.finalTransform._matMdf) {\n                // Todo Benchmark if using this is better than getBBox\n                this.svgElement.setAttribute(\"viewBox\", -this.finalTransform.mProp.p.v[0] + \" \" + -this.finalTransform.mProp.p.v[1] + \" \" + this.compW + \" \" + this.compH);\n                svgStyle = this.svgElement.style;\n                var translation = \"translate(\" + -this.finalTransform.mProp.p.v[0] + \"px,\" + -this.finalTransform.mProp.p.v[1] + \"px)\";\n                svgStyle.transform = translation;\n                svgStyle.webkitTransform = translation;\n            }\n        }\n        this.textAnimator.getMeasures(this.textProperty.currentData, this.lettersChangedFlag);\n        if (!this.lettersChangedFlag && !this.textAnimator.lettersChangedFlag) {\n            return;\n        }\n        var i;\n        var len;\n        var count = 0;\n        var renderedLetters = this.textAnimator.renderedLetters;\n        var letters = this.textProperty.currentData.l;\n        len = letters.length;\n        var renderedLetter;\n        var textSpan;\n        var textPath;\n        for(i = 0; i < len; i += 1){\n            if (letters[i].n) {\n                count += 1;\n            } else {\n                textSpan = this.textSpans[i];\n                textPath = this.textPaths[i];\n                renderedLetter = renderedLetters[count];\n                count += 1;\n                if (renderedLetter._mdf.m) {\n                    if (!this.isMasked) {\n                        textSpan.style.webkitTransform = renderedLetter.m;\n                        textSpan.style.transform = renderedLetter.m;\n                    } else {\n                        textSpan.setAttribute(\"transform\", renderedLetter.m);\n                    }\n                } /// /textSpan.setAttribute('opacity',renderedLetter.o);\n                textSpan.style.opacity = renderedLetter.o;\n                if (renderedLetter.sw && renderedLetter._mdf.sw) {\n                    textPath.setAttribute(\"stroke-width\", renderedLetter.sw);\n                }\n                if (renderedLetter.sc && renderedLetter._mdf.sc) {\n                    textPath.setAttribute(\"stroke\", renderedLetter.sc);\n                }\n                if (renderedLetter.fc && renderedLetter._mdf.fc) {\n                    textPath.setAttribute(\"fill\", renderedLetter.fc);\n                    textPath.style.color = renderedLetter.fc;\n                }\n            }\n        }\n        if (this.innerElem.getBBox && !this.hidden && (this._isFirstFrame || this._mdf)) {\n            var boundingBox = this.innerElem.getBBox();\n            if (this.currentBBox.w !== boundingBox.width) {\n                this.currentBBox.w = boundingBox.width;\n                this.svgElement.setAttribute(\"width\", boundingBox.width);\n            }\n            if (this.currentBBox.h !== boundingBox.height) {\n                this.currentBBox.h = boundingBox.height;\n                this.svgElement.setAttribute(\"height\", boundingBox.height);\n            }\n            var margin = 1;\n            if (this.currentBBox.w !== boundingBox.width + margin * 2 || this.currentBBox.h !== boundingBox.height + margin * 2 || this.currentBBox.x !== boundingBox.x - margin || this.currentBBox.y !== boundingBox.y - margin) {\n                this.currentBBox.w = boundingBox.width + margin * 2;\n                this.currentBBox.h = boundingBox.height + margin * 2;\n                this.currentBBox.x = boundingBox.x - margin;\n                this.currentBBox.y = boundingBox.y - margin;\n                this.svgElement.setAttribute(\"viewBox\", this.currentBBox.x + \" \" + this.currentBBox.y + \" \" + this.currentBBox.w + \" \" + this.currentBBox.h);\n                svgStyle = this.svgElement.style;\n                var svgTransform = \"translate(\" + this.currentBBox.x + \"px,\" + this.currentBBox.y + \"px)\";\n                svgStyle.transform = svgTransform;\n                svgStyle.webkitTransform = svgTransform;\n            }\n        }\n    };\n    function HCameraElement(data, globalData, comp) {\n        this.initFrame();\n        this.initBaseData(data, globalData, comp);\n        this.initHierarchy();\n        var getProp = PropertyFactory.getProp;\n        this.pe = getProp(this, data.pe, 0, 0, this);\n        if (data.ks.p.s) {\n            this.px = getProp(this, data.ks.p.x, 1, 0, this);\n            this.py = getProp(this, data.ks.p.y, 1, 0, this);\n            this.pz = getProp(this, data.ks.p.z, 1, 0, this);\n        } else {\n            this.p = getProp(this, data.ks.p, 1, 0, this);\n        }\n        if (data.ks.a) {\n            this.a = getProp(this, data.ks.a, 1, 0, this);\n        }\n        if (data.ks.or.k.length && data.ks.or.k[0].to) {\n            var i;\n            var len = data.ks.or.k.length;\n            for(i = 0; i < len; i += 1){\n                data.ks.or.k[i].to = null;\n                data.ks.or.k[i].ti = null;\n            }\n        }\n        this.or = getProp(this, data.ks.or, 1, degToRads, this);\n        this.or.sh = true;\n        this.rx = getProp(this, data.ks.rx, 0, degToRads, this);\n        this.ry = getProp(this, data.ks.ry, 0, degToRads, this);\n        this.rz = getProp(this, data.ks.rz, 0, degToRads, this);\n        this.mat = new Matrix();\n        this._prevMat = new Matrix();\n        this._isFirstFrame = true; // TODO: find a better way to make the HCamera element to be compatible with the LayerInterface and TransformInterface.\n        this.finalTransform = {\n            mProp: this\n        };\n    }\n    extendPrototype([\n        BaseElement,\n        FrameElement,\n        HierarchyElement\n    ], HCameraElement);\n    HCameraElement.prototype.setup = function() {\n        var i;\n        var len = this.comp.threeDElements.length;\n        var comp;\n        var perspectiveStyle;\n        var containerStyle;\n        for(i = 0; i < len; i += 1){\n            // [perspectiveElem,container]\n            comp = this.comp.threeDElements[i];\n            if (comp.type === \"3d\") {\n                perspectiveStyle = comp.perspectiveElem.style;\n                containerStyle = comp.container.style;\n                var perspective = this.pe.v + \"px\";\n                var origin = \"0px 0px 0px\";\n                var matrix = \"matrix3d(1,0,0,0,0,1,0,0,0,0,1,0,0,0,0,1)\";\n                perspectiveStyle.perspective = perspective;\n                perspectiveStyle.webkitPerspective = perspective;\n                containerStyle.transformOrigin = origin;\n                containerStyle.mozTransformOrigin = origin;\n                containerStyle.webkitTransformOrigin = origin;\n                perspectiveStyle.transform = matrix;\n                perspectiveStyle.webkitTransform = matrix;\n            }\n        }\n    };\n    HCameraElement.prototype.createElements = function() {};\n    HCameraElement.prototype.hide = function() {};\n    HCameraElement.prototype.renderFrame = function() {\n        var _mdf = this._isFirstFrame;\n        var i;\n        var len;\n        if (this.hierarchy) {\n            len = this.hierarchy.length;\n            for(i = 0; i < len; i += 1){\n                _mdf = this.hierarchy[i].finalTransform.mProp._mdf || _mdf;\n            }\n        }\n        if (_mdf || this.pe._mdf || this.p && this.p._mdf || this.px && (this.px._mdf || this.py._mdf || this.pz._mdf) || this.rx._mdf || this.ry._mdf || this.rz._mdf || this.or._mdf || this.a && this.a._mdf) {\n            this.mat.reset();\n            if (this.hierarchy) {\n                len = this.hierarchy.length - 1;\n                for(i = len; i >= 0; i -= 1){\n                    var mTransf = this.hierarchy[i].finalTransform.mProp;\n                    this.mat.translate(-mTransf.p.v[0], -mTransf.p.v[1], mTransf.p.v[2]);\n                    this.mat.rotateX(-mTransf.or.v[0]).rotateY(-mTransf.or.v[1]).rotateZ(mTransf.or.v[2]);\n                    this.mat.rotateX(-mTransf.rx.v).rotateY(-mTransf.ry.v).rotateZ(mTransf.rz.v);\n                    this.mat.scale(1 / mTransf.s.v[0], 1 / mTransf.s.v[1], 1 / mTransf.s.v[2]);\n                    this.mat.translate(mTransf.a.v[0], mTransf.a.v[1], mTransf.a.v[2]);\n                }\n            }\n            if (this.p) {\n                this.mat.translate(-this.p.v[0], -this.p.v[1], this.p.v[2]);\n            } else {\n                this.mat.translate(-this.px.v, -this.py.v, this.pz.v);\n            }\n            if (this.a) {\n                var diffVector;\n                if (this.p) {\n                    diffVector = [\n                        this.p.v[0] - this.a.v[0],\n                        this.p.v[1] - this.a.v[1],\n                        this.p.v[2] - this.a.v[2]\n                    ];\n                } else {\n                    diffVector = [\n                        this.px.v - this.a.v[0],\n                        this.py.v - this.a.v[1],\n                        this.pz.v - this.a.v[2]\n                    ];\n                }\n                var mag = Math.sqrt(Math.pow(diffVector[0], 2) + Math.pow(diffVector[1], 2) + Math.pow(diffVector[2], 2)); // var lookDir = getNormalizedPoint(getDiffVector(this.a.v,this.p.v));\n                var lookDir = [\n                    diffVector[0] / mag,\n                    diffVector[1] / mag,\n                    diffVector[2] / mag\n                ];\n                var lookLengthOnXZ = Math.sqrt(lookDir[2] * lookDir[2] + lookDir[0] * lookDir[0]);\n                var mRotationX = Math.atan2(lookDir[1], lookLengthOnXZ);\n                var mRotationY = Math.atan2(lookDir[0], -lookDir[2]);\n                this.mat.rotateY(mRotationY).rotateX(-mRotationX);\n            }\n            this.mat.rotateX(-this.rx.v).rotateY(-this.ry.v).rotateZ(this.rz.v);\n            this.mat.rotateX(-this.or.v[0]).rotateY(-this.or.v[1]).rotateZ(this.or.v[2]);\n            this.mat.translate(this.globalData.compSize.w / 2, this.globalData.compSize.h / 2, 0);\n            this.mat.translate(0, 0, this.pe.v);\n            var hasMatrixChanged = !this._prevMat.equals(this.mat);\n            if ((hasMatrixChanged || this.pe._mdf) && this.comp.threeDElements) {\n                len = this.comp.threeDElements.length;\n                var comp;\n                var perspectiveStyle;\n                var containerStyle;\n                for(i = 0; i < len; i += 1){\n                    comp = this.comp.threeDElements[i];\n                    if (comp.type === \"3d\") {\n                        if (hasMatrixChanged) {\n                            var matValue = this.mat.toCSS();\n                            containerStyle = comp.container.style;\n                            containerStyle.transform = matValue;\n                            containerStyle.webkitTransform = matValue;\n                        }\n                        if (this.pe._mdf) {\n                            perspectiveStyle = comp.perspectiveElem.style;\n                            perspectiveStyle.perspective = this.pe.v + \"px\";\n                            perspectiveStyle.webkitPerspective = this.pe.v + \"px\";\n                        }\n                    }\n                }\n                this.mat.clone(this._prevMat);\n            }\n        }\n        this._isFirstFrame = false;\n    };\n    HCameraElement.prototype.prepareFrame = function(num) {\n        this.prepareProperties(num, true);\n    };\n    HCameraElement.prototype.destroy = function() {};\n    HCameraElement.prototype.getBaseElement = function() {\n        return null;\n    };\n    function HImageElement(data, globalData, comp) {\n        this.assetData = globalData.getAssetData(data.refId);\n        this.initElement(data, globalData, comp);\n    }\n    extendPrototype([\n        BaseElement,\n        TransformElement,\n        HBaseElement,\n        HSolidElement,\n        HierarchyElement,\n        FrameElement,\n        RenderableElement\n    ], HImageElement);\n    HImageElement.prototype.createContent = function() {\n        var assetPath = this.globalData.getAssetsPath(this.assetData);\n        var img = new Image();\n        if (this.data.hasMask) {\n            this.imageElem = createNS(\"image\");\n            this.imageElem.setAttribute(\"width\", this.assetData.w + \"px\");\n            this.imageElem.setAttribute(\"height\", this.assetData.h + \"px\");\n            this.imageElem.setAttributeNS(\"http://www.w3.org/1999/xlink\", \"href\", assetPath);\n            this.layerElement.appendChild(this.imageElem);\n            this.baseElement.setAttribute(\"width\", this.assetData.w);\n            this.baseElement.setAttribute(\"height\", this.assetData.h);\n        } else {\n            this.layerElement.appendChild(img);\n        }\n        img.crossOrigin = \"anonymous\";\n        img.src = assetPath;\n        if (this.data.ln) {\n            this.baseElement.setAttribute(\"id\", this.data.ln);\n        }\n    };\n    function HybridRendererBase(animationItem, config) {\n        this.animationItem = animationItem;\n        this.layers = null;\n        this.renderedFrame = -1;\n        this.renderConfig = {\n            className: config && config.className || \"\",\n            imagePreserveAspectRatio: config && config.imagePreserveAspectRatio || \"xMidYMid slice\",\n            hideOnTransparent: !(config && config.hideOnTransparent === false),\n            filterSize: {\n                width: config && config.filterSize && config.filterSize.width || \"400%\",\n                height: config && config.filterSize && config.filterSize.height || \"400%\",\n                x: config && config.filterSize && config.filterSize.x || \"-100%\",\n                y: config && config.filterSize && config.filterSize.y || \"-100%\"\n            }\n        };\n        this.globalData = {\n            _mdf: false,\n            frameNum: -1,\n            renderConfig: this.renderConfig\n        };\n        this.pendingElements = [];\n        this.elements = [];\n        this.threeDElements = [];\n        this.destroyed = false;\n        this.camera = null;\n        this.supports3d = true;\n        this.rendererType = \"html\";\n    }\n    extendPrototype([\n        BaseRenderer\n    ], HybridRendererBase);\n    HybridRendererBase.prototype.buildItem = SVGRenderer.prototype.buildItem;\n    HybridRendererBase.prototype.checkPendingElements = function() {\n        while(this.pendingElements.length){\n            var element = this.pendingElements.pop();\n            element.checkParenting();\n        }\n    };\n    HybridRendererBase.prototype.appendElementInPos = function(element, pos) {\n        var newDOMElement = element.getBaseElement();\n        if (!newDOMElement) {\n            return;\n        }\n        var layer = this.layers[pos];\n        if (!layer.ddd || !this.supports3d) {\n            if (this.threeDElements) {\n                this.addTo3dContainer(newDOMElement, pos);\n            } else {\n                var i = 0;\n                var nextDOMElement;\n                var nextLayer;\n                var tmpDOMElement;\n                while(i < pos){\n                    if (this.elements[i] && this.elements[i] !== true && this.elements[i].getBaseElement) {\n                        nextLayer = this.elements[i];\n                        tmpDOMElement = this.layers[i].ddd ? this.getThreeDContainerByPos(i) : nextLayer.getBaseElement();\n                        nextDOMElement = tmpDOMElement || nextDOMElement;\n                    }\n                    i += 1;\n                }\n                if (nextDOMElement) {\n                    if (!layer.ddd || !this.supports3d) {\n                        this.layerElement.insertBefore(newDOMElement, nextDOMElement);\n                    }\n                } else if (!layer.ddd || !this.supports3d) {\n                    this.layerElement.appendChild(newDOMElement);\n                }\n            }\n        } else {\n            this.addTo3dContainer(newDOMElement, pos);\n        }\n    };\n    HybridRendererBase.prototype.createShape = function(data) {\n        if (!this.supports3d) {\n            return new SVGShapeElement(data, this.globalData, this);\n        }\n        return new HShapeElement(data, this.globalData, this);\n    };\n    HybridRendererBase.prototype.createText = function(data) {\n        if (!this.supports3d) {\n            return new SVGTextLottieElement(data, this.globalData, this);\n        }\n        return new HTextElement(data, this.globalData, this);\n    };\n    HybridRendererBase.prototype.createCamera = function(data) {\n        this.camera = new HCameraElement(data, this.globalData, this);\n        return this.camera;\n    };\n    HybridRendererBase.prototype.createImage = function(data) {\n        if (!this.supports3d) {\n            return new IImageElement(data, this.globalData, this);\n        }\n        return new HImageElement(data, this.globalData, this);\n    };\n    HybridRendererBase.prototype.createSolid = function(data) {\n        if (!this.supports3d) {\n            return new ISolidElement(data, this.globalData, this);\n        }\n        return new HSolidElement(data, this.globalData, this);\n    };\n    HybridRendererBase.prototype.createNull = SVGRenderer.prototype.createNull;\n    HybridRendererBase.prototype.getThreeDContainerByPos = function(pos) {\n        var i = 0;\n        var len = this.threeDElements.length;\n        while(i < len){\n            if (this.threeDElements[i].startPos <= pos && this.threeDElements[i].endPos >= pos) {\n                return this.threeDElements[i].perspectiveElem;\n            }\n            i += 1;\n        }\n        return null;\n    };\n    HybridRendererBase.prototype.createThreeDContainer = function(pos, type) {\n        var perspectiveElem = createTag(\"div\");\n        var style;\n        var containerStyle;\n        styleDiv(perspectiveElem);\n        var container = createTag(\"div\");\n        styleDiv(container);\n        if (type === \"3d\") {\n            style = perspectiveElem.style;\n            style.width = this.globalData.compSize.w + \"px\";\n            style.height = this.globalData.compSize.h + \"px\";\n            var center = \"50% 50%\";\n            style.webkitTransformOrigin = center;\n            style.mozTransformOrigin = center;\n            style.transformOrigin = center;\n            containerStyle = container.style;\n            var matrix = \"matrix3d(1,0,0,0,0,1,0,0,0,0,1,0,0,0,0,1)\";\n            containerStyle.transform = matrix;\n            containerStyle.webkitTransform = matrix;\n        }\n        perspectiveElem.appendChild(container); // this.resizerElem.appendChild(perspectiveElem);\n        var threeDContainerData = {\n            container: container,\n            perspectiveElem: perspectiveElem,\n            startPos: pos,\n            endPos: pos,\n            type: type\n        };\n        this.threeDElements.push(threeDContainerData);\n        return threeDContainerData;\n    };\n    HybridRendererBase.prototype.build3dContainers = function() {\n        var i;\n        var len = this.layers.length;\n        var lastThreeDContainerData;\n        var currentContainer = \"\";\n        for(i = 0; i < len; i += 1){\n            if (this.layers[i].ddd && this.layers[i].ty !== 3) {\n                if (currentContainer !== \"3d\") {\n                    currentContainer = \"3d\";\n                    lastThreeDContainerData = this.createThreeDContainer(i, \"3d\");\n                }\n                lastThreeDContainerData.endPos = Math.max(lastThreeDContainerData.endPos, i);\n            } else {\n                if (currentContainer !== \"2d\") {\n                    currentContainer = \"2d\";\n                    lastThreeDContainerData = this.createThreeDContainer(i, \"2d\");\n                }\n                lastThreeDContainerData.endPos = Math.max(lastThreeDContainerData.endPos, i);\n            }\n        }\n        len = this.threeDElements.length;\n        for(i = len - 1; i >= 0; i -= 1){\n            this.resizerElem.appendChild(this.threeDElements[i].perspectiveElem);\n        }\n    };\n    HybridRendererBase.prototype.addTo3dContainer = function(elem, pos) {\n        var i = 0;\n        var len = this.threeDElements.length;\n        while(i < len){\n            if (pos <= this.threeDElements[i].endPos) {\n                var j = this.threeDElements[i].startPos;\n                var nextElement;\n                while(j < pos){\n                    if (this.elements[j] && this.elements[j].getBaseElement) {\n                        nextElement = this.elements[j].getBaseElement();\n                    }\n                    j += 1;\n                }\n                if (nextElement) {\n                    this.threeDElements[i].container.insertBefore(elem, nextElement);\n                } else {\n                    this.threeDElements[i].container.appendChild(elem);\n                }\n                break;\n            }\n            i += 1;\n        }\n    };\n    HybridRendererBase.prototype.configAnimation = function(animData) {\n        var resizerElem = createTag(\"div\");\n        var wrapper = this.animationItem.wrapper;\n        var style = resizerElem.style;\n        style.width = animData.w + \"px\";\n        style.height = animData.h + \"px\";\n        this.resizerElem = resizerElem;\n        styleDiv(resizerElem);\n        style.transformStyle = \"flat\";\n        style.mozTransformStyle = \"flat\";\n        style.webkitTransformStyle = \"flat\";\n        if (this.renderConfig.className) {\n            resizerElem.setAttribute(\"class\", this.renderConfig.className);\n        }\n        wrapper.appendChild(resizerElem);\n        style.overflow = \"hidden\";\n        var svg = createNS(\"svg\");\n        svg.setAttribute(\"width\", \"1\");\n        svg.setAttribute(\"height\", \"1\");\n        styleDiv(svg);\n        this.resizerElem.appendChild(svg);\n        var defs = createNS(\"defs\");\n        svg.appendChild(defs);\n        this.data = animData; // Mask animation\n        this.setupGlobalData(animData, svg);\n        this.globalData.defs = defs;\n        this.layers = animData.layers;\n        this.layerElement = this.resizerElem;\n        this.build3dContainers();\n        this.updateContainerSize();\n    };\n    HybridRendererBase.prototype.destroy = function() {\n        if (this.animationItem.wrapper) {\n            this.animationItem.wrapper.innerText = \"\";\n        }\n        this.animationItem.container = null;\n        this.globalData.defs = null;\n        var i;\n        var len = this.layers ? this.layers.length : 0;\n        for(i = 0; i < len; i += 1){\n            if (this.elements[i] && this.elements[i].destroy) {\n                this.elements[i].destroy();\n            }\n        }\n        this.elements.length = 0;\n        this.destroyed = true;\n        this.animationItem = null;\n    };\n    HybridRendererBase.prototype.updateContainerSize = function() {\n        var elementWidth = this.animationItem.wrapper.offsetWidth;\n        var elementHeight = this.animationItem.wrapper.offsetHeight;\n        var elementRel = elementWidth / elementHeight;\n        var animationRel = this.globalData.compSize.w / this.globalData.compSize.h;\n        var sx;\n        var sy;\n        var tx;\n        var ty;\n        if (animationRel > elementRel) {\n            sx = elementWidth / this.globalData.compSize.w;\n            sy = elementWidth / this.globalData.compSize.w;\n            tx = 0;\n            ty = (elementHeight - this.globalData.compSize.h * (elementWidth / this.globalData.compSize.w)) / 2;\n        } else {\n            sx = elementHeight / this.globalData.compSize.h;\n            sy = elementHeight / this.globalData.compSize.h;\n            tx = (elementWidth - this.globalData.compSize.w * (elementHeight / this.globalData.compSize.h)) / 2;\n            ty = 0;\n        }\n        var style = this.resizerElem.style;\n        style.webkitTransform = \"matrix3d(\" + sx + \",0,0,0,0,\" + sy + \",0,0,0,0,1,0,\" + tx + \",\" + ty + \",0,1)\";\n        style.transform = style.webkitTransform;\n    };\n    HybridRendererBase.prototype.renderFrame = SVGRenderer.prototype.renderFrame;\n    HybridRendererBase.prototype.hide = function() {\n        this.resizerElem.style.display = \"none\";\n    };\n    HybridRendererBase.prototype.show = function() {\n        this.resizerElem.style.display = \"block\";\n    };\n    HybridRendererBase.prototype.initItems = function() {\n        this.buildAllItems();\n        if (this.camera) {\n            this.camera.setup();\n        } else {\n            var cWidth = this.globalData.compSize.w;\n            var cHeight = this.globalData.compSize.h;\n            var i;\n            var len = this.threeDElements.length;\n            for(i = 0; i < len; i += 1){\n                var style = this.threeDElements[i].perspectiveElem.style;\n                style.webkitPerspective = Math.sqrt(Math.pow(cWidth, 2) + Math.pow(cHeight, 2)) + \"px\";\n                style.perspective = style.webkitPerspective;\n            }\n        }\n    };\n    HybridRendererBase.prototype.searchExtraCompositions = function(assets) {\n        var i;\n        var len = assets.length;\n        var floatingContainer = createTag(\"div\");\n        for(i = 0; i < len; i += 1){\n            if (assets[i].xt) {\n                var comp = this.createComp(assets[i], floatingContainer, this.globalData.comp, null);\n                comp.initExpressions();\n                this.globalData.projectInterface.registerComposition(comp);\n            }\n        }\n    };\n    function HCompElement(data, globalData, comp) {\n        this.layers = data.layers;\n        this.supports3d = !data.hasMask;\n        this.completeLayers = false;\n        this.pendingElements = [];\n        this.elements = this.layers ? createSizedArray(this.layers.length) : [];\n        this.initElement(data, globalData, comp);\n        this.tm = data.tm ? PropertyFactory.getProp(this, data.tm, 0, globalData.frameRate, this) : {\n            _placeholder: true\n        };\n    }\n    extendPrototype([\n        HybridRendererBase,\n        ICompElement,\n        HBaseElement\n    ], HCompElement);\n    HCompElement.prototype._createBaseContainerElements = HCompElement.prototype.createContainerElements;\n    HCompElement.prototype.createContainerElements = function() {\n        this._createBaseContainerElements(); // divElement.style.clip = 'rect(0px, '+this.data.w+'px, '+this.data.h+'px, 0px)';\n        if (this.data.hasMask) {\n            this.svgElement.setAttribute(\"width\", this.data.w);\n            this.svgElement.setAttribute(\"height\", this.data.h);\n            this.transformedElement = this.baseElement;\n        } else {\n            this.transformedElement = this.layerElement;\n        }\n    };\n    HCompElement.prototype.addTo3dContainer = function(elem, pos) {\n        var j = 0;\n        var nextElement;\n        while(j < pos){\n            if (this.elements[j] && this.elements[j].getBaseElement) {\n                nextElement = this.elements[j].getBaseElement();\n            }\n            j += 1;\n        }\n        if (nextElement) {\n            this.layerElement.insertBefore(elem, nextElement);\n        } else {\n            this.layerElement.appendChild(elem);\n        }\n    };\n    HCompElement.prototype.createComp = function(data) {\n        if (!this.supports3d) {\n            return new SVGCompElement(data, this.globalData, this);\n        }\n        return new HCompElement(data, this.globalData, this);\n    };\n    function HybridRenderer(animationItem, config) {\n        this.animationItem = animationItem;\n        this.layers = null;\n        this.renderedFrame = -1;\n        this.renderConfig = {\n            className: config && config.className || \"\",\n            imagePreserveAspectRatio: config && config.imagePreserveAspectRatio || \"xMidYMid slice\",\n            hideOnTransparent: !(config && config.hideOnTransparent === false),\n            filterSize: {\n                width: config && config.filterSize && config.filterSize.width || \"400%\",\n                height: config && config.filterSize && config.filterSize.height || \"400%\",\n                x: config && config.filterSize && config.filterSize.x || \"-100%\",\n                y: config && config.filterSize && config.filterSize.y || \"-100%\"\n            },\n            runExpressions: !config || config.runExpressions === undefined || config.runExpressions\n        };\n        this.globalData = {\n            _mdf: false,\n            frameNum: -1,\n            renderConfig: this.renderConfig\n        };\n        this.pendingElements = [];\n        this.elements = [];\n        this.threeDElements = [];\n        this.destroyed = false;\n        this.camera = null;\n        this.supports3d = true;\n        this.rendererType = \"html\";\n    }\n    extendPrototype([\n        HybridRendererBase\n    ], HybridRenderer);\n    HybridRenderer.prototype.createComp = function(data) {\n        if (!this.supports3d) {\n            return new SVGCompElement(data, this.globalData, this);\n        }\n        return new HCompElement(data, this.globalData, this);\n    };\n    var CompExpressionInterface = function() {\n        return function(comp) {\n            function _thisLayerFunction(name) {\n                var i = 0;\n                var len = comp.layers.length;\n                while(i < len){\n                    if (comp.layers[i].nm === name || comp.layers[i].ind === name) {\n                        return comp.elements[i].layerInterface;\n                    }\n                    i += 1;\n                }\n                return null; // return {active:false};\n            }\n            Object.defineProperty(_thisLayerFunction, \"_name\", {\n                value: comp.data.nm\n            });\n            _thisLayerFunction.layer = _thisLayerFunction;\n            _thisLayerFunction.pixelAspect = 1;\n            _thisLayerFunction.height = comp.data.h || comp.globalData.compSize.h;\n            _thisLayerFunction.width = comp.data.w || comp.globalData.compSize.w;\n            _thisLayerFunction.pixelAspect = 1;\n            _thisLayerFunction.frameDuration = 1 / comp.globalData.frameRate;\n            _thisLayerFunction.displayStartTime = 0;\n            _thisLayerFunction.numLayers = comp.layers.length;\n            return _thisLayerFunction;\n        };\n    }();\n    function _typeof$2(obj) {\n        \"@babel/helpers - typeof\";\n        if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") {\n            _typeof$2 = function _typeof(obj) {\n                return typeof obj;\n            };\n        } else {\n            _typeof$2 = function _typeof(obj) {\n                return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj;\n            };\n        }\n        return _typeof$2(obj);\n    }\n    /* eslint-disable */ /*\r\n   Copyright 2014 David Bau.\r\n\r\n   Permission is hereby granted, free of charge, to any person obtaining\r\n   a copy of this software and associated documentation files (the\r\n   \"Software\"), to deal in the Software without restriction, including\r\n   without limitation the rights to use, copy, modify, merge, publish,\r\n   distribute, sublicense, and/or sell copies of the Software, and to\r\n   permit persons to whom the Software is furnished to do so, subject to\r\n   the following conditions:\r\n\r\n   The above copyright notice and this permission notice shall be\r\n   included in all copies or substantial portions of the Software.\r\n\r\n   THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND,\r\n   EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\r\n   MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.\r\n   IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY\r\n   CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,\r\n   TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE\r\n   SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\r\n\r\n   */ function seedRandom(pool, math) {\n        //\n        // The following constants are related to IEEE 754 limits.\n        //\n        var global = this, width = 256, // each RC4 output is 0 <= x < 256\n        chunks = 6, // at least six RC4 outputs for each double\n        digits = 52, // there are 52 significant digits in a double\n        rngname = \"random\", // rngname: name for Math.random and Math.seedrandom\n        startdenom = math.pow(width, chunks), significance = math.pow(2, digits), overflow = significance * 2, mask = width - 1, nodecrypto; // node.js crypto module, initialized at the bottom.\n        //\n        // seedrandom()\n        // This is the seedrandom function described above.\n        //\n        function seedrandom(seed, options, callback) {\n            var key = [];\n            options = options === true ? {\n                entropy: true\n            } : options || {}; // Flatten the seed string or build one from local entropy if needed.\n            var shortseed = mixkey(flatten(options.entropy ? [\n                seed,\n                tostring(pool)\n            ] : seed === null ? autoseed() : seed, 3), key); // Use the seed to initialize an ARC4 generator.\n            var arc4 = new ARC4(key); // This function returns a random double in [0, 1) that contains\n            // randomness in every bit of the mantissa of the IEEE 754 value.\n            var prng = function prng() {\n                var n = arc4.g(chunks), // Start with a numerator n < 2 ^ 48\n                d = startdenom, //   and denominator d = 2 ^ 48.\n                x = 0; //   and no 'extra last byte'.\n                while(n < significance){\n                    // Fill up all significant digits by\n                    n = (n + x) * width; //   shifting numerator and\n                    d *= width; //   denominator and generating a\n                    x = arc4.g(1); //   new least-significant-byte.\n                }\n                while(n >= overflow){\n                    // To avoid rounding up, before adding\n                    n /= 2; //   last byte, shift everything\n                    d /= 2; //   right using integer math until\n                    x >>>= 1; //   we have exactly the desired bits.\n                }\n                return (n + x) / d; // Form the number within [0, 1).\n            };\n            prng.int32 = function() {\n                return arc4.g(4) | 0;\n            };\n            prng.quick = function() {\n                return arc4.g(4) / 0x100000000;\n            };\n            prng[\"double\"] = prng; // Mix the randomness into accumulated entropy.\n            mixkey(tostring(arc4.S), pool); // Calling convention: what to return as a function of prng, seed, is_math.\n            return (options.pass || callback || function(prng, seed, is_math_call, state) {\n                if (state) {\n                    // Load the arc4 state from the given state if it has an S array.\n                    if (state.S) {\n                        copy(state, arc4);\n                    } // Only provide the .state method if requested via options.state.\n                    prng.state = function() {\n                        return copy(arc4, {});\n                    };\n                } // If called as a method of Math (Math.seedrandom()), mutate\n                // Math.random because that is how seedrandom.js has worked since v1.0.\n                if (is_math_call) {\n                    math[rngname] = prng;\n                    return seed;\n                } else return prng;\n            })(prng, shortseed, \"global\" in options ? options.global : this == math, options.state);\n        }\n        math[\"seed\" + rngname] = seedrandom; //\n        // ARC4\n        //\n        // An ARC4 implementation.  The constructor takes a key in the form of\n        // an array of at most (width) integers that should be 0 <= x < (width).\n        //\n        // The g(count) method returns a pseudorandom integer that concatenates\n        // the next (count) outputs from ARC4.  Its return value is a number x\n        // that is in the range 0 <= x < (width ^ count).\n        //\n        function ARC4(key) {\n            var t, keylen = key.length, me = this, i = 0, j = me.i = me.j = 0, s = me.S = []; // The empty key [] is treated as [0].\n            if (!keylen) {\n                key = [\n                    keylen++\n                ];\n            } // Set up S using the standard key scheduling algorithm.\n            while(i < width){\n                s[i] = i++;\n            }\n            for(i = 0; i < width; i++){\n                s[i] = s[j = mask & j + key[i % keylen] + (t = s[i])];\n                s[j] = t;\n            } // The \"g\" method returns the next (count) outputs as one number.\n            me.g = function(count) {\n                // Using instance members instead of closure state nearly doubles speed.\n                var t, r = 0, i = me.i, j = me.j, s = me.S;\n                while(count--){\n                    t = s[i = mask & i + 1];\n                    r = r * width + s[mask & (s[i] = s[j = mask & j + t]) + (s[j] = t)];\n                }\n                me.i = i;\n                me.j = j;\n                return r; // For robust unpredictability, the function call below automatically\n            // discards an initial batch of values.  This is called RC4-drop[256].\n            // See http://google.com/search?q=rsa+fluhrer+response&btnI\n            };\n        } //\n        // copy()\n        // Copies internal state of ARC4 to or from a plain object.\n        //\n        function copy(f, t) {\n            t.i = f.i;\n            t.j = f.j;\n            t.S = f.S.slice();\n            return t;\n        } //\n        // flatten()\n        // Converts an object tree to nested arrays of strings.\n        //\n        function flatten(obj, depth) {\n            var result = [], typ = _typeof$2(obj), prop;\n            if (depth && typ == \"object\") {\n                for(prop in obj){\n                    try {\n                        result.push(flatten(obj[prop], depth - 1));\n                    } catch (e) {}\n                }\n            }\n            return result.length ? result : typ == \"string\" ? obj : obj + \"\\x00\";\n        } //\n        // mixkey()\n        // Mixes a string seed into a key that is an array of integers, and\n        // returns a shortened string seed that is equivalent to the result key.\n        //\n        function mixkey(seed, key) {\n            var stringseed = seed + \"\", smear, j = 0;\n            while(j < stringseed.length){\n                key[mask & j] = mask & (smear ^= key[mask & j] * 19) + stringseed.charCodeAt(j++);\n            }\n            return tostring(key);\n        } //\n        // autoseed()\n        // Returns an object for autoseeding, using window.crypto and Node crypto\n        // module if available.\n        //\n        function autoseed() {\n            try {\n                if (nodecrypto) {\n                    return tostring(nodecrypto.randomBytes(width));\n                }\n                var out = new Uint8Array(width);\n                (global.crypto || global.msCrypto).getRandomValues(out);\n                return tostring(out);\n            } catch (e) {\n                var browser = global.navigator, plugins = browser && browser.plugins;\n                return [\n                    +new Date(),\n                    global,\n                    plugins,\n                    global.screen,\n                    tostring(pool)\n                ];\n            }\n        } //\n        // tostring()\n        // Converts an array of charcodes to a string\n        //\n        function tostring(a) {\n            return String.fromCharCode.apply(0, a);\n        } //\n        // When seedrandom.js is loaded, we immediately mix a few bits\n        // from the built-in RNG into the entropy pool.  Because we do\n        // not want to interfere with deterministic PRNG state later,\n        // seedrandom will not call math.random on its own again after\n        // initialization.\n        //\n        mixkey(math.random(), pool); //\n    // Nodejs and AMD support: export the implementation as a module using\n    // either convention.\n    //\n    // End anonymous scope, and pass initial values.\n    }\n    ;\n    function initialize$2(BMMath) {\n        seedRandom([], BMMath);\n    }\n    var propTypes = {\n        SHAPE: \"shape\"\n    };\n    function _typeof$1(obj) {\n        \"@babel/helpers - typeof\";\n        if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") {\n            _typeof$1 = function _typeof(obj) {\n                return typeof obj;\n            };\n        } else {\n            _typeof$1 = function _typeof(obj) {\n                return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj;\n            };\n        }\n        return _typeof$1(obj);\n    }\n    var ExpressionManager = function() {\n        \"use strict\";\n        var ob = {};\n        var Math = BMMath;\n        var window = null;\n        var document = null;\n        var XMLHttpRequest = null;\n        var fetch = null;\n        var frames = null;\n        var _lottieGlobal = {};\n        initialize$2(BMMath);\n        function resetFrame() {\n            _lottieGlobal = {};\n        }\n        function $bm_isInstanceOfArray(arr) {\n            return arr.constructor === Array || arr.constructor === Float32Array;\n        }\n        function isNumerable(tOfV, v) {\n            return tOfV === \"number\" || v instanceof Number || tOfV === \"boolean\" || tOfV === \"string\";\n        }\n        function $bm_neg(a) {\n            var tOfA = _typeof$1(a);\n            if (tOfA === \"number\" || a instanceof Number || tOfA === \"boolean\") {\n                return -a;\n            }\n            if ($bm_isInstanceOfArray(a)) {\n                var i;\n                var lenA = a.length;\n                var retArr = [];\n                for(i = 0; i < lenA; i += 1){\n                    retArr[i] = -a[i];\n                }\n                return retArr;\n            }\n            if (a.propType) {\n                return a.v;\n            }\n            return -a;\n        }\n        var easeInBez = BezierFactory.getBezierEasing(0.333, 0, 0.833, 0.833, \"easeIn\").get;\n        var easeOutBez = BezierFactory.getBezierEasing(0.167, 0.167, 0.667, 1, \"easeOut\").get;\n        var easeInOutBez = BezierFactory.getBezierEasing(0.33, 0, 0.667, 1, \"easeInOut\").get;\n        function sum(a, b) {\n            var tOfA = _typeof$1(a);\n            var tOfB = _typeof$1(b);\n            if (isNumerable(tOfA, a) && isNumerable(tOfB, b) || tOfA === \"string\" || tOfB === \"string\") {\n                return a + b;\n            }\n            if ($bm_isInstanceOfArray(a) && isNumerable(tOfB, b)) {\n                a = a.slice(0);\n                a[0] += b;\n                return a;\n            }\n            if (isNumerable(tOfA, a) && $bm_isInstanceOfArray(b)) {\n                b = b.slice(0);\n                b[0] = a + b[0];\n                return b;\n            }\n            if ($bm_isInstanceOfArray(a) && $bm_isInstanceOfArray(b)) {\n                var i = 0;\n                var lenA = a.length;\n                var lenB = b.length;\n                var retArr = [];\n                while(i < lenA || i < lenB){\n                    if ((typeof a[i] === \"number\" || a[i] instanceof Number) && (typeof b[i] === \"number\" || b[i] instanceof Number)) {\n                        retArr[i] = a[i] + b[i];\n                    } else {\n                        retArr[i] = b[i] === undefined ? a[i] : a[i] || b[i];\n                    }\n                    i += 1;\n                }\n                return retArr;\n            }\n            return 0;\n        }\n        var add = sum;\n        function sub(a, b) {\n            var tOfA = _typeof$1(a);\n            var tOfB = _typeof$1(b);\n            if (isNumerable(tOfA, a) && isNumerable(tOfB, b)) {\n                if (tOfA === \"string\") {\n                    a = parseInt(a, 10);\n                }\n                if (tOfB === \"string\") {\n                    b = parseInt(b, 10);\n                }\n                return a - b;\n            }\n            if ($bm_isInstanceOfArray(a) && isNumerable(tOfB, b)) {\n                a = a.slice(0);\n                a[0] -= b;\n                return a;\n            }\n            if (isNumerable(tOfA, a) && $bm_isInstanceOfArray(b)) {\n                b = b.slice(0);\n                b[0] = a - b[0];\n                return b;\n            }\n            if ($bm_isInstanceOfArray(a) && $bm_isInstanceOfArray(b)) {\n                var i = 0;\n                var lenA = a.length;\n                var lenB = b.length;\n                var retArr = [];\n                while(i < lenA || i < lenB){\n                    if ((typeof a[i] === \"number\" || a[i] instanceof Number) && (typeof b[i] === \"number\" || b[i] instanceof Number)) {\n                        retArr[i] = a[i] - b[i];\n                    } else {\n                        retArr[i] = b[i] === undefined ? a[i] : a[i] || b[i];\n                    }\n                    i += 1;\n                }\n                return retArr;\n            }\n            return 0;\n        }\n        function mul(a, b) {\n            var tOfA = _typeof$1(a);\n            var tOfB = _typeof$1(b);\n            var arr;\n            if (isNumerable(tOfA, a) && isNumerable(tOfB, b)) {\n                return a * b;\n            }\n            var i;\n            var len;\n            if ($bm_isInstanceOfArray(a) && isNumerable(tOfB, b)) {\n                len = a.length;\n                arr = createTypedArray(\"float32\", len);\n                for(i = 0; i < len; i += 1){\n                    arr[i] = a[i] * b;\n                }\n                return arr;\n            }\n            if (isNumerable(tOfA, a) && $bm_isInstanceOfArray(b)) {\n                len = b.length;\n                arr = createTypedArray(\"float32\", len);\n                for(i = 0; i < len; i += 1){\n                    arr[i] = a * b[i];\n                }\n                return arr;\n            }\n            return 0;\n        }\n        function div(a, b) {\n            var tOfA = _typeof$1(a);\n            var tOfB = _typeof$1(b);\n            var arr;\n            if (isNumerable(tOfA, a) && isNumerable(tOfB, b)) {\n                return a / b;\n            }\n            var i;\n            var len;\n            if ($bm_isInstanceOfArray(a) && isNumerable(tOfB, b)) {\n                len = a.length;\n                arr = createTypedArray(\"float32\", len);\n                for(i = 0; i < len; i += 1){\n                    arr[i] = a[i] / b;\n                }\n                return arr;\n            }\n            if (isNumerable(tOfA, a) && $bm_isInstanceOfArray(b)) {\n                len = b.length;\n                arr = createTypedArray(\"float32\", len);\n                for(i = 0; i < len; i += 1){\n                    arr[i] = a / b[i];\n                }\n                return arr;\n            }\n            return 0;\n        }\n        function mod(a, b) {\n            if (typeof a === \"string\") {\n                a = parseInt(a, 10);\n            }\n            if (typeof b === \"string\") {\n                b = parseInt(b, 10);\n            }\n            return a % b;\n        }\n        var $bm_sum = sum;\n        var $bm_sub = sub;\n        var $bm_mul = mul;\n        var $bm_div = div;\n        var $bm_mod = mod;\n        function clamp(num, min, max) {\n            if (min > max) {\n                var mm = max;\n                max = min;\n                min = mm;\n            }\n            return Math.min(Math.max(num, min), max);\n        }\n        function radiansToDegrees(val) {\n            return val / degToRads;\n        }\n        var radians_to_degrees = radiansToDegrees;\n        function degreesToRadians(val) {\n            return val * degToRads;\n        }\n        var degrees_to_radians = radiansToDegrees;\n        var helperLengthArray = [\n            0,\n            0,\n            0,\n            0,\n            0,\n            0\n        ];\n        function length(arr1, arr2) {\n            if (typeof arr1 === \"number\" || arr1 instanceof Number) {\n                arr2 = arr2 || 0;\n                return Math.abs(arr1 - arr2);\n            }\n            if (!arr2) {\n                arr2 = helperLengthArray;\n            }\n            var i;\n            var len = Math.min(arr1.length, arr2.length);\n            var addedLength = 0;\n            for(i = 0; i < len; i += 1){\n                addedLength += Math.pow(arr2[i] - arr1[i], 2);\n            }\n            return Math.sqrt(addedLength);\n        }\n        function normalize(vec) {\n            return div(vec, length(vec));\n        }\n        function rgbToHsl(val) {\n            var r = val[0];\n            var g = val[1];\n            var b = val[2];\n            var max = Math.max(r, g, b);\n            var min = Math.min(r, g, b);\n            var h;\n            var s;\n            var l = (max + min) / 2;\n            if (max === min) {\n                h = 0; // achromatic\n                s = 0; // achromatic\n            } else {\n                var d = max - min;\n                s = l > 0.5 ? d / (2 - max - min) : d / (max + min);\n                switch(max){\n                    case r:\n                        h = (g - b) / d + (g < b ? 6 : 0);\n                        break;\n                    case g:\n                        h = (b - r) / d + 2;\n                        break;\n                    case b:\n                        h = (r - g) / d + 4;\n                        break;\n                    default:\n                        break;\n                }\n                h /= 6;\n            }\n            return [\n                h,\n                s,\n                l,\n                val[3]\n            ];\n        }\n        function hue2rgb(p, q, t) {\n            if (t < 0) t += 1;\n            if (t > 1) t -= 1;\n            if (t < 1 / 6) return p + (q - p) * 6 * t;\n            if (t < 1 / 2) return q;\n            if (t < 2 / 3) return p + (q - p) * (2 / 3 - t) * 6;\n            return p;\n        }\n        function hslToRgb(val) {\n            var h = val[0];\n            var s = val[1];\n            var l = val[2];\n            var r;\n            var g;\n            var b;\n            if (s === 0) {\n                r = l; // achromatic\n                b = l; // achromatic\n                g = l; // achromatic\n            } else {\n                var q = l < 0.5 ? l * (1 + s) : l + s - l * s;\n                var p = 2 * l - q;\n                r = hue2rgb(p, q, h + 1 / 3);\n                g = hue2rgb(p, q, h);\n                b = hue2rgb(p, q, h - 1 / 3);\n            }\n            return [\n                r,\n                g,\n                b,\n                val[3]\n            ];\n        }\n        function linear(t, tMin, tMax, value1, value2) {\n            if (value1 === undefined || value2 === undefined) {\n                value1 = tMin;\n                value2 = tMax;\n                tMin = 0;\n                tMax = 1;\n            }\n            if (tMax < tMin) {\n                var _tMin = tMax;\n                tMax = tMin;\n                tMin = _tMin;\n            }\n            if (t <= tMin) {\n                return value1;\n            }\n            if (t >= tMax) {\n                return value2;\n            }\n            var perc = tMax === tMin ? 0 : (t - tMin) / (tMax - tMin);\n            if (!value1.length) {\n                return value1 + (value2 - value1) * perc;\n            }\n            var i;\n            var len = value1.length;\n            var arr = createTypedArray(\"float32\", len);\n            for(i = 0; i < len; i += 1){\n                arr[i] = value1[i] + (value2[i] - value1[i]) * perc;\n            }\n            return arr;\n        }\n        function random(min, max) {\n            if (max === undefined) {\n                if (min === undefined) {\n                    min = 0;\n                    max = 1;\n                } else {\n                    max = min;\n                    min = undefined;\n                }\n            }\n            if (max.length) {\n                var i;\n                var len = max.length;\n                if (!min) {\n                    min = createTypedArray(\"float32\", len);\n                }\n                var arr = createTypedArray(\"float32\", len);\n                var rnd = BMMath.random();\n                for(i = 0; i < len; i += 1){\n                    arr[i] = min[i] + rnd * (max[i] - min[i]);\n                }\n                return arr;\n            }\n            if (min === undefined) {\n                min = 0;\n            }\n            var rndm = BMMath.random();\n            return min + rndm * (max - min);\n        }\n        function createPath(points, inTangents, outTangents, closed) {\n            var i;\n            var len = points.length;\n            var path = shapePool.newElement();\n            path.setPathData(!!closed, len);\n            var arrPlaceholder = [\n                0,\n                0\n            ];\n            var inVertexPoint;\n            var outVertexPoint;\n            for(i = 0; i < len; i += 1){\n                inVertexPoint = inTangents && inTangents[i] ? inTangents[i] : arrPlaceholder;\n                outVertexPoint = outTangents && outTangents[i] ? outTangents[i] : arrPlaceholder;\n                path.setTripleAt(points[i][0], points[i][1], outVertexPoint[0] + points[i][0], outVertexPoint[1] + points[i][1], inVertexPoint[0] + points[i][0], inVertexPoint[1] + points[i][1], i, true);\n            }\n            return path;\n        }\n        function initiateExpression(elem, data, property) {\n            // Bail out if we don't want expressions\n            function noOp(_value) {\n                return _value;\n            }\n            if (!elem.globalData.renderConfig.runExpressions) {\n                return noOp;\n            }\n            var val = data.x;\n            var needsVelocity = /velocity(?![\\w\\d])/.test(val);\n            var _needsRandom = val.indexOf(\"random\") !== -1;\n            var elemType = elem.data.ty;\n            var transform;\n            var $bm_transform;\n            var content;\n            var effect;\n            var thisProperty = property;\n            thisProperty.valueAtTime = thisProperty.getValueAtTime;\n            Object.defineProperty(thisProperty, \"value\", {\n                get: function get() {\n                    return thisProperty.v;\n                }\n            });\n            elem.comp.frameDuration = 1 / elem.comp.globalData.frameRate;\n            elem.comp.displayStartTime = 0;\n            var inPoint = elem.data.ip / elem.comp.globalData.frameRate;\n            var outPoint = elem.data.op / elem.comp.globalData.frameRate;\n            var width = elem.data.sw ? elem.data.sw : 0;\n            var height = elem.data.sh ? elem.data.sh : 0;\n            var name = elem.data.nm;\n            var loopIn;\n            var loop_in;\n            var loopOut;\n            var loop_out;\n            var smooth;\n            var toWorld;\n            var fromWorld;\n            var fromComp;\n            var toComp;\n            var fromCompToSurface;\n            var position;\n            var rotation;\n            var anchorPoint;\n            var scale;\n            var thisLayer;\n            var thisComp;\n            var mask;\n            var valueAtTime;\n            var velocityAtTime;\n            var scoped_bm_rt; // val = val.replace(/(\\\\?\"|')((http)(s)?(:\\/))?\\/.*?(\\\\?\"|')/g, \"\\\"\\\"\"); // deter potential network calls\n            var expression_function = eval(\"[function _expression_function(){\" + val + \";scoped_bm_rt=$bm_rt}]\")[0]; // eslint-disable-line no-eval\n            var numKeys = property.kf ? data.k.length : 0;\n            var active = !this.data || this.data.hd !== true;\n            var wiggle = (function wiggle(freq, amp) {\n                var iWiggle;\n                var j;\n                var lenWiggle = this.pv.length ? this.pv.length : 1;\n                var addedAmps = createTypedArray(\"float32\", lenWiggle);\n                freq = 5;\n                var iterations = Math.floor(time * freq);\n                iWiggle = 0;\n                j = 0;\n                while(iWiggle < iterations){\n                    // var rnd = BMMath.random();\n                    for(j = 0; j < lenWiggle; j += 1){\n                        addedAmps[j] += -amp + amp * 2 * BMMath.random(); // addedAmps[j] += -amp + amp*2*rnd;\n                    }\n                    iWiggle += 1;\n                } // var rnd2 = BMMath.random();\n                var periods = time * freq;\n                var perc = periods - Math.floor(periods);\n                var arr = createTypedArray(\"float32\", lenWiggle);\n                if (lenWiggle > 1) {\n                    for(j = 0; j < lenWiggle; j += 1){\n                        arr[j] = this.pv[j] + addedAmps[j] + (-amp + amp * 2 * BMMath.random()) * perc; // arr[j] = this.pv[j] + addedAmps[j] + (-amp + amp*2*rnd)*perc;\n                    // arr[i] = this.pv[i] + addedAmp + amp1*perc + amp2*(1-perc);\n                    }\n                    return arr;\n                }\n                return this.pv + addedAmps[0] + (-amp + amp * 2 * BMMath.random()) * perc;\n            }).bind(this);\n            if (thisProperty.loopIn) {\n                loopIn = thisProperty.loopIn.bind(thisProperty);\n                loop_in = loopIn;\n            }\n            if (thisProperty.loopOut) {\n                loopOut = thisProperty.loopOut.bind(thisProperty);\n                loop_out = loopOut;\n            }\n            if (thisProperty.smooth) {\n                smooth = thisProperty.smooth.bind(thisProperty);\n            }\n            function loopInDuration(type, duration) {\n                return loopIn(type, duration, true);\n            }\n            function loopOutDuration(type, duration) {\n                return loopOut(type, duration, true);\n            }\n            if (this.getValueAtTime) {\n                valueAtTime = this.getValueAtTime.bind(this);\n            }\n            if (this.getVelocityAtTime) {\n                velocityAtTime = this.getVelocityAtTime.bind(this);\n            }\n            var comp = elem.comp.globalData.projectInterface.bind(elem.comp.globalData.projectInterface);\n            function lookAt(elem1, elem2) {\n                var fVec = [\n                    elem2[0] - elem1[0],\n                    elem2[1] - elem1[1],\n                    elem2[2] - elem1[2]\n                ];\n                var pitch = Math.atan2(fVec[0], Math.sqrt(fVec[1] * fVec[1] + fVec[2] * fVec[2])) / degToRads;\n                var yaw = -Math.atan2(fVec[1], fVec[2]) / degToRads;\n                return [\n                    yaw,\n                    pitch,\n                    0\n                ];\n            }\n            function easeOut(t, tMin, tMax, val1, val2) {\n                return applyEase(easeOutBez, t, tMin, tMax, val1, val2);\n            }\n            function easeIn(t, tMin, tMax, val1, val2) {\n                return applyEase(easeInBez, t, tMin, tMax, val1, val2);\n            }\n            function ease(t, tMin, tMax, val1, val2) {\n                return applyEase(easeInOutBez, t, tMin, tMax, val1, val2);\n            }\n            function applyEase(fn, t, tMin, tMax, val1, val2) {\n                if (val1 === undefined) {\n                    val1 = tMin;\n                    val2 = tMax;\n                } else {\n                    t = (t - tMin) / (tMax - tMin);\n                }\n                if (t > 1) {\n                    t = 1;\n                } else if (t < 0) {\n                    t = 0;\n                }\n                var mult = fn(t);\n                if ($bm_isInstanceOfArray(val1)) {\n                    var iKey;\n                    var lenKey = val1.length;\n                    var arr = createTypedArray(\"float32\", lenKey);\n                    for(iKey = 0; iKey < lenKey; iKey += 1){\n                        arr[iKey] = (val2[iKey] - val1[iKey]) * mult + val1[iKey];\n                    }\n                    return arr;\n                }\n                return (val2 - val1) * mult + val1;\n            }\n            function nearestKey(time) {\n                var iKey;\n                var lenKey = data.k.length;\n                var index;\n                var keyTime;\n                if (!data.k.length || typeof data.k[0] === \"number\") {\n                    index = 0;\n                    keyTime = 0;\n                } else {\n                    index = -1;\n                    time *= elem.comp.globalData.frameRate;\n                    if (time < data.k[0].t) {\n                        index = 1;\n                        keyTime = data.k[0].t;\n                    } else {\n                        for(iKey = 0; iKey < lenKey - 1; iKey += 1){\n                            if (time === data.k[iKey].t) {\n                                index = iKey + 1;\n                                keyTime = data.k[iKey].t;\n                                break;\n                            } else if (time > data.k[iKey].t && time < data.k[iKey + 1].t) {\n                                if (time - data.k[iKey].t > data.k[iKey + 1].t - time) {\n                                    index = iKey + 2;\n                                    keyTime = data.k[iKey + 1].t;\n                                } else {\n                                    index = iKey + 1;\n                                    keyTime = data.k[iKey].t;\n                                }\n                                break;\n                            }\n                        }\n                        if (index === -1) {\n                            index = iKey + 1;\n                            keyTime = data.k[iKey].t;\n                        }\n                    }\n                }\n                var obKey = {};\n                obKey.index = index;\n                obKey.time = keyTime / elem.comp.globalData.frameRate;\n                return obKey;\n            }\n            function key(ind) {\n                var obKey;\n                var iKey;\n                var lenKey;\n                if (!data.k.length || typeof data.k[0] === \"number\") {\n                    throw new Error(\"The property has no keyframe at index \" + ind);\n                }\n                ind -= 1;\n                obKey = {\n                    time: data.k[ind].t / elem.comp.globalData.frameRate,\n                    value: []\n                };\n                var arr = Object.prototype.hasOwnProperty.call(data.k[ind], \"s\") ? data.k[ind].s : data.k[ind - 1].e;\n                lenKey = arr.length;\n                for(iKey = 0; iKey < lenKey; iKey += 1){\n                    obKey[iKey] = arr[iKey];\n                    obKey.value[iKey] = arr[iKey];\n                }\n                return obKey;\n            }\n            function framesToTime(fr, fps) {\n                if (!fps) {\n                    fps = elem.comp.globalData.frameRate;\n                }\n                return fr / fps;\n            }\n            function timeToFrames(t, fps) {\n                if (!t && t !== 0) {\n                    t = time;\n                }\n                if (!fps) {\n                    fps = elem.comp.globalData.frameRate;\n                }\n                return t * fps;\n            }\n            function seedRandom(seed) {\n                BMMath.seedrandom(randSeed + seed);\n            }\n            function sourceRectAtTime() {\n                return elem.sourceRectAtTime();\n            }\n            function substring(init, end) {\n                if (typeof value === \"string\") {\n                    if (end === undefined) {\n                        return value.substring(init);\n                    }\n                    return value.substring(init, end);\n                }\n                return \"\";\n            }\n            function substr(init, end) {\n                if (typeof value === \"string\") {\n                    if (end === undefined) {\n                        return value.substr(init);\n                    }\n                    return value.substr(init, end);\n                }\n                return \"\";\n            }\n            function posterizeTime(framesPerSecond) {\n                time = framesPerSecond === 0 ? 0 : Math.floor(time * framesPerSecond) / framesPerSecond;\n                value = valueAtTime(time);\n            }\n            var time;\n            var velocity;\n            var value;\n            var text;\n            var textIndex;\n            var textTotal;\n            var selectorValue;\n            var index = elem.data.ind;\n            var hasParent = !!(elem.hierarchy && elem.hierarchy.length);\n            var parent;\n            var randSeed = Math.floor(Math.random() * 1000000);\n            var globalData = elem.globalData;\n            function executeExpression(_value) {\n                // globalData.pushExpression();\n                value = _value;\n                if (this.frameExpressionId === elem.globalData.frameId && this.propType !== \"textSelector\") {\n                    return value;\n                }\n                if (this.propType === \"textSelector\") {\n                    textIndex = this.textIndex;\n                    textTotal = this.textTotal;\n                    selectorValue = this.selectorValue;\n                }\n                if (!thisLayer) {\n                    text = elem.layerInterface.text;\n                    thisLayer = elem.layerInterface;\n                    thisComp = elem.comp.compInterface;\n                    toWorld = thisLayer.toWorld.bind(thisLayer);\n                    fromWorld = thisLayer.fromWorld.bind(thisLayer);\n                    fromComp = thisLayer.fromComp.bind(thisLayer);\n                    toComp = thisLayer.toComp.bind(thisLayer);\n                    mask = thisLayer.mask ? thisLayer.mask.bind(thisLayer) : null;\n                    fromCompToSurface = fromComp;\n                }\n                if (!transform) {\n                    transform = elem.layerInterface(\"ADBE Transform Group\");\n                    $bm_transform = transform;\n                    if (transform) {\n                        anchorPoint = transform.anchorPoint;\n                    /* position = transform.position;\r\n                      rotation = transform.rotation;\r\n                      scale = transform.scale; */ }\n                }\n                if (elemType === 4 && !content) {\n                    content = thisLayer(\"ADBE Root Vectors Group\");\n                }\n                if (!effect) {\n                    effect = thisLayer(4);\n                }\n                hasParent = !!(elem.hierarchy && elem.hierarchy.length);\n                if (hasParent && !parent) {\n                    parent = elem.hierarchy[0].layerInterface;\n                }\n                time = this.comp.renderedFrame / this.comp.globalData.frameRate;\n                if (_needsRandom) {\n                    seedRandom(randSeed + time);\n                }\n                if (needsVelocity) {\n                    velocity = velocityAtTime(time);\n                }\n                expression_function();\n                this.frameExpressionId = elem.globalData.frameId; // TODO: Check if it's possible to return on ShapeInterface the .v value\n                // Changed this to a ternary operation because Rollup failed compiling it correctly\n                scoped_bm_rt = scoped_bm_rt.propType === propTypes.SHAPE ? scoped_bm_rt.v : scoped_bm_rt;\n                return scoped_bm_rt;\n            } // Bundlers will see these as dead code and unless we reference them\n            executeExpression.__preventDeadCodeRemoval = [\n                $bm_transform,\n                anchorPoint,\n                time,\n                velocity,\n                inPoint,\n                outPoint,\n                width,\n                height,\n                name,\n                loop_in,\n                loop_out,\n                smooth,\n                toComp,\n                fromCompToSurface,\n                toWorld,\n                fromWorld,\n                mask,\n                position,\n                rotation,\n                scale,\n                thisComp,\n                numKeys,\n                active,\n                wiggle,\n                loopInDuration,\n                loopOutDuration,\n                comp,\n                lookAt,\n                easeOut,\n                easeIn,\n                ease,\n                nearestKey,\n                key,\n                text,\n                textIndex,\n                textTotal,\n                selectorValue,\n                framesToTime,\n                timeToFrames,\n                sourceRectAtTime,\n                substring,\n                substr,\n                posterizeTime,\n                index,\n                globalData\n            ];\n            return executeExpression;\n        }\n        ob.initiateExpression = initiateExpression;\n        ob.__preventDeadCodeRemoval = [\n            window,\n            document,\n            XMLHttpRequest,\n            fetch,\n            frames,\n            $bm_neg,\n            add,\n            $bm_sum,\n            $bm_sub,\n            $bm_mul,\n            $bm_div,\n            $bm_mod,\n            clamp,\n            radians_to_degrees,\n            degreesToRadians,\n            degrees_to_radians,\n            normalize,\n            rgbToHsl,\n            hslToRgb,\n            linear,\n            random,\n            createPath,\n            _lottieGlobal\n        ];\n        ob.resetFrame = resetFrame;\n        return ob;\n    }();\n    var Expressions = function() {\n        var ob = {};\n        ob.initExpressions = initExpressions;\n        ob.resetFrame = ExpressionManager.resetFrame;\n        function initExpressions(animation) {\n            var stackCount = 0;\n            var registers = [];\n            function pushExpression() {\n                stackCount += 1;\n            }\n            function popExpression() {\n                stackCount -= 1;\n                if (stackCount === 0) {\n                    releaseInstances();\n                }\n            }\n            function registerExpressionProperty(expression) {\n                if (registers.indexOf(expression) === -1) {\n                    registers.push(expression);\n                }\n            }\n            function releaseInstances() {\n                var i;\n                var len = registers.length;\n                for(i = 0; i < len; i += 1){\n                    registers[i].release();\n                }\n                registers.length = 0;\n            }\n            animation.renderer.compInterface = CompExpressionInterface(animation.renderer);\n            animation.renderer.globalData.projectInterface.registerComposition(animation.renderer);\n            animation.renderer.globalData.pushExpression = pushExpression;\n            animation.renderer.globalData.popExpression = popExpression;\n            animation.renderer.globalData.registerExpressionProperty = registerExpressionProperty;\n        }\n        return ob;\n    }();\n    var MaskManagerInterface = function() {\n        function MaskInterface(mask, data) {\n            this._mask = mask;\n            this._data = data;\n        }\n        Object.defineProperty(MaskInterface.prototype, \"maskPath\", {\n            get: function get() {\n                if (this._mask.prop.k) {\n                    this._mask.prop.getValue();\n                }\n                return this._mask.prop;\n            }\n        });\n        Object.defineProperty(MaskInterface.prototype, \"maskOpacity\", {\n            get: function get() {\n                if (this._mask.op.k) {\n                    this._mask.op.getValue();\n                }\n                return this._mask.op.v * 100;\n            }\n        });\n        var MaskManager = function MaskManager(maskManager) {\n            var _masksInterfaces = createSizedArray(maskManager.viewData.length);\n            var i;\n            var len = maskManager.viewData.length;\n            for(i = 0; i < len; i += 1){\n                _masksInterfaces[i] = new MaskInterface(maskManager.viewData[i], maskManager.masksProperties[i]);\n            }\n            var maskFunction = function maskFunction(name) {\n                i = 0;\n                while(i < len){\n                    if (maskManager.masksProperties[i].nm === name) {\n                        return _masksInterfaces[i];\n                    }\n                    i += 1;\n                }\n                return null;\n            };\n            return maskFunction;\n        };\n        return MaskManager;\n    }();\n    var ExpressionPropertyInterface = function() {\n        var defaultUnidimensionalValue = {\n            pv: 0,\n            v: 0,\n            mult: 1\n        };\n        var defaultMultidimensionalValue = {\n            pv: [\n                0,\n                0,\n                0\n            ],\n            v: [\n                0,\n                0,\n                0\n            ],\n            mult: 1\n        };\n        function completeProperty(expressionValue, property, type) {\n            Object.defineProperty(expressionValue, \"velocity\", {\n                get: function get() {\n                    return property.getVelocityAtTime(property.comp.currentFrame);\n                }\n            });\n            expressionValue.numKeys = property.keyframes ? property.keyframes.length : 0;\n            expressionValue.key = function(pos) {\n                if (!expressionValue.numKeys) {\n                    return 0;\n                }\n                var value = \"\";\n                if (\"s\" in property.keyframes[pos - 1]) {\n                    value = property.keyframes[pos - 1].s;\n                } else if (\"e\" in property.keyframes[pos - 2]) {\n                    value = property.keyframes[pos - 2].e;\n                } else {\n                    value = property.keyframes[pos - 2].s;\n                }\n                var valueProp = type === \"unidimensional\" ? new Number(value) : Object.assign({}, value); // eslint-disable-line no-new-wrappers\n                valueProp.time = property.keyframes[pos - 1].t / property.elem.comp.globalData.frameRate;\n                valueProp.value = type === \"unidimensional\" ? value[0] : value;\n                return valueProp;\n            };\n            expressionValue.valueAtTime = property.getValueAtTime;\n            expressionValue.speedAtTime = property.getSpeedAtTime;\n            expressionValue.velocityAtTime = property.getVelocityAtTime;\n            expressionValue.propertyGroup = property.propertyGroup;\n        }\n        function UnidimensionalPropertyInterface(property) {\n            if (!property || !(\"pv\" in property)) {\n                property = defaultUnidimensionalValue;\n            }\n            var mult = 1 / property.mult;\n            var val = property.pv * mult;\n            var expressionValue = new Number(val); // eslint-disable-line no-new-wrappers\n            expressionValue.value = val;\n            completeProperty(expressionValue, property, \"unidimensional\");\n            return function() {\n                if (property.k) {\n                    property.getValue();\n                }\n                val = property.v * mult;\n                if (expressionValue.value !== val) {\n                    expressionValue = new Number(val); // eslint-disable-line no-new-wrappers\n                    expressionValue.value = val;\n                    completeProperty(expressionValue, property, \"unidimensional\");\n                }\n                return expressionValue;\n            };\n        }\n        function MultidimensionalPropertyInterface(property) {\n            if (!property || !(\"pv\" in property)) {\n                property = defaultMultidimensionalValue;\n            }\n            var mult = 1 / property.mult;\n            var len = property.data && property.data.l || property.pv.length;\n            var expressionValue = createTypedArray(\"float32\", len);\n            var arrValue = createTypedArray(\"float32\", len);\n            expressionValue.value = arrValue;\n            completeProperty(expressionValue, property, \"multidimensional\");\n            return function() {\n                if (property.k) {\n                    property.getValue();\n                }\n                for(var i = 0; i < len; i += 1){\n                    arrValue[i] = property.v[i] * mult;\n                    expressionValue[i] = arrValue[i];\n                }\n                return expressionValue;\n            };\n        } // TODO: try to avoid using this getter\n        function defaultGetter() {\n            return defaultUnidimensionalValue;\n        }\n        return function(property) {\n            if (!property) {\n                return defaultGetter;\n            }\n            if (property.propType === \"unidimensional\") {\n                return UnidimensionalPropertyInterface(property);\n            }\n            return MultidimensionalPropertyInterface(property);\n        };\n    }();\n    var TransformExpressionInterface = function() {\n        return function(transform) {\n            function _thisFunction(name) {\n                switch(name){\n                    case \"scale\":\n                    case \"Scale\":\n                    case \"ADBE Scale\":\n                    case 6:\n                        return _thisFunction.scale;\n                    case \"rotation\":\n                    case \"Rotation\":\n                    case \"ADBE Rotation\":\n                    case \"ADBE Rotate Z\":\n                    case 10:\n                        return _thisFunction.rotation;\n                    case \"ADBE Rotate X\":\n                        return _thisFunction.xRotation;\n                    case \"ADBE Rotate Y\":\n                        return _thisFunction.yRotation;\n                    case \"position\":\n                    case \"Position\":\n                    case \"ADBE Position\":\n                    case 2:\n                        return _thisFunction.position;\n                    case \"ADBE Position_0\":\n                        return _thisFunction.xPosition;\n                    case \"ADBE Position_1\":\n                        return _thisFunction.yPosition;\n                    case \"ADBE Position_2\":\n                        return _thisFunction.zPosition;\n                    case \"anchorPoint\":\n                    case \"AnchorPoint\":\n                    case \"Anchor Point\":\n                    case \"ADBE AnchorPoint\":\n                    case 1:\n                        return _thisFunction.anchorPoint;\n                    case \"opacity\":\n                    case \"Opacity\":\n                    case 11:\n                        return _thisFunction.opacity;\n                    default:\n                        return null;\n                }\n            }\n            Object.defineProperty(_thisFunction, \"rotation\", {\n                get: ExpressionPropertyInterface(transform.r || transform.rz)\n            });\n            Object.defineProperty(_thisFunction, \"zRotation\", {\n                get: ExpressionPropertyInterface(transform.rz || transform.r)\n            });\n            Object.defineProperty(_thisFunction, \"xRotation\", {\n                get: ExpressionPropertyInterface(transform.rx)\n            });\n            Object.defineProperty(_thisFunction, \"yRotation\", {\n                get: ExpressionPropertyInterface(transform.ry)\n            });\n            Object.defineProperty(_thisFunction, \"scale\", {\n                get: ExpressionPropertyInterface(transform.s)\n            });\n            var _px;\n            var _py;\n            var _pz;\n            var _transformFactory;\n            if (transform.p) {\n                _transformFactory = ExpressionPropertyInterface(transform.p);\n            } else {\n                _px = ExpressionPropertyInterface(transform.px);\n                _py = ExpressionPropertyInterface(transform.py);\n                if (transform.pz) {\n                    _pz = ExpressionPropertyInterface(transform.pz);\n                }\n            }\n            Object.defineProperty(_thisFunction, \"position\", {\n                get: function get() {\n                    if (transform.p) {\n                        return _transformFactory();\n                    }\n                    return [\n                        _px(),\n                        _py(),\n                        _pz ? _pz() : 0\n                    ];\n                }\n            });\n            Object.defineProperty(_thisFunction, \"xPosition\", {\n                get: ExpressionPropertyInterface(transform.px)\n            });\n            Object.defineProperty(_thisFunction, \"yPosition\", {\n                get: ExpressionPropertyInterface(transform.py)\n            });\n            Object.defineProperty(_thisFunction, \"zPosition\", {\n                get: ExpressionPropertyInterface(transform.pz)\n            });\n            Object.defineProperty(_thisFunction, \"anchorPoint\", {\n                get: ExpressionPropertyInterface(transform.a)\n            });\n            Object.defineProperty(_thisFunction, \"opacity\", {\n                get: ExpressionPropertyInterface(transform.o)\n            });\n            Object.defineProperty(_thisFunction, \"skew\", {\n                get: ExpressionPropertyInterface(transform.sk)\n            });\n            Object.defineProperty(_thisFunction, \"skewAxis\", {\n                get: ExpressionPropertyInterface(transform.sa)\n            });\n            Object.defineProperty(_thisFunction, \"orientation\", {\n                get: ExpressionPropertyInterface(transform.or)\n            });\n            return _thisFunction;\n        };\n    }();\n    var LayerExpressionInterface = function() {\n        function getMatrix(time) {\n            var toWorldMat = new Matrix();\n            if (time !== undefined) {\n                var propMatrix = this._elem.finalTransform.mProp.getValueAtTime(time);\n                propMatrix.clone(toWorldMat);\n            } else {\n                var transformMat = this._elem.finalTransform.mProp;\n                transformMat.applyToMatrix(toWorldMat);\n            }\n            return toWorldMat;\n        }\n        function toWorldVec(arr, time) {\n            var toWorldMat = this.getMatrix(time);\n            toWorldMat.props[12] = 0;\n            toWorldMat.props[13] = 0;\n            toWorldMat.props[14] = 0;\n            return this.applyPoint(toWorldMat, arr);\n        }\n        function toWorld(arr, time) {\n            var toWorldMat = this.getMatrix(time);\n            return this.applyPoint(toWorldMat, arr);\n        }\n        function fromWorldVec(arr, time) {\n            var toWorldMat = this.getMatrix(time);\n            toWorldMat.props[12] = 0;\n            toWorldMat.props[13] = 0;\n            toWorldMat.props[14] = 0;\n            return this.invertPoint(toWorldMat, arr);\n        }\n        function fromWorld(arr, time) {\n            var toWorldMat = this.getMatrix(time);\n            return this.invertPoint(toWorldMat, arr);\n        }\n        function applyPoint(matrix, arr) {\n            if (this._elem.hierarchy && this._elem.hierarchy.length) {\n                var i;\n                var len = this._elem.hierarchy.length;\n                for(i = 0; i < len; i += 1){\n                    this._elem.hierarchy[i].finalTransform.mProp.applyToMatrix(matrix);\n                }\n            }\n            return matrix.applyToPointArray(arr[0], arr[1], arr[2] || 0);\n        }\n        function invertPoint(matrix, arr) {\n            if (this._elem.hierarchy && this._elem.hierarchy.length) {\n                var i;\n                var len = this._elem.hierarchy.length;\n                for(i = 0; i < len; i += 1){\n                    this._elem.hierarchy[i].finalTransform.mProp.applyToMatrix(matrix);\n                }\n            }\n            return matrix.inversePoint(arr);\n        }\n        function fromComp(arr) {\n            var toWorldMat = new Matrix();\n            toWorldMat.reset();\n            this._elem.finalTransform.mProp.applyToMatrix(toWorldMat);\n            if (this._elem.hierarchy && this._elem.hierarchy.length) {\n                var i;\n                var len = this._elem.hierarchy.length;\n                for(i = 0; i < len; i += 1){\n                    this._elem.hierarchy[i].finalTransform.mProp.applyToMatrix(toWorldMat);\n                }\n                return toWorldMat.inversePoint(arr);\n            }\n            return toWorldMat.inversePoint(arr);\n        }\n        function sampleImage() {\n            return [\n                1,\n                1,\n                1,\n                1\n            ];\n        }\n        return function(elem) {\n            var transformInterface;\n            function _registerMaskInterface(maskManager) {\n                _thisLayerFunction.mask = new MaskManagerInterface(maskManager, elem);\n            }\n            function _registerEffectsInterface(effects) {\n                _thisLayerFunction.effect = effects;\n            }\n            function _thisLayerFunction(name) {\n                switch(name){\n                    case \"ADBE Root Vectors Group\":\n                    case \"Contents\":\n                    case 2:\n                        return _thisLayerFunction.shapeInterface;\n                    case 1:\n                    case 6:\n                    case \"Transform\":\n                    case \"transform\":\n                    case \"ADBE Transform Group\":\n                        return transformInterface;\n                    case 4:\n                    case \"ADBE Effect Parade\":\n                    case \"effects\":\n                    case \"Effects\":\n                        return _thisLayerFunction.effect;\n                    case \"ADBE Text Properties\":\n                        return _thisLayerFunction.textInterface;\n                    default:\n                        return null;\n                }\n            }\n            _thisLayerFunction.getMatrix = getMatrix;\n            _thisLayerFunction.invertPoint = invertPoint;\n            _thisLayerFunction.applyPoint = applyPoint;\n            _thisLayerFunction.toWorld = toWorld;\n            _thisLayerFunction.toWorldVec = toWorldVec;\n            _thisLayerFunction.fromWorld = fromWorld;\n            _thisLayerFunction.fromWorldVec = fromWorldVec;\n            _thisLayerFunction.toComp = toWorld;\n            _thisLayerFunction.fromComp = fromComp;\n            _thisLayerFunction.sampleImage = sampleImage;\n            _thisLayerFunction.sourceRectAtTime = elem.sourceRectAtTime.bind(elem);\n            _thisLayerFunction._elem = elem;\n            transformInterface = TransformExpressionInterface(elem.finalTransform.mProp);\n            var anchorPointDescriptor = getDescriptor(transformInterface, \"anchorPoint\");\n            Object.defineProperties(_thisLayerFunction, {\n                hasParent: {\n                    get: function get() {\n                        return elem.hierarchy.length;\n                    }\n                },\n                parent: {\n                    get: function get() {\n                        return elem.hierarchy[0].layerInterface;\n                    }\n                },\n                rotation: getDescriptor(transformInterface, \"rotation\"),\n                scale: getDescriptor(transformInterface, \"scale\"),\n                position: getDescriptor(transformInterface, \"position\"),\n                opacity: getDescriptor(transformInterface, \"opacity\"),\n                anchorPoint: anchorPointDescriptor,\n                anchor_point: anchorPointDescriptor,\n                transform: {\n                    get: function get() {\n                        return transformInterface;\n                    }\n                },\n                active: {\n                    get: function get() {\n                        return elem.isInRange;\n                    }\n                }\n            });\n            _thisLayerFunction.startTime = elem.data.st;\n            _thisLayerFunction.index = elem.data.ind;\n            _thisLayerFunction.source = elem.data.refId;\n            _thisLayerFunction.height = elem.data.ty === 0 ? elem.data.h : 100;\n            _thisLayerFunction.width = elem.data.ty === 0 ? elem.data.w : 100;\n            _thisLayerFunction.inPoint = elem.data.ip / elem.comp.globalData.frameRate;\n            _thisLayerFunction.outPoint = elem.data.op / elem.comp.globalData.frameRate;\n            _thisLayerFunction._name = elem.data.nm;\n            _thisLayerFunction.registerMaskInterface = _registerMaskInterface;\n            _thisLayerFunction.registerEffectsInterface = _registerEffectsInterface;\n            return _thisLayerFunction;\n        };\n    }();\n    var propertyGroupFactory = function() {\n        return function(interfaceFunction, parentPropertyGroup) {\n            return function(val) {\n                val = val === undefined ? 1 : val;\n                if (val <= 0) {\n                    return interfaceFunction;\n                }\n                return parentPropertyGroup(val - 1);\n            };\n        };\n    }();\n    var PropertyInterface = function() {\n        return function(propertyName, propertyGroup) {\n            var interfaceFunction = {\n                _name: propertyName\n            };\n            function _propertyGroup(val) {\n                val = val === undefined ? 1 : val;\n                if (val <= 0) {\n                    return interfaceFunction;\n                }\n                return propertyGroup(val - 1);\n            }\n            return _propertyGroup;\n        };\n    }();\n    var EffectsExpressionInterface = function() {\n        var ob = {\n            createEffectsInterface: createEffectsInterface\n        };\n        function createEffectsInterface(elem, propertyGroup) {\n            if (elem.effectsManager) {\n                var effectElements = [];\n                var effectsData = elem.data.ef;\n                var i;\n                var len = elem.effectsManager.effectElements.length;\n                for(i = 0; i < len; i += 1){\n                    effectElements.push(createGroupInterface(effectsData[i], elem.effectsManager.effectElements[i], propertyGroup, elem));\n                }\n                var effects = elem.data.ef || [];\n                var groupInterface = function groupInterface(name) {\n                    i = 0;\n                    len = effects.length;\n                    while(i < len){\n                        if (name === effects[i].nm || name === effects[i].mn || name === effects[i].ix) {\n                            return effectElements[i];\n                        }\n                        i += 1;\n                    }\n                    return null;\n                };\n                Object.defineProperty(groupInterface, \"numProperties\", {\n                    get: function get() {\n                        return effects.length;\n                    }\n                });\n                return groupInterface;\n            }\n            return null;\n        }\n        function createGroupInterface(data, elements, propertyGroup, elem) {\n            function groupInterface(name) {\n                var effects = data.ef;\n                var i = 0;\n                var len = effects.length;\n                while(i < len){\n                    if (name === effects[i].nm || name === effects[i].mn || name === effects[i].ix) {\n                        if (effects[i].ty === 5) {\n                            return effectElements[i];\n                        }\n                        return effectElements[i]();\n                    }\n                    i += 1;\n                }\n                throw new Error();\n            }\n            var _propertyGroup = propertyGroupFactory(groupInterface, propertyGroup);\n            var effectElements = [];\n            var i;\n            var len = data.ef.length;\n            for(i = 0; i < len; i += 1){\n                if (data.ef[i].ty === 5) {\n                    effectElements.push(createGroupInterface(data.ef[i], elements.effectElements[i], elements.effectElements[i].propertyGroup, elem));\n                } else {\n                    effectElements.push(createValueInterface(elements.effectElements[i], data.ef[i].ty, elem, _propertyGroup));\n                }\n            }\n            if (data.mn === \"ADBE Color Control\") {\n                Object.defineProperty(groupInterface, \"color\", {\n                    get: function get() {\n                        return effectElements[0]();\n                    }\n                });\n            }\n            Object.defineProperties(groupInterface, {\n                numProperties: {\n                    get: function get() {\n                        return data.np;\n                    }\n                },\n                _name: {\n                    value: data.nm\n                },\n                propertyGroup: {\n                    value: _propertyGroup\n                }\n            });\n            groupInterface.enabled = data.en !== 0;\n            groupInterface.active = groupInterface.enabled;\n            return groupInterface;\n        }\n        function createValueInterface(element, type, elem, propertyGroup) {\n            var expressionProperty = ExpressionPropertyInterface(element.p);\n            function interfaceFunction() {\n                if (type === 10) {\n                    return elem.comp.compInterface(element.p.v);\n                }\n                return expressionProperty();\n            }\n            if (element.p.setGroupProperty) {\n                element.p.setGroupProperty(PropertyInterface(\"\", propertyGroup));\n            }\n            return interfaceFunction;\n        }\n        return ob;\n    }();\n    var ShapePathInterface = function() {\n        return function pathInterfaceFactory(shape, view, propertyGroup) {\n            var prop = view.sh;\n            function interfaceFunction(val) {\n                if (val === \"Shape\" || val === \"shape\" || val === \"Path\" || val === \"path\" || val === \"ADBE Vector Shape\" || val === 2) {\n                    return interfaceFunction.path;\n                }\n                return null;\n            }\n            var _propertyGroup = propertyGroupFactory(interfaceFunction, propertyGroup);\n            prop.setGroupProperty(PropertyInterface(\"Path\", _propertyGroup));\n            Object.defineProperties(interfaceFunction, {\n                path: {\n                    get: function get() {\n                        if (prop.k) {\n                            prop.getValue();\n                        }\n                        return prop;\n                    }\n                },\n                shape: {\n                    get: function get() {\n                        if (prop.k) {\n                            prop.getValue();\n                        }\n                        return prop;\n                    }\n                },\n                _name: {\n                    value: shape.nm\n                },\n                ix: {\n                    value: shape.ix\n                },\n                propertyIndex: {\n                    value: shape.ix\n                },\n                mn: {\n                    value: shape.mn\n                },\n                propertyGroup: {\n                    value: propertyGroup\n                }\n            });\n            return interfaceFunction;\n        };\n    }();\n    var ShapeExpressionInterface = function() {\n        function iterateElements(shapes, view, propertyGroup) {\n            var arr = [];\n            var i;\n            var len = shapes ? shapes.length : 0;\n            for(i = 0; i < len; i += 1){\n                if (shapes[i].ty === \"gr\") {\n                    arr.push(groupInterfaceFactory(shapes[i], view[i], propertyGroup));\n                } else if (shapes[i].ty === \"fl\") {\n                    arr.push(fillInterfaceFactory(shapes[i], view[i], propertyGroup));\n                } else if (shapes[i].ty === \"st\") {\n                    arr.push(strokeInterfaceFactory(shapes[i], view[i], propertyGroup));\n                } else if (shapes[i].ty === \"tm\") {\n                    arr.push(trimInterfaceFactory(shapes[i], view[i], propertyGroup));\n                } else if (shapes[i].ty === \"tr\") {} else if (shapes[i].ty === \"el\") {\n                    arr.push(ellipseInterfaceFactory(shapes[i], view[i], propertyGroup));\n                } else if (shapes[i].ty === \"sr\") {\n                    arr.push(starInterfaceFactory(shapes[i], view[i], propertyGroup));\n                } else if (shapes[i].ty === \"sh\") {\n                    arr.push(ShapePathInterface(shapes[i], view[i], propertyGroup));\n                } else if (shapes[i].ty === \"rc\") {\n                    arr.push(rectInterfaceFactory(shapes[i], view[i], propertyGroup));\n                } else if (shapes[i].ty === \"rd\") {\n                    arr.push(roundedInterfaceFactory(shapes[i], view[i], propertyGroup));\n                } else if (shapes[i].ty === \"rp\") {\n                    arr.push(repeaterInterfaceFactory(shapes[i], view[i], propertyGroup));\n                } else if (shapes[i].ty === \"gf\") {\n                    arr.push(gradientFillInterfaceFactory(shapes[i], view[i], propertyGroup));\n                } else {\n                    arr.push(defaultInterfaceFactory(shapes[i], view[i], propertyGroup));\n                }\n            }\n            return arr;\n        }\n        function contentsInterfaceFactory(shape, view, propertyGroup) {\n            var interfaces;\n            var interfaceFunction = function _interfaceFunction(value) {\n                var i = 0;\n                var len = interfaces.length;\n                while(i < len){\n                    if (interfaces[i]._name === value || interfaces[i].mn === value || interfaces[i].propertyIndex === value || interfaces[i].ix === value || interfaces[i].ind === value) {\n                        return interfaces[i];\n                    }\n                    i += 1;\n                }\n                if (typeof value === \"number\") {\n                    return interfaces[value - 1];\n                }\n                return null;\n            };\n            interfaceFunction.propertyGroup = propertyGroupFactory(interfaceFunction, propertyGroup);\n            interfaces = iterateElements(shape.it, view.it, interfaceFunction.propertyGroup);\n            interfaceFunction.numProperties = interfaces.length;\n            var transformInterface = transformInterfaceFactory(shape.it[shape.it.length - 1], view.it[view.it.length - 1], interfaceFunction.propertyGroup);\n            interfaceFunction.transform = transformInterface;\n            interfaceFunction.propertyIndex = shape.cix;\n            interfaceFunction._name = shape.nm;\n            return interfaceFunction;\n        }\n        function groupInterfaceFactory(shape, view, propertyGroup) {\n            var interfaceFunction = function _interfaceFunction(value) {\n                switch(value){\n                    case \"ADBE Vectors Group\":\n                    case \"Contents\":\n                    case 2:\n                        return interfaceFunction.content;\n                    // Not necessary for now. Keeping them here in case a new case appears\n                    // case 'ADBE Vector Transform Group':\n                    // case 3:\n                    default:\n                        return interfaceFunction.transform;\n                }\n            };\n            interfaceFunction.propertyGroup = propertyGroupFactory(interfaceFunction, propertyGroup);\n            var content = contentsInterfaceFactory(shape, view, interfaceFunction.propertyGroup);\n            var transformInterface = transformInterfaceFactory(shape.it[shape.it.length - 1], view.it[view.it.length - 1], interfaceFunction.propertyGroup);\n            interfaceFunction.content = content;\n            interfaceFunction.transform = transformInterface;\n            Object.defineProperty(interfaceFunction, \"_name\", {\n                get: function get() {\n                    return shape.nm;\n                }\n            }); // interfaceFunction.content = interfaceFunction;\n            interfaceFunction.numProperties = shape.np;\n            interfaceFunction.propertyIndex = shape.ix;\n            interfaceFunction.nm = shape.nm;\n            interfaceFunction.mn = shape.mn;\n            return interfaceFunction;\n        }\n        function fillInterfaceFactory(shape, view, propertyGroup) {\n            function interfaceFunction(val) {\n                if (val === \"Color\" || val === \"color\") {\n                    return interfaceFunction.color;\n                }\n                if (val === \"Opacity\" || val === \"opacity\") {\n                    return interfaceFunction.opacity;\n                }\n                return null;\n            }\n            Object.defineProperties(interfaceFunction, {\n                color: {\n                    get: ExpressionPropertyInterface(view.c)\n                },\n                opacity: {\n                    get: ExpressionPropertyInterface(view.o)\n                },\n                _name: {\n                    value: shape.nm\n                },\n                mn: {\n                    value: shape.mn\n                }\n            });\n            view.c.setGroupProperty(PropertyInterface(\"Color\", propertyGroup));\n            view.o.setGroupProperty(PropertyInterface(\"Opacity\", propertyGroup));\n            return interfaceFunction;\n        }\n        function gradientFillInterfaceFactory(shape, view, propertyGroup) {\n            function interfaceFunction(val) {\n                if (val === \"Start Point\" || val === \"start point\") {\n                    return interfaceFunction.startPoint;\n                }\n                if (val === \"End Point\" || val === \"end point\") {\n                    return interfaceFunction.endPoint;\n                }\n                if (val === \"Opacity\" || val === \"opacity\") {\n                    return interfaceFunction.opacity;\n                }\n                return null;\n            }\n            Object.defineProperties(interfaceFunction, {\n                startPoint: {\n                    get: ExpressionPropertyInterface(view.s)\n                },\n                endPoint: {\n                    get: ExpressionPropertyInterface(view.e)\n                },\n                opacity: {\n                    get: ExpressionPropertyInterface(view.o)\n                },\n                type: {\n                    get: function get() {\n                        return \"a\";\n                    }\n                },\n                _name: {\n                    value: shape.nm\n                },\n                mn: {\n                    value: shape.mn\n                }\n            });\n            view.s.setGroupProperty(PropertyInterface(\"Start Point\", propertyGroup));\n            view.e.setGroupProperty(PropertyInterface(\"End Point\", propertyGroup));\n            view.o.setGroupProperty(PropertyInterface(\"Opacity\", propertyGroup));\n            return interfaceFunction;\n        }\n        function defaultInterfaceFactory() {\n            function interfaceFunction() {\n                return null;\n            }\n            return interfaceFunction;\n        }\n        function strokeInterfaceFactory(shape, view, propertyGroup) {\n            var _propertyGroup = propertyGroupFactory(interfaceFunction, propertyGroup);\n            var _dashPropertyGroup = propertyGroupFactory(dashOb, _propertyGroup);\n            function addPropertyToDashOb(i) {\n                Object.defineProperty(dashOb, shape.d[i].nm, {\n                    get: ExpressionPropertyInterface(view.d.dataProps[i].p)\n                });\n            }\n            var i;\n            var len = shape.d ? shape.d.length : 0;\n            var dashOb = {};\n            for(i = 0; i < len; i += 1){\n                addPropertyToDashOb(i);\n                view.d.dataProps[i].p.setGroupProperty(_dashPropertyGroup);\n            }\n            function interfaceFunction(val) {\n                if (val === \"Color\" || val === \"color\") {\n                    return interfaceFunction.color;\n                }\n                if (val === \"Opacity\" || val === \"opacity\") {\n                    return interfaceFunction.opacity;\n                }\n                if (val === \"Stroke Width\" || val === \"stroke width\") {\n                    return interfaceFunction.strokeWidth;\n                }\n                return null;\n            }\n            Object.defineProperties(interfaceFunction, {\n                color: {\n                    get: ExpressionPropertyInterface(view.c)\n                },\n                opacity: {\n                    get: ExpressionPropertyInterface(view.o)\n                },\n                strokeWidth: {\n                    get: ExpressionPropertyInterface(view.w)\n                },\n                dash: {\n                    get: function get() {\n                        return dashOb;\n                    }\n                },\n                _name: {\n                    value: shape.nm\n                },\n                mn: {\n                    value: shape.mn\n                }\n            });\n            view.c.setGroupProperty(PropertyInterface(\"Color\", _propertyGroup));\n            view.o.setGroupProperty(PropertyInterface(\"Opacity\", _propertyGroup));\n            view.w.setGroupProperty(PropertyInterface(\"Stroke Width\", _propertyGroup));\n            return interfaceFunction;\n        }\n        function trimInterfaceFactory(shape, view, propertyGroup) {\n            function interfaceFunction(val) {\n                if (val === shape.e.ix || val === \"End\" || val === \"end\") {\n                    return interfaceFunction.end;\n                }\n                if (val === shape.s.ix) {\n                    return interfaceFunction.start;\n                }\n                if (val === shape.o.ix) {\n                    return interfaceFunction.offset;\n                }\n                return null;\n            }\n            var _propertyGroup = propertyGroupFactory(interfaceFunction, propertyGroup);\n            interfaceFunction.propertyIndex = shape.ix;\n            view.s.setGroupProperty(PropertyInterface(\"Start\", _propertyGroup));\n            view.e.setGroupProperty(PropertyInterface(\"End\", _propertyGroup));\n            view.o.setGroupProperty(PropertyInterface(\"Offset\", _propertyGroup));\n            interfaceFunction.propertyIndex = shape.ix;\n            interfaceFunction.propertyGroup = propertyGroup;\n            Object.defineProperties(interfaceFunction, {\n                start: {\n                    get: ExpressionPropertyInterface(view.s)\n                },\n                end: {\n                    get: ExpressionPropertyInterface(view.e)\n                },\n                offset: {\n                    get: ExpressionPropertyInterface(view.o)\n                },\n                _name: {\n                    value: shape.nm\n                }\n            });\n            interfaceFunction.mn = shape.mn;\n            return interfaceFunction;\n        }\n        function transformInterfaceFactory(shape, view, propertyGroup) {\n            function interfaceFunction(value) {\n                if (shape.a.ix === value || value === \"Anchor Point\") {\n                    return interfaceFunction.anchorPoint;\n                }\n                if (shape.o.ix === value || value === \"Opacity\") {\n                    return interfaceFunction.opacity;\n                }\n                if (shape.p.ix === value || value === \"Position\") {\n                    return interfaceFunction.position;\n                }\n                if (shape.r.ix === value || value === \"Rotation\" || value === \"ADBE Vector Rotation\") {\n                    return interfaceFunction.rotation;\n                }\n                if (shape.s.ix === value || value === \"Scale\") {\n                    return interfaceFunction.scale;\n                }\n                if (shape.sk && shape.sk.ix === value || value === \"Skew\") {\n                    return interfaceFunction.skew;\n                }\n                if (shape.sa && shape.sa.ix === value || value === \"Skew Axis\") {\n                    return interfaceFunction.skewAxis;\n                }\n                return null;\n            }\n            var _propertyGroup = propertyGroupFactory(interfaceFunction, propertyGroup);\n            view.transform.mProps.o.setGroupProperty(PropertyInterface(\"Opacity\", _propertyGroup));\n            view.transform.mProps.p.setGroupProperty(PropertyInterface(\"Position\", _propertyGroup));\n            view.transform.mProps.a.setGroupProperty(PropertyInterface(\"Anchor Point\", _propertyGroup));\n            view.transform.mProps.s.setGroupProperty(PropertyInterface(\"Scale\", _propertyGroup));\n            view.transform.mProps.r.setGroupProperty(PropertyInterface(\"Rotation\", _propertyGroup));\n            if (view.transform.mProps.sk) {\n                view.transform.mProps.sk.setGroupProperty(PropertyInterface(\"Skew\", _propertyGroup));\n                view.transform.mProps.sa.setGroupProperty(PropertyInterface(\"Skew Angle\", _propertyGroup));\n            }\n            view.transform.op.setGroupProperty(PropertyInterface(\"Opacity\", _propertyGroup));\n            Object.defineProperties(interfaceFunction, {\n                opacity: {\n                    get: ExpressionPropertyInterface(view.transform.mProps.o)\n                },\n                position: {\n                    get: ExpressionPropertyInterface(view.transform.mProps.p)\n                },\n                anchorPoint: {\n                    get: ExpressionPropertyInterface(view.transform.mProps.a)\n                },\n                scale: {\n                    get: ExpressionPropertyInterface(view.transform.mProps.s)\n                },\n                rotation: {\n                    get: ExpressionPropertyInterface(view.transform.mProps.r)\n                },\n                skew: {\n                    get: ExpressionPropertyInterface(view.transform.mProps.sk)\n                },\n                skewAxis: {\n                    get: ExpressionPropertyInterface(view.transform.mProps.sa)\n                },\n                _name: {\n                    value: shape.nm\n                }\n            });\n            interfaceFunction.ty = \"tr\";\n            interfaceFunction.mn = shape.mn;\n            interfaceFunction.propertyGroup = propertyGroup;\n            return interfaceFunction;\n        }\n        function ellipseInterfaceFactory(shape, view, propertyGroup) {\n            function interfaceFunction(value) {\n                if (shape.p.ix === value) {\n                    return interfaceFunction.position;\n                }\n                if (shape.s.ix === value) {\n                    return interfaceFunction.size;\n                }\n                return null;\n            }\n            var _propertyGroup = propertyGroupFactory(interfaceFunction, propertyGroup);\n            interfaceFunction.propertyIndex = shape.ix;\n            var prop = view.sh.ty === \"tm\" ? view.sh.prop : view.sh;\n            prop.s.setGroupProperty(PropertyInterface(\"Size\", _propertyGroup));\n            prop.p.setGroupProperty(PropertyInterface(\"Position\", _propertyGroup));\n            Object.defineProperties(interfaceFunction, {\n                size: {\n                    get: ExpressionPropertyInterface(prop.s)\n                },\n                position: {\n                    get: ExpressionPropertyInterface(prop.p)\n                },\n                _name: {\n                    value: shape.nm\n                }\n            });\n            interfaceFunction.mn = shape.mn;\n            return interfaceFunction;\n        }\n        function starInterfaceFactory(shape, view, propertyGroup) {\n            function interfaceFunction(value) {\n                if (shape.p.ix === value) {\n                    return interfaceFunction.position;\n                }\n                if (shape.r.ix === value) {\n                    return interfaceFunction.rotation;\n                }\n                if (shape.pt.ix === value) {\n                    return interfaceFunction.points;\n                }\n                if (shape.or.ix === value || value === \"ADBE Vector Star Outer Radius\") {\n                    return interfaceFunction.outerRadius;\n                }\n                if (shape.os.ix === value) {\n                    return interfaceFunction.outerRoundness;\n                }\n                if (shape.ir && (shape.ir.ix === value || value === \"ADBE Vector Star Inner Radius\")) {\n                    return interfaceFunction.innerRadius;\n                }\n                if (shape.is && shape.is.ix === value) {\n                    return interfaceFunction.innerRoundness;\n                }\n                return null;\n            }\n            var _propertyGroup = propertyGroupFactory(interfaceFunction, propertyGroup);\n            var prop = view.sh.ty === \"tm\" ? view.sh.prop : view.sh;\n            interfaceFunction.propertyIndex = shape.ix;\n            prop.or.setGroupProperty(PropertyInterface(\"Outer Radius\", _propertyGroup));\n            prop.os.setGroupProperty(PropertyInterface(\"Outer Roundness\", _propertyGroup));\n            prop.pt.setGroupProperty(PropertyInterface(\"Points\", _propertyGroup));\n            prop.p.setGroupProperty(PropertyInterface(\"Position\", _propertyGroup));\n            prop.r.setGroupProperty(PropertyInterface(\"Rotation\", _propertyGroup));\n            if (shape.ir) {\n                prop.ir.setGroupProperty(PropertyInterface(\"Inner Radius\", _propertyGroup));\n                prop.is.setGroupProperty(PropertyInterface(\"Inner Roundness\", _propertyGroup));\n            }\n            Object.defineProperties(interfaceFunction, {\n                position: {\n                    get: ExpressionPropertyInterface(prop.p)\n                },\n                rotation: {\n                    get: ExpressionPropertyInterface(prop.r)\n                },\n                points: {\n                    get: ExpressionPropertyInterface(prop.pt)\n                },\n                outerRadius: {\n                    get: ExpressionPropertyInterface(prop.or)\n                },\n                outerRoundness: {\n                    get: ExpressionPropertyInterface(prop.os)\n                },\n                innerRadius: {\n                    get: ExpressionPropertyInterface(prop.ir)\n                },\n                innerRoundness: {\n                    get: ExpressionPropertyInterface(prop.is)\n                },\n                _name: {\n                    value: shape.nm\n                }\n            });\n            interfaceFunction.mn = shape.mn;\n            return interfaceFunction;\n        }\n        function rectInterfaceFactory(shape, view, propertyGroup) {\n            function interfaceFunction(value) {\n                if (shape.p.ix === value) {\n                    return interfaceFunction.position;\n                }\n                if (shape.r.ix === value) {\n                    return interfaceFunction.roundness;\n                }\n                if (shape.s.ix === value || value === \"Size\" || value === \"ADBE Vector Rect Size\") {\n                    return interfaceFunction.size;\n                }\n                return null;\n            }\n            var _propertyGroup = propertyGroupFactory(interfaceFunction, propertyGroup);\n            var prop = view.sh.ty === \"tm\" ? view.sh.prop : view.sh;\n            interfaceFunction.propertyIndex = shape.ix;\n            prop.p.setGroupProperty(PropertyInterface(\"Position\", _propertyGroup));\n            prop.s.setGroupProperty(PropertyInterface(\"Size\", _propertyGroup));\n            prop.r.setGroupProperty(PropertyInterface(\"Rotation\", _propertyGroup));\n            Object.defineProperties(interfaceFunction, {\n                position: {\n                    get: ExpressionPropertyInterface(prop.p)\n                },\n                roundness: {\n                    get: ExpressionPropertyInterface(prop.r)\n                },\n                size: {\n                    get: ExpressionPropertyInterface(prop.s)\n                },\n                _name: {\n                    value: shape.nm\n                }\n            });\n            interfaceFunction.mn = shape.mn;\n            return interfaceFunction;\n        }\n        function roundedInterfaceFactory(shape, view, propertyGroup) {\n            function interfaceFunction(value) {\n                if (shape.r.ix === value || value === \"Round Corners 1\") {\n                    return interfaceFunction.radius;\n                }\n                return null;\n            }\n            var _propertyGroup = propertyGroupFactory(interfaceFunction, propertyGroup);\n            var prop = view;\n            interfaceFunction.propertyIndex = shape.ix;\n            prop.rd.setGroupProperty(PropertyInterface(\"Radius\", _propertyGroup));\n            Object.defineProperties(interfaceFunction, {\n                radius: {\n                    get: ExpressionPropertyInterface(prop.rd)\n                },\n                _name: {\n                    value: shape.nm\n                }\n            });\n            interfaceFunction.mn = shape.mn;\n            return interfaceFunction;\n        }\n        function repeaterInterfaceFactory(shape, view, propertyGroup) {\n            function interfaceFunction(value) {\n                if (shape.c.ix === value || value === \"Copies\") {\n                    return interfaceFunction.copies;\n                }\n                if (shape.o.ix === value || value === \"Offset\") {\n                    return interfaceFunction.offset;\n                }\n                return null;\n            }\n            var _propertyGroup = propertyGroupFactory(interfaceFunction, propertyGroup);\n            var prop = view;\n            interfaceFunction.propertyIndex = shape.ix;\n            prop.c.setGroupProperty(PropertyInterface(\"Copies\", _propertyGroup));\n            prop.o.setGroupProperty(PropertyInterface(\"Offset\", _propertyGroup));\n            Object.defineProperties(interfaceFunction, {\n                copies: {\n                    get: ExpressionPropertyInterface(prop.c)\n                },\n                offset: {\n                    get: ExpressionPropertyInterface(prop.o)\n                },\n                _name: {\n                    value: shape.nm\n                }\n            });\n            interfaceFunction.mn = shape.mn;\n            return interfaceFunction;\n        }\n        return function(shapes, view, propertyGroup) {\n            var interfaces;\n            function _interfaceFunction(value) {\n                if (typeof value === \"number\") {\n                    value = value === undefined ? 1 : value;\n                    if (value === 0) {\n                        return propertyGroup;\n                    }\n                    return interfaces[value - 1];\n                }\n                var i = 0;\n                var len = interfaces.length;\n                while(i < len){\n                    if (interfaces[i]._name === value) {\n                        return interfaces[i];\n                    }\n                    i += 1;\n                }\n                return null;\n            }\n            function parentGroupWrapper() {\n                return propertyGroup;\n            }\n            _interfaceFunction.propertyGroup = propertyGroupFactory(_interfaceFunction, parentGroupWrapper);\n            interfaces = iterateElements(shapes, view, _interfaceFunction.propertyGroup);\n            _interfaceFunction.numProperties = interfaces.length;\n            _interfaceFunction._name = \"Contents\";\n            return _interfaceFunction;\n        };\n    }();\n    var TextExpressionInterface = function() {\n        return function(elem) {\n            var _sourceText;\n            function _thisLayerFunction(name) {\n                switch(name){\n                    case \"ADBE Text Document\":\n                        return _thisLayerFunction.sourceText;\n                    default:\n                        return null;\n                }\n            }\n            Object.defineProperty(_thisLayerFunction, \"sourceText\", {\n                get: function get() {\n                    elem.textProperty.getValue();\n                    var stringValue = elem.textProperty.currentData.t;\n                    if (!_sourceText || stringValue !== _sourceText.value) {\n                        _sourceText = new String(stringValue); // eslint-disable-line no-new-wrappers\n                        // If stringValue is an empty string, eval returns undefined, so it has to be returned as a String primitive\n                        _sourceText.value = stringValue || new String(stringValue); // eslint-disable-line no-new-wrappers\n                        Object.defineProperty(_sourceText, \"style\", {\n                            get: function get() {\n                                return {\n                                    fillColor: elem.textProperty.currentData.fc\n                                };\n                            }\n                        });\n                    }\n                    return _sourceText;\n                }\n            });\n            return _thisLayerFunction;\n        };\n    }();\n    function _typeof(obj) {\n        \"@babel/helpers - typeof\";\n        if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") {\n            _typeof = function _typeof(obj) {\n                return typeof obj;\n            };\n        } else {\n            _typeof = function _typeof(obj) {\n                return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj;\n            };\n        }\n        return _typeof(obj);\n    }\n    var FootageInterface = function() {\n        var outlineInterfaceFactory = function outlineInterfaceFactory(elem) {\n            var currentPropertyName = \"\";\n            var currentProperty = elem.getFootageData();\n            function init() {\n                currentPropertyName = \"\";\n                currentProperty = elem.getFootageData();\n                return searchProperty;\n            }\n            function searchProperty(value) {\n                if (currentProperty[value]) {\n                    currentPropertyName = value;\n                    currentProperty = currentProperty[value];\n                    if (_typeof(currentProperty) === \"object\") {\n                        return searchProperty;\n                    }\n                    return currentProperty;\n                }\n                var propertyNameIndex = value.indexOf(currentPropertyName);\n                if (propertyNameIndex !== -1) {\n                    var index = parseInt(value.substr(propertyNameIndex + currentPropertyName.length), 10);\n                    currentProperty = currentProperty[index];\n                    if (_typeof(currentProperty) === \"object\") {\n                        return searchProperty;\n                    }\n                    return currentProperty;\n                }\n                return \"\";\n            }\n            return init;\n        };\n        var dataInterfaceFactory = function dataInterfaceFactory(elem) {\n            function interfaceFunction(value) {\n                if (value === \"Outline\") {\n                    return interfaceFunction.outlineInterface();\n                }\n                return null;\n            }\n            interfaceFunction._name = \"Outline\";\n            interfaceFunction.outlineInterface = outlineInterfaceFactory(elem);\n            return interfaceFunction;\n        };\n        return function(elem) {\n            function _interfaceFunction(value) {\n                if (value === \"Data\") {\n                    return _interfaceFunction.dataInterface;\n                }\n                return null;\n            }\n            _interfaceFunction._name = \"Data\";\n            _interfaceFunction.dataInterface = dataInterfaceFactory(elem);\n            return _interfaceFunction;\n        };\n    }();\n    var interfaces = {\n        layer: LayerExpressionInterface,\n        effects: EffectsExpressionInterface,\n        comp: CompExpressionInterface,\n        shape: ShapeExpressionInterface,\n        text: TextExpressionInterface,\n        footage: FootageInterface\n    };\n    function getInterface(type) {\n        return interfaces[type] || null;\n    }\n    var expressionHelpers = function() {\n        function searchExpressions(elem, data, prop) {\n            if (data.x) {\n                prop.k = true;\n                prop.x = true;\n                prop.initiateExpression = ExpressionManager.initiateExpression;\n                prop.effectsSequence.push(prop.initiateExpression(elem, data, prop).bind(prop));\n            }\n        }\n        function getValueAtTime(frameNum) {\n            frameNum *= this.elem.globalData.frameRate;\n            frameNum -= this.offsetTime;\n            if (frameNum !== this._cachingAtTime.lastFrame) {\n                this._cachingAtTime.lastIndex = this._cachingAtTime.lastFrame < frameNum ? this._cachingAtTime.lastIndex : 0;\n                this._cachingAtTime.value = this.interpolateValue(frameNum, this._cachingAtTime);\n                this._cachingAtTime.lastFrame = frameNum;\n            }\n            return this._cachingAtTime.value;\n        }\n        function getSpeedAtTime(frameNum) {\n            var delta = -0.01;\n            var v1 = this.getValueAtTime(frameNum);\n            var v2 = this.getValueAtTime(frameNum + delta);\n            var speed = 0;\n            if (v1.length) {\n                var i;\n                for(i = 0; i < v1.length; i += 1){\n                    speed += Math.pow(v2[i] - v1[i], 2);\n                }\n                speed = Math.sqrt(speed) * 100;\n            } else {\n                speed = 0;\n            }\n            return speed;\n        }\n        function getVelocityAtTime(frameNum) {\n            if (this.vel !== undefined) {\n                return this.vel;\n            }\n            var delta = -0.001; // frameNum += this.elem.data.st;\n            var v1 = this.getValueAtTime(frameNum);\n            var v2 = this.getValueAtTime(frameNum + delta);\n            var velocity;\n            if (v1.length) {\n                velocity = createTypedArray(\"float32\", v1.length);\n                var i;\n                for(i = 0; i < v1.length; i += 1){\n                    // removing frameRate\n                    // if needed, don't add it here\n                    // velocity[i] = this.elem.globalData.frameRate*((v2[i] - v1[i])/delta);\n                    velocity[i] = (v2[i] - v1[i]) / delta;\n                }\n            } else {\n                velocity = (v2 - v1) / delta;\n            }\n            return velocity;\n        }\n        function getStaticValueAtTime() {\n            return this.pv;\n        }\n        function setGroupProperty(propertyGroup) {\n            this.propertyGroup = propertyGroup;\n        }\n        return {\n            searchExpressions: searchExpressions,\n            getSpeedAtTime: getSpeedAtTime,\n            getVelocityAtTime: getVelocityAtTime,\n            getValueAtTime: getValueAtTime,\n            getStaticValueAtTime: getStaticValueAtTime,\n            setGroupProperty: setGroupProperty\n        };\n    }();\n    function addPropertyDecorator() {\n        function loopOut(type, duration, durationFlag) {\n            if (!this.k || !this.keyframes) {\n                return this.pv;\n            }\n            type = type ? type.toLowerCase() : \"\";\n            var currentFrame = this.comp.renderedFrame;\n            var keyframes = this.keyframes;\n            var lastKeyFrame = keyframes[keyframes.length - 1].t;\n            if (currentFrame <= lastKeyFrame) {\n                return this.pv;\n            }\n            var cycleDuration;\n            var firstKeyFrame;\n            if (!durationFlag) {\n                if (!duration || duration > keyframes.length - 1) {\n                    duration = keyframes.length - 1;\n                }\n                firstKeyFrame = keyframes[keyframes.length - 1 - duration].t;\n                cycleDuration = lastKeyFrame - firstKeyFrame;\n            } else {\n                if (!duration) {\n                    cycleDuration = Math.max(0, lastKeyFrame - this.elem.data.ip);\n                } else {\n                    cycleDuration = Math.abs(lastKeyFrame - this.elem.comp.globalData.frameRate * duration);\n                }\n                firstKeyFrame = lastKeyFrame - cycleDuration;\n            }\n            var i;\n            var len;\n            var ret;\n            if (type === \"pingpong\") {\n                var iterations = Math.floor((currentFrame - firstKeyFrame) / cycleDuration);\n                if (iterations % 2 !== 0) {\n                    return this.getValueAtTime((cycleDuration - (currentFrame - firstKeyFrame) % cycleDuration + firstKeyFrame) / this.comp.globalData.frameRate, 0); // eslint-disable-line\n                }\n            } else if (type === \"offset\") {\n                var initV = this.getValueAtTime(firstKeyFrame / this.comp.globalData.frameRate, 0);\n                var endV = this.getValueAtTime(lastKeyFrame / this.comp.globalData.frameRate, 0);\n                var current = this.getValueAtTime(((currentFrame - firstKeyFrame) % cycleDuration + firstKeyFrame) / this.comp.globalData.frameRate, 0); // eslint-disable-line\n                var repeats = Math.floor((currentFrame - firstKeyFrame) / cycleDuration);\n                if (this.pv.length) {\n                    ret = new Array(initV.length);\n                    len = ret.length;\n                    for(i = 0; i < len; i += 1){\n                        ret[i] = (endV[i] - initV[i]) * repeats + current[i];\n                    }\n                    return ret;\n                }\n                return (endV - initV) * repeats + current;\n            } else if (type === \"continue\") {\n                var lastValue = this.getValueAtTime(lastKeyFrame / this.comp.globalData.frameRate, 0);\n                var nextLastValue = this.getValueAtTime((lastKeyFrame - 0.001) / this.comp.globalData.frameRate, 0);\n                if (this.pv.length) {\n                    ret = new Array(lastValue.length);\n                    len = ret.length;\n                    for(i = 0; i < len; i += 1){\n                        ret[i] = lastValue[i] + (lastValue[i] - nextLastValue[i]) * ((currentFrame - lastKeyFrame) / this.comp.globalData.frameRate) / 0.0005; // eslint-disable-line\n                    }\n                    return ret;\n                }\n                return lastValue + (lastValue - nextLastValue) * ((currentFrame - lastKeyFrame) / 0.001);\n            }\n            return this.getValueAtTime(((currentFrame - firstKeyFrame) % cycleDuration + firstKeyFrame) / this.comp.globalData.frameRate, 0); // eslint-disable-line\n        }\n        function loopIn(type, duration, durationFlag) {\n            if (!this.k) {\n                return this.pv;\n            }\n            type = type ? type.toLowerCase() : \"\";\n            var currentFrame = this.comp.renderedFrame;\n            var keyframes = this.keyframes;\n            var firstKeyFrame = keyframes[0].t;\n            if (currentFrame >= firstKeyFrame) {\n                return this.pv;\n            }\n            var cycleDuration;\n            var lastKeyFrame;\n            if (!durationFlag) {\n                if (!duration || duration > keyframes.length - 1) {\n                    duration = keyframes.length - 1;\n                }\n                lastKeyFrame = keyframes[duration].t;\n                cycleDuration = lastKeyFrame - firstKeyFrame;\n            } else {\n                if (!duration) {\n                    cycleDuration = Math.max(0, this.elem.data.op - firstKeyFrame);\n                } else {\n                    cycleDuration = Math.abs(this.elem.comp.globalData.frameRate * duration);\n                }\n                lastKeyFrame = firstKeyFrame + cycleDuration;\n            }\n            var i;\n            var len;\n            var ret;\n            if (type === \"pingpong\") {\n                var iterations = Math.floor((firstKeyFrame - currentFrame) / cycleDuration);\n                if (iterations % 2 === 0) {\n                    return this.getValueAtTime(((firstKeyFrame - currentFrame) % cycleDuration + firstKeyFrame) / this.comp.globalData.frameRate, 0); // eslint-disable-line\n                }\n            } else if (type === \"offset\") {\n                var initV = this.getValueAtTime(firstKeyFrame / this.comp.globalData.frameRate, 0);\n                var endV = this.getValueAtTime(lastKeyFrame / this.comp.globalData.frameRate, 0);\n                var current = this.getValueAtTime((cycleDuration - (firstKeyFrame - currentFrame) % cycleDuration + firstKeyFrame) / this.comp.globalData.frameRate, 0);\n                var repeats = Math.floor((firstKeyFrame - currentFrame) / cycleDuration) + 1;\n                if (this.pv.length) {\n                    ret = new Array(initV.length);\n                    len = ret.length;\n                    for(i = 0; i < len; i += 1){\n                        ret[i] = current[i] - (endV[i] - initV[i]) * repeats;\n                    }\n                    return ret;\n                }\n                return current - (endV - initV) * repeats;\n            } else if (type === \"continue\") {\n                var firstValue = this.getValueAtTime(firstKeyFrame / this.comp.globalData.frameRate, 0);\n                var nextFirstValue = this.getValueAtTime((firstKeyFrame + 0.001) / this.comp.globalData.frameRate, 0);\n                if (this.pv.length) {\n                    ret = new Array(firstValue.length);\n                    len = ret.length;\n                    for(i = 0; i < len; i += 1){\n                        ret[i] = firstValue[i] + (firstValue[i] - nextFirstValue[i]) * (firstKeyFrame - currentFrame) / 0.001;\n                    }\n                    return ret;\n                }\n                return firstValue + (firstValue - nextFirstValue) * (firstKeyFrame - currentFrame) / 0.001;\n            }\n            return this.getValueAtTime((cycleDuration - ((firstKeyFrame - currentFrame) % cycleDuration + firstKeyFrame)) / this.comp.globalData.frameRate, 0); // eslint-disable-line\n        }\n        function smooth(width, samples) {\n            if (!this.k) {\n                return this.pv;\n            }\n            width = (width || 0.4) * 0.5;\n            samples = Math.floor(samples || 5);\n            if (samples <= 1) {\n                return this.pv;\n            }\n            var currentTime = this.comp.renderedFrame / this.comp.globalData.frameRate;\n            var initFrame = currentTime - width;\n            var endFrame = currentTime + width;\n            var sampleFrequency = samples > 1 ? (endFrame - initFrame) / (samples - 1) : 1;\n            var i = 0;\n            var j = 0;\n            var value;\n            if (this.pv.length) {\n                value = createTypedArray(\"float32\", this.pv.length);\n            } else {\n                value = 0;\n            }\n            var sampleValue;\n            while(i < samples){\n                sampleValue = this.getValueAtTime(initFrame + i * sampleFrequency);\n                if (this.pv.length) {\n                    for(j = 0; j < this.pv.length; j += 1){\n                        value[j] += sampleValue[j];\n                    }\n                } else {\n                    value += sampleValue;\n                }\n                i += 1;\n            }\n            if (this.pv.length) {\n                for(j = 0; j < this.pv.length; j += 1){\n                    value[j] /= samples;\n                }\n            } else {\n                value /= samples;\n            }\n            return value;\n        }\n        function getTransformValueAtTime(time) {\n            if (!this._transformCachingAtTime) {\n                this._transformCachingAtTime = {\n                    v: new Matrix()\n                };\n            } /// /\n            var matrix = this._transformCachingAtTime.v;\n            matrix.cloneFromProps(this.pre.props);\n            if (this.appliedTransformations < 1) {\n                var anchor = this.a.getValueAtTime(time);\n                matrix.translate(-anchor[0] * this.a.mult, -anchor[1] * this.a.mult, anchor[2] * this.a.mult);\n            }\n            if (this.appliedTransformations < 2) {\n                var scale = this.s.getValueAtTime(time);\n                matrix.scale(scale[0] * this.s.mult, scale[1] * this.s.mult, scale[2] * this.s.mult);\n            }\n            if (this.sk && this.appliedTransformations < 3) {\n                var skew = this.sk.getValueAtTime(time);\n                var skewAxis = this.sa.getValueAtTime(time);\n                matrix.skewFromAxis(-skew * this.sk.mult, skewAxis * this.sa.mult);\n            }\n            if (this.r && this.appliedTransformations < 4) {\n                var rotation = this.r.getValueAtTime(time);\n                matrix.rotate(-rotation * this.r.mult);\n            } else if (!this.r && this.appliedTransformations < 4) {\n                var rotationZ = this.rz.getValueAtTime(time);\n                var rotationY = this.ry.getValueAtTime(time);\n                var rotationX = this.rx.getValueAtTime(time);\n                var orientation = this.or.getValueAtTime(time);\n                matrix.rotateZ(-rotationZ * this.rz.mult).rotateY(rotationY * this.ry.mult).rotateX(rotationX * this.rx.mult).rotateZ(-orientation[2] * this.or.mult).rotateY(orientation[1] * this.or.mult).rotateX(orientation[0] * this.or.mult);\n            }\n            if (this.data.p && this.data.p.s) {\n                var positionX = this.px.getValueAtTime(time);\n                var positionY = this.py.getValueAtTime(time);\n                if (this.data.p.z) {\n                    var positionZ = this.pz.getValueAtTime(time);\n                    matrix.translate(positionX * this.px.mult, positionY * this.py.mult, -positionZ * this.pz.mult);\n                } else {\n                    matrix.translate(positionX * this.px.mult, positionY * this.py.mult, 0);\n                }\n            } else {\n                var position = this.p.getValueAtTime(time);\n                matrix.translate(position[0] * this.p.mult, position[1] * this.p.mult, -position[2] * this.p.mult);\n            }\n            return matrix; /// /\n        }\n        function getTransformStaticValueAtTime() {\n            return this.v.clone(new Matrix());\n        }\n        var getTransformProperty = TransformPropertyFactory.getTransformProperty;\n        TransformPropertyFactory.getTransformProperty = function(elem, data, container) {\n            var prop = getTransformProperty(elem, data, container);\n            if (prop.dynamicProperties.length) {\n                prop.getValueAtTime = getTransformValueAtTime.bind(prop);\n            } else {\n                prop.getValueAtTime = getTransformStaticValueAtTime.bind(prop);\n            }\n            prop.setGroupProperty = expressionHelpers.setGroupProperty;\n            return prop;\n        };\n        var propertyGetProp = PropertyFactory.getProp;\n        PropertyFactory.getProp = function(elem, data, type, mult, container) {\n            var prop = propertyGetProp(elem, data, type, mult, container); // prop.getVelocityAtTime = getVelocityAtTime;\n            // prop.loopOut = loopOut;\n            // prop.loopIn = loopIn;\n            if (prop.kf) {\n                prop.getValueAtTime = expressionHelpers.getValueAtTime.bind(prop);\n            } else {\n                prop.getValueAtTime = expressionHelpers.getStaticValueAtTime.bind(prop);\n            }\n            prop.setGroupProperty = expressionHelpers.setGroupProperty;\n            prop.loopOut = loopOut;\n            prop.loopIn = loopIn;\n            prop.smooth = smooth;\n            prop.getVelocityAtTime = expressionHelpers.getVelocityAtTime.bind(prop);\n            prop.getSpeedAtTime = expressionHelpers.getSpeedAtTime.bind(prop);\n            prop.numKeys = data.a === 1 ? data.k.length : 0;\n            prop.propertyIndex = data.ix;\n            var value = 0;\n            if (type !== 0) {\n                value = createTypedArray(\"float32\", data.a === 1 ? data.k[0].s.length : data.k.length);\n            }\n            prop._cachingAtTime = {\n                lastFrame: initialDefaultFrame,\n                lastIndex: 0,\n                value: value\n            };\n            expressionHelpers.searchExpressions(elem, data, prop);\n            if (prop.k) {\n                container.addDynamicProperty(prop);\n            }\n            return prop;\n        };\n        function getShapeValueAtTime(frameNum) {\n            // For now this caching object is created only when needed instead of creating it when the shape is initialized.\n            if (!this._cachingAtTime) {\n                this._cachingAtTime = {\n                    shapeValue: shapePool.clone(this.pv),\n                    lastIndex: 0,\n                    lastTime: initialDefaultFrame\n                };\n            }\n            frameNum *= this.elem.globalData.frameRate;\n            frameNum -= this.offsetTime;\n            if (frameNum !== this._cachingAtTime.lastTime) {\n                this._cachingAtTime.lastIndex = this._cachingAtTime.lastTime < frameNum ? this._caching.lastIndex : 0;\n                this._cachingAtTime.lastTime = frameNum;\n                this.interpolateShape(frameNum, this._cachingAtTime.shapeValue, this._cachingAtTime);\n            }\n            return this._cachingAtTime.shapeValue;\n        }\n        var ShapePropertyConstructorFunction = ShapePropertyFactory.getConstructorFunction();\n        var KeyframedShapePropertyConstructorFunction = ShapePropertyFactory.getKeyframedConstructorFunction();\n        function ShapeExpressions() {}\n        ShapeExpressions.prototype = {\n            vertices: function vertices(prop, time) {\n                if (this.k) {\n                    this.getValue();\n                }\n                var shapePath = this.v;\n                if (time !== undefined) {\n                    shapePath = this.getValueAtTime(time, 0);\n                }\n                var i;\n                var len = shapePath._length;\n                var vertices = shapePath[prop];\n                var points = shapePath.v;\n                var arr = createSizedArray(len);\n                for(i = 0; i < len; i += 1){\n                    if (prop === \"i\" || prop === \"o\") {\n                        arr[i] = [\n                            vertices[i][0] - points[i][0],\n                            vertices[i][1] - points[i][1]\n                        ];\n                    } else {\n                        arr[i] = [\n                            vertices[i][0],\n                            vertices[i][1]\n                        ];\n                    }\n                }\n                return arr;\n            },\n            points: function points(time) {\n                return this.vertices(\"v\", time);\n            },\n            inTangents: function inTangents(time) {\n                return this.vertices(\"i\", time);\n            },\n            outTangents: function outTangents(time) {\n                return this.vertices(\"o\", time);\n            },\n            isClosed: function isClosed() {\n                return this.v.c;\n            },\n            pointOnPath: function pointOnPath(perc, time) {\n                var shapePath = this.v;\n                if (time !== undefined) {\n                    shapePath = this.getValueAtTime(time, 0);\n                }\n                if (!this._segmentsLength) {\n                    this._segmentsLength = bez.getSegmentsLength(shapePath);\n                }\n                var segmentsLength = this._segmentsLength;\n                var lengths = segmentsLength.lengths;\n                var lengthPos = segmentsLength.totalLength * perc;\n                var i = 0;\n                var len = lengths.length;\n                var accumulatedLength = 0;\n                var pt;\n                while(i < len){\n                    if (accumulatedLength + lengths[i].addedLength > lengthPos) {\n                        var initIndex = i;\n                        var endIndex = shapePath.c && i === len - 1 ? 0 : i + 1;\n                        var segmentPerc = (lengthPos - accumulatedLength) / lengths[i].addedLength;\n                        pt = bez.getPointInSegment(shapePath.v[initIndex], shapePath.v[endIndex], shapePath.o[initIndex], shapePath.i[endIndex], segmentPerc, lengths[i]);\n                        break;\n                    } else {\n                        accumulatedLength += lengths[i].addedLength;\n                    }\n                    i += 1;\n                }\n                if (!pt) {\n                    pt = shapePath.c ? [\n                        shapePath.v[0][0],\n                        shapePath.v[0][1]\n                    ] : [\n                        shapePath.v[shapePath._length - 1][0],\n                        shapePath.v[shapePath._length - 1][1]\n                    ];\n                }\n                return pt;\n            },\n            vectorOnPath: function vectorOnPath(perc, time, vectorType) {\n                // perc doesn't use triple equality because it can be a Number object as well as a primitive.\n                if (perc == 1) {\n                    // eslint-disable-line eqeqeq\n                    perc = this.v.c;\n                } else if (perc == 0) {\n                    // eslint-disable-line eqeqeq\n                    perc = 0.999;\n                }\n                var pt1 = this.pointOnPath(perc, time);\n                var pt2 = this.pointOnPath(perc + 0.001, time);\n                var xLength = pt2[0] - pt1[0];\n                var yLength = pt2[1] - pt1[1];\n                var magnitude = Math.sqrt(Math.pow(xLength, 2) + Math.pow(yLength, 2));\n                if (magnitude === 0) {\n                    return [\n                        0,\n                        0\n                    ];\n                }\n                var unitVector = vectorType === \"tangent\" ? [\n                    xLength / magnitude,\n                    yLength / magnitude\n                ] : [\n                    -yLength / magnitude,\n                    xLength / magnitude\n                ];\n                return unitVector;\n            },\n            tangentOnPath: function tangentOnPath(perc, time) {\n                return this.vectorOnPath(perc, time, \"tangent\");\n            },\n            normalOnPath: function normalOnPath(perc, time) {\n                return this.vectorOnPath(perc, time, \"normal\");\n            },\n            setGroupProperty: expressionHelpers.setGroupProperty,\n            getValueAtTime: expressionHelpers.getStaticValueAtTime\n        };\n        extendPrototype([\n            ShapeExpressions\n        ], ShapePropertyConstructorFunction);\n        extendPrototype([\n            ShapeExpressions\n        ], KeyframedShapePropertyConstructorFunction);\n        KeyframedShapePropertyConstructorFunction.prototype.getValueAtTime = getShapeValueAtTime;\n        KeyframedShapePropertyConstructorFunction.prototype.initiateExpression = ExpressionManager.initiateExpression;\n        var propertyGetShapeProp = ShapePropertyFactory.getShapeProp;\n        ShapePropertyFactory.getShapeProp = function(elem, data, type, arr, trims) {\n            var prop = propertyGetShapeProp(elem, data, type, arr, trims);\n            prop.propertyIndex = data.ix;\n            prop.lock = false;\n            if (type === 3) {\n                expressionHelpers.searchExpressions(elem, data.pt, prop);\n            } else if (type === 4) {\n                expressionHelpers.searchExpressions(elem, data.ks, prop);\n            }\n            if (prop.k) {\n                elem.addDynamicProperty(prop);\n            }\n            return prop;\n        };\n    }\n    function initialize$1() {\n        addPropertyDecorator();\n    }\n    function addDecorator() {\n        function searchExpressions() {\n            if (this.data.d.x) {\n                this.calculateExpression = ExpressionManager.initiateExpression.bind(this)(this.elem, this.data.d, this);\n                this.addEffect(this.getExpressionValue.bind(this));\n                return true;\n            }\n            return null;\n        }\n        TextProperty.prototype.getExpressionValue = function(currentValue, text) {\n            var newValue = this.calculateExpression(text);\n            if (currentValue.t !== newValue) {\n                var newData = {};\n                this.copyData(newData, currentValue);\n                newData.t = newValue.toString();\n                newData.__complete = false;\n                return newData;\n            }\n            return currentValue;\n        };\n        TextProperty.prototype.searchProperty = function() {\n            var isKeyframed = this.searchKeyframes();\n            var hasExpressions = this.searchExpressions();\n            this.kf = isKeyframed || hasExpressions;\n            return this.kf;\n        };\n        TextProperty.prototype.searchExpressions = searchExpressions;\n    }\n    function initialize() {\n        addDecorator();\n    }\n    function SVGComposableEffect() {}\n    SVGComposableEffect.prototype = {\n        createMergeNode: function createMergeNode(resultId, ins) {\n            var feMerge = createNS(\"feMerge\");\n            feMerge.setAttribute(\"result\", resultId);\n            var feMergeNode;\n            var i;\n            for(i = 0; i < ins.length; i += 1){\n                feMergeNode = createNS(\"feMergeNode\");\n                feMergeNode.setAttribute(\"in\", ins[i]);\n                feMerge.appendChild(feMergeNode);\n                feMerge.appendChild(feMergeNode);\n            }\n            return feMerge;\n        }\n    };\n    var linearFilterValue = \"0.3333 0.3333 0.3333 0 0 0.3333 0.3333 0.3333 0 0 0.3333 0.3333 0.3333 0 0 0 0 0\";\n    function SVGTintFilter(filter, filterManager, elem, id, source) {\n        this.filterManager = filterManager;\n        var feColorMatrix = createNS(\"feColorMatrix\");\n        feColorMatrix.setAttribute(\"type\", \"matrix\");\n        feColorMatrix.setAttribute(\"color-interpolation-filters\", \"linearRGB\");\n        feColorMatrix.setAttribute(\"values\", linearFilterValue + \" 1 0\");\n        this.linearFilter = feColorMatrix;\n        feColorMatrix.setAttribute(\"result\", id + \"_tint_1\");\n        filter.appendChild(feColorMatrix);\n        feColorMatrix = createNS(\"feColorMatrix\");\n        feColorMatrix.setAttribute(\"type\", \"matrix\");\n        feColorMatrix.setAttribute(\"color-interpolation-filters\", \"sRGB\");\n        feColorMatrix.setAttribute(\"values\", \"1 0 0 0 0 0 1 0 0 0 0 0 1 0 0 0 0 0 1 0\");\n        feColorMatrix.setAttribute(\"result\", id + \"_tint_2\");\n        filter.appendChild(feColorMatrix);\n        this.matrixFilter = feColorMatrix;\n        var feMerge = this.createMergeNode(id, [\n            source,\n            id + \"_tint_1\",\n            id + \"_tint_2\"\n        ]);\n        filter.appendChild(feMerge);\n    }\n    extendPrototype([\n        SVGComposableEffect\n    ], SVGTintFilter);\n    SVGTintFilter.prototype.renderFrame = function(forceRender) {\n        if (forceRender || this.filterManager._mdf) {\n            var colorBlack = this.filterManager.effectElements[0].p.v;\n            var colorWhite = this.filterManager.effectElements[1].p.v;\n            var opacity = this.filterManager.effectElements[2].p.v / 100;\n            this.linearFilter.setAttribute(\"values\", linearFilterValue + \" \" + opacity + \" 0\");\n            this.matrixFilter.setAttribute(\"values\", colorWhite[0] - colorBlack[0] + \" 0 0 0 \" + colorBlack[0] + \" \" + (colorWhite[1] - colorBlack[1]) + \" 0 0 0 \" + colorBlack[1] + \" \" + (colorWhite[2] - colorBlack[2]) + \" 0 0 0 \" + colorBlack[2] + \" 0 0 0 1 0\");\n        }\n    };\n    function SVGFillFilter(filter, filterManager, elem, id) {\n        this.filterManager = filterManager;\n        var feColorMatrix = createNS(\"feColorMatrix\");\n        feColorMatrix.setAttribute(\"type\", \"matrix\");\n        feColorMatrix.setAttribute(\"color-interpolation-filters\", \"sRGB\");\n        feColorMatrix.setAttribute(\"values\", \"1 0 0 0 0 0 1 0 0 0 0 0 1 0 0 0 0 0 1 0\");\n        feColorMatrix.setAttribute(\"result\", id);\n        filter.appendChild(feColorMatrix);\n        this.matrixFilter = feColorMatrix;\n    }\n    SVGFillFilter.prototype.renderFrame = function(forceRender) {\n        if (forceRender || this.filterManager._mdf) {\n            var color = this.filterManager.effectElements[2].p.v;\n            var opacity = this.filterManager.effectElements[6].p.v;\n            this.matrixFilter.setAttribute(\"values\", \"0 0 0 0 \" + color[0] + \" 0 0 0 0 \" + color[1] + \" 0 0 0 0 \" + color[2] + \" 0 0 0 \" + opacity + \" 0\");\n        }\n    };\n    function SVGStrokeEffect(fil, filterManager, elem) {\n        this.initialized = false;\n        this.filterManager = filterManager;\n        this.elem = elem;\n        this.paths = [];\n    }\n    SVGStrokeEffect.prototype.initialize = function() {\n        var elemChildren = this.elem.layerElement.children || this.elem.layerElement.childNodes;\n        var path;\n        var groupPath;\n        var i;\n        var len;\n        if (this.filterManager.effectElements[1].p.v === 1) {\n            len = this.elem.maskManager.masksProperties.length;\n            i = 0;\n        } else {\n            i = this.filterManager.effectElements[0].p.v - 1;\n            len = i + 1;\n        }\n        groupPath = createNS(\"g\");\n        groupPath.setAttribute(\"fill\", \"none\");\n        groupPath.setAttribute(\"stroke-linecap\", \"round\");\n        groupPath.setAttribute(\"stroke-dashoffset\", 1);\n        for(i; i < len; i += 1){\n            path = createNS(\"path\");\n            groupPath.appendChild(path);\n            this.paths.push({\n                p: path,\n                m: i\n            });\n        }\n        if (this.filterManager.effectElements[10].p.v === 3) {\n            var mask = createNS(\"mask\");\n            var id = createElementID();\n            mask.setAttribute(\"id\", id);\n            mask.setAttribute(\"mask-type\", \"alpha\");\n            mask.appendChild(groupPath);\n            this.elem.globalData.defs.appendChild(mask);\n            var g = createNS(\"g\");\n            g.setAttribute(\"mask\", \"url(\" + getLocationHref() + \"#\" + id + \")\");\n            while(elemChildren[0]){\n                g.appendChild(elemChildren[0]);\n            }\n            this.elem.layerElement.appendChild(g);\n            this.masker = mask;\n            groupPath.setAttribute(\"stroke\", \"#fff\");\n        } else if (this.filterManager.effectElements[10].p.v === 1 || this.filterManager.effectElements[10].p.v === 2) {\n            if (this.filterManager.effectElements[10].p.v === 2) {\n                elemChildren = this.elem.layerElement.children || this.elem.layerElement.childNodes;\n                while(elemChildren.length){\n                    this.elem.layerElement.removeChild(elemChildren[0]);\n                }\n            }\n            this.elem.layerElement.appendChild(groupPath);\n            this.elem.layerElement.removeAttribute(\"mask\");\n            groupPath.setAttribute(\"stroke\", \"#fff\");\n        }\n        this.initialized = true;\n        this.pathMasker = groupPath;\n    };\n    SVGStrokeEffect.prototype.renderFrame = function(forceRender) {\n        if (!this.initialized) {\n            this.initialize();\n        }\n        var i;\n        var len = this.paths.length;\n        var mask;\n        var path;\n        for(i = 0; i < len; i += 1){\n            if (this.paths[i].m !== -1) {\n                mask = this.elem.maskManager.viewData[this.paths[i].m];\n                path = this.paths[i].p;\n                if (forceRender || this.filterManager._mdf || mask.prop._mdf) {\n                    path.setAttribute(\"d\", mask.lastPath);\n                }\n                if (forceRender || this.filterManager.effectElements[9].p._mdf || this.filterManager.effectElements[4].p._mdf || this.filterManager.effectElements[7].p._mdf || this.filterManager.effectElements[8].p._mdf || mask.prop._mdf) {\n                    var dasharrayValue;\n                    if (this.filterManager.effectElements[7].p.v !== 0 || this.filterManager.effectElements[8].p.v !== 100) {\n                        var s = Math.min(this.filterManager.effectElements[7].p.v, this.filterManager.effectElements[8].p.v) * 0.01;\n                        var e = Math.max(this.filterManager.effectElements[7].p.v, this.filterManager.effectElements[8].p.v) * 0.01;\n                        var l = path.getTotalLength();\n                        dasharrayValue = \"0 0 0 \" + l * s + \" \";\n                        var lineLength = l * (e - s);\n                        var segment = 1 + this.filterManager.effectElements[4].p.v * 2 * this.filterManager.effectElements[9].p.v * 0.01;\n                        var units = Math.floor(lineLength / segment);\n                        var j;\n                        for(j = 0; j < units; j += 1){\n                            dasharrayValue += \"1 \" + this.filterManager.effectElements[4].p.v * 2 * this.filterManager.effectElements[9].p.v * 0.01 + \" \";\n                        }\n                        dasharrayValue += \"0 \" + l * 10 + \" 0 0\";\n                    } else {\n                        dasharrayValue = \"1 \" + this.filterManager.effectElements[4].p.v * 2 * this.filterManager.effectElements[9].p.v * 0.01;\n                    }\n                    path.setAttribute(\"stroke-dasharray\", dasharrayValue);\n                }\n            }\n        }\n        if (forceRender || this.filterManager.effectElements[4].p._mdf) {\n            this.pathMasker.setAttribute(\"stroke-width\", this.filterManager.effectElements[4].p.v * 2);\n        }\n        if (forceRender || this.filterManager.effectElements[6].p._mdf) {\n            this.pathMasker.setAttribute(\"opacity\", this.filterManager.effectElements[6].p.v);\n        }\n        if (this.filterManager.effectElements[10].p.v === 1 || this.filterManager.effectElements[10].p.v === 2) {\n            if (forceRender || this.filterManager.effectElements[3].p._mdf) {\n                var color = this.filterManager.effectElements[3].p.v;\n                this.pathMasker.setAttribute(\"stroke\", \"rgb(\" + bmFloor(color[0] * 255) + \",\" + bmFloor(color[1] * 255) + \",\" + bmFloor(color[2] * 255) + \")\");\n            }\n        }\n    };\n    function SVGTritoneFilter(filter, filterManager, elem, id) {\n        this.filterManager = filterManager;\n        var feColorMatrix = createNS(\"feColorMatrix\");\n        feColorMatrix.setAttribute(\"type\", \"matrix\");\n        feColorMatrix.setAttribute(\"color-interpolation-filters\", \"linearRGB\");\n        feColorMatrix.setAttribute(\"values\", \"0.3333 0.3333 0.3333 0 0 0.3333 0.3333 0.3333 0 0 0.3333 0.3333 0.3333 0 0 0 0 0 1 0\");\n        filter.appendChild(feColorMatrix);\n        var feComponentTransfer = createNS(\"feComponentTransfer\");\n        feComponentTransfer.setAttribute(\"color-interpolation-filters\", \"sRGB\");\n        feComponentTransfer.setAttribute(\"result\", id);\n        this.matrixFilter = feComponentTransfer;\n        var feFuncR = createNS(\"feFuncR\");\n        feFuncR.setAttribute(\"type\", \"table\");\n        feComponentTransfer.appendChild(feFuncR);\n        this.feFuncR = feFuncR;\n        var feFuncG = createNS(\"feFuncG\");\n        feFuncG.setAttribute(\"type\", \"table\");\n        feComponentTransfer.appendChild(feFuncG);\n        this.feFuncG = feFuncG;\n        var feFuncB = createNS(\"feFuncB\");\n        feFuncB.setAttribute(\"type\", \"table\");\n        feComponentTransfer.appendChild(feFuncB);\n        this.feFuncB = feFuncB;\n        filter.appendChild(feComponentTransfer);\n    }\n    SVGTritoneFilter.prototype.renderFrame = function(forceRender) {\n        if (forceRender || this.filterManager._mdf) {\n            var color1 = this.filterManager.effectElements[0].p.v;\n            var color2 = this.filterManager.effectElements[1].p.v;\n            var color3 = this.filterManager.effectElements[2].p.v;\n            var tableR = color3[0] + \" \" + color2[0] + \" \" + color1[0];\n            var tableG = color3[1] + \" \" + color2[1] + \" \" + color1[1];\n            var tableB = color3[2] + \" \" + color2[2] + \" \" + color1[2];\n            this.feFuncR.setAttribute(\"tableValues\", tableR);\n            this.feFuncG.setAttribute(\"tableValues\", tableG);\n            this.feFuncB.setAttribute(\"tableValues\", tableB);\n        }\n    };\n    function SVGProLevelsFilter(filter, filterManager, elem, id) {\n        this.filterManager = filterManager;\n        var effectElements = this.filterManager.effectElements;\n        var feComponentTransfer = createNS(\"feComponentTransfer\"); // Red\n        if (effectElements[10].p.k || effectElements[10].p.v !== 0 || effectElements[11].p.k || effectElements[11].p.v !== 1 || effectElements[12].p.k || effectElements[12].p.v !== 1 || effectElements[13].p.k || effectElements[13].p.v !== 0 || effectElements[14].p.k || effectElements[14].p.v !== 1) {\n            this.feFuncR = this.createFeFunc(\"feFuncR\", feComponentTransfer);\n        } // Green\n        if (effectElements[17].p.k || effectElements[17].p.v !== 0 || effectElements[18].p.k || effectElements[18].p.v !== 1 || effectElements[19].p.k || effectElements[19].p.v !== 1 || effectElements[20].p.k || effectElements[20].p.v !== 0 || effectElements[21].p.k || effectElements[21].p.v !== 1) {\n            this.feFuncG = this.createFeFunc(\"feFuncG\", feComponentTransfer);\n        } // Blue\n        if (effectElements[24].p.k || effectElements[24].p.v !== 0 || effectElements[25].p.k || effectElements[25].p.v !== 1 || effectElements[26].p.k || effectElements[26].p.v !== 1 || effectElements[27].p.k || effectElements[27].p.v !== 0 || effectElements[28].p.k || effectElements[28].p.v !== 1) {\n            this.feFuncB = this.createFeFunc(\"feFuncB\", feComponentTransfer);\n        } // Alpha\n        if (effectElements[31].p.k || effectElements[31].p.v !== 0 || effectElements[32].p.k || effectElements[32].p.v !== 1 || effectElements[33].p.k || effectElements[33].p.v !== 1 || effectElements[34].p.k || effectElements[34].p.v !== 0 || effectElements[35].p.k || effectElements[35].p.v !== 1) {\n            this.feFuncA = this.createFeFunc(\"feFuncA\", feComponentTransfer);\n        } // RGB\n        if (this.feFuncR || this.feFuncG || this.feFuncB || this.feFuncA) {\n            feComponentTransfer.setAttribute(\"color-interpolation-filters\", \"sRGB\");\n            filter.appendChild(feComponentTransfer);\n        }\n        if (effectElements[3].p.k || effectElements[3].p.v !== 0 || effectElements[4].p.k || effectElements[4].p.v !== 1 || effectElements[5].p.k || effectElements[5].p.v !== 1 || effectElements[6].p.k || effectElements[6].p.v !== 0 || effectElements[7].p.k || effectElements[7].p.v !== 1) {\n            feComponentTransfer = createNS(\"feComponentTransfer\");\n            feComponentTransfer.setAttribute(\"color-interpolation-filters\", \"sRGB\");\n            feComponentTransfer.setAttribute(\"result\", id);\n            filter.appendChild(feComponentTransfer);\n            this.feFuncRComposed = this.createFeFunc(\"feFuncR\", feComponentTransfer);\n            this.feFuncGComposed = this.createFeFunc(\"feFuncG\", feComponentTransfer);\n            this.feFuncBComposed = this.createFeFunc(\"feFuncB\", feComponentTransfer);\n        }\n    }\n    SVGProLevelsFilter.prototype.createFeFunc = function(type, feComponentTransfer) {\n        var feFunc = createNS(type);\n        feFunc.setAttribute(\"type\", \"table\");\n        feComponentTransfer.appendChild(feFunc);\n        return feFunc;\n    };\n    SVGProLevelsFilter.prototype.getTableValue = function(inputBlack, inputWhite, gamma, outputBlack, outputWhite) {\n        var cnt = 0;\n        var segments = 256;\n        var perc;\n        var min = Math.min(inputBlack, inputWhite);\n        var max = Math.max(inputBlack, inputWhite);\n        var table = Array.call(null, {\n            length: segments\n        });\n        var colorValue;\n        var pos = 0;\n        var outputDelta = outputWhite - outputBlack;\n        var inputDelta = inputWhite - inputBlack;\n        while(cnt <= 256){\n            perc = cnt / 256;\n            if (perc <= min) {\n                colorValue = inputDelta < 0 ? outputWhite : outputBlack;\n            } else if (perc >= max) {\n                colorValue = inputDelta < 0 ? outputBlack : outputWhite;\n            } else {\n                colorValue = outputBlack + outputDelta * Math.pow((perc - inputBlack) / inputDelta, 1 / gamma);\n            }\n            table[pos] = colorValue;\n            pos += 1;\n            cnt += 256 / (segments - 1);\n        }\n        return table.join(\" \");\n    };\n    SVGProLevelsFilter.prototype.renderFrame = function(forceRender) {\n        if (forceRender || this.filterManager._mdf) {\n            var val;\n            var effectElements = this.filterManager.effectElements;\n            if (this.feFuncRComposed && (forceRender || effectElements[3].p._mdf || effectElements[4].p._mdf || effectElements[5].p._mdf || effectElements[6].p._mdf || effectElements[7].p._mdf)) {\n                val = this.getTableValue(effectElements[3].p.v, effectElements[4].p.v, effectElements[5].p.v, effectElements[6].p.v, effectElements[7].p.v);\n                this.feFuncRComposed.setAttribute(\"tableValues\", val);\n                this.feFuncGComposed.setAttribute(\"tableValues\", val);\n                this.feFuncBComposed.setAttribute(\"tableValues\", val);\n            }\n            if (this.feFuncR && (forceRender || effectElements[10].p._mdf || effectElements[11].p._mdf || effectElements[12].p._mdf || effectElements[13].p._mdf || effectElements[14].p._mdf)) {\n                val = this.getTableValue(effectElements[10].p.v, effectElements[11].p.v, effectElements[12].p.v, effectElements[13].p.v, effectElements[14].p.v);\n                this.feFuncR.setAttribute(\"tableValues\", val);\n            }\n            if (this.feFuncG && (forceRender || effectElements[17].p._mdf || effectElements[18].p._mdf || effectElements[19].p._mdf || effectElements[20].p._mdf || effectElements[21].p._mdf)) {\n                val = this.getTableValue(effectElements[17].p.v, effectElements[18].p.v, effectElements[19].p.v, effectElements[20].p.v, effectElements[21].p.v);\n                this.feFuncG.setAttribute(\"tableValues\", val);\n            }\n            if (this.feFuncB && (forceRender || effectElements[24].p._mdf || effectElements[25].p._mdf || effectElements[26].p._mdf || effectElements[27].p._mdf || effectElements[28].p._mdf)) {\n                val = this.getTableValue(effectElements[24].p.v, effectElements[25].p.v, effectElements[26].p.v, effectElements[27].p.v, effectElements[28].p.v);\n                this.feFuncB.setAttribute(\"tableValues\", val);\n            }\n            if (this.feFuncA && (forceRender || effectElements[31].p._mdf || effectElements[32].p._mdf || effectElements[33].p._mdf || effectElements[34].p._mdf || effectElements[35].p._mdf)) {\n                val = this.getTableValue(effectElements[31].p.v, effectElements[32].p.v, effectElements[33].p.v, effectElements[34].p.v, effectElements[35].p.v);\n                this.feFuncA.setAttribute(\"tableValues\", val);\n            }\n        }\n    };\n    function SVGDropShadowEffect(filter, filterManager, elem, id, source) {\n        var globalFilterSize = filterManager.container.globalData.renderConfig.filterSize;\n        var filterSize = filterManager.data.fs || globalFilterSize;\n        filter.setAttribute(\"x\", filterSize.x || globalFilterSize.x);\n        filter.setAttribute(\"y\", filterSize.y || globalFilterSize.y);\n        filter.setAttribute(\"width\", filterSize.width || globalFilterSize.width);\n        filter.setAttribute(\"height\", filterSize.height || globalFilterSize.height);\n        this.filterManager = filterManager;\n        var feGaussianBlur = createNS(\"feGaussianBlur\");\n        feGaussianBlur.setAttribute(\"in\", \"SourceAlpha\");\n        feGaussianBlur.setAttribute(\"result\", id + \"_drop_shadow_1\");\n        feGaussianBlur.setAttribute(\"stdDeviation\", \"0\");\n        this.feGaussianBlur = feGaussianBlur;\n        filter.appendChild(feGaussianBlur);\n        var feOffset = createNS(\"feOffset\");\n        feOffset.setAttribute(\"dx\", \"25\");\n        feOffset.setAttribute(\"dy\", \"0\");\n        feOffset.setAttribute(\"in\", id + \"_drop_shadow_1\");\n        feOffset.setAttribute(\"result\", id + \"_drop_shadow_2\");\n        this.feOffset = feOffset;\n        filter.appendChild(feOffset);\n        var feFlood = createNS(\"feFlood\");\n        feFlood.setAttribute(\"flood-color\", \"#00ff00\");\n        feFlood.setAttribute(\"flood-opacity\", \"1\");\n        feFlood.setAttribute(\"result\", id + \"_drop_shadow_3\");\n        this.feFlood = feFlood;\n        filter.appendChild(feFlood);\n        var feComposite = createNS(\"feComposite\");\n        feComposite.setAttribute(\"in\", id + \"_drop_shadow_3\");\n        feComposite.setAttribute(\"in2\", id + \"_drop_shadow_2\");\n        feComposite.setAttribute(\"operator\", \"in\");\n        feComposite.setAttribute(\"result\", id + \"_drop_shadow_4\");\n        filter.appendChild(feComposite);\n        var feMerge = this.createMergeNode(id, [\n            id + \"_drop_shadow_4\",\n            source\n        ]);\n        filter.appendChild(feMerge); //\n    }\n    extendPrototype([\n        SVGComposableEffect\n    ], SVGDropShadowEffect);\n    SVGDropShadowEffect.prototype.renderFrame = function(forceRender) {\n        if (forceRender || this.filterManager._mdf) {\n            if (forceRender || this.filterManager.effectElements[4].p._mdf) {\n                this.feGaussianBlur.setAttribute(\"stdDeviation\", this.filterManager.effectElements[4].p.v / 4);\n            }\n            if (forceRender || this.filterManager.effectElements[0].p._mdf) {\n                var col = this.filterManager.effectElements[0].p.v;\n                this.feFlood.setAttribute(\"flood-color\", rgbToHex(Math.round(col[0] * 255), Math.round(col[1] * 255), Math.round(col[2] * 255)));\n            }\n            if (forceRender || this.filterManager.effectElements[1].p._mdf) {\n                this.feFlood.setAttribute(\"flood-opacity\", this.filterManager.effectElements[1].p.v / 255);\n            }\n            if (forceRender || this.filterManager.effectElements[2].p._mdf || this.filterManager.effectElements[3].p._mdf) {\n                var distance = this.filterManager.effectElements[3].p.v;\n                var angle = (this.filterManager.effectElements[2].p.v - 90) * degToRads;\n                var x = distance * Math.cos(angle);\n                var y = distance * Math.sin(angle);\n                this.feOffset.setAttribute(\"dx\", x);\n                this.feOffset.setAttribute(\"dy\", y);\n            }\n        }\n    };\n    var _svgMatteSymbols = [];\n    function SVGMatte3Effect(filterElem, filterManager, elem) {\n        this.initialized = false;\n        this.filterManager = filterManager;\n        this.filterElem = filterElem;\n        this.elem = elem;\n        elem.matteElement = createNS(\"g\");\n        elem.matteElement.appendChild(elem.layerElement);\n        elem.matteElement.appendChild(elem.transformedElement);\n        elem.baseElement = elem.matteElement;\n    }\n    SVGMatte3Effect.prototype.findSymbol = function(mask) {\n        var i = 0;\n        var len = _svgMatteSymbols.length;\n        while(i < len){\n            if (_svgMatteSymbols[i] === mask) {\n                return _svgMatteSymbols[i];\n            }\n            i += 1;\n        }\n        return null;\n    };\n    SVGMatte3Effect.prototype.replaceInParent = function(mask, symbolId) {\n        var parentNode = mask.layerElement.parentNode;\n        if (!parentNode) {\n            return;\n        }\n        var children = parentNode.children;\n        var i = 0;\n        var len = children.length;\n        while(i < len){\n            if (children[i] === mask.layerElement) {\n                break;\n            }\n            i += 1;\n        }\n        var nextChild;\n        if (i <= len - 2) {\n            nextChild = children[i + 1];\n        }\n        var useElem = createNS(\"use\");\n        useElem.setAttribute(\"href\", \"#\" + symbolId);\n        if (nextChild) {\n            parentNode.insertBefore(useElem, nextChild);\n        } else {\n            parentNode.appendChild(useElem);\n        }\n    };\n    SVGMatte3Effect.prototype.setElementAsMask = function(elem, mask) {\n        if (!this.findSymbol(mask)) {\n            var symbolId = createElementID();\n            var masker = createNS(\"mask\");\n            masker.setAttribute(\"id\", mask.layerId);\n            masker.setAttribute(\"mask-type\", \"alpha\");\n            _svgMatteSymbols.push(mask);\n            var defs = elem.globalData.defs;\n            defs.appendChild(masker);\n            var symbol = createNS(\"symbol\");\n            symbol.setAttribute(\"id\", symbolId);\n            this.replaceInParent(mask, symbolId);\n            symbol.appendChild(mask.layerElement);\n            defs.appendChild(symbol);\n            var useElem = createNS(\"use\");\n            useElem.setAttribute(\"href\", \"#\" + symbolId);\n            masker.appendChild(useElem);\n            mask.data.hd = false;\n            mask.show();\n        }\n        elem.setMatte(mask.layerId);\n    };\n    SVGMatte3Effect.prototype.initialize = function() {\n        var ind = this.filterManager.effectElements[0].p.v;\n        var elements = this.elem.comp.elements;\n        var i = 0;\n        var len = elements.length;\n        while(i < len){\n            if (elements[i] && elements[i].data.ind === ind) {\n                this.setElementAsMask(this.elem, elements[i]);\n            }\n            i += 1;\n        }\n        this.initialized = true;\n    };\n    SVGMatte3Effect.prototype.renderFrame = function() {\n        if (!this.initialized) {\n            this.initialize();\n        }\n    };\n    function SVGGaussianBlurEffect(filter, filterManager, elem, id) {\n        // Outset the filter region by 100% on all sides to accommodate blur expansion.\n        filter.setAttribute(\"x\", \"-100%\");\n        filter.setAttribute(\"y\", \"-100%\");\n        filter.setAttribute(\"width\", \"300%\");\n        filter.setAttribute(\"height\", \"300%\");\n        this.filterManager = filterManager;\n        var feGaussianBlur = createNS(\"feGaussianBlur\");\n        feGaussianBlur.setAttribute(\"result\", id);\n        filter.appendChild(feGaussianBlur);\n        this.feGaussianBlur = feGaussianBlur;\n    }\n    SVGGaussianBlurEffect.prototype.renderFrame = function(forceRender) {\n        if (forceRender || this.filterManager._mdf) {\n            // Empirical value, matching AE's blur appearance.\n            var kBlurrinessToSigma = 0.3;\n            var sigma = this.filterManager.effectElements[0].p.v * kBlurrinessToSigma; // Dimensions mapping:\n            //\n            //   1 -> horizontal & vertical\n            //   2 -> horizontal only\n            //   3 -> vertical only\n            //\n            var dimensions = this.filterManager.effectElements[1].p.v;\n            var sigmaX = dimensions == 3 ? 0 : sigma; // eslint-disable-line eqeqeq\n            var sigmaY = dimensions == 2 ? 0 : sigma; // eslint-disable-line eqeqeq\n            this.feGaussianBlur.setAttribute(\"stdDeviation\", sigmaX + \" \" + sigmaY); // Repeat edges mapping:\n            //\n            //   0 -> off -> duplicate\n            //   1 -> on  -> wrap\n            var edgeMode = this.filterManager.effectElements[2].p.v == 1 ? \"wrap\" : \"duplicate\"; // eslint-disable-line eqeqeq\n            this.feGaussianBlur.setAttribute(\"edgeMode\", edgeMode);\n        }\n    };\n    function TransformEffect() {}\n    TransformEffect.prototype.init = function(effectsManager) {\n        this.effectsManager = effectsManager;\n        this.type = effectTypes.TRANSFORM_EFFECT;\n        this.matrix = new Matrix();\n        this.opacity = -1;\n        this._mdf = false;\n        this._opMdf = false;\n    };\n    TransformEffect.prototype.renderFrame = function(forceFrame) {\n        this._opMdf = false;\n        this._mdf = false;\n        if (forceFrame || this.effectsManager._mdf) {\n            var effectElements = this.effectsManager.effectElements;\n            var anchor = effectElements[0].p.v;\n            var position = effectElements[1].p.v;\n            var isUniformScale = effectElements[2].p.v === 1;\n            var scaleHeight = effectElements[3].p.v;\n            var scaleWidth = isUniformScale ? scaleHeight : effectElements[4].p.v;\n            var skew = effectElements[5].p.v;\n            var skewAxis = effectElements[6].p.v;\n            var rotation = effectElements[7].p.v;\n            this.matrix.reset();\n            this.matrix.translate(-anchor[0], -anchor[1], anchor[2]);\n            this.matrix.scale(scaleWidth * 0.01, scaleHeight * 0.01, 1);\n            this.matrix.rotate(-rotation * degToRads);\n            this.matrix.skewFromAxis(-skew * degToRads, (skewAxis + 90) * degToRads);\n            this.matrix.translate(position[0], position[1], 0);\n            this._mdf = true;\n            if (this.opacity !== effectElements[8].p.v) {\n                this.opacity = effectElements[8].p.v;\n                this._opMdf = true;\n            }\n        }\n    };\n    function SVGTransformEffect(_, filterManager) {\n        this.init(filterManager);\n    }\n    extendPrototype([\n        TransformEffect\n    ], SVGTransformEffect);\n    function CVTransformEffect(effectsManager) {\n        this.init(effectsManager);\n    }\n    extendPrototype([\n        TransformEffect\n    ], CVTransformEffect);\n    registerRenderer(\"canvas\", CanvasRenderer);\n    registerRenderer(\"html\", HybridRenderer);\n    registerRenderer(\"svg\", SVGRenderer); // Registering shape modifiers\n    ShapeModifiers.registerModifier(\"tm\", TrimModifier);\n    ShapeModifiers.registerModifier(\"pb\", PuckerAndBloatModifier);\n    ShapeModifiers.registerModifier(\"rp\", RepeaterModifier);\n    ShapeModifiers.registerModifier(\"rd\", RoundCornersModifier);\n    ShapeModifiers.registerModifier(\"zz\", ZigZagModifier);\n    ShapeModifiers.registerModifier(\"op\", OffsetPathModifier); // Registering expression plugin\n    setExpressionsPlugin(Expressions);\n    setExpressionInterfaces(getInterface);\n    initialize$1();\n    initialize(); // Registering svg effects\n    registerEffect$1(20, SVGTintFilter, true);\n    registerEffect$1(21, SVGFillFilter, true);\n    registerEffect$1(22, SVGStrokeEffect, false);\n    registerEffect$1(23, SVGTritoneFilter, true);\n    registerEffect$1(24, SVGProLevelsFilter, true);\n    registerEffect$1(25, SVGDropShadowEffect, true);\n    registerEffect$1(28, SVGMatte3Effect, false);\n    registerEffect$1(29, SVGGaussianBlurEffect, true);\n    registerEffect$1(35, SVGTransformEffect, false);\n    registerEffect(35, CVTransformEffect);\n    return lottie;\n});\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/lottie-web/build/player/lottie.js\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/next/dist/compiled/react/cjs/react-jsx-dev-runtime.development.js":
/*!****************************************************************************************!*\
  !*** ./node_modules/next/dist/compiled/react/cjs/react-jsx-dev-runtime.development.js ***!
  \****************************************************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("/**\n * @license React\n * react-jsx-dev-runtime.development.js\n *\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */ \nif (true) {\n    (function() {\n        \"use strict\";\n        var React = __webpack_require__(/*! next/dist/compiled/react */ \"(app-pages-browser)/./node_modules/next/dist/compiled/react/index.js\");\n        // ATTENTION\n        // When adding new symbols to this file,\n        // Please consider also adding to 'react-devtools-shared/src/backend/ReactSymbols'\n        // The Symbol used to tag the ReactElement-like types.\n        var REACT_ELEMENT_TYPE = Symbol.for(\"react.element\");\n        var REACT_PORTAL_TYPE = Symbol.for(\"react.portal\");\n        var REACT_FRAGMENT_TYPE = Symbol.for(\"react.fragment\");\n        var REACT_STRICT_MODE_TYPE = Symbol.for(\"react.strict_mode\");\n        var REACT_PROFILER_TYPE = Symbol.for(\"react.profiler\");\n        var REACT_PROVIDER_TYPE = Symbol.for(\"react.provider\");\n        var REACT_CONTEXT_TYPE = Symbol.for(\"react.context\");\n        var REACT_FORWARD_REF_TYPE = Symbol.for(\"react.forward_ref\");\n        var REACT_SUSPENSE_TYPE = Symbol.for(\"react.suspense\");\n        var REACT_SUSPENSE_LIST_TYPE = Symbol.for(\"react.suspense_list\");\n        var REACT_MEMO_TYPE = Symbol.for(\"react.memo\");\n        var REACT_LAZY_TYPE = Symbol.for(\"react.lazy\");\n        var REACT_OFFSCREEN_TYPE = Symbol.for(\"react.offscreen\");\n        var REACT_CACHE_TYPE = Symbol.for(\"react.cache\");\n        var MAYBE_ITERATOR_SYMBOL = Symbol.iterator;\n        var FAUX_ITERATOR_SYMBOL = \"@@iterator\";\n        function getIteratorFn(maybeIterable) {\n            if (maybeIterable === null || typeof maybeIterable !== \"object\") {\n                return null;\n            }\n            var maybeIterator = MAYBE_ITERATOR_SYMBOL && maybeIterable[MAYBE_ITERATOR_SYMBOL] || maybeIterable[FAUX_ITERATOR_SYMBOL];\n            if (typeof maybeIterator === \"function\") {\n                return maybeIterator;\n            }\n            return null;\n        }\n        var ReactSharedInternals = React.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED;\n        function error(format) {\n            {\n                {\n                    for(var _len2 = arguments.length, args = new Array(_len2 > 1 ? _len2 - 1 : 0), _key2 = 1; _key2 < _len2; _key2++){\n                        args[_key2 - 1] = arguments[_key2];\n                    }\n                    printWarning(\"error\", format, args);\n                }\n            }\n        }\n        function printWarning(level, format, args) {\n            // When changing this logic, you might want to also\n            // update consoleWithStackDev.www.js as well.\n            {\n                var ReactDebugCurrentFrame = ReactSharedInternals.ReactDebugCurrentFrame;\n                var stack = ReactDebugCurrentFrame.getStackAddendum();\n                if (stack !== \"\") {\n                    format += \"%s\";\n                    args = args.concat([\n                        stack\n                    ]);\n                } // eslint-disable-next-line react-internal/safe-string-coercion\n                var argsWithFormat = args.map(function(item) {\n                    return String(item);\n                }); // Careful: RN currently depends on this prefix\n                argsWithFormat.unshift(\"Warning: \" + format); // We intentionally don't use spread (or .apply) directly because it\n                // breaks IE9: https://github.com/facebook/react/issues/13610\n                // eslint-disable-next-line react-internal/no-production-logging\n                Function.prototype.apply.call(console[level], console, argsWithFormat);\n            }\n        }\n        // -----------------------------------------------------------------------------\n        var enableScopeAPI = false; // Experimental Create Event Handle API.\n        var enableCacheElement = false;\n        var enableTransitionTracing = false; // No known bugs, but needs performance testing\n        var enableLegacyHidden = false; // Enables unstable_avoidThisFallback feature in Fiber\n        // stuff. Intended to enable React core members to more easily debug scheduling\n        // issues in DEV builds.\n        var enableDebugTracing = false;\n        var REACT_CLIENT_REFERENCE$2 = Symbol.for(\"react.client.reference\");\n        function isValidElementType(type) {\n            if (typeof type === \"string\" || typeof type === \"function\") {\n                return true;\n            } // Note: typeof might be other than 'symbol' or 'number' (e.g. if it's a polyfill).\n            if (type === REACT_FRAGMENT_TYPE || type === REACT_PROFILER_TYPE || enableDebugTracing || type === REACT_STRICT_MODE_TYPE || type === REACT_SUSPENSE_TYPE || type === REACT_SUSPENSE_LIST_TYPE || enableLegacyHidden || type === REACT_OFFSCREEN_TYPE || enableScopeAPI || enableCacheElement || enableTransitionTracing) {\n                return true;\n            }\n            if (typeof type === \"object\" && type !== null) {\n                if (type.$$typeof === REACT_LAZY_TYPE || type.$$typeof === REACT_MEMO_TYPE || type.$$typeof === REACT_PROVIDER_TYPE || type.$$typeof === REACT_CONTEXT_TYPE || type.$$typeof === REACT_FORWARD_REF_TYPE || // This needs to include all possible module reference object\n                // types supported by any Flight configuration anywhere since\n                // we don't know which Flight build this will end up being used\n                // with.\n                type.$$typeof === REACT_CLIENT_REFERENCE$2 || type.getModuleId !== undefined) {\n                    return true;\n                }\n            }\n            return false;\n        }\n        function getWrappedName(outerType, innerType, wrapperName) {\n            var displayName = outerType.displayName;\n            if (displayName) {\n                return displayName;\n            }\n            var functionName = innerType.displayName || innerType.name || \"\";\n            return functionName !== \"\" ? wrapperName + \"(\" + functionName + \")\" : wrapperName;\n        } // Keep in sync with react-reconciler/getComponentNameFromFiber\n        function getContextName(type) {\n            return type.displayName || \"Context\";\n        }\n        var REACT_CLIENT_REFERENCE$1 = Symbol.for(\"react.client.reference\"); // Note that the reconciler package should generally prefer to use getComponentNameFromFiber() instead.\n        function getComponentNameFromType(type) {\n            if (type == null) {\n                // Host root, text node or just invalid type.\n                return null;\n            }\n            if (typeof type === \"function\") {\n                if (type.$$typeof === REACT_CLIENT_REFERENCE$1) {\n                    // TODO: Create a convention for naming client references with debug info.\n                    return null;\n                }\n                return type.displayName || type.name || null;\n            }\n            if (typeof type === \"string\") {\n                return type;\n            }\n            switch(type){\n                case REACT_FRAGMENT_TYPE:\n                    return \"Fragment\";\n                case REACT_PORTAL_TYPE:\n                    return \"Portal\";\n                case REACT_PROFILER_TYPE:\n                    return \"Profiler\";\n                case REACT_STRICT_MODE_TYPE:\n                    return \"StrictMode\";\n                case REACT_SUSPENSE_TYPE:\n                    return \"Suspense\";\n                case REACT_SUSPENSE_LIST_TYPE:\n                    return \"SuspenseList\";\n                case REACT_CACHE_TYPE:\n                    {\n                        return \"Cache\";\n                    }\n            }\n            if (typeof type === \"object\") {\n                {\n                    if (typeof type.tag === \"number\") {\n                        error(\"Received an unexpected object in getComponentNameFromType(). \" + \"This is likely a bug in React. Please file an issue.\");\n                    }\n                }\n                switch(type.$$typeof){\n                    case REACT_CONTEXT_TYPE:\n                        var context = type;\n                        return getContextName(context) + \".Consumer\";\n                    case REACT_PROVIDER_TYPE:\n                        var provider = type;\n                        return getContextName(provider._context) + \".Provider\";\n                    case REACT_FORWARD_REF_TYPE:\n                        return getWrappedName(type, type.render, \"ForwardRef\");\n                    case REACT_MEMO_TYPE:\n                        var outerName = type.displayName || null;\n                        if (outerName !== null) {\n                            return outerName;\n                        }\n                        return getComponentNameFromType(type.type) || \"Memo\";\n                    case REACT_LAZY_TYPE:\n                        {\n                            var lazyComponent = type;\n                            var payload = lazyComponent._payload;\n                            var init = lazyComponent._init;\n                            try {\n                                return getComponentNameFromType(init(payload));\n                            } catch (x) {\n                                return null;\n                            }\n                        }\n                }\n            }\n            return null;\n        }\n        var assign = Object.assign;\n        // Helpers to patch console.logs to avoid logging during side-effect free\n        // replaying on render function. This currently only patches the object\n        // lazily which won't cover if the log function was extracted eagerly.\n        // We could also eagerly patch the method.\n        var disabledDepth = 0;\n        var prevLog;\n        var prevInfo;\n        var prevWarn;\n        var prevError;\n        var prevGroup;\n        var prevGroupCollapsed;\n        var prevGroupEnd;\n        function disabledLog() {}\n        disabledLog.__reactDisabledLog = true;\n        function disableLogs() {\n            {\n                if (disabledDepth === 0) {\n                    /* eslint-disable react-internal/no-production-logging */ prevLog = console.log;\n                    prevInfo = console.info;\n                    prevWarn = console.warn;\n                    prevError = console.error;\n                    prevGroup = console.group;\n                    prevGroupCollapsed = console.groupCollapsed;\n                    prevGroupEnd = console.groupEnd; // https://github.com/facebook/react/issues/19099\n                    var props = {\n                        configurable: true,\n                        enumerable: true,\n                        value: disabledLog,\n                        writable: true\n                    }; // $FlowFixMe[cannot-write] Flow thinks console is immutable.\n                    Object.defineProperties(console, {\n                        info: props,\n                        log: props,\n                        warn: props,\n                        error: props,\n                        group: props,\n                        groupCollapsed: props,\n                        groupEnd: props\n                    });\n                /* eslint-enable react-internal/no-production-logging */ }\n                disabledDepth++;\n            }\n        }\n        function reenableLogs() {\n            {\n                disabledDepth--;\n                if (disabledDepth === 0) {\n                    /* eslint-disable react-internal/no-production-logging */ var props = {\n                        configurable: true,\n                        enumerable: true,\n                        writable: true\n                    }; // $FlowFixMe[cannot-write] Flow thinks console is immutable.\n                    Object.defineProperties(console, {\n                        log: assign({}, props, {\n                            value: prevLog\n                        }),\n                        info: assign({}, props, {\n                            value: prevInfo\n                        }),\n                        warn: assign({}, props, {\n                            value: prevWarn\n                        }),\n                        error: assign({}, props, {\n                            value: prevError\n                        }),\n                        group: assign({}, props, {\n                            value: prevGroup\n                        }),\n                        groupCollapsed: assign({}, props, {\n                            value: prevGroupCollapsed\n                        }),\n                        groupEnd: assign({}, props, {\n                            value: prevGroupEnd\n                        })\n                    });\n                /* eslint-enable react-internal/no-production-logging */ }\n                if (disabledDepth < 0) {\n                    error(\"disabledDepth fell below zero. \" + \"This is a bug in React. Please file an issue.\");\n                }\n            }\n        }\n        var ReactCurrentDispatcher = ReactSharedInternals.ReactCurrentDispatcher;\n        var prefix;\n        function describeBuiltInComponentFrame(name, source, ownerFn) {\n            {\n                if (prefix === undefined) {\n                    // Extract the VM specific prefix used by each line.\n                    try {\n                        throw Error();\n                    } catch (x) {\n                        var match = x.stack.trim().match(/\\n( *(at )?)/);\n                        prefix = match && match[1] || \"\";\n                    }\n                } // We use the prefix to ensure our stacks line up with native stack frames.\n                return \"\\n\" + prefix + name;\n            }\n        }\n        var reentry = false;\n        var componentFrameCache;\n        {\n            var PossiblyWeakMap = typeof WeakMap === \"function\" ? WeakMap : Map;\n            componentFrameCache = new PossiblyWeakMap();\n        }\n        /**\n * Leverages native browser/VM stack frames to get proper details (e.g.\n * filename, line + col number) for a single component in a component stack. We\n * do this by:\n *   (1) throwing and catching an error in the function - this will be our\n *       control error.\n *   (2) calling the component which will eventually throw an error that we'll\n *       catch - this will be our sample error.\n *   (3) diffing the control and sample error stacks to find the stack frame\n *       which represents our component.\n */ function describeNativeComponentFrame(fn, construct) {\n            // If something asked for a stack inside a fake render, it should get ignored.\n            if (!fn || reentry) {\n                return \"\";\n            }\n            {\n                var frame = componentFrameCache.get(fn);\n                if (frame !== undefined) {\n                    return frame;\n                }\n            }\n            reentry = true;\n            var previousPrepareStackTrace = Error.prepareStackTrace; // $FlowFixMe[incompatible-type] It does accept undefined.\n            Error.prepareStackTrace = undefined;\n            var previousDispatcher;\n            {\n                previousDispatcher = ReactCurrentDispatcher.current; // Set the dispatcher in DEV because this might be call in the render function\n                // for warnings.\n                ReactCurrentDispatcher.current = null;\n                disableLogs();\n            }\n            /**\n   * Finding a common stack frame between sample and control errors can be\n   * tricky given the different types and levels of stack trace truncation from\n   * different JS VMs. So instead we'll attempt to control what that common\n   * frame should be through this object method:\n   * Having both the sample and control errors be in the function under the\n   * `DescribeNativeComponentFrameRoot` property, + setting the `name` and\n   * `displayName` properties of the function ensures that a stack\n   * frame exists that has the method name `DescribeNativeComponentFrameRoot` in\n   * it for both control and sample stacks.\n   */ var RunInRootFrame = {\n                DetermineComponentFrameRoot: function() {\n                    var control;\n                    try {\n                        // This should throw.\n                        if (construct) {\n                            // Something should be setting the props in the constructor.\n                            var Fake = function() {\n                                throw Error();\n                            }; // $FlowFixMe[prop-missing]\n                            Object.defineProperty(Fake.prototype, \"props\", {\n                                set: function() {\n                                    // We use a throwing setter instead of frozen or non-writable props\n                                    // because that won't throw in a non-strict mode function.\n                                    throw Error();\n                                }\n                            });\n                            if (typeof Reflect === \"object\" && Reflect.construct) {\n                                // We construct a different control for this case to include any extra\n                                // frames added by the construct call.\n                                try {\n                                    Reflect.construct(Fake, []);\n                                } catch (x) {\n                                    control = x;\n                                }\n                                Reflect.construct(fn, [], Fake);\n                            } else {\n                                try {\n                                    Fake.call();\n                                } catch (x) {\n                                    control = x;\n                                } // $FlowFixMe[prop-missing] found when upgrading Flow\n                                fn.call(Fake.prototype);\n                            }\n                        } else {\n                            try {\n                                throw Error();\n                            } catch (x) {\n                                control = x;\n                            } // TODO(luna): This will currently only throw if the function component\n                            // tries to access React/ReactDOM/props. We should probably make this throw\n                            // in simple components too\n                            var maybePromise = fn(); // If the function component returns a promise, it's likely an async\n                            // component, which we don't yet support. Attach a noop catch handler to\n                            // silence the error.\n                            // TODO: Implement component stacks for async client components?\n                            if (maybePromise && typeof maybePromise.catch === \"function\") {\n                                maybePromise.catch(function() {});\n                            }\n                        }\n                    } catch (sample) {\n                        // This is inlined manually because closure doesn't do it for us.\n                        if (sample && control && typeof sample.stack === \"string\") {\n                            return [\n                                sample.stack,\n                                control.stack\n                            ];\n                        }\n                    }\n                    return [\n                        null,\n                        null\n                    ];\n                }\n            }; // $FlowFixMe[prop-missing]\n            RunInRootFrame.DetermineComponentFrameRoot.displayName = \"DetermineComponentFrameRoot\";\n            var namePropDescriptor = Object.getOwnPropertyDescriptor(RunInRootFrame.DetermineComponentFrameRoot, \"name\"); // Before ES6, the `name` property was not configurable.\n            if (namePropDescriptor && namePropDescriptor.configurable) {\n                // V8 utilizes a function's `name` property when generating a stack trace.\n                Object.defineProperty(RunInRootFrame.DetermineComponentFrameRoot, // is set to `false`.\n                // $FlowFixMe[cannot-write]\n                \"name\", {\n                    value: \"DetermineComponentFrameRoot\"\n                });\n            }\n            try {\n                var _RunInRootFrame$Deter = RunInRootFrame.DetermineComponentFrameRoot(), sampleStack = _RunInRootFrame$Deter[0], controlStack = _RunInRootFrame$Deter[1];\n                if (sampleStack && controlStack) {\n                    // This extracts the first frame from the sample that isn't also in the control.\n                    // Skipping one frame that we assume is the frame that calls the two.\n                    var sampleLines = sampleStack.split(\"\\n\");\n                    var controlLines = controlStack.split(\"\\n\");\n                    var s = 0;\n                    var c = 0;\n                    while(s < sampleLines.length && !sampleLines[s].includes(\"DetermineComponentFrameRoot\")){\n                        s++;\n                    }\n                    while(c < controlLines.length && !controlLines[c].includes(\"DetermineComponentFrameRoot\")){\n                        c++;\n                    } // We couldn't find our intentionally injected common root frame, attempt\n                    // to find another common root frame by search from the bottom of the\n                    // control stack...\n                    if (s === sampleLines.length || c === controlLines.length) {\n                        s = sampleLines.length - 1;\n                        c = controlLines.length - 1;\n                        while(s >= 1 && c >= 0 && sampleLines[s] !== controlLines[c]){\n                            // We expect at least one stack frame to be shared.\n                            // Typically this will be the root most one. However, stack frames may be\n                            // cut off due to maximum stack limits. In this case, one maybe cut off\n                            // earlier than the other. We assume that the sample is longer or the same\n                            // and there for cut off earlier. So we should find the root most frame in\n                            // the sample somewhere in the control.\n                            c--;\n                        }\n                    }\n                    for(; s >= 1 && c >= 0; s--, c--){\n                        // Next we find the first one that isn't the same which should be the\n                        // frame that called our sample function and the control.\n                        if (sampleLines[s] !== controlLines[c]) {\n                            // In V8, the first line is describing the message but other VMs don't.\n                            // If we're about to return the first line, and the control is also on the same\n                            // line, that's a pretty good indicator that our sample threw at same line as\n                            // the control. I.e. before we entered the sample frame. So we ignore this result.\n                            // This can happen if you passed a class to function component, or non-function.\n                            if (s !== 1 || c !== 1) {\n                                do {\n                                    s--;\n                                    c--; // We may still have similar intermediate frames from the construct call.\n                                    // The next one that isn't the same should be our match though.\n                                    if (c < 0 || sampleLines[s] !== controlLines[c]) {\n                                        // V8 adds a \"new\" prefix for native classes. Let's remove it to make it prettier.\n                                        var _frame = \"\\n\" + sampleLines[s].replace(\" at new \", \" at \"); // If our component frame is labeled \"<anonymous>\"\n                                        // but we have a user-provided \"displayName\"\n                                        // splice it in to make the stack more readable.\n                                        if (fn.displayName && _frame.includes(\"<anonymous>\")) {\n                                            _frame = _frame.replace(\"<anonymous>\", fn.displayName);\n                                        }\n                                        if (true) {\n                                            if (typeof fn === \"function\") {\n                                                componentFrameCache.set(fn, _frame);\n                                            }\n                                        } // Return the line we found.\n                                        return _frame;\n                                    }\n                                }while (s >= 1 && c >= 0);\n                            }\n                            break;\n                        }\n                    }\n                }\n            } finally{\n                reentry = false;\n                {\n                    ReactCurrentDispatcher.current = previousDispatcher;\n                    reenableLogs();\n                }\n                Error.prepareStackTrace = previousPrepareStackTrace;\n            } // Fallback to just using the name if we couldn't make it throw.\n            var name = fn ? fn.displayName || fn.name : \"\";\n            var syntheticFrame = name ? describeBuiltInComponentFrame(name) : \"\";\n            {\n                if (typeof fn === \"function\") {\n                    componentFrameCache.set(fn, syntheticFrame);\n                }\n            }\n            return syntheticFrame;\n        }\n        function describeFunctionComponentFrame(fn, source, ownerFn) {\n            {\n                return describeNativeComponentFrame(fn, false);\n            }\n        }\n        function shouldConstruct(Component) {\n            var prototype = Component.prototype;\n            return !!(prototype && prototype.isReactComponent);\n        }\n        function describeUnknownElementTypeFrameInDEV(type, source, ownerFn) {\n            if (type == null) {\n                return \"\";\n            }\n            if (typeof type === \"function\") {\n                {\n                    return describeNativeComponentFrame(type, shouldConstruct(type));\n                }\n            }\n            if (typeof type === \"string\") {\n                return describeBuiltInComponentFrame(type);\n            }\n            switch(type){\n                case REACT_SUSPENSE_TYPE:\n                    return describeBuiltInComponentFrame(\"Suspense\");\n                case REACT_SUSPENSE_LIST_TYPE:\n                    return describeBuiltInComponentFrame(\"SuspenseList\");\n            }\n            if (typeof type === \"object\") {\n                switch(type.$$typeof){\n                    case REACT_FORWARD_REF_TYPE:\n                        return describeFunctionComponentFrame(type.render);\n                    case REACT_MEMO_TYPE:\n                        // Memo may contain any component type so we recursively resolve it.\n                        return describeUnknownElementTypeFrameInDEV(type.type, source, ownerFn);\n                    case REACT_LAZY_TYPE:\n                        {\n                            var lazyComponent = type;\n                            var payload = lazyComponent._payload;\n                            var init = lazyComponent._init;\n                            try {\n                                // Lazy may contain any component type so we recursively resolve it.\n                                return describeUnknownElementTypeFrameInDEV(init(payload), source, ownerFn);\n                            } catch (x) {}\n                        }\n                }\n            }\n            return \"\";\n        }\n        // $FlowFixMe[method-unbinding]\n        var hasOwnProperty = Object.prototype.hasOwnProperty;\n        var loggedTypeFailures = {};\n        var ReactDebugCurrentFrame$1 = ReactSharedInternals.ReactDebugCurrentFrame;\n        function setCurrentlyValidatingElement$1(element) {\n            {\n                if (element) {\n                    var owner = element._owner;\n                    var stack = describeUnknownElementTypeFrameInDEV(element.type, element._source, owner ? owner.type : null);\n                    ReactDebugCurrentFrame$1.setExtraStackFrame(stack);\n                } else {\n                    ReactDebugCurrentFrame$1.setExtraStackFrame(null);\n                }\n            }\n        }\n        function checkPropTypes(typeSpecs, values, location, componentName, element) {\n            {\n                // $FlowFixMe[incompatible-use] This is okay but Flow doesn't know it.\n                var has = Function.call.bind(hasOwnProperty);\n                for(var typeSpecName in typeSpecs){\n                    if (has(typeSpecs, typeSpecName)) {\n                        var error$1 = void 0; // Prop type validation may throw. In case they do, we don't want to\n                        // fail the render phase where it didn't fail before. So we log it.\n                        // After these have been cleaned up, we'll let them throw.\n                        try {\n                            // This is intentionally an invariant that gets caught. It's the same\n                            // behavior as without this statement except with a better message.\n                            if (typeof typeSpecs[typeSpecName] !== \"function\") {\n                                // eslint-disable-next-line react-internal/prod-error-codes\n                                var err = Error((componentName || \"React class\") + \": \" + location + \" type `\" + typeSpecName + \"` is invalid; \" + \"it must be a function, usually from the `prop-types` package, but received `\" + typeof typeSpecs[typeSpecName] + \"`.\" + \"This often happens because of typos such as `PropTypes.function` instead of `PropTypes.func`.\");\n                                err.name = \"Invariant Violation\";\n                                throw err;\n                            }\n                            error$1 = typeSpecs[typeSpecName](values, typeSpecName, componentName, location, null, \"SECRET_DO_NOT_PASS_THIS_OR_YOU_WILL_BE_FIRED\");\n                        } catch (ex) {\n                            error$1 = ex;\n                        }\n                        if (error$1 && !(error$1 instanceof Error)) {\n                            setCurrentlyValidatingElement$1(element);\n                            error(\"%s: type specification of %s\" + \" `%s` is invalid; the type checker \" + \"function must return `null` or an `Error` but returned a %s. \" + \"You may have forgotten to pass an argument to the type checker \" + \"creator (arrayOf, instanceOf, objectOf, oneOf, oneOfType, and \" + \"shape all require an argument).\", componentName || \"React class\", location, typeSpecName, typeof error$1);\n                            setCurrentlyValidatingElement$1(null);\n                        }\n                        if (error$1 instanceof Error && !(error$1.message in loggedTypeFailures)) {\n                            // Only monitor this failure once because there tends to be a lot of the\n                            // same error.\n                            loggedTypeFailures[error$1.message] = true;\n                            setCurrentlyValidatingElement$1(element);\n                            error(\"Failed %s type: %s\", location, error$1.message);\n                            setCurrentlyValidatingElement$1(null);\n                        }\n                    }\n                }\n            }\n        }\n        var isArrayImpl = Array.isArray; // eslint-disable-next-line no-redeclare\n        function isArray(a) {\n            return isArrayImpl(a);\n        }\n        /*\n * The `'' + value` pattern (used in perf-sensitive code) throws for Symbol\n * and Temporal.* types. See https://github.com/facebook/react/pull/22064.\n *\n * The functions in this module will throw an easier-to-understand,\n * easier-to-debug exception with a clear errors message message explaining the\n * problem. (Instead of a confusing exception thrown inside the implementation\n * of the `value` object).\n */ // $FlowFixMe[incompatible-return] only called in DEV, so void return is not possible.\n        function typeName(value) {\n            {\n                // toStringTag is needed for namespaced types like Temporal.Instant\n                var hasToStringTag = typeof Symbol === \"function\" && Symbol.toStringTag;\n                var type = hasToStringTag && value[Symbol.toStringTag] || value.constructor.name || \"Object\"; // $FlowFixMe[incompatible-return]\n                return type;\n            }\n        } // $FlowFixMe[incompatible-return] only called in DEV, so void return is not possible.\n        function willCoercionThrow(value) {\n            {\n                try {\n                    testStringCoercion(value);\n                    return false;\n                } catch (e) {\n                    return true;\n                }\n            }\n        }\n        function testStringCoercion(value) {\n            // If you ended up here by following an exception call stack, here's what's\n            // happened: you supplied an object or symbol value to React (as a prop, key,\n            // DOM attribute, CSS property, string ref, etc.) and when React tried to\n            // coerce it to a string using `'' + value`, an exception was thrown.\n            //\n            // The most common types that will cause this exception are `Symbol` instances\n            // and Temporal objects like `Temporal.Instant`. But any object that has a\n            // `valueOf` or `[Symbol.toPrimitive]` method that throws will also cause this\n            // exception. (Library authors do this to prevent users from using built-in\n            // numeric operators like `+` or comparison operators like `>=` because custom\n            // methods are needed to perform accurate arithmetic or comparison.)\n            //\n            // To fix the problem, coerce this object or symbol value to a string before\n            // passing it to React. The most reliable way is usually `String(value)`.\n            //\n            // To find which value is throwing, check the browser or debugger console.\n            // Before this exception was thrown, there should be `console.error` output\n            // that shows the type (Symbol, Temporal.PlainDate, etc.) that caused the\n            // problem and how that type was used: key, atrribute, input value prop, etc.\n            // In most cases, this console output also shows the component and its\n            // ancestor components where the exception happened.\n            //\n            // eslint-disable-next-line react-internal/safe-string-coercion\n            return \"\" + value;\n        }\n        function checkKeyStringCoercion(value) {\n            {\n                if (willCoercionThrow(value)) {\n                    error(\"The provided key is an unsupported type %s.\" + \" This value must be coerced to a string before using it here.\", typeName(value));\n                    return testStringCoercion(value); // throw (to help callers find troubleshooting comments)\n                }\n            }\n        }\n        var ReactCurrentOwner$1 = ReactSharedInternals.ReactCurrentOwner;\n        var RESERVED_PROPS = {\n            key: true,\n            ref: true,\n            __self: true,\n            __source: true\n        };\n        var specialPropKeyWarningShown;\n        var specialPropRefWarningShown;\n        var didWarnAboutStringRefs;\n        {\n            didWarnAboutStringRefs = {};\n        }\n        function hasValidRef(config) {\n            {\n                if (hasOwnProperty.call(config, \"ref\")) {\n                    var getter = Object.getOwnPropertyDescriptor(config, \"ref\").get;\n                    if (getter && getter.isReactWarning) {\n                        return false;\n                    }\n                }\n            }\n            return config.ref !== undefined;\n        }\n        function hasValidKey(config) {\n            {\n                if (hasOwnProperty.call(config, \"key\")) {\n                    var getter = Object.getOwnPropertyDescriptor(config, \"key\").get;\n                    if (getter && getter.isReactWarning) {\n                        return false;\n                    }\n                }\n            }\n            return config.key !== undefined;\n        }\n        function warnIfStringRefCannotBeAutoConverted(config, self) {\n            {\n                if (typeof config.ref === \"string\" && ReactCurrentOwner$1.current && self && ReactCurrentOwner$1.current.stateNode !== self) {\n                    var componentName = getComponentNameFromType(ReactCurrentOwner$1.current.type);\n                    if (!didWarnAboutStringRefs[componentName]) {\n                        error('Component \"%s\" contains the string ref \"%s\". ' + \"Support for string refs will be removed in a future major release. \" + \"This case cannot be automatically converted to an arrow function. \" + \"We ask you to manually fix this case by using useRef() or createRef() instead. \" + \"Learn more about using refs safely here: \" + \"https://reactjs.org/link/strict-mode-string-ref\", getComponentNameFromType(ReactCurrentOwner$1.current.type), config.ref);\n                        didWarnAboutStringRefs[componentName] = true;\n                    }\n                }\n            }\n        }\n        function defineKeyPropWarningGetter(props, displayName) {\n            {\n                var warnAboutAccessingKey = function() {\n                    if (!specialPropKeyWarningShown) {\n                        specialPropKeyWarningShown = true;\n                        error(\"%s: `key` is not a prop. Trying to access it will result \" + \"in `undefined` being returned. If you need to access the same \" + \"value within the child component, you should pass it as a different \" + \"prop. (https://reactjs.org/link/special-props)\", displayName);\n                    }\n                };\n                warnAboutAccessingKey.isReactWarning = true;\n                Object.defineProperty(props, \"key\", {\n                    get: warnAboutAccessingKey,\n                    configurable: true\n                });\n            }\n        }\n        function defineRefPropWarningGetter(props, displayName) {\n            {\n                var warnAboutAccessingRef = function() {\n                    if (!specialPropRefWarningShown) {\n                        specialPropRefWarningShown = true;\n                        error(\"%s: `ref` is not a prop. Trying to access it will result \" + \"in `undefined` being returned. If you need to access the same \" + \"value within the child component, you should pass it as a different \" + \"prop. (https://reactjs.org/link/special-props)\", displayName);\n                    }\n                };\n                warnAboutAccessingRef.isReactWarning = true;\n                Object.defineProperty(props, \"ref\", {\n                    get: warnAboutAccessingRef,\n                    configurable: true\n                });\n            }\n        }\n        /**\n * Factory method to create a new React element. This no longer adheres to\n * the class pattern, so do not use new to call it. Also, instanceof check\n * will not work. Instead test $$typeof field against Symbol.for('react.element') to check\n * if something is a React Element.\n *\n * @param {*} type\n * @param {*} props\n * @param {*} key\n * @param {string|object} ref\n * @param {*} owner\n * @param {*} self A *temporary* helper to detect places where `this` is\n * different from the `owner` when React.createElement is called, so that we\n * can warn. We want to get rid of owner and replace string `ref`s with arrow\n * functions, and as long as `this` and owner are the same, there will be no\n * change in behavior.\n * @param {*} source An annotation object (added by a transpiler or otherwise)\n * indicating filename, line number, and/or other information.\n * @internal\n */ function ReactElement(type, key, ref, self, source, owner, props) {\n            var element = {\n                // This tag allows us to uniquely identify this as a React Element\n                $$typeof: REACT_ELEMENT_TYPE,\n                // Built-in properties that belong on the element\n                type: type,\n                key: key,\n                ref: ref,\n                props: props,\n                // Record the component responsible for creating this element.\n                _owner: owner\n            };\n            {\n                // The validation flag is currently mutative. We put it on\n                // an external backing store so that we can freeze the whole object.\n                // This can be replaced with a WeakMap once they are implemented in\n                // commonly used development environments.\n                element._store = {}; // To make comparing ReactElements easier for testing purposes, we make\n                // the validation flag non-enumerable (where possible, which should\n                // include every environment we run tests in), so the test framework\n                // ignores it.\n                Object.defineProperty(element._store, \"validated\", {\n                    configurable: false,\n                    enumerable: false,\n                    writable: true,\n                    value: false\n                }); // self and source are DEV only properties.\n                Object.defineProperty(element, \"_self\", {\n                    configurable: false,\n                    enumerable: false,\n                    writable: false,\n                    value: self\n                }); // Two elements created in two different places should be considered\n                // equal for testing purposes and therefore we hide it from enumeration.\n                Object.defineProperty(element, \"_source\", {\n                    configurable: false,\n                    enumerable: false,\n                    writable: false,\n                    value: source\n                });\n                if (Object.freeze) {\n                    Object.freeze(element.props);\n                    Object.freeze(element);\n                }\n            }\n            return element;\n        }\n        /**\n * https://github.com/reactjs/rfcs/pull/107\n * @param {*} type\n * @param {object} props\n * @param {string} key\n */ function jsxDEV$1(type, config, maybeKey, source, self) {\n            {\n                var propName; // Reserved names are extracted\n                var props = {};\n                var key = null;\n                var ref = null; // Currently, key can be spread in as a prop. This causes a potential\n                // issue if key is also explicitly declared (ie. <div {...props} key=\"Hi\" />\n                // or <div key=\"Hi\" {...props} /> ). We want to deprecate key spread,\n                // but as an intermediary step, we will use jsxDEV for everything except\n                // <div {...props} key=\"Hi\" />, because we aren't currently able to tell if\n                // key is explicitly declared to be undefined or not.\n                if (maybeKey !== undefined) {\n                    {\n                        checkKeyStringCoercion(maybeKey);\n                    }\n                    key = \"\" + maybeKey;\n                }\n                if (hasValidKey(config)) {\n                    {\n                        checkKeyStringCoercion(config.key);\n                    }\n                    key = \"\" + config.key;\n                }\n                if (hasValidRef(config)) {\n                    ref = config.ref;\n                    warnIfStringRefCannotBeAutoConverted(config, self);\n                } // Remaining properties are added to a new props object\n                for(propName in config){\n                    if (hasOwnProperty.call(config, propName) && !RESERVED_PROPS.hasOwnProperty(propName)) {\n                        props[propName] = config[propName];\n                    }\n                } // Resolve default props\n                if (type && type.defaultProps) {\n                    var defaultProps = type.defaultProps;\n                    for(propName in defaultProps){\n                        if (props[propName] === undefined) {\n                            props[propName] = defaultProps[propName];\n                        }\n                    }\n                }\n                if (key || ref) {\n                    var displayName = typeof type === \"function\" ? type.displayName || type.name || \"Unknown\" : type;\n                    if (key) {\n                        defineKeyPropWarningGetter(props, displayName);\n                    }\n                    if (ref) {\n                        defineRefPropWarningGetter(props, displayName);\n                    }\n                }\n                return ReactElement(type, key, ref, self, source, ReactCurrentOwner$1.current, props);\n            }\n        }\n        var ReactCurrentOwner = ReactSharedInternals.ReactCurrentOwner;\n        var ReactDebugCurrentFrame = ReactSharedInternals.ReactDebugCurrentFrame;\n        var REACT_CLIENT_REFERENCE = Symbol.for(\"react.client.reference\");\n        function setCurrentlyValidatingElement(element) {\n            {\n                if (element) {\n                    var owner = element._owner;\n                    var stack = describeUnknownElementTypeFrameInDEV(element.type, element._source, owner ? owner.type : null);\n                    ReactDebugCurrentFrame.setExtraStackFrame(stack);\n                } else {\n                    ReactDebugCurrentFrame.setExtraStackFrame(null);\n                }\n            }\n        }\n        var propTypesMisspellWarningShown;\n        {\n            propTypesMisspellWarningShown = false;\n        }\n        /**\n * Verifies the object is a ReactElement.\n * See https://reactjs.org/docs/react-api.html#isvalidelement\n * @param {?object} object\n * @return {boolean} True if `object` is a ReactElement.\n * @final\n */ function isValidElement(object) {\n            {\n                return typeof object === \"object\" && object !== null && object.$$typeof === REACT_ELEMENT_TYPE;\n            }\n        }\n        function getDeclarationErrorAddendum() {\n            {\n                if (ReactCurrentOwner.current) {\n                    var name = getComponentNameFromType(ReactCurrentOwner.current.type);\n                    if (name) {\n                        return \"\\n\\nCheck the render method of `\" + name + \"`.\";\n                    }\n                }\n                return \"\";\n            }\n        }\n        function getSourceInfoErrorAddendum(source) {\n            {\n                if (source !== undefined) {\n                    var fileName = source.fileName.replace(/^.*[\\\\\\/]/, \"\");\n                    var lineNumber = source.lineNumber;\n                    return \"\\n\\nCheck your code at \" + fileName + \":\" + lineNumber + \".\";\n                }\n                return \"\";\n            }\n        }\n        /**\n * Warn if there's no key explicitly set on dynamic arrays of children or\n * object keys are not valid. This allows us to keep track of children between\n * updates.\n */ var ownerHasKeyUseWarning = {};\n        function getCurrentComponentErrorInfo(parentType) {\n            {\n                var info = getDeclarationErrorAddendum();\n                if (!info) {\n                    var parentName = getComponentNameFromType(parentType);\n                    if (parentName) {\n                        info = \"\\n\\nCheck the top-level render call using <\" + parentName + \">.\";\n                    }\n                }\n                return info;\n            }\n        }\n        /**\n * Warn if the element doesn't have an explicit key assigned to it.\n * This element is in an array. The array could grow and shrink or be\n * reordered. All children that haven't already been validated are required to\n * have a \"key\" property assigned to it. Error statuses are cached so a warning\n * will only be shown once.\n *\n * @internal\n * @param {ReactElement} element Element that requires a key.\n * @param {*} parentType element's parent's type.\n */ function validateExplicitKey(element, parentType) {\n            {\n                if (!element._store || element._store.validated || element.key != null) {\n                    return;\n                }\n                element._store.validated = true;\n                var currentComponentErrorInfo = getCurrentComponentErrorInfo(parentType);\n                if (ownerHasKeyUseWarning[currentComponentErrorInfo]) {\n                    return;\n                }\n                ownerHasKeyUseWarning[currentComponentErrorInfo] = true; // Usually the current owner is the offender, but if it accepts children as a\n                // property, it may be the creator of the child that's responsible for\n                // assigning it a key.\n                var childOwner = \"\";\n                if (element && element._owner && element._owner !== ReactCurrentOwner.current) {\n                    // Give the component that originally created this child.\n                    childOwner = \" It was passed a child from \" + getComponentNameFromType(element._owner.type) + \".\";\n                }\n                setCurrentlyValidatingElement(element);\n                error('Each child in a list should have a unique \"key\" prop.' + \"%s%s See https://reactjs.org/link/warning-keys for more information.\", currentComponentErrorInfo, childOwner);\n                setCurrentlyValidatingElement(null);\n            }\n        }\n        /**\n * Ensure that every element either is passed in a static location, in an\n * array with an explicit keys property defined, or in an object literal\n * with valid key property.\n *\n * @internal\n * @param {ReactNode} node Statically passed child of any type.\n * @param {*} parentType node's parent's type.\n */ function validateChildKeys(node, parentType) {\n            {\n                if (typeof node !== \"object\" || !node) {\n                    return;\n                }\n                if (node.$$typeof === REACT_CLIENT_REFERENCE) ;\n                else if (isArray(node)) {\n                    for(var i = 0; i < node.length; i++){\n                        var child = node[i];\n                        if (isValidElement(child)) {\n                            validateExplicitKey(child, parentType);\n                        }\n                    }\n                } else if (isValidElement(node)) {\n                    // This element was passed in a valid location.\n                    if (node._store) {\n                        node._store.validated = true;\n                    }\n                } else {\n                    var iteratorFn = getIteratorFn(node);\n                    if (typeof iteratorFn === \"function\") {\n                        // Entry iterators used to provide implicit keys,\n                        // but now we print a separate warning for them later.\n                        if (iteratorFn !== node.entries) {\n                            var iterator = iteratorFn.call(node);\n                            var step;\n                            while(!(step = iterator.next()).done){\n                                if (isValidElement(step.value)) {\n                                    validateExplicitKey(step.value, parentType);\n                                }\n                            }\n                        }\n                    }\n                }\n            }\n        }\n        /**\n * Given an element, validate that its props follow the propTypes definition,\n * provided by the type.\n *\n * @param {ReactElement} element\n */ function validatePropTypes(element) {\n            {\n                var type = element.type;\n                if (type === null || type === undefined || typeof type === \"string\") {\n                    return;\n                }\n                if (type.$$typeof === REACT_CLIENT_REFERENCE) {\n                    return;\n                }\n                var propTypes;\n                if (typeof type === \"function\") {\n                    propTypes = type.propTypes;\n                } else if (typeof type === \"object\" && (type.$$typeof === REACT_FORWARD_REF_TYPE || // Note: Memo only checks outer props here.\n                // Inner props are checked in the reconciler.\n                type.$$typeof === REACT_MEMO_TYPE)) {\n                    propTypes = type.propTypes;\n                } else {\n                    return;\n                }\n                if (propTypes) {\n                    // Intentionally inside to avoid triggering lazy initializers:\n                    var name = getComponentNameFromType(type);\n                    checkPropTypes(propTypes, element.props, \"prop\", name, element);\n                } else if (type.PropTypes !== undefined && !propTypesMisspellWarningShown) {\n                    propTypesMisspellWarningShown = true; // Intentionally inside to avoid triggering lazy initializers:\n                    var _name = getComponentNameFromType(type);\n                    error(\"Component %s declared `PropTypes` instead of `propTypes`. Did you misspell the property assignment?\", _name || \"Unknown\");\n                }\n                if (typeof type.getDefaultProps === \"function\" && !type.getDefaultProps.isReactClassApproved) {\n                    error(\"getDefaultProps is only used on classic React.createClass \" + \"definitions. Use a static property named `defaultProps` instead.\");\n                }\n            }\n        }\n        /**\n * Given a fragment, validate that it can only be provided with fragment props\n * @param {ReactElement} fragment\n */ function validateFragmentProps(fragment) {\n            {\n                var keys = Object.keys(fragment.props);\n                for(var i = 0; i < keys.length; i++){\n                    var key = keys[i];\n                    if (key !== \"children\" && key !== \"key\") {\n                        setCurrentlyValidatingElement(fragment);\n                        error(\"Invalid prop `%s` supplied to `React.Fragment`. \" + \"React.Fragment can only have `key` and `children` props.\", key);\n                        setCurrentlyValidatingElement(null);\n                        break;\n                    }\n                }\n                if (fragment.ref !== null) {\n                    setCurrentlyValidatingElement(fragment);\n                    error(\"Invalid attribute `ref` supplied to `React.Fragment`.\");\n                    setCurrentlyValidatingElement(null);\n                }\n            }\n        }\n        var didWarnAboutKeySpread = {};\n        function jsxWithValidation(type, props, key, isStaticChildren, source, self) {\n            {\n                var validType = isValidElementType(type); // We warn in this case but don't throw. We expect the element creation to\n                // succeed and there will likely be errors in render.\n                if (!validType) {\n                    var info = \"\";\n                    if (type === undefined || typeof type === \"object\" && type !== null && Object.keys(type).length === 0) {\n                        info += \" You likely forgot to export your component from the file \" + \"it's defined in, or you might have mixed up default and named imports.\";\n                    }\n                    var sourceInfo = getSourceInfoErrorAddendum(source);\n                    if (sourceInfo) {\n                        info += sourceInfo;\n                    } else {\n                        info += getDeclarationErrorAddendum();\n                    }\n                    var typeString;\n                    if (type === null) {\n                        typeString = \"null\";\n                    } else if (isArray(type)) {\n                        typeString = \"array\";\n                    } else if (type !== undefined && type.$$typeof === REACT_ELEMENT_TYPE) {\n                        typeString = \"<\" + (getComponentNameFromType(type.type) || \"Unknown\") + \" />\";\n                        info = \" Did you accidentally export a JSX literal instead of a component?\";\n                    } else {\n                        typeString = typeof type;\n                    }\n                    error(\"React.jsx: type is invalid -- expected a string (for \" + \"built-in components) or a class/function (for composite \" + \"components) but got: %s.%s\", typeString, info);\n                }\n                var element = jsxDEV$1(type, props, key, source, self); // The result can be nullish if a mock or a custom function is used.\n                // TODO: Drop this when these are no longer allowed as the type argument.\n                if (element == null) {\n                    return element;\n                } // Skip key warning if the type isn't valid since our key validation logic\n                // doesn't expect a non-string/function type and can throw confusing errors.\n                // We don't want exception behavior to differ between dev and prod.\n                // (Rendering will throw with a helpful message and as soon as the type is\n                // fixed, the key warnings will appear.)\n                if (validType) {\n                    var children = props.children;\n                    if (children !== undefined) {\n                        if (isStaticChildren) {\n                            if (isArray(children)) {\n                                for(var i = 0; i < children.length; i++){\n                                    validateChildKeys(children[i], type);\n                                }\n                                if (Object.freeze) {\n                                    Object.freeze(children);\n                                }\n                            } else {\n                                error(\"React.jsx: Static children should always be an array. \" + \"You are likely explicitly calling React.jsxs or React.jsxDEV. \" + \"Use the Babel transform instead.\");\n                            }\n                        } else {\n                            validateChildKeys(children, type);\n                        }\n                    }\n                }\n                if (hasOwnProperty.call(props, \"key\")) {\n                    var componentName = getComponentNameFromType(type);\n                    var keys = Object.keys(props).filter(function(k) {\n                        return k !== \"key\";\n                    });\n                    var beforeExample = keys.length > 0 ? \"{key: someKey, \" + keys.join(\": ..., \") + \": ...}\" : \"{key: someKey}\";\n                    if (!didWarnAboutKeySpread[componentName + beforeExample]) {\n                        var afterExample = keys.length > 0 ? \"{\" + keys.join(\": ..., \") + \": ...}\" : \"{}\";\n                        error('A props object containing a \"key\" prop is being spread into JSX:\\n' + \"  let props = %s;\\n\" + \"  <%s {...props} />\\n\" + \"React keys must be passed directly to JSX without using spread:\\n\" + \"  let props = %s;\\n\" + \"  <%s key={someKey} {...props} />\", beforeExample, componentName, afterExample, componentName);\n                        didWarnAboutKeySpread[componentName + beforeExample] = true;\n                    }\n                }\n                if (type === REACT_FRAGMENT_TYPE) {\n                    validateFragmentProps(element);\n                } else {\n                    validatePropTypes(element);\n                }\n                return element;\n            }\n        } // These two functions exist to still get child warnings in dev\n        var jsxDEV = jsxWithValidation;\n        exports.Fragment = REACT_FRAGMENT_TYPE;\n        exports.jsxDEV = jsxDEV;\n    })();\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/next/dist/compiled/react/cjs/react-jsx-dev-runtime.development.js\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/next/dist/compiled/react/jsx-dev-runtime.js":
/*!******************************************************************!*\
  !*** ./node_modules/next/dist/compiled/react/jsx-dev-runtime.js ***!
  \******************************************************************/
/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("\nif (false) {} else {\n    module.exports = __webpack_require__(/*! ./cjs/react-jsx-dev-runtime.development.js */ \"(app-pages-browser)/./node_modules/next/dist/compiled/react/cjs/react-jsx-dev-runtime.development.js\");\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL25vZGVfbW9kdWxlcy9uZXh0L2Rpc3QvY29tcGlsZWQvcmVhY3QvanN4LWRldi1ydW50aW1lLmpzIiwibWFwcGluZ3MiOiJBQUFBO0FBRUEsSUFBSUEsS0FBeUIsRUFBYyxFQUUxQyxNQUFNO0lBQ0xDLDhMQUF5QjtBQUMzQiIsInNvdXJjZXMiOlsid2VicGFjazovL19OX0UvLi9ub2RlX21vZHVsZXMvbmV4dC9kaXN0L2NvbXBpbGVkL3JlYWN0L2pzeC1kZXYtcnVudGltZS5qcz9jYTIwIl0sInNvdXJjZXNDb250ZW50IjpbIid1c2Ugc3RyaWN0JztcblxuaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WID09PSAncHJvZHVjdGlvbicpIHtcbiAgbW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKCcuL2Nqcy9yZWFjdC1qc3gtZGV2LXJ1bnRpbWUucHJvZHVjdGlvbi5taW4uanMnKTtcbn0gZWxzZSB7XG4gIG1vZHVsZS5leHBvcnRzID0gcmVxdWlyZSgnLi9janMvcmVhY3QtanN4LWRldi1ydW50aW1lLmRldmVsb3BtZW50LmpzJyk7XG59XG4iXSwibmFtZXMiOlsicHJvY2VzcyIsIm1vZHVsZSIsImV4cG9ydHMiLCJyZXF1aXJlIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/next/dist/compiled/react/jsx-dev-runtime.js\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/use-sync-external-store/cjs/use-sync-external-store-shim.development.js":
/*!**********************************************************************************************!*\
  !*** ./node_modules/use-sync-external-store/cjs/use-sync-external-store-shim.development.js ***!
  \**********************************************************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("/**\n * @license React\n * use-sync-external-store-shim.development.js\n *\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */ \nif (true) {\n    (function() {\n        var _s = $RefreshSig$();\n        \"use strict\";\n        /* global __REACT_DEVTOOLS_GLOBAL_HOOK__ */ if (typeof __REACT_DEVTOOLS_GLOBAL_HOOK__ !== \"undefined\" && typeof __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStart === \"function\") {\n            __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStart(new Error());\n        }\n        var React = __webpack_require__(/*! react */ \"(app-pages-browser)/./node_modules/next/dist/compiled/react/index.js\");\n        var ReactSharedInternals = React.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED;\n        function error(format) {\n            {\n                {\n                    for(var _len2 = arguments.length, args = new Array(_len2 > 1 ? _len2 - 1 : 0), _key2 = 1; _key2 < _len2; _key2++){\n                        args[_key2 - 1] = arguments[_key2];\n                    }\n                    printWarning(\"error\", format, args);\n                }\n            }\n        }\n        function printWarning(level, format, args) {\n            // When changing this logic, you might want to also\n            // update consoleWithStackDev.www.js as well.\n            {\n                var ReactDebugCurrentFrame = ReactSharedInternals.ReactDebugCurrentFrame;\n                var stack = ReactDebugCurrentFrame.getStackAddendum();\n                if (stack !== \"\") {\n                    format += \"%s\";\n                    args = args.concat([\n                        stack\n                    ]);\n                } // eslint-disable-next-line react-internal/safe-string-coercion\n                var argsWithFormat = args.map(function(item) {\n                    return String(item);\n                }); // Careful: RN currently depends on this prefix\n                argsWithFormat.unshift(\"Warning: \" + format); // We intentionally don't use spread (or .apply) directly because it\n                // breaks IE9: https://github.com/facebook/react/issues/13610\n                // eslint-disable-next-line react-internal/no-production-logging\n                Function.prototype.apply.call(console[level], console, argsWithFormat);\n            }\n        }\n        /**\n * inlined Object.is polyfill to avoid requiring consumers ship their own\n * https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/is\n */ function is(x, y) {\n            return x === y && (x !== 0 || 1 / x === 1 / y) || x !== x && y !== y // eslint-disable-line no-self-compare\n            ;\n        }\n        var objectIs = typeof Object.is === \"function\" ? Object.is : is;\n        // dispatch for CommonJS interop named imports.\n        var useState = React.useState, useEffect = React.useEffect, useLayoutEffect = React.useLayoutEffect, useDebugValue = React.useDebugValue;\n        var didWarnOld18Alpha = false;\n        var didWarnUncachedGetSnapshot = false; // Disclaimer: This shim breaks many of the rules of React, and only works\n        // because of a very particular set of implementation details and assumptions\n        // -- change any one of them and it will break. The most important assumption\n        // is that updates are always synchronous, because concurrent rendering is\n        // only available in versions of React that also have a built-in\n        // useSyncExternalStore API. And we only use this shim when the built-in API\n        // does not exist.\n        //\n        // Do not assume that the clever hacks used by this hook also work in general.\n        // The point of this shim is to replace the need for hacks by other libraries.\n        function useSyncExternalStore(subscribe, getSnapshot, // React do not expose a way to check if we're hydrating. So users of the shim\n        // will need to track that themselves and return the correct value\n        // from `getSnapshot`.\n        getServerSnapshot) {\n            _s();\n            {\n                if (!didWarnOld18Alpha) {\n                    if (React.startTransition !== undefined) {\n                        didWarnOld18Alpha = true;\n                        error(\"You are using an outdated, pre-release alpha of React 18 that \" + \"does not support useSyncExternalStore. The \" + \"use-sync-external-store shim will not work correctly. Upgrade \" + \"to a newer pre-release.\");\n                    }\n                }\n            }\n            // breaks the rules of React, and only works here because of specific\n            // implementation details, most importantly that updates are\n            // always synchronous.\n            var value = getSnapshot();\n            {\n                if (!didWarnUncachedGetSnapshot) {\n                    var cachedValue = getSnapshot();\n                    if (!objectIs(value, cachedValue)) {\n                        error(\"The result of getSnapshot should be cached to avoid an infinite loop\");\n                        didWarnUncachedGetSnapshot = true;\n                    }\n                }\n            }\n            // re-render whenever the subscribed state changes by updating an some\n            // arbitrary useState hook. Then, during render, we call getSnapshot to read\n            // the current value.\n            //\n            // Because we don't actually use the state returned by the useState hook, we\n            // can save a bit of memory by storing other stuff in that slot.\n            //\n            // To implement the early bailout, we need to track some things on a mutable\n            // object. Usually, we would put that in a useRef hook, but we can stash it in\n            // our useState hook instead.\n            //\n            // To force a re-render, we call forceUpdate({inst}). That works because the\n            // new object always fails an equality check.\n            var _useState = useState({\n                inst: {\n                    value: value,\n                    getSnapshot: getSnapshot\n                }\n            }), inst = _useState[0].inst, forceUpdate = _useState[1]; // Track the latest getSnapshot function with a ref. This needs to be updated\n            // in the layout phase so we can access it during the tearing check that\n            // happens on subscribe.\n            useLayoutEffect(function() {\n                inst.value = value;\n                inst.getSnapshot = getSnapshot; // Whenever getSnapshot or subscribe changes, we need to check in the\n                // commit phase if there was an interleaved mutation. In concurrent mode\n                // this can happen all the time, but even in synchronous mode, an earlier\n                // effect may have mutated the store.\n                if (checkIfSnapshotChanged(inst)) {\n                    // Force a re-render.\n                    forceUpdate({\n                        inst: inst\n                    });\n                }\n            }, [\n                subscribe,\n                value,\n                getSnapshot\n            ]);\n            useEffect(function() {\n                // Check for changes right before subscribing. Subsequent changes will be\n                // detected in the subscription handler.\n                if (checkIfSnapshotChanged(inst)) {\n                    // Force a re-render.\n                    forceUpdate({\n                        inst: inst\n                    });\n                }\n                var handleStoreChange = function() {\n                    // TODO: Because there is no cross-renderer API for batching updates, it's\n                    // up to the consumer of this library to wrap their subscription event\n                    // with unstable_batchedUpdates. Should we try to detect when this isn't\n                    // the case and print a warning in development?\n                    // The store changed. Check if the snapshot changed since the last time we\n                    // read from the store.\n                    if (checkIfSnapshotChanged(inst)) {\n                        // Force a re-render.\n                        forceUpdate({\n                            inst: inst\n                        });\n                    }\n                }; // Subscribe to the store and return a clean-up function.\n                return subscribe(handleStoreChange);\n            }, [\n                subscribe\n            ]);\n            useDebugValue(value);\n            return value;\n        }\n        _s(useSyncExternalStore, \"HNxGYQ39TeXJ0jUaPc6qLOsv73k=\");\n        function checkIfSnapshotChanged(inst) {\n            var latestGetSnapshot = inst.getSnapshot;\n            var prevValue = inst.value;\n            try {\n                var nextValue = latestGetSnapshot();\n                return !objectIs(prevValue, nextValue);\n            } catch (error) {\n                return true;\n            }\n        }\n        function useSyncExternalStore$1(subscribe, getSnapshot, getServerSnapshot) {\n            // Note: The shim does not use getServerSnapshot, because pre-18 versions of\n            // React do not expose a way to check if we're hydrating. So users of the shim\n            // will need to track that themselves and return the correct value\n            // from `getSnapshot`.\n            return getSnapshot();\n        }\n        var canUseDOM = !!( true && typeof window.document !== \"undefined\" && typeof window.document.createElement !== \"undefined\");\n        var isServerEnvironment = !canUseDOM;\n        var shim = isServerEnvironment ? useSyncExternalStore$1 : useSyncExternalStore;\n        var useSyncExternalStore$2 = React.useSyncExternalStore !== undefined ? React.useSyncExternalStore : shim;\n        exports.useSyncExternalStore = useSyncExternalStore$2;\n        /* global __REACT_DEVTOOLS_GLOBAL_HOOK__ */ if (typeof __REACT_DEVTOOLS_GLOBAL_HOOK__ !== \"undefined\" && typeof __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStop === \"function\") {\n            __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStop(new Error());\n        }\n    })();\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/use-sync-external-store/cjs/use-sync-external-store-shim.development.js\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/use-sync-external-store/shim/index.js":
/*!************************************************************!*\
  !*** ./node_modules/use-sync-external-store/shim/index.js ***!
  \************************************************************/
/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("\nif (false) {} else {\n    module.exports = __webpack_require__(/*! ../cjs/use-sync-external-store-shim.development.js */ \"(app-pages-browser)/./node_modules/use-sync-external-store/cjs/use-sync-external-store-shim.development.js\");\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL25vZGVfbW9kdWxlcy91c2Utc3luYy1leHRlcm5hbC1zdG9yZS9zaGltL2luZGV4LmpzIiwibWFwcGluZ3MiOiJBQUFBO0FBRUEsSUFBSUEsS0FBeUIsRUFBYyxFQUUxQyxNQUFNO0lBQ0xDLDRNQUF5QjtBQUMzQiIsInNvdXJjZXMiOlsid2VicGFjazovL19OX0UvLi9ub2RlX21vZHVsZXMvdXNlLXN5bmMtZXh0ZXJuYWwtc3RvcmUvc2hpbS9pbmRleC5qcz8yZTg3Il0sInNvdXJjZXNDb250ZW50IjpbIid1c2Ugc3RyaWN0JztcblxuaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WID09PSAncHJvZHVjdGlvbicpIHtcbiAgbW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKCcuLi9janMvdXNlLXN5bmMtZXh0ZXJuYWwtc3RvcmUtc2hpbS5wcm9kdWN0aW9uLm1pbi5qcycpO1xufSBlbHNlIHtcbiAgbW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKCcuLi9janMvdXNlLXN5bmMtZXh0ZXJuYWwtc3RvcmUtc2hpbS5kZXZlbG9wbWVudC5qcycpO1xufVxuIl0sIm5hbWVzIjpbInByb2Nlc3MiLCJtb2R1bGUiLCJleHBvcnRzIiwicmVxdWlyZSJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/use-sync-external-store/shim/index.js\n"));

/***/ }),

/***/ "(app-pages-browser)/./src/app/sign-in/[[...sign-in]]/page.tsx":
/*!*************************************************!*\
  !*** ./src/app/sign-in/[[...sign-in]]/page.tsx ***!
  \*************************************************/
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": function() { return /* binding */ Page; }\n/* harmony export */ });\n/* harmony import */ var react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react/jsx-dev-runtime */ \"(app-pages-browser)/./node_modules/next/dist/compiled/react/jsx-dev-runtime.js\");\n/* harmony import */ var _clerk_nextjs__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @clerk/nextjs */ \"(app-pages-browser)/./node_modules/@clerk/nextjs/dist/esm/client-boundary/uiComponents.js\");\n/* harmony import */ var lottie_react__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! lottie-react */ \"(app-pages-browser)/./node_modules/lottie-react/build/index.umd.js\");\n/* harmony import */ var lottie_react__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(lottie_react__WEBPACK_IMPORTED_MODULE_1__);\n/* harmony import */ var _public_login_json__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../../../public/login.json */ \"(app-pages-browser)/./public/login.json\");\n/* __next_internal_client_entry_do_not_use__ default auto */ \n\n\n\nfunction Page() {\n    return /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"div\", {\n        className: \"flex items-center justify-center flex-row gap-10 p-24\",\n        children: [\n            /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)((lottie_react__WEBPACK_IMPORTED_MODULE_1___default()), {\n                className: \"w-80\",\n                animationData: _public_login_json__WEBPACK_IMPORTED_MODULE_2__\n            }, void 0, false, {\n                fileName: \"/Users/risalestari/Documents/garuda/src/app/sign-in/[[...sign-in]]/page.tsx\",\n                lineNumber: 9,\n                columnNumber: 7\n            }, this),\n            /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(_clerk_nextjs__WEBPACK_IMPORTED_MODULE_3__.SignIn, {}, void 0, false, {\n                fileName: \"/Users/risalestari/Documents/garuda/src/app/sign-in/[[...sign-in]]/page.tsx\",\n                lineNumber: 10,\n                columnNumber: 7\n            }, this)\n        ]\n    }, void 0, true, {\n        fileName: \"/Users/risalestari/Documents/garuda/src/app/sign-in/[[...sign-in]]/page.tsx\",\n        lineNumber: 8,\n        columnNumber: 5\n    }, this);\n}\n_c = Page;\nvar _c;\n$RefreshReg$(_c, \"Page\");\n\n\n;\n    // Wrapped in an IIFE to avoid polluting the global scope\n    ;\n    (function () {\n        var _a, _b;\n        // Legacy CSS implementations will `eval` browser code in a Node.js context\n        // to extract CSS. For backwards compatibility, we need to check we're in a\n        // browser context before continuing.\n        if (typeof self !== 'undefined' &&\n            // AMP / No-JS mode does not inject these helpers:\n            '$RefreshHelpers$' in self) {\n            // @ts-ignore __webpack_module__ is global\n            var currentExports = module.exports;\n            // @ts-ignore __webpack_module__ is global\n            var prevSignature = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevSignature) !== null && _b !== void 0 ? _b : null;\n            // This cannot happen in MainTemplate because the exports mismatch between\n            // templating and execution.\n            self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);\n            // A module can be accepted automatically based on its exports, e.g. when\n            // it is a Refresh Boundary.\n            if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n                // Save the previous exports signature on update so we can compare the boundary\n                // signatures. We avoid saving exports themselves since it causes memory leaks (https://github.com/vercel/next.js/pull/53797)\n                module.hot.dispose(function (data) {\n                    data.prevSignature =\n                        self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports);\n                });\n                // Unconditionally accept an update to this module, we'll check if it's\n                // still a Refresh Boundary later.\n                // @ts-ignore importMeta is replaced in the loader\n                module.hot.accept();\n                // This field is set when the previous version of this module was a\n                // Refresh Boundary, letting us know we need to check for invalidation or\n                // enqueue an update.\n                if (prevSignature !== null) {\n                    // A boundary can become ineligible if its exports are incompatible\n                    // with the previous exports.\n                    //\n                    // For example, if you add/remove/change exports, we'll want to\n                    // re-execute the importing modules, and force those components to\n                    // re-render. Similarly, if you convert a class component to a\n                    // function, we want to invalidate the boundary.\n                    if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevSignature, self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports))) {\n                        module.hot.invalidate();\n                    }\n                    else {\n                        self.$RefreshHelpers$.scheduleUpdate();\n                    }\n                }\n            }\n            else {\n                // Since we just executed the code for the module, it's possible that the\n                // new exports made it ineligible for being a boundary.\n                // We only care about the case when we were _previously_ a boundary,\n                // because we already accepted this update (accidental side effect).\n                var isNoLongerABoundary = prevSignature !== null;\n                if (isNoLongerABoundary) {\n                    module.hot.invalidate();\n                }\n            }\n        }\n    })();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL3NyYy9hcHAvc2lnbi1pbi9bWy4uLnNpZ24taW5dXS9wYWdlLnRzeCIsIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7O0FBQ3VDO0FBQ0w7QUFDb0I7QUFFdkMsU0FBU0c7SUFDdEIscUJBQ0UsOERBQUNDO1FBQUlDLFdBQVU7OzBCQUNiLDhEQUFDSixxREFBTUE7Z0JBQUNJLFdBQVU7Z0JBQU9DLGVBQWVKLCtDQUFTQTs7Ozs7OzBCQUNqRCw4REFBQ0YsaURBQU1BOzs7Ozs7Ozs7OztBQUdiO0tBUHdCRyIsInNvdXJjZXMiOlsid2VicGFjazovL19OX0UvLi9zcmMvYXBwL3NpZ24taW4vW1suLi5zaWduLWluXV0vcGFnZS50c3g/ZTNkMyJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBjbGllbnRcIjtcbmltcG9ydCB7IFNpZ25JbiB9IGZyb20gXCJAY2xlcmsvbmV4dGpzXCI7XG5pbXBvcnQgTG90dGllIGZyb20gXCJsb3R0aWUtcmVhY3RcIjtcbmltcG9ydCBMb2dpbkxvZ28gZnJvbSBcIi4uLy4uLy4uLy4uL3B1YmxpYy9sb2dpbi5qc29uXCI7XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIFBhZ2UoKSB7XG4gIHJldHVybiAoXG4gICAgPGRpdiBjbGFzc05hbWU9XCJmbGV4IGl0ZW1zLWNlbnRlciBqdXN0aWZ5LWNlbnRlciBmbGV4LXJvdyBnYXAtMTAgcC0yNFwiPlxuICAgICAgPExvdHRpZSBjbGFzc05hbWU9XCJ3LTgwXCIgYW5pbWF0aW9uRGF0YT17TG9naW5Mb2dvfSAvPlxuICAgICAgPFNpZ25JbiAvPlxuICAgIDwvZGl2PlxuICApO1xufVxuIl0sIm5hbWVzIjpbIlNpZ25JbiIsIkxvdHRpZSIsIkxvZ2luTG9nbyIsIlBhZ2UiLCJkaXYiLCJjbGFzc05hbWUiLCJhbmltYXRpb25EYXRhIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(app-pages-browser)/./src/app/sign-in/[[...sign-in]]/page.tsx\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/@clerk/shared/dist/browser.mjs":
/*!*****************************************************!*\
  !*** ./node_modules/@clerk/shared/dist/browser.mjs ***!
  \*****************************************************/
/***/ (function(__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   inBrowser: function() { return /* reexport safe */ _chunk_XKTTPTOL_mjs__WEBPACK_IMPORTED_MODULE_0__.inBrowser; },\n/* harmony export */   isBrowserOnline: function() { return /* reexport safe */ _chunk_XKTTPTOL_mjs__WEBPACK_IMPORTED_MODULE_0__.isBrowserOnline; },\n/* harmony export */   isValidBrowser: function() { return /* reexport safe */ _chunk_XKTTPTOL_mjs__WEBPACK_IMPORTED_MODULE_0__.isValidBrowser; },\n/* harmony export */   isValidBrowserOnline: function() { return /* reexport safe */ _chunk_XKTTPTOL_mjs__WEBPACK_IMPORTED_MODULE_0__.isValidBrowserOnline; },\n/* harmony export */   userAgentIsRobot: function() { return /* reexport safe */ _chunk_XKTTPTOL_mjs__WEBPACK_IMPORTED_MODULE_0__.userAgentIsRobot; }\n/* harmony export */ });\n/* harmony import */ var _chunk_XKTTPTOL_mjs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./chunk-XKTTPTOL.mjs */ \"(app-pages-browser)/./node_modules/@clerk/shared/dist/chunk-XKTTPTOL.mjs\");\n/* harmony import */ var _chunk_NDCDZYN6_mjs__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./chunk-NDCDZYN6.mjs */ \"(app-pages-browser)/./node_modules/@clerk/shared/dist/chunk-NDCDZYN6.mjs\");\n\n\n //# sourceMappingURL=browser.mjs.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL25vZGVfbW9kdWxlcy9AY2xlcmsvc2hhcmVkL2Rpc3QvYnJvd3Nlci5tanMiLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7OztBQU04QjtBQUNBO0FBTzVCLENBQ0Ysb0NBQW9DIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vX05fRS8uL25vZGVfbW9kdWxlcy9AY2xlcmsvc2hhcmVkL2Rpc3QvYnJvd3Nlci5tanM/YWVmYyJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQge1xuICBpbkJyb3dzZXIsXG4gIGlzQnJvd3Nlck9ubGluZSxcbiAgaXNWYWxpZEJyb3dzZXIsXG4gIGlzVmFsaWRCcm93c2VyT25saW5lLFxuICB1c2VyQWdlbnRJc1JvYm90XG59IGZyb20gXCIuL2NodW5rLVhLVFRQVE9MLm1qc1wiO1xuaW1wb3J0IFwiLi9jaHVuay1ORENEWllONi5tanNcIjtcbmV4cG9ydCB7XG4gIGluQnJvd3NlcixcbiAgaXNCcm93c2VyT25saW5lLFxuICBpc1ZhbGlkQnJvd3NlcixcbiAgaXNWYWxpZEJyb3dzZXJPbmxpbmUsXG4gIHVzZXJBZ2VudElzUm9ib3Rcbn07XG4vLyMgc291cmNlTWFwcGluZ1VSTD1icm93c2VyLm1qcy5tYXAiXSwibmFtZXMiOlsiaW5Ccm93c2VyIiwiaXNCcm93c2VyT25saW5lIiwiaXNWYWxpZEJyb3dzZXIiLCJpc1ZhbGlkQnJvd3Nlck9ubGluZSIsInVzZXJBZ2VudElzUm9ib3QiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/@clerk/shared/dist/browser.mjs\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/@clerk/shared/dist/chunk-3S7ZLCXD.mjs":
/*!************************************************************!*\
  !*** ./node_modules/@clerk/shared/dist/chunk-3S7ZLCXD.mjs ***!
  \************************************************************/
/***/ (function(__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   DEV_BROWSER_JWT_MARKER: function() { return /* binding */ DEV_BROWSER_JWT_MARKER; },\n/* harmony export */   DEV_BROWSER_SSO_JWT_PARAMETER: function() { return /* binding */ DEV_BROWSER_SSO_JWT_PARAMETER; },\n/* harmony export */   extractDevBrowserJWTFromURLHash: function() { return /* binding */ extractDevBrowserJWTFromURLHash; },\n/* harmony export */   extractDevBrowserJWTFromURLSearchParams: function() { return /* binding */ extractDevBrowserJWTFromURLSearchParams; },\n/* harmony export */   setDevBrowserJWTInURL: function() { return /* binding */ setDevBrowserJWTInURL; }\n/* harmony export */ });\n// src/devBrowser.ts\nvar DEV_BROWSER_SSO_JWT_PARAMETER = \"__dev_session\";\nvar DEV_BROWSER_JWT_MARKER = \"__clerk_db_jwt\";\nvar DEV_BROWSER_JWT_MARKER_REGEXP = /__clerk_db_jwt\\[(.*)\\]/;\nfunction setDevBrowserJWTInURL(url, jwt, asQueryParam) {\n    const resultURL = new URL(url);\n    const jwtFromHash = extractDevBrowserJWTFromURLHash(resultURL);\n    const jwtFromSearch = extractDevBrowserJWTFromURLSearchParams(resultURL);\n    const jwtToSet = jwtFromHash || jwtFromSearch || jwt;\n    if (jwtToSet) {\n        if (asQueryParam) {\n            resultURL.searchParams.append(DEV_BROWSER_SSO_JWT_PARAMETER, jwtToSet);\n            resultURL.searchParams.append(DEV_BROWSER_JWT_MARKER, jwtToSet);\n        } else {\n            resultURL.hash = resultURL.hash + \"\".concat(DEV_BROWSER_JWT_MARKER, \"[\").concat(jwtToSet, \"]\");\n        }\n    }\n    return resultURL;\n}\nfunction extractDevBrowserJWTFromHash(hash) {\n    const matches = hash.match(DEV_BROWSER_JWT_MARKER_REGEXP);\n    return matches ? matches[1] : \"\";\n}\nfunction extractDevBrowserJWTFromURLHash(url) {\n    const jwt = extractDevBrowserJWTFromHash(url.hash);\n    url.hash = url.hash.replace(DEV_BROWSER_JWT_MARKER_REGEXP, \"\");\n    if (url.href.endsWith(\"#\")) {\n        url.hash = \"\";\n    }\n    return jwt;\n}\nfunction extractDevBrowserJWTFromURLSearchParams(url) {\n    const jwtFromDevSession = url.searchParams.get(DEV_BROWSER_SSO_JWT_PARAMETER);\n    url.searchParams.delete(DEV_BROWSER_SSO_JWT_PARAMETER);\n    const jwtFromClerkDbJwt = url.searchParams.get(DEV_BROWSER_JWT_MARKER);\n    url.searchParams.delete(DEV_BROWSER_JWT_MARKER);\n    return jwtFromDevSession || jwtFromClerkDbJwt || \"\";\n}\n //# sourceMappingURL=chunk-3S7ZLCXD.mjs.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL25vZGVfbW9kdWxlcy9AY2xlcmsvc2hhcmVkL2Rpc3QvY2h1bmstM1M3WkxDWEQubWpzIiwibWFwcGluZ3MiOiI7Ozs7Ozs7O0FBQUEsb0JBQW9CO0FBQ3BCLElBQUlBLGdDQUFnQztBQUNwQyxJQUFJQyx5QkFBeUI7QUFDN0IsSUFBSUMsZ0NBQWdDO0FBQ3BDLFNBQVNDLHNCQUFzQkMsR0FBRyxFQUFFQyxHQUFHLEVBQUVDLFlBQVk7SUFDbkQsTUFBTUMsWUFBWSxJQUFJQyxJQUFJSjtJQUMxQixNQUFNSyxjQUFjQyxnQ0FBZ0NIO0lBQ3BELE1BQU1JLGdCQUFnQkMsd0NBQXdDTDtJQUM5RCxNQUFNTSxXQUFXSixlQUFlRSxpQkFBaUJOO0lBQ2pELElBQUlRLFVBQVU7UUFDWixJQUFJUCxjQUFjO1lBQ2hCQyxVQUFVTyxZQUFZLENBQUNDLE1BQU0sQ0FBQ2YsK0JBQStCYTtZQUM3RE4sVUFBVU8sWUFBWSxDQUFDQyxNQUFNLENBQUNkLHdCQUF3Qlk7UUFDeEQsT0FBTztZQUNMTixVQUFVUyxJQUFJLEdBQUdULFVBQVVTLElBQUksR0FBRyxHQUE2QkgsT0FBMUJaLHdCQUF1QixLQUFZLE9BQVRZLFVBQVM7UUFDMUU7SUFDRjtJQUNBLE9BQU9OO0FBQ1Q7QUFDQSxTQUFTVSw2QkFBNkJELElBQUk7SUFDeEMsTUFBTUUsVUFBVUYsS0FBS0csS0FBSyxDQUFDakI7SUFDM0IsT0FBT2dCLFVBQVVBLE9BQU8sQ0FBQyxFQUFFLEdBQUc7QUFDaEM7QUFDQSxTQUFTUixnQ0FBZ0NOLEdBQUc7SUFDMUMsTUFBTUMsTUFBTVksNkJBQTZCYixJQUFJWSxJQUFJO0lBQ2pEWixJQUFJWSxJQUFJLEdBQUdaLElBQUlZLElBQUksQ0FBQ0ksT0FBTyxDQUFDbEIsK0JBQStCO0lBQzNELElBQUlFLElBQUlpQixJQUFJLENBQUNDLFFBQVEsQ0FBQyxNQUFNO1FBQzFCbEIsSUFBSVksSUFBSSxHQUFHO0lBQ2I7SUFDQSxPQUFPWDtBQUNUO0FBQ0EsU0FBU08sd0NBQXdDUixHQUFHO0lBQ2xELE1BQU1tQixvQkFBb0JuQixJQUFJVSxZQUFZLENBQUNVLEdBQUcsQ0FBQ3hCO0lBQy9DSSxJQUFJVSxZQUFZLENBQUNXLE1BQU0sQ0FBQ3pCO0lBQ3hCLE1BQU0wQixvQkFBb0J0QixJQUFJVSxZQUFZLENBQUNVLEdBQUcsQ0FBQ3ZCO0lBQy9DRyxJQUFJVSxZQUFZLENBQUNXLE1BQU0sQ0FBQ3hCO0lBQ3hCLE9BQU9zQixxQkFBcUJHLHFCQUFxQjtBQUNuRDtBQVFFLENBQ0YsMkNBQTJDIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vX05fRS8uL25vZGVfbW9kdWxlcy9AY2xlcmsvc2hhcmVkL2Rpc3QvY2h1bmstM1M3WkxDWEQubWpzP2ZkOTAiXSwic291cmNlc0NvbnRlbnQiOlsiLy8gc3JjL2RldkJyb3dzZXIudHNcbnZhciBERVZfQlJPV1NFUl9TU09fSldUX1BBUkFNRVRFUiA9IFwiX19kZXZfc2Vzc2lvblwiO1xudmFyIERFVl9CUk9XU0VSX0pXVF9NQVJLRVIgPSBcIl9fY2xlcmtfZGJfand0XCI7XG52YXIgREVWX0JST1dTRVJfSldUX01BUktFUl9SRUdFWFAgPSAvX19jbGVya19kYl9qd3RcXFsoLiopXFxdLztcbmZ1bmN0aW9uIHNldERldkJyb3dzZXJKV1RJblVSTCh1cmwsIGp3dCwgYXNRdWVyeVBhcmFtKSB7XG4gIGNvbnN0IHJlc3VsdFVSTCA9IG5ldyBVUkwodXJsKTtcbiAgY29uc3Qgand0RnJvbUhhc2ggPSBleHRyYWN0RGV2QnJvd3NlckpXVEZyb21VUkxIYXNoKHJlc3VsdFVSTCk7XG4gIGNvbnN0IGp3dEZyb21TZWFyY2ggPSBleHRyYWN0RGV2QnJvd3NlckpXVEZyb21VUkxTZWFyY2hQYXJhbXMocmVzdWx0VVJMKTtcbiAgY29uc3Qgand0VG9TZXQgPSBqd3RGcm9tSGFzaCB8fCBqd3RGcm9tU2VhcmNoIHx8IGp3dDtcbiAgaWYgKGp3dFRvU2V0KSB7XG4gICAgaWYgKGFzUXVlcnlQYXJhbSkge1xuICAgICAgcmVzdWx0VVJMLnNlYXJjaFBhcmFtcy5hcHBlbmQoREVWX0JST1dTRVJfU1NPX0pXVF9QQVJBTUVURVIsIGp3dFRvU2V0KTtcbiAgICAgIHJlc3VsdFVSTC5zZWFyY2hQYXJhbXMuYXBwZW5kKERFVl9CUk9XU0VSX0pXVF9NQVJLRVIsIGp3dFRvU2V0KTtcbiAgICB9IGVsc2Uge1xuICAgICAgcmVzdWx0VVJMLmhhc2ggPSByZXN1bHRVUkwuaGFzaCArIGAke0RFVl9CUk9XU0VSX0pXVF9NQVJLRVJ9WyR7and0VG9TZXR9XWA7XG4gICAgfVxuICB9XG4gIHJldHVybiByZXN1bHRVUkw7XG59XG5mdW5jdGlvbiBleHRyYWN0RGV2QnJvd3NlckpXVEZyb21IYXNoKGhhc2gpIHtcbiAgY29uc3QgbWF0Y2hlcyA9IGhhc2gubWF0Y2goREVWX0JST1dTRVJfSldUX01BUktFUl9SRUdFWFApO1xuICByZXR1cm4gbWF0Y2hlcyA/IG1hdGNoZXNbMV0gOiBcIlwiO1xufVxuZnVuY3Rpb24gZXh0cmFjdERldkJyb3dzZXJKV1RGcm9tVVJMSGFzaCh1cmwpIHtcbiAgY29uc3Qgand0ID0gZXh0cmFjdERldkJyb3dzZXJKV1RGcm9tSGFzaCh1cmwuaGFzaCk7XG4gIHVybC5oYXNoID0gdXJsLmhhc2gucmVwbGFjZShERVZfQlJPV1NFUl9KV1RfTUFSS0VSX1JFR0VYUCwgXCJcIik7XG4gIGlmICh1cmwuaHJlZi5lbmRzV2l0aChcIiNcIikpIHtcbiAgICB1cmwuaGFzaCA9IFwiXCI7XG4gIH1cbiAgcmV0dXJuIGp3dDtcbn1cbmZ1bmN0aW9uIGV4dHJhY3REZXZCcm93c2VySldURnJvbVVSTFNlYXJjaFBhcmFtcyh1cmwpIHtcbiAgY29uc3Qgand0RnJvbURldlNlc3Npb24gPSB1cmwuc2VhcmNoUGFyYW1zLmdldChERVZfQlJPV1NFUl9TU09fSldUX1BBUkFNRVRFUik7XG4gIHVybC5zZWFyY2hQYXJhbXMuZGVsZXRlKERFVl9CUk9XU0VSX1NTT19KV1RfUEFSQU1FVEVSKTtcbiAgY29uc3Qgand0RnJvbUNsZXJrRGJKd3QgPSB1cmwuc2VhcmNoUGFyYW1zLmdldChERVZfQlJPV1NFUl9KV1RfTUFSS0VSKTtcbiAgdXJsLnNlYXJjaFBhcmFtcy5kZWxldGUoREVWX0JST1dTRVJfSldUX01BUktFUik7XG4gIHJldHVybiBqd3RGcm9tRGV2U2Vzc2lvbiB8fCBqd3RGcm9tQ2xlcmtEYkp3dCB8fCBcIlwiO1xufVxuXG5leHBvcnQge1xuICBERVZfQlJPV1NFUl9TU09fSldUX1BBUkFNRVRFUixcbiAgREVWX0JST1dTRVJfSldUX01BUktFUixcbiAgc2V0RGV2QnJvd3NlckpXVEluVVJMLFxuICBleHRyYWN0RGV2QnJvd3NlckpXVEZyb21VUkxIYXNoLFxuICBleHRyYWN0RGV2QnJvd3NlckpXVEZyb21VUkxTZWFyY2hQYXJhbXNcbn07XG4vLyMgc291cmNlTWFwcGluZ1VSTD1jaHVuay0zUzdaTENYRC5tanMubWFwIl0sIm5hbWVzIjpbIkRFVl9CUk9XU0VSX1NTT19KV1RfUEFSQU1FVEVSIiwiREVWX0JST1dTRVJfSldUX01BUktFUiIsIkRFVl9CUk9XU0VSX0pXVF9NQVJLRVJfUkVHRVhQIiwic2V0RGV2QnJvd3NlckpXVEluVVJMIiwidXJsIiwiand0IiwiYXNRdWVyeVBhcmFtIiwicmVzdWx0VVJMIiwiVVJMIiwiand0RnJvbUhhc2giLCJleHRyYWN0RGV2QnJvd3NlckpXVEZyb21VUkxIYXNoIiwiand0RnJvbVNlYXJjaCIsImV4dHJhY3REZXZCcm93c2VySldURnJvbVVSTFNlYXJjaFBhcmFtcyIsImp3dFRvU2V0Iiwic2VhcmNoUGFyYW1zIiwiYXBwZW5kIiwiaGFzaCIsImV4dHJhY3REZXZCcm93c2VySldURnJvbUhhc2giLCJtYXRjaGVzIiwibWF0Y2giLCJyZXBsYWNlIiwiaHJlZiIsImVuZHNXaXRoIiwiand0RnJvbURldlNlc3Npb24iLCJnZXQiLCJkZWxldGUiLCJqd3RGcm9tQ2xlcmtEYkp3dCJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/@clerk/shared/dist/chunk-3S7ZLCXD.mjs\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/@clerk/shared/dist/chunk-4PW5MDZA.mjs":
/*!************************************************************!*\
  !*** ./node_modules/@clerk/shared/dist/chunk-4PW5MDZA.mjs ***!
  \************************************************************/
/***/ (function(__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   callWithRetry: function() { return /* binding */ callWithRetry; }\n/* harmony export */ });\n// src/callWithRetry.ts\nfunction wait(ms) {\n    return new Promise((res)=>setTimeout(res, ms));\n}\nvar MAX_NUMBER_OF_RETRIES = 5;\nasync function callWithRetry(fn) {\n    let attempt = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : 1, maxAttempts = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : MAX_NUMBER_OF_RETRIES;\n    try {\n        return await fn();\n    } catch (e) {\n        if (attempt >= maxAttempts) {\n            throw e;\n        }\n        await wait(2 ** attempt * 100);\n        return callWithRetry(fn, attempt + 1, maxAttempts);\n    }\n}\n //# sourceMappingURL=chunk-4PW5MDZA.mjs.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL25vZGVfbW9kdWxlcy9AY2xlcmsvc2hhcmVkL2Rpc3QvY2h1bmstNFBXNU1EWkEubWpzIiwibWFwcGluZ3MiOiI7Ozs7QUFBQSx1QkFBdUI7QUFDdkIsU0FBU0EsS0FBS0MsRUFBRTtJQUNkLE9BQU8sSUFBSUMsUUFBUSxDQUFDQyxNQUFRQyxXQUFXRCxLQUFLRjtBQUM5QztBQUNBLElBQUlJLHdCQUF3QjtBQUM1QixlQUFlQyxjQUFjQyxFQUFFO1FBQUVDLFVBQUFBLGlFQUFVLEdBQUdDLGNBQUFBLGlFQUFjSjtJQUMxRCxJQUFJO1FBQ0YsT0FBTyxNQUFNRTtJQUNmLEVBQUUsT0FBT0csR0FBRztRQUNWLElBQUlGLFdBQVdDLGFBQWE7WUFDMUIsTUFBTUM7UUFDUjtRQUNBLE1BQU1WLEtBQUssS0FBS1EsVUFBVTtRQUMxQixPQUFPRixjQUFjQyxJQUFJQyxVQUFVLEdBQUdDO0lBQ3hDO0FBQ0Y7QUFJRSxDQUNGLDJDQUEyQyIsInNvdXJjZXMiOlsid2VicGFjazovL19OX0UvLi9ub2RlX21vZHVsZXMvQGNsZXJrL3NoYXJlZC9kaXN0L2NodW5rLTRQVzVNRFpBLm1qcz8yYjQwIl0sInNvdXJjZXNDb250ZW50IjpbIi8vIHNyYy9jYWxsV2l0aFJldHJ5LnRzXG5mdW5jdGlvbiB3YWl0KG1zKSB7XG4gIHJldHVybiBuZXcgUHJvbWlzZSgocmVzKSA9PiBzZXRUaW1lb3V0KHJlcywgbXMpKTtcbn1cbnZhciBNQVhfTlVNQkVSX09GX1JFVFJJRVMgPSA1O1xuYXN5bmMgZnVuY3Rpb24gY2FsbFdpdGhSZXRyeShmbiwgYXR0ZW1wdCA9IDEsIG1heEF0dGVtcHRzID0gTUFYX05VTUJFUl9PRl9SRVRSSUVTKSB7XG4gIHRyeSB7XG4gICAgcmV0dXJuIGF3YWl0IGZuKCk7XG4gIH0gY2F0Y2ggKGUpIHtcbiAgICBpZiAoYXR0ZW1wdCA+PSBtYXhBdHRlbXB0cykge1xuICAgICAgdGhyb3cgZTtcbiAgICB9XG4gICAgYXdhaXQgd2FpdCgyICoqIGF0dGVtcHQgKiAxMDApO1xuICAgIHJldHVybiBjYWxsV2l0aFJldHJ5KGZuLCBhdHRlbXB0ICsgMSwgbWF4QXR0ZW1wdHMpO1xuICB9XG59XG5cbmV4cG9ydCB7XG4gIGNhbGxXaXRoUmV0cnlcbn07XG4vLyMgc291cmNlTWFwcGluZ1VSTD1jaHVuay00UFc1TURaQS5tanMubWFwIl0sIm5hbWVzIjpbIndhaXQiLCJtcyIsIlByb21pc2UiLCJyZXMiLCJzZXRUaW1lb3V0IiwiTUFYX05VTUJFUl9PRl9SRVRSSUVTIiwiY2FsbFdpdGhSZXRyeSIsImZuIiwiYXR0ZW1wdCIsIm1heEF0dGVtcHRzIiwiZSJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/@clerk/shared/dist/chunk-4PW5MDZA.mjs\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/@clerk/shared/dist/chunk-5DRMPUGE.mjs":
/*!************************************************************!*\
  !*** ./node_modules/@clerk/shared/dist/chunk-5DRMPUGE.mjs ***!
  \************************************************************/
/***/ (function(__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   ClerkAPIResponseError: function() { return /* binding */ ClerkAPIResponseError; },\n/* harmony export */   ClerkRuntimeError: function() { return /* binding */ ClerkRuntimeError; },\n/* harmony export */   EmailLinkError: function() { return /* binding */ EmailLinkError; },\n/* harmony export */   EmailLinkErrorCode: function() { return /* binding */ EmailLinkErrorCode; },\n/* harmony export */   MagicLinkError: function() { return /* binding */ MagicLinkError; },\n/* harmony export */   MagicLinkErrorCode: function() { return /* binding */ MagicLinkErrorCode; },\n/* harmony export */   buildErrorThrower: function() { return /* binding */ buildErrorThrower; },\n/* harmony export */   is4xxError: function() { return /* binding */ is4xxError; },\n/* harmony export */   isClerkAPIResponseError: function() { return /* binding */ isClerkAPIResponseError; },\n/* harmony export */   isClerkRuntimeError: function() { return /* binding */ isClerkRuntimeError; },\n/* harmony export */   isEmailLinkError: function() { return /* binding */ isEmailLinkError; },\n/* harmony export */   isKnownError: function() { return /* binding */ isKnownError; },\n/* harmony export */   isMagicLinkError: function() { return /* binding */ isMagicLinkError; },\n/* harmony export */   isMetamaskError: function() { return /* binding */ isMetamaskError; },\n/* harmony export */   isNetworkError: function() { return /* binding */ isNetworkError; },\n/* harmony export */   isUnauthorizedError: function() { return /* binding */ isUnauthorizedError; },\n/* harmony export */   isUserLockedError: function() { return /* binding */ isUserLockedError; },\n/* harmony export */   parseError: function() { return /* binding */ parseError; },\n/* harmony export */   parseErrors: function() { return /* binding */ parseErrors; }\n/* harmony export */ });\n/* harmony import */ var _chunk_KJVJ4CFF_mjs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./chunk-KJVJ4CFF.mjs */ \"(app-pages-browser)/./node_modules/@clerk/shared/dist/chunk-KJVJ4CFF.mjs\");\n\n// src/error.ts\nfunction isUnauthorizedError(e) {\n    var _e_errors_, _e_errors;\n    const status = e === null || e === void 0 ? void 0 : e.status;\n    const code = e === null || e === void 0 ? void 0 : (_e_errors = e.errors) === null || _e_errors === void 0 ? void 0 : (_e_errors_ = _e_errors[0]) === null || _e_errors_ === void 0 ? void 0 : _e_errors_.code;\n    return code === \"authentication_invalid\" && status === 401;\n}\nfunction is4xxError(e) {\n    const status = e === null || e === void 0 ? void 0 : e.status;\n    return !!status && status >= 400 && status < 500;\n}\nfunction isNetworkError(e) {\n    const message = (\"\".concat(e.message).concat(e.name) || \"\").toLowerCase().replace(/\\s+/g, \"\");\n    return message.includes(\"networkerror\");\n}\nfunction isKnownError(error) {\n    return isClerkAPIResponseError(error) || isMetamaskError(error) || isClerkRuntimeError(error);\n}\nfunction isClerkAPIResponseError(err) {\n    return \"clerkError\" in err;\n}\nfunction isClerkRuntimeError(err) {\n    return \"clerkRuntimeError\" in err;\n}\nfunction isMetamaskError(err) {\n    return \"code\" in err && [\n        4001,\n        32602,\n        32603\n    ].includes(err.code) && \"message\" in err;\n}\nfunction isUserLockedError(err) {\n    var _err_errors_, _err_errors;\n    return isClerkAPIResponseError(err) && ((_err_errors = err.errors) === null || _err_errors === void 0 ? void 0 : (_err_errors_ = _err_errors[0]) === null || _err_errors_ === void 0 ? void 0 : _err_errors_.code) === \"user_locked\";\n}\nfunction parseErrors() {\n    let data = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : [];\n    return data.length > 0 ? data.map(parseError) : [];\n}\nfunction parseError(error) {\n    var _error_meta, _error_meta1, _error_meta2, _error_meta3, _error_meta4;\n    return {\n        code: error.code,\n        message: error.message,\n        longMessage: error.long_message,\n        meta: {\n            paramName: error === null || error === void 0 ? void 0 : (_error_meta = error.meta) === null || _error_meta === void 0 ? void 0 : _error_meta.param_name,\n            sessionId: error === null || error === void 0 ? void 0 : (_error_meta1 = error.meta) === null || _error_meta1 === void 0 ? void 0 : _error_meta1.session_id,\n            emailAddresses: error === null || error === void 0 ? void 0 : (_error_meta2 = error.meta) === null || _error_meta2 === void 0 ? void 0 : _error_meta2.email_addresses,\n            identifiers: error === null || error === void 0 ? void 0 : (_error_meta3 = error.meta) === null || _error_meta3 === void 0 ? void 0 : _error_meta3.identifiers,\n            zxcvbn: error === null || error === void 0 ? void 0 : (_error_meta4 = error.meta) === null || _error_meta4 === void 0 ? void 0 : _error_meta4.zxcvbn\n        }\n    };\n}\nvar ClerkAPIResponseError = class _ClerkAPIResponseError extends Error {\n    constructor(message, { data, status, clerkTraceId }){\n        super(message);\n        this.toString = ()=>{\n            let message = \"[\".concat(this.name, \"]\\nMessage:\").concat(this.message, \"\\nStatus:\").concat(this.status, \"\\nSerialized errors: \").concat(this.errors.map((e)=>JSON.stringify(e)));\n            if (this.clerkTraceId) {\n                message += \"\\nClerk Trace ID: \".concat(this.clerkTraceId);\n            }\n            return message;\n        };\n        Object.setPrototypeOf(this, _ClerkAPIResponseError.prototype);\n        this.status = status;\n        this.message = message;\n        this.clerkTraceId = clerkTraceId;\n        this.clerkError = true;\n        this.errors = parseErrors(data);\n    }\n};\nvar ClerkRuntimeError = class _ClerkRuntimeError extends Error {\n    constructor(message, { code }){\n        super(message);\n        /**\n     * Returns a string representation of the error.\n     *\n     * @returns {string} A formatted string with the error name and message.\n     * @memberof ClerkRuntimeError\n     */ this.toString = ()=>{\n            return \"[\".concat(this.name, \"]\\nMessage:\").concat(this.message);\n        };\n        Object.setPrototypeOf(this, _ClerkRuntimeError.prototype);\n        this.code = code;\n        this.message = message;\n        this.clerkRuntimeError = true;\n    }\n};\nvar MagicLinkError = class _MagicLinkError extends Error {\n    constructor(code){\n        super(code);\n        this.code = code;\n        Object.setPrototypeOf(this, _MagicLinkError.prototype);\n        (0,_chunk_KJVJ4CFF_mjs__WEBPACK_IMPORTED_MODULE_0__.deprecated)(\"MagicLinkError\", \"Use `EmailLinkError` instead.\");\n    }\n};\nvar EmailLinkError = class _EmailLinkError extends Error {\n    constructor(code){\n        super(code);\n        this.code = code;\n        Object.setPrototypeOf(this, _EmailLinkError.prototype);\n    }\n};\nfunction isMagicLinkError(err) {\n    (0,_chunk_KJVJ4CFF_mjs__WEBPACK_IMPORTED_MODULE_0__.deprecated)(\"isMagicLinkError\", \"Use `isEmailLinkError` instead.\");\n    return err instanceof MagicLinkError;\n}\nfunction isEmailLinkError(err) {\n    return err instanceof EmailLinkError;\n}\nvar _MagicLinkErrorCode = {\n    Expired: \"expired\",\n    Failed: \"failed\"\n};\nvar MagicLinkErrorCode = new Proxy(_MagicLinkErrorCode, {\n    get (target, prop, receiver) {\n        (0,_chunk_KJVJ4CFF_mjs__WEBPACK_IMPORTED_MODULE_0__.deprecated)(\"MagicLinkErrorCode\", \"Use `EmailLinkErrorCode` instead.\");\n        return Reflect.get(target, prop, receiver);\n    }\n});\nvar EmailLinkErrorCode = {\n    Expired: \"expired\",\n    Failed: \"failed\"\n};\nvar DefaultMessages = Object.freeze({\n    InvalidFrontendApiErrorMessage: \"The frontendApi passed to Clerk is invalid. You can get your Frontend API key at https://dashboard.clerk.com/last-active?path=api-keys. (key={{key}})\",\n    InvalidProxyUrlErrorMessage: \"The proxyUrl passed to Clerk is invalid. The expected value for proxyUrl is an absolute URL or a relative path with a leading '/'. (key={{url}})\",\n    InvalidPublishableKeyErrorMessage: \"The publishableKey passed to Clerk is invalid. You can get your Publishable key at https://dashboard.clerk.com/last-active?path=api-keys. (key={{key}})\",\n    MissingPublishableKeyErrorMessage: \"Missing publishableKey. You can get your key at https://dashboard.clerk.com/last-active?path=api-keys.\"\n});\nfunction buildErrorThrower(param) {\n    let { packageName, customMessages } = param;\n    let pkg = packageName;\n    const messages = {\n        ...DefaultMessages,\n        ...customMessages\n    };\n    function buildMessage(rawMessage, replacements) {\n        if (!replacements) {\n            return \"\".concat(pkg, \": \").concat(rawMessage);\n        }\n        let msg = rawMessage;\n        const matches = rawMessage.matchAll(/{{([a-zA-Z0-9-_]+)}}/g);\n        for (const match of matches){\n            const replacement = (replacements[match[1]] || \"\").toString();\n            msg = msg.replace(\"{{\".concat(match[1], \"}}\"), replacement);\n        }\n        return \"\".concat(pkg, \": \").concat(msg);\n    }\n    return {\n        setPackageName (param) {\n            let { packageName: packageName2 } = param;\n            if (typeof packageName2 === \"string\") {\n                pkg = packageName2;\n            }\n            return this;\n        },\n        setMessages (param) {\n            let { customMessages: customMessages2 } = param;\n            Object.assign(messages, customMessages2 || {});\n            return this;\n        },\n        throwInvalidPublishableKeyError (params) {\n            throw new Error(buildMessage(messages.InvalidPublishableKeyErrorMessage, params));\n        },\n        throwInvalidFrontendApiError (params) {\n            throw new Error(buildMessage(messages.InvalidFrontendApiErrorMessage, params));\n        },\n        throwInvalidProxyUrl (params) {\n            throw new Error(buildMessage(messages.InvalidProxyUrlErrorMessage, params));\n        },\n        throwMissingPublishableKeyError () {\n            throw new Error(buildMessage(messages.MissingPublishableKeyErrorMessage));\n        }\n    };\n}\n //# sourceMappingURL=chunk-5DRMPUGE.mjs.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/@clerk/shared/dist/chunk-5DRMPUGE.mjs\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/@clerk/shared/dist/chunk-5E5NNJ3O.mjs":
/*!************************************************************!*\
  !*** ./node_modules/@clerk/shared/dist/chunk-5E5NNJ3O.mjs ***!
  \************************************************************/
/***/ (function(__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   addClerkPrefix: function() { return /* binding */ addClerkPrefix; },\n/* harmony export */   getClerkJsMajorVersionOrTag: function() { return /* binding */ getClerkJsMajorVersionOrTag; },\n/* harmony export */   getScriptUrl: function() { return /* binding */ getScriptUrl; },\n/* harmony export */   isStaging: function() { return /* binding */ isStaging; },\n/* harmony export */   parseSearchParams: function() { return /* binding */ parseSearchParams; },\n/* harmony export */   stripScheme: function() { return /* binding */ stripScheme; }\n/* harmony export */ });\n// src/utils/instance.ts\nfunction isStaging(frontendApi) {\n    return frontendApi.endsWith(\".lclstage.dev\") || frontendApi.endsWith(\".stgstage.dev\") || frontendApi.endsWith(\".clerkstage.dev\") || frontendApi.endsWith(\".accountsstage.dev\");\n}\n// src/url.ts\nfunction parseSearchParams() {\n    let queryString = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : \"\";\n    if (queryString.startsWith(\"?\")) {\n        queryString = queryString.slice(1);\n    }\n    return new URLSearchParams(queryString);\n}\nfunction stripScheme() {\n    let url = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : \"\";\n    return (url || \"\").replace(/^.+:\\/\\//, \"\");\n}\nfunction addClerkPrefix(str) {\n    if (!str) {\n        return \"\";\n    }\n    let regex;\n    if (str.match(/^(clerk\\.)+\\w*$/)) {\n        regex = /(clerk\\.)*(?=clerk\\.)/;\n    } else if (str.match(/\\.clerk.accounts/)) {\n        return str;\n    } else {\n        regex = /^(clerk\\.)*/gi;\n    }\n    const stripped = str.replace(regex, \"\");\n    return \"clerk.\".concat(stripped);\n}\nvar getClerkJsMajorVersionOrTag = (frontendApi, pkgVersion)=>{\n    if (!pkgVersion && isStaging(frontendApi)) {\n        return \"canary\";\n    }\n    if (!pkgVersion) {\n        return \"latest\";\n    }\n    return pkgVersion.split(\".\")[0] || \"latest\";\n};\nvar getScriptUrl = (frontendApi, param)=>{\n    let { pkgVersion = \"4.68.2\", clerkJSVersion } = param;\n    const noSchemeFrontendApi = frontendApi.replace(/http(s)?:\\/\\//, \"\");\n    const major = getClerkJsMajorVersionOrTag(frontendApi, pkgVersion);\n    return \"https://\".concat(noSchemeFrontendApi, \"/npm/@clerk/clerk-js@\").concat(clerkJSVersion || major, \"/dist/clerk.browser.js\");\n};\n //# sourceMappingURL=chunk-5E5NNJ3O.mjs.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL25vZGVfbW9kdWxlcy9AY2xlcmsvc2hhcmVkL2Rpc3QvY2h1bmstNUU1Tk5KM08ubWpzIiwibWFwcGluZ3MiOiI7Ozs7Ozs7OztBQUFBLHdCQUF3QjtBQUN4QixTQUFTQSxVQUFVQyxXQUFXO0lBQzVCLE9BQU9BLFlBQVlDLFFBQVEsQ0FBQyxvQkFBb0JELFlBQVlDLFFBQVEsQ0FBQyxvQkFBb0JELFlBQVlDLFFBQVEsQ0FBQyxzQkFBc0JELFlBQVlDLFFBQVEsQ0FBQztBQUMzSjtBQUVBLGFBQWE7QUFDYixTQUFTQztRQUFrQkMsY0FBQUEsaUVBQWM7SUFDdkMsSUFBSUEsWUFBWUMsVUFBVSxDQUFDLE1BQU07UUFDL0JELGNBQWNBLFlBQVlFLEtBQUssQ0FBQztJQUNsQztJQUNBLE9BQU8sSUFBSUMsZ0JBQWdCSDtBQUM3QjtBQUNBLFNBQVNJO1FBQVlDLE1BQUFBLGlFQUFNO0lBQ3pCLE9BQU8sQ0FBQ0EsT0FBTyxFQUFDLEVBQUdDLE9BQU8sQ0FBQyxZQUFZO0FBQ3pDO0FBQ0EsU0FBU0MsZUFBZUMsR0FBRztJQUN6QixJQUFJLENBQUNBLEtBQUs7UUFDUixPQUFPO0lBQ1Q7SUFDQSxJQUFJQztJQUNKLElBQUlELElBQUlFLEtBQUssQ0FBQyxvQkFBb0I7UUFDaENELFFBQVE7SUFDVixPQUFPLElBQUlELElBQUlFLEtBQUssQ0FBQyxxQkFBcUI7UUFDeEMsT0FBT0Y7SUFDVCxPQUFPO1FBQ0xDLFFBQVE7SUFDVjtJQUNBLE1BQU1FLFdBQVdILElBQUlGLE9BQU8sQ0FBQ0csT0FBTztJQUNwQyxPQUFPLFNBQWtCLE9BQVRFO0FBQ2xCO0FBQ0EsSUFBSUMsOEJBQThCLENBQUNmLGFBQWFnQjtJQUM5QyxJQUFJLENBQUNBLGNBQWNqQixVQUFVQyxjQUFjO1FBQ3pDLE9BQU87SUFDVDtJQUNBLElBQUksQ0FBQ2dCLFlBQVk7UUFDZixPQUFPO0lBQ1Q7SUFDQSxPQUFPQSxXQUFXQyxLQUFLLENBQUMsSUFBSSxDQUFDLEVBQUUsSUFBSTtBQUNyQztBQUNBLElBQUlDLGVBQWUsQ0FBQ2xCO1FBQWEsRUFBRWdCLGFBQWEsUUFBUSxFQUFFRyxjQUFjLEVBQUU7SUFDeEUsTUFBTUMsc0JBQXNCcEIsWUFBWVMsT0FBTyxDQUFDLGlCQUFpQjtJQUNqRSxNQUFNWSxRQUFRTiw0QkFBNEJmLGFBQWFnQjtJQUN2RCxPQUFPLFdBQXNERyxPQUEzQ0MscUJBQW9CLHlCQUErQyxPQUF4QkQsa0JBQWtCRSxPQUFNO0FBQ3ZGO0FBU0UsQ0FDRiwyQ0FBMkMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9fTl9FLy4vbm9kZV9tb2R1bGVzL0BjbGVyay9zaGFyZWQvZGlzdC9jaHVuay01RTVOTkozTy5tanM/MTZiMSJdLCJzb3VyY2VzQ29udGVudCI6WyIvLyBzcmMvdXRpbHMvaW5zdGFuY2UudHNcbmZ1bmN0aW9uIGlzU3RhZ2luZyhmcm9udGVuZEFwaSkge1xuICByZXR1cm4gZnJvbnRlbmRBcGkuZW5kc1dpdGgoXCIubGNsc3RhZ2UuZGV2XCIpIHx8IGZyb250ZW5kQXBpLmVuZHNXaXRoKFwiLnN0Z3N0YWdlLmRldlwiKSB8fCBmcm9udGVuZEFwaS5lbmRzV2l0aChcIi5jbGVya3N0YWdlLmRldlwiKSB8fCBmcm9udGVuZEFwaS5lbmRzV2l0aChcIi5hY2NvdW50c3N0YWdlLmRldlwiKTtcbn1cblxuLy8gc3JjL3VybC50c1xuZnVuY3Rpb24gcGFyc2VTZWFyY2hQYXJhbXMocXVlcnlTdHJpbmcgPSBcIlwiKSB7XG4gIGlmIChxdWVyeVN0cmluZy5zdGFydHNXaXRoKFwiP1wiKSkge1xuICAgIHF1ZXJ5U3RyaW5nID0gcXVlcnlTdHJpbmcuc2xpY2UoMSk7XG4gIH1cbiAgcmV0dXJuIG5ldyBVUkxTZWFyY2hQYXJhbXMocXVlcnlTdHJpbmcpO1xufVxuZnVuY3Rpb24gc3RyaXBTY2hlbWUodXJsID0gXCJcIikge1xuICByZXR1cm4gKHVybCB8fCBcIlwiKS5yZXBsYWNlKC9eLis6XFwvXFwvLywgXCJcIik7XG59XG5mdW5jdGlvbiBhZGRDbGVya1ByZWZpeChzdHIpIHtcbiAgaWYgKCFzdHIpIHtcbiAgICByZXR1cm4gXCJcIjtcbiAgfVxuICBsZXQgcmVnZXg7XG4gIGlmIChzdHIubWF0Y2goL14oY2xlcmtcXC4pK1xcdyokLykpIHtcbiAgICByZWdleCA9IC8oY2xlcmtcXC4pKig/PWNsZXJrXFwuKS87XG4gIH0gZWxzZSBpZiAoc3RyLm1hdGNoKC9cXC5jbGVyay5hY2NvdW50cy8pKSB7XG4gICAgcmV0dXJuIHN0cjtcbiAgfSBlbHNlIHtcbiAgICByZWdleCA9IC9eKGNsZXJrXFwuKSovZ2k7XG4gIH1cbiAgY29uc3Qgc3RyaXBwZWQgPSBzdHIucmVwbGFjZShyZWdleCwgXCJcIik7XG4gIHJldHVybiBgY2xlcmsuJHtzdHJpcHBlZH1gO1xufVxudmFyIGdldENsZXJrSnNNYWpvclZlcnNpb25PclRhZyA9IChmcm9udGVuZEFwaSwgcGtnVmVyc2lvbikgPT4ge1xuICBpZiAoIXBrZ1ZlcnNpb24gJiYgaXNTdGFnaW5nKGZyb250ZW5kQXBpKSkge1xuICAgIHJldHVybiBcImNhbmFyeVwiO1xuICB9XG4gIGlmICghcGtnVmVyc2lvbikge1xuICAgIHJldHVybiBcImxhdGVzdFwiO1xuICB9XG4gIHJldHVybiBwa2dWZXJzaW9uLnNwbGl0KFwiLlwiKVswXSB8fCBcImxhdGVzdFwiO1xufTtcbnZhciBnZXRTY3JpcHRVcmwgPSAoZnJvbnRlbmRBcGksIHsgcGtnVmVyc2lvbiA9IFwiNC42OC4yXCIsIGNsZXJrSlNWZXJzaW9uIH0pID0+IHtcbiAgY29uc3Qgbm9TY2hlbWVGcm9udGVuZEFwaSA9IGZyb250ZW5kQXBpLnJlcGxhY2UoL2h0dHAocyk/OlxcL1xcLy8sIFwiXCIpO1xuICBjb25zdCBtYWpvciA9IGdldENsZXJrSnNNYWpvclZlcnNpb25PclRhZyhmcm9udGVuZEFwaSwgcGtnVmVyc2lvbik7XG4gIHJldHVybiBgaHR0cHM6Ly8ke25vU2NoZW1lRnJvbnRlbmRBcGl9L25wbS9AY2xlcmsvY2xlcmstanNAJHtjbGVya0pTVmVyc2lvbiB8fCBtYWpvcn0vZGlzdC9jbGVyay5icm93c2VyLmpzYDtcbn07XG5cbmV4cG9ydCB7XG4gIGlzU3RhZ2luZyxcbiAgcGFyc2VTZWFyY2hQYXJhbXMsXG4gIHN0cmlwU2NoZW1lLFxuICBhZGRDbGVya1ByZWZpeCxcbiAgZ2V0Q2xlcmtKc01ham9yVmVyc2lvbk9yVGFnLFxuICBnZXRTY3JpcHRVcmxcbn07XG4vLyMgc291cmNlTWFwcGluZ1VSTD1jaHVuay01RTVOTkozTy5tanMubWFwIl0sIm5hbWVzIjpbImlzU3RhZ2luZyIsImZyb250ZW5kQXBpIiwiZW5kc1dpdGgiLCJwYXJzZVNlYXJjaFBhcmFtcyIsInF1ZXJ5U3RyaW5nIiwic3RhcnRzV2l0aCIsInNsaWNlIiwiVVJMU2VhcmNoUGFyYW1zIiwic3RyaXBTY2hlbWUiLCJ1cmwiLCJyZXBsYWNlIiwiYWRkQ2xlcmtQcmVmaXgiLCJzdHIiLCJyZWdleCIsIm1hdGNoIiwic3RyaXBwZWQiLCJnZXRDbGVya0pzTWFqb3JWZXJzaW9uT3JUYWciLCJwa2dWZXJzaW9uIiwic3BsaXQiLCJnZXRTY3JpcHRVcmwiLCJjbGVya0pTVmVyc2lvbiIsIm5vU2NoZW1lRnJvbnRlbmRBcGkiLCJtYWpvciJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/@clerk/shared/dist/chunk-5E5NNJ3O.mjs\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/@clerk/shared/dist/chunk-5JU2E5TY.mjs":
/*!************************************************************!*\
  !*** ./node_modules/@clerk/shared/dist/chunk-5JU2E5TY.mjs ***!
  \************************************************************/
/***/ (function(__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   extension: function() { return /* binding */ extension; },\n/* harmony export */   readJSONFile: function() { return /* binding */ readJSONFile; }\n/* harmony export */ });\n// src/file.ts\nfunction readJSONFile(file) {\n    return new Promise((resolve, reject)=>{\n        const reader = new FileReader();\n        reader.addEventListener(\"load\", function() {\n            const result = JSON.parse(reader.result);\n            resolve(result);\n        });\n        reader.addEventListener(\"error\", reject);\n        reader.readAsText(file);\n    });\n}\nvar MimeTypeToExtensionMap = Object.freeze({\n    \"image/png\": \"png\",\n    \"image/jpeg\": \"jpg\",\n    \"image/gif\": \"gif\",\n    \"image/webp\": \"webp\",\n    \"image/x-icon\": \"ico\",\n    \"image/vnd.microsoft.icon\": \"ico\"\n});\nvar extension = (mimeType)=>{\n    return MimeTypeToExtensionMap[mimeType];\n};\n //# sourceMappingURL=chunk-5JU2E5TY.mjs.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL25vZGVfbW9kdWxlcy9AY2xlcmsvc2hhcmVkL2Rpc3QvY2h1bmstNUpVMkU1VFkubWpzIiwibWFwcGluZ3MiOiI7Ozs7O0FBQUEsY0FBYztBQUNkLFNBQVNBLGFBQWFDLElBQUk7SUFDeEIsT0FBTyxJQUFJQyxRQUFRLENBQUNDLFNBQVNDO1FBQzNCLE1BQU1DLFNBQVMsSUFBSUM7UUFDbkJELE9BQU9FLGdCQUFnQixDQUFDLFFBQVE7WUFDOUIsTUFBTUMsU0FBU0MsS0FBS0MsS0FBSyxDQUFDTCxPQUFPRyxNQUFNO1lBQ3ZDTCxRQUFRSztRQUNWO1FBQ0FILE9BQU9FLGdCQUFnQixDQUFDLFNBQVNIO1FBQ2pDQyxPQUFPTSxVQUFVLENBQUNWO0lBQ3BCO0FBQ0Y7QUFDQSxJQUFJVyx5QkFBeUJDLE9BQU9DLE1BQU0sQ0FBQztJQUN6QyxhQUFhO0lBQ2IsY0FBYztJQUNkLGFBQWE7SUFDYixjQUFjO0lBQ2QsZ0JBQWdCO0lBQ2hCLDRCQUE0QjtBQUM5QjtBQUNBLElBQUlDLFlBQVksQ0FBQ0M7SUFDZixPQUFPSixzQkFBc0IsQ0FBQ0ksU0FBUztBQUN6QztBQUtFLENBQ0YsMkNBQTJDIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vX05fRS8uL25vZGVfbW9kdWxlcy9AY2xlcmsvc2hhcmVkL2Rpc3QvY2h1bmstNUpVMkU1VFkubWpzPzAwZWEiXSwic291cmNlc0NvbnRlbnQiOlsiLy8gc3JjL2ZpbGUudHNcbmZ1bmN0aW9uIHJlYWRKU09ORmlsZShmaWxlKSB7XG4gIHJldHVybiBuZXcgUHJvbWlzZSgocmVzb2x2ZSwgcmVqZWN0KSA9PiB7XG4gICAgY29uc3QgcmVhZGVyID0gbmV3IEZpbGVSZWFkZXIoKTtcbiAgICByZWFkZXIuYWRkRXZlbnRMaXN0ZW5lcihcImxvYWRcIiwgZnVuY3Rpb24oKSB7XG4gICAgICBjb25zdCByZXN1bHQgPSBKU09OLnBhcnNlKHJlYWRlci5yZXN1bHQpO1xuICAgICAgcmVzb2x2ZShyZXN1bHQpO1xuICAgIH0pO1xuICAgIHJlYWRlci5hZGRFdmVudExpc3RlbmVyKFwiZXJyb3JcIiwgcmVqZWN0KTtcbiAgICByZWFkZXIucmVhZEFzVGV4dChmaWxlKTtcbiAgfSk7XG59XG52YXIgTWltZVR5cGVUb0V4dGVuc2lvbk1hcCA9IE9iamVjdC5mcmVlemUoe1xuICBcImltYWdlL3BuZ1wiOiBcInBuZ1wiLFxuICBcImltYWdlL2pwZWdcIjogXCJqcGdcIixcbiAgXCJpbWFnZS9naWZcIjogXCJnaWZcIixcbiAgXCJpbWFnZS93ZWJwXCI6IFwid2VicFwiLFxuICBcImltYWdlL3gtaWNvblwiOiBcImljb1wiLFxuICBcImltYWdlL3ZuZC5taWNyb3NvZnQuaWNvblwiOiBcImljb1wiXG59KTtcbnZhciBleHRlbnNpb24gPSAobWltZVR5cGUpID0+IHtcbiAgcmV0dXJuIE1pbWVUeXBlVG9FeHRlbnNpb25NYXBbbWltZVR5cGVdO1xufTtcblxuZXhwb3J0IHtcbiAgcmVhZEpTT05GaWxlLFxuICBleHRlbnNpb25cbn07XG4vLyMgc291cmNlTWFwcGluZ1VSTD1jaHVuay01SlUyRTVUWS5tanMubWFwIl0sIm5hbWVzIjpbInJlYWRKU09ORmlsZSIsImZpbGUiLCJQcm9taXNlIiwicmVzb2x2ZSIsInJlamVjdCIsInJlYWRlciIsIkZpbGVSZWFkZXIiLCJhZGRFdmVudExpc3RlbmVyIiwicmVzdWx0IiwiSlNPTiIsInBhcnNlIiwicmVhZEFzVGV4dCIsIk1pbWVUeXBlVG9FeHRlbnNpb25NYXAiLCJPYmplY3QiLCJmcmVlemUiLCJleHRlbnNpb24iLCJtaW1lVHlwZSJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/@clerk/shared/dist/chunk-5JU2E5TY.mjs\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/@clerk/shared/dist/chunk-5QXIOV6T.mjs":
/*!************************************************************!*\
  !*** ./node_modules/@clerk/shared/dist/chunk-5QXIOV6T.mjs ***!
  \************************************************************/
/***/ (function(__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   camelToSnake: function() { return /* binding */ camelToSnake; },\n/* harmony export */   deepCamelToSnake: function() { return /* binding */ deepCamelToSnake; },\n/* harmony export */   deepSnakeToCamel: function() { return /* binding */ deepSnakeToCamel; },\n/* harmony export */   isIPV4Address: function() { return /* binding */ isIPV4Address; },\n/* harmony export */   snakeToCamel: function() { return /* binding */ snakeToCamel; },\n/* harmony export */   titleize: function() { return /* binding */ titleize; },\n/* harmony export */   toSentence: function() { return /* binding */ toSentence; }\n/* harmony export */ });\n// src/underscore.ts\nvar toSentence = (items)=>{\n    if (items.length == 0) {\n        return \"\";\n    }\n    if (items.length == 1) {\n        return items[0];\n    }\n    let sentence = items.slice(0, -1).join(\", \");\n    sentence += \", or \".concat(items.slice(-1));\n    return sentence;\n};\nvar IP_V4_ADDRESS_REGEX = /^(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\\.(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\\.(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\\.(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)$/;\nfunction isIPV4Address(str) {\n    return IP_V4_ADDRESS_REGEX.test(str || \"\");\n}\nfunction titleize(str) {\n    const s = str || \"\";\n    return s.charAt(0).toUpperCase() + s.slice(1);\n}\nfunction snakeToCamel(str) {\n    return str ? str.replace(/([-_][a-z])/g, (match)=>match.toUpperCase().replace(/-|_/, \"\")) : \"\";\n}\nfunction camelToSnake(str) {\n    return str ? str.replace(/[A-Z]/g, (letter)=>\"_\".concat(letter.toLowerCase())) : \"\";\n}\nvar createDeepObjectTransformer = (transform)=>{\n    const deepTransform = (obj)=>{\n        if (!obj) {\n            return obj;\n        }\n        if (Array.isArray(obj)) {\n            return obj.map((el)=>{\n                if (typeof el === \"object\" || Array.isArray(el)) {\n                    return deepTransform(el);\n                }\n                return el;\n            });\n        }\n        const copy = {\n            ...obj\n        };\n        const keys = Object.keys(copy);\n        for (const oldName of keys){\n            const newName = transform(oldName.toString());\n            if (newName !== oldName) {\n                copy[newName] = copy[oldName];\n                delete copy[oldName];\n            }\n            if (typeof copy[newName] === \"object\") {\n                copy[newName] = deepTransform(copy[newName]);\n            }\n        }\n        return copy;\n    };\n    return deepTransform;\n};\nvar deepCamelToSnake = createDeepObjectTransformer(camelToSnake);\nvar deepSnakeToCamel = createDeepObjectTransformer(snakeToCamel);\n //# sourceMappingURL=chunk-5QXIOV6T.mjs.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL25vZGVfbW9kdWxlcy9AY2xlcmsvc2hhcmVkL2Rpc3QvY2h1bmstNVFYSU9WNlQubWpzIiwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7QUFBQSxvQkFBb0I7QUFDcEIsSUFBSUEsYUFBYSxDQUFDQztJQUNoQixJQUFJQSxNQUFNQyxNQUFNLElBQUksR0FBRztRQUNyQixPQUFPO0lBQ1Q7SUFDQSxJQUFJRCxNQUFNQyxNQUFNLElBQUksR0FBRztRQUNyQixPQUFPRCxLQUFLLENBQUMsRUFBRTtJQUNqQjtJQUNBLElBQUlFLFdBQVdGLE1BQU1HLEtBQUssQ0FBQyxHQUFHLENBQUMsR0FBR0MsSUFBSSxDQUFDO0lBQ3ZDRixZQUFZLFFBQXdCLE9BQWhCRixNQUFNRyxLQUFLLENBQUMsQ0FBQztJQUNqQyxPQUFPRDtBQUNUO0FBQ0EsSUFBSUcsc0JBQXNCO0FBQzFCLFNBQVNDLGNBQWNDLEdBQUc7SUFDeEIsT0FBT0Ysb0JBQW9CRyxJQUFJLENBQUNELE9BQU87QUFDekM7QUFDQSxTQUFTRSxTQUFTRixHQUFHO0lBQ25CLE1BQU1HLElBQUlILE9BQU87SUFDakIsT0FBT0csRUFBRUMsTUFBTSxDQUFDLEdBQUdDLFdBQVcsS0FBS0YsRUFBRVAsS0FBSyxDQUFDO0FBQzdDO0FBQ0EsU0FBU1UsYUFBYU4sR0FBRztJQUN2QixPQUFPQSxNQUFNQSxJQUFJTyxPQUFPLENBQUMsZ0JBQWdCLENBQUNDLFFBQVVBLE1BQU1ILFdBQVcsR0FBR0UsT0FBTyxDQUFDLE9BQU8sT0FBTztBQUNoRztBQUNBLFNBQVNFLGFBQWFULEdBQUc7SUFDdkIsT0FBT0EsTUFBTUEsSUFBSU8sT0FBTyxDQUFDLFVBQVUsQ0FBQ0csU0FBVyxJQUF5QixPQUFyQkEsT0FBT0MsV0FBVyxPQUFRO0FBQy9FO0FBQ0EsSUFBSUMsOEJBQThCLENBQUNDO0lBQ2pDLE1BQU1DLGdCQUFnQixDQUFDQztRQUNyQixJQUFJLENBQUNBLEtBQUs7WUFDUixPQUFPQTtRQUNUO1FBQ0EsSUFBSUMsTUFBTUMsT0FBTyxDQUFDRixNQUFNO1lBQ3RCLE9BQU9BLElBQUlHLEdBQUcsQ0FBQyxDQUFDQztnQkFDZCxJQUFJLE9BQU9BLE9BQU8sWUFBWUgsTUFBTUMsT0FBTyxDQUFDRSxLQUFLO29CQUMvQyxPQUFPTCxjQUFjSztnQkFDdkI7Z0JBQ0EsT0FBT0E7WUFDVDtRQUNGO1FBQ0EsTUFBTUMsT0FBTztZQUFFLEdBQUdMLEdBQUc7UUFBQztRQUN0QixNQUFNTSxPQUFPQyxPQUFPRCxJQUFJLENBQUNEO1FBQ3pCLEtBQUssTUFBTUcsV0FBV0YsS0FBTTtZQUMxQixNQUFNRyxVQUFVWCxVQUFVVSxRQUFRRSxRQUFRO1lBQzFDLElBQUlELFlBQVlELFNBQVM7Z0JBQ3ZCSCxJQUFJLENBQUNJLFFBQVEsR0FBR0osSUFBSSxDQUFDRyxRQUFRO2dCQUM3QixPQUFPSCxJQUFJLENBQUNHLFFBQVE7WUFDdEI7WUFDQSxJQUFJLE9BQU9ILElBQUksQ0FBQ0ksUUFBUSxLQUFLLFVBQVU7Z0JBQ3JDSixJQUFJLENBQUNJLFFBQVEsR0FBR1YsY0FBY00sSUFBSSxDQUFDSSxRQUFRO1lBQzdDO1FBQ0Y7UUFDQSxPQUFPSjtJQUNUO0lBQ0EsT0FBT047QUFDVDtBQUNBLElBQUlZLG1CQUFtQmQsNEJBQTRCSDtBQUNuRCxJQUFJa0IsbUJBQW1CZiw0QkFBNEJOO0FBVWpELENBQ0YsMkNBQTJDIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vX05fRS8uL25vZGVfbW9kdWxlcy9AY2xlcmsvc2hhcmVkL2Rpc3QvY2h1bmstNVFYSU9WNlQubWpzPzFkZjMiXSwic291cmNlc0NvbnRlbnQiOlsiLy8gc3JjL3VuZGVyc2NvcmUudHNcbnZhciB0b1NlbnRlbmNlID0gKGl0ZW1zKSA9PiB7XG4gIGlmIChpdGVtcy5sZW5ndGggPT0gMCkge1xuICAgIHJldHVybiBcIlwiO1xuICB9XG4gIGlmIChpdGVtcy5sZW5ndGggPT0gMSkge1xuICAgIHJldHVybiBpdGVtc1swXTtcbiAgfVxuICBsZXQgc2VudGVuY2UgPSBpdGVtcy5zbGljZSgwLCAtMSkuam9pbihcIiwgXCIpO1xuICBzZW50ZW5jZSArPSBgLCBvciAke2l0ZW1zLnNsaWNlKC0xKX1gO1xuICByZXR1cm4gc2VudGVuY2U7XG59O1xudmFyIElQX1Y0X0FERFJFU1NfUkVHRVggPSAvXigyNVswLTVdfDJbMC00XVswLTldfFswMV0/WzAtOV1bMC05XT8pXFwuKDI1WzAtNV18MlswLTRdWzAtOV18WzAxXT9bMC05XVswLTldPylcXC4oMjVbMC01XXwyWzAtNF1bMC05XXxbMDFdP1swLTldWzAtOV0/KVxcLigyNVswLTVdfDJbMC00XVswLTldfFswMV0/WzAtOV1bMC05XT8pJC87XG5mdW5jdGlvbiBpc0lQVjRBZGRyZXNzKHN0cikge1xuICByZXR1cm4gSVBfVjRfQUREUkVTU19SRUdFWC50ZXN0KHN0ciB8fCBcIlwiKTtcbn1cbmZ1bmN0aW9uIHRpdGxlaXplKHN0cikge1xuICBjb25zdCBzID0gc3RyIHx8IFwiXCI7XG4gIHJldHVybiBzLmNoYXJBdCgwKS50b1VwcGVyQ2FzZSgpICsgcy5zbGljZSgxKTtcbn1cbmZ1bmN0aW9uIHNuYWtlVG9DYW1lbChzdHIpIHtcbiAgcmV0dXJuIHN0ciA/IHN0ci5yZXBsYWNlKC8oWy1fXVthLXpdKS9nLCAobWF0Y2gpID0+IG1hdGNoLnRvVXBwZXJDYXNlKCkucmVwbGFjZSgvLXxfLywgXCJcIikpIDogXCJcIjtcbn1cbmZ1bmN0aW9uIGNhbWVsVG9TbmFrZShzdHIpIHtcbiAgcmV0dXJuIHN0ciA/IHN0ci5yZXBsYWNlKC9bQS1aXS9nLCAobGV0dGVyKSA9PiBgXyR7bGV0dGVyLnRvTG93ZXJDYXNlKCl9YCkgOiBcIlwiO1xufVxudmFyIGNyZWF0ZURlZXBPYmplY3RUcmFuc2Zvcm1lciA9ICh0cmFuc2Zvcm0pID0+IHtcbiAgY29uc3QgZGVlcFRyYW5zZm9ybSA9IChvYmopID0+IHtcbiAgICBpZiAoIW9iaikge1xuICAgICAgcmV0dXJuIG9iajtcbiAgICB9XG4gICAgaWYgKEFycmF5LmlzQXJyYXkob2JqKSkge1xuICAgICAgcmV0dXJuIG9iai5tYXAoKGVsKSA9PiB7XG4gICAgICAgIGlmICh0eXBlb2YgZWwgPT09IFwib2JqZWN0XCIgfHwgQXJyYXkuaXNBcnJheShlbCkpIHtcbiAgICAgICAgICByZXR1cm4gZGVlcFRyYW5zZm9ybShlbCk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIGVsO1xuICAgICAgfSk7XG4gICAgfVxuICAgIGNvbnN0IGNvcHkgPSB7IC4uLm9iaiB9O1xuICAgIGNvbnN0IGtleXMgPSBPYmplY3Qua2V5cyhjb3B5KTtcbiAgICBmb3IgKGNvbnN0IG9sZE5hbWUgb2Yga2V5cykge1xuICAgICAgY29uc3QgbmV3TmFtZSA9IHRyYW5zZm9ybShvbGROYW1lLnRvU3RyaW5nKCkpO1xuICAgICAgaWYgKG5ld05hbWUgIT09IG9sZE5hbWUpIHtcbiAgICAgICAgY29weVtuZXdOYW1lXSA9IGNvcHlbb2xkTmFtZV07XG4gICAgICAgIGRlbGV0ZSBjb3B5W29sZE5hbWVdO1xuICAgICAgfVxuICAgICAgaWYgKHR5cGVvZiBjb3B5W25ld05hbWVdID09PSBcIm9iamVjdFwiKSB7XG4gICAgICAgIGNvcHlbbmV3TmFtZV0gPSBkZWVwVHJhbnNmb3JtKGNvcHlbbmV3TmFtZV0pO1xuICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gY29weTtcbiAgfTtcbiAgcmV0dXJuIGRlZXBUcmFuc2Zvcm07XG59O1xudmFyIGRlZXBDYW1lbFRvU25ha2UgPSBjcmVhdGVEZWVwT2JqZWN0VHJhbnNmb3JtZXIoY2FtZWxUb1NuYWtlKTtcbnZhciBkZWVwU25ha2VUb0NhbWVsID0gY3JlYXRlRGVlcE9iamVjdFRyYW5zZm9ybWVyKHNuYWtlVG9DYW1lbCk7XG5cbmV4cG9ydCB7XG4gIHRvU2VudGVuY2UsXG4gIGlzSVBWNEFkZHJlc3MsXG4gIHRpdGxlaXplLFxuICBzbmFrZVRvQ2FtZWwsXG4gIGNhbWVsVG9TbmFrZSxcbiAgZGVlcENhbWVsVG9TbmFrZSxcbiAgZGVlcFNuYWtlVG9DYW1lbFxufTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWNodW5rLTVRWElPVjZULm1qcy5tYXAiXSwibmFtZXMiOlsidG9TZW50ZW5jZSIsIml0ZW1zIiwibGVuZ3RoIiwic2VudGVuY2UiLCJzbGljZSIsImpvaW4iLCJJUF9WNF9BRERSRVNTX1JFR0VYIiwiaXNJUFY0QWRkcmVzcyIsInN0ciIsInRlc3QiLCJ0aXRsZWl6ZSIsInMiLCJjaGFyQXQiLCJ0b1VwcGVyQ2FzZSIsInNuYWtlVG9DYW1lbCIsInJlcGxhY2UiLCJtYXRjaCIsImNhbWVsVG9TbmFrZSIsImxldHRlciIsInRvTG93ZXJDYXNlIiwiY3JlYXRlRGVlcE9iamVjdFRyYW5zZm9ybWVyIiwidHJhbnNmb3JtIiwiZGVlcFRyYW5zZm9ybSIsIm9iaiIsIkFycmF5IiwiaXNBcnJheSIsIm1hcCIsImVsIiwiY29weSIsImtleXMiLCJPYmplY3QiLCJvbGROYW1lIiwibmV3TmFtZSIsInRvU3RyaW5nIiwiZGVlcENhbWVsVG9TbmFrZSIsImRlZXBTbmFrZVRvQ2FtZWwiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/@clerk/shared/dist/chunk-5QXIOV6T.mjs\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/@clerk/shared/dist/chunk-FSKKI4LG.mjs":
/*!************************************************************!*\
  !*** ./node_modules/@clerk/shared/dist/chunk-FSKKI4LG.mjs ***!
  \************************************************************/
/***/ (function(__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   addYears: function() { return /* binding */ addYears; },\n/* harmony export */   dateTo12HourTime: function() { return /* binding */ dateTo12HourTime; },\n/* harmony export */   differenceInCalendarDays: function() { return /* binding */ differenceInCalendarDays; },\n/* harmony export */   formatRelative: function() { return /* binding */ formatRelative; },\n/* harmony export */   normalizeDate: function() { return /* binding */ normalizeDate; }\n/* harmony export */ });\n// src/date.ts\nvar MILLISECONDS_IN_DAY = 864e5;\nfunction dateTo12HourTime(date) {\n    if (!date) {\n        return \"\";\n    }\n    return date.toLocaleString(\"en-US\", {\n        hour: \"2-digit\",\n        minute: \"numeric\",\n        hour12: true\n    });\n}\nfunction differenceInCalendarDays(a, b) {\n    let { absolute = true } = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : {};\n    if (!a || !b) {\n        return 0;\n    }\n    const utcA = Date.UTC(a.getFullYear(), a.getMonth(), a.getDate());\n    const utcB = Date.UTC(b.getFullYear(), b.getMonth(), b.getDate());\n    const diff = Math.floor((utcB - utcA) / MILLISECONDS_IN_DAY);\n    return absolute ? Math.abs(diff) : diff;\n}\nfunction normalizeDate(d) {\n    try {\n        return new Date(d || /* @__PURE__ */ new Date());\n    } catch (e) {\n        return /* @__PURE__ */ new Date();\n    }\n}\nfunction formatRelative(props) {\n    const { date, relativeTo } = props;\n    if (!date || !relativeTo) {\n        return null;\n    }\n    const a = normalizeDate(date);\n    const b = normalizeDate(relativeTo);\n    const differenceInDays = differenceInCalendarDays(b, a, {\n        absolute: false\n    });\n    if (differenceInDays < -6) {\n        return {\n            relativeDateCase: \"other\",\n            date: a\n        };\n    }\n    if (differenceInDays < -1) {\n        return {\n            relativeDateCase: \"previous6Days\",\n            date: a\n        };\n    }\n    if (differenceInDays === -1) {\n        return {\n            relativeDateCase: \"lastDay\",\n            date: a\n        };\n    }\n    if (differenceInDays === 0) {\n        return {\n            relativeDateCase: \"sameDay\",\n            date: a\n        };\n    }\n    if (differenceInDays === 1) {\n        return {\n            relativeDateCase: \"nextDay\",\n            date: a\n        };\n    }\n    if (differenceInDays < 7) {\n        return {\n            relativeDateCase: \"next6Days\",\n            date: a\n        };\n    }\n    return {\n        relativeDateCase: \"other\",\n        date: a\n    };\n}\nfunction addYears(initialDate, yearsToAdd) {\n    const date = normalizeDate(initialDate);\n    date.setFullYear(date.getFullYear() + yearsToAdd);\n    return date;\n}\n //# sourceMappingURL=chunk-FSKKI4LG.mjs.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL25vZGVfbW9kdWxlcy9AY2xlcmsvc2hhcmVkL2Rpc3QvY2h1bmstRlNLS0k0TEcubWpzIiwibWFwcGluZ3MiOiI7Ozs7Ozs7O0FBQUEsY0FBYztBQUNkLElBQUlBLHNCQUFzQjtBQUMxQixTQUFTQyxpQkFBaUJDLElBQUk7SUFDNUIsSUFBSSxDQUFDQSxNQUFNO1FBQ1QsT0FBTztJQUNUO0lBQ0EsT0FBT0EsS0FBS0MsY0FBYyxDQUFDLFNBQVM7UUFDbENDLE1BQU07UUFDTkMsUUFBUTtRQUNSQyxRQUFRO0lBQ1Y7QUFDRjtBQUNBLFNBQVNDLHlCQUF5QkMsQ0FBQyxFQUFFQyxDQUFDO1FBQUUsRUFBRUMsV0FBVyxJQUFJLEVBQUUsR0FBbkIsaUVBQXNCLENBQUM7SUFDN0QsSUFBSSxDQUFDRixLQUFLLENBQUNDLEdBQUc7UUFDWixPQUFPO0lBQ1Q7SUFDQSxNQUFNRSxPQUFPQyxLQUFLQyxHQUFHLENBQUNMLEVBQUVNLFdBQVcsSUFBSU4sRUFBRU8sUUFBUSxJQUFJUCxFQUFFUSxPQUFPO0lBQzlELE1BQU1DLE9BQU9MLEtBQUtDLEdBQUcsQ0FBQ0osRUFBRUssV0FBVyxJQUFJTCxFQUFFTSxRQUFRLElBQUlOLEVBQUVPLE9BQU87SUFDOUQsTUFBTUUsT0FBT0MsS0FBS0MsS0FBSyxDQUFDLENBQUNILE9BQU9OLElBQUcsSUFBS1g7SUFDeEMsT0FBT1UsV0FBV1MsS0FBS0UsR0FBRyxDQUFDSCxRQUFRQTtBQUNyQztBQUNBLFNBQVNJLGNBQWNDLENBQUM7SUFDdEIsSUFBSTtRQUNGLE9BQU8sSUFBSVgsS0FBS1csS0FBSyxhQUFhLEdBQUcsSUFBSVg7SUFDM0MsRUFBRSxPQUFPWSxHQUFHO1FBQ1YsT0FBTyxhQUFhLEdBQUcsSUFBSVo7SUFDN0I7QUFDRjtBQUNBLFNBQVNhLGVBQWVDLEtBQUs7SUFDM0IsTUFBTSxFQUFFeEIsSUFBSSxFQUFFeUIsVUFBVSxFQUFFLEdBQUdEO0lBQzdCLElBQUksQ0FBQ3hCLFFBQVEsQ0FBQ3lCLFlBQVk7UUFDeEIsT0FBTztJQUNUO0lBQ0EsTUFBTW5CLElBQUljLGNBQWNwQjtJQUN4QixNQUFNTyxJQUFJYSxjQUFjSztJQUN4QixNQUFNQyxtQkFBbUJyQix5QkFBeUJFLEdBQUdELEdBQUc7UUFBRUUsVUFBVTtJQUFNO0lBQzFFLElBQUlrQixtQkFBbUIsQ0FBQyxHQUFHO1FBQ3pCLE9BQU87WUFBRUMsa0JBQWtCO1lBQVMzQixNQUFNTTtRQUFFO0lBQzlDO0lBQ0EsSUFBSW9CLG1CQUFtQixDQUFDLEdBQUc7UUFDekIsT0FBTztZQUFFQyxrQkFBa0I7WUFBaUIzQixNQUFNTTtRQUFFO0lBQ3REO0lBQ0EsSUFBSW9CLHFCQUFxQixDQUFDLEdBQUc7UUFDM0IsT0FBTztZQUFFQyxrQkFBa0I7WUFBVzNCLE1BQU1NO1FBQUU7SUFDaEQ7SUFDQSxJQUFJb0IscUJBQXFCLEdBQUc7UUFDMUIsT0FBTztZQUFFQyxrQkFBa0I7WUFBVzNCLE1BQU1NO1FBQUU7SUFDaEQ7SUFDQSxJQUFJb0IscUJBQXFCLEdBQUc7UUFDMUIsT0FBTztZQUFFQyxrQkFBa0I7WUFBVzNCLE1BQU1NO1FBQUU7SUFDaEQ7SUFDQSxJQUFJb0IsbUJBQW1CLEdBQUc7UUFDeEIsT0FBTztZQUFFQyxrQkFBa0I7WUFBYTNCLE1BQU1NO1FBQUU7SUFDbEQ7SUFDQSxPQUFPO1FBQUVxQixrQkFBa0I7UUFBUzNCLE1BQU1NO0lBQUU7QUFDOUM7QUFDQSxTQUFTc0IsU0FBU0MsV0FBVyxFQUFFQyxVQUFVO0lBQ3ZDLE1BQU05QixPQUFPb0IsY0FBY1M7SUFDM0I3QixLQUFLK0IsV0FBVyxDQUFDL0IsS0FBS1ksV0FBVyxLQUFLa0I7SUFDdEMsT0FBTzlCO0FBQ1Q7QUFRRSxDQUNGLDJDQUEyQyIsInNvdXJjZXMiOlsid2VicGFjazovL19OX0UvLi9ub2RlX21vZHVsZXMvQGNsZXJrL3NoYXJlZC9kaXN0L2NodW5rLUZTS0tJNExHLm1qcz9kMzM4Il0sInNvdXJjZXNDb250ZW50IjpbIi8vIHNyYy9kYXRlLnRzXG52YXIgTUlMTElTRUNPTkRTX0lOX0RBWSA9IDg2NGU1O1xuZnVuY3Rpb24gZGF0ZVRvMTJIb3VyVGltZShkYXRlKSB7XG4gIGlmICghZGF0ZSkge1xuICAgIHJldHVybiBcIlwiO1xuICB9XG4gIHJldHVybiBkYXRlLnRvTG9jYWxlU3RyaW5nKFwiZW4tVVNcIiwge1xuICAgIGhvdXI6IFwiMi1kaWdpdFwiLFxuICAgIG1pbnV0ZTogXCJudW1lcmljXCIsXG4gICAgaG91cjEyOiB0cnVlXG4gIH0pO1xufVxuZnVuY3Rpb24gZGlmZmVyZW5jZUluQ2FsZW5kYXJEYXlzKGEsIGIsIHsgYWJzb2x1dGUgPSB0cnVlIH0gPSB7fSkge1xuICBpZiAoIWEgfHwgIWIpIHtcbiAgICByZXR1cm4gMDtcbiAgfVxuICBjb25zdCB1dGNBID0gRGF0ZS5VVEMoYS5nZXRGdWxsWWVhcigpLCBhLmdldE1vbnRoKCksIGEuZ2V0RGF0ZSgpKTtcbiAgY29uc3QgdXRjQiA9IERhdGUuVVRDKGIuZ2V0RnVsbFllYXIoKSwgYi5nZXRNb250aCgpLCBiLmdldERhdGUoKSk7XG4gIGNvbnN0IGRpZmYgPSBNYXRoLmZsb29yKCh1dGNCIC0gdXRjQSkgLyBNSUxMSVNFQ09ORFNfSU5fREFZKTtcbiAgcmV0dXJuIGFic29sdXRlID8gTWF0aC5hYnMoZGlmZikgOiBkaWZmO1xufVxuZnVuY3Rpb24gbm9ybWFsaXplRGF0ZShkKSB7XG4gIHRyeSB7XG4gICAgcmV0dXJuIG5ldyBEYXRlKGQgfHwgLyogQF9fUFVSRV9fICovIG5ldyBEYXRlKCkpO1xuICB9IGNhdGNoIChlKSB7XG4gICAgcmV0dXJuIC8qIEBfX1BVUkVfXyAqLyBuZXcgRGF0ZSgpO1xuICB9XG59XG5mdW5jdGlvbiBmb3JtYXRSZWxhdGl2ZShwcm9wcykge1xuICBjb25zdCB7IGRhdGUsIHJlbGF0aXZlVG8gfSA9IHByb3BzO1xuICBpZiAoIWRhdGUgfHwgIXJlbGF0aXZlVG8pIHtcbiAgICByZXR1cm4gbnVsbDtcbiAgfVxuICBjb25zdCBhID0gbm9ybWFsaXplRGF0ZShkYXRlKTtcbiAgY29uc3QgYiA9IG5vcm1hbGl6ZURhdGUocmVsYXRpdmVUbyk7XG4gIGNvbnN0IGRpZmZlcmVuY2VJbkRheXMgPSBkaWZmZXJlbmNlSW5DYWxlbmRhckRheXMoYiwgYSwgeyBhYnNvbHV0ZTogZmFsc2UgfSk7XG4gIGlmIChkaWZmZXJlbmNlSW5EYXlzIDwgLTYpIHtcbiAgICByZXR1cm4geyByZWxhdGl2ZURhdGVDYXNlOiBcIm90aGVyXCIsIGRhdGU6IGEgfTtcbiAgfVxuICBpZiAoZGlmZmVyZW5jZUluRGF5cyA8IC0xKSB7XG4gICAgcmV0dXJuIHsgcmVsYXRpdmVEYXRlQ2FzZTogXCJwcmV2aW91czZEYXlzXCIsIGRhdGU6IGEgfTtcbiAgfVxuICBpZiAoZGlmZmVyZW5jZUluRGF5cyA9PT0gLTEpIHtcbiAgICByZXR1cm4geyByZWxhdGl2ZURhdGVDYXNlOiBcImxhc3REYXlcIiwgZGF0ZTogYSB9O1xuICB9XG4gIGlmIChkaWZmZXJlbmNlSW5EYXlzID09PSAwKSB7XG4gICAgcmV0dXJuIHsgcmVsYXRpdmVEYXRlQ2FzZTogXCJzYW1lRGF5XCIsIGRhdGU6IGEgfTtcbiAgfVxuICBpZiAoZGlmZmVyZW5jZUluRGF5cyA9PT0gMSkge1xuICAgIHJldHVybiB7IHJlbGF0aXZlRGF0ZUNhc2U6IFwibmV4dERheVwiLCBkYXRlOiBhIH07XG4gIH1cbiAgaWYgKGRpZmZlcmVuY2VJbkRheXMgPCA3KSB7XG4gICAgcmV0dXJuIHsgcmVsYXRpdmVEYXRlQ2FzZTogXCJuZXh0NkRheXNcIiwgZGF0ZTogYSB9O1xuICB9XG4gIHJldHVybiB7IHJlbGF0aXZlRGF0ZUNhc2U6IFwib3RoZXJcIiwgZGF0ZTogYSB9O1xufVxuZnVuY3Rpb24gYWRkWWVhcnMoaW5pdGlhbERhdGUsIHllYXJzVG9BZGQpIHtcbiAgY29uc3QgZGF0ZSA9IG5vcm1hbGl6ZURhdGUoaW5pdGlhbERhdGUpO1xuICBkYXRlLnNldEZ1bGxZZWFyKGRhdGUuZ2V0RnVsbFllYXIoKSArIHllYXJzVG9BZGQpO1xuICByZXR1cm4gZGF0ZTtcbn1cblxuZXhwb3J0IHtcbiAgZGF0ZVRvMTJIb3VyVGltZSxcbiAgZGlmZmVyZW5jZUluQ2FsZW5kYXJEYXlzLFxuICBub3JtYWxpemVEYXRlLFxuICBmb3JtYXRSZWxhdGl2ZSxcbiAgYWRkWWVhcnNcbn07XG4vLyMgc291cmNlTWFwcGluZ1VSTD1jaHVuay1GU0tLSTRMRy5tanMubWFwIl0sIm5hbWVzIjpbIk1JTExJU0VDT05EU19JTl9EQVkiLCJkYXRlVG8xMkhvdXJUaW1lIiwiZGF0ZSIsInRvTG9jYWxlU3RyaW5nIiwiaG91ciIsIm1pbnV0ZSIsImhvdXIxMiIsImRpZmZlcmVuY2VJbkNhbGVuZGFyRGF5cyIsImEiLCJiIiwiYWJzb2x1dGUiLCJ1dGNBIiwiRGF0ZSIsIlVUQyIsImdldEZ1bGxZZWFyIiwiZ2V0TW9udGgiLCJnZXREYXRlIiwidXRjQiIsImRpZmYiLCJNYXRoIiwiZmxvb3IiLCJhYnMiLCJub3JtYWxpemVEYXRlIiwiZCIsImUiLCJmb3JtYXRSZWxhdGl2ZSIsInByb3BzIiwicmVsYXRpdmVUbyIsImRpZmZlcmVuY2VJbkRheXMiLCJyZWxhdGl2ZURhdGVDYXNlIiwiYWRkWWVhcnMiLCJpbml0aWFsRGF0ZSIsInllYXJzVG9BZGQiLCJzZXRGdWxsWWVhciJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/@clerk/shared/dist/chunk-FSKKI4LG.mjs\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/@clerk/shared/dist/chunk-GVKVD773.mjs":
/*!************************************************************!*\
  !*** ./node_modules/@clerk/shared/dist/chunk-GVKVD773.mjs ***!
  \************************************************************/
/***/ (function(__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   getRequestUrl: function() { return /* binding */ getRequestUrl; },\n/* harmony export */   isHttpOrHttps: function() { return /* binding */ isHttpOrHttps; },\n/* harmony export */   isProxyUrlRelative: function() { return /* binding */ isProxyUrlRelative; },\n/* harmony export */   isValidProxyUrl: function() { return /* binding */ isValidProxyUrl; },\n/* harmony export */   proxyUrlToAbsoluteURL: function() { return /* binding */ proxyUrlToAbsoluteURL; }\n/* harmony export */ });\n/* harmony import */ var _chunk_KJVJ4CFF_mjs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./chunk-KJVJ4CFF.mjs */ \"(app-pages-browser)/./node_modules/@clerk/shared/dist/chunk-KJVJ4CFF.mjs\");\n\n// src/proxy.ts\nfunction isValidProxyUrl(key) {\n    if (!key) {\n        return true;\n    }\n    return isHttpOrHttps(key) || isProxyUrlRelative(key);\n}\nfunction isHttpOrHttps(key) {\n    return /^http(s)?:\\/\\//.test(key || \"\");\n}\nfunction isProxyUrlRelative(key) {\n    return key.startsWith(\"/\");\n}\nfunction proxyUrlToAbsoluteURL(url) {\n    if (!url) {\n        return \"\";\n    }\n    return isProxyUrlRelative(url) ? new URL(url, window.location.origin).toString() : url;\n}\nfunction getRequestUrl(param) {\n    let { request, relativePath } = param;\n    var _this;\n    (0,_chunk_KJVJ4CFF_mjs__WEBPACK_IMPORTED_MODULE_0__.deprecated)(\"getRequestUrl\", \"Use `buildRequestUrl` from @clerk/backend instead.\");\n    const { headers, url: initialUrl } = request;\n    const url = new URL(initialUrl);\n    var _headers_get, _ref, _ref1;\n    const host = (_ref1 = (_ref = (_headers_get = headers.get(\"X-Forwarded-Host\")) !== null && _headers_get !== void 0 ? _headers_get : headers.get(\"host\")) !== null && _ref !== void 0 ? _ref : headers[\"host\"]) !== null && _ref1 !== void 0 ? _ref1 : url.host;\n    var _headers_get1, _split_;\n    let protocol = (_split_ = (_this = (_headers_get1 = headers.get(\"X-Forwarded-Proto\")) !== null && _headers_get1 !== void 0 ? _headers_get1 : headers[\"X-Forwarded-Proto\"]) === null || _this === void 0 ? void 0 : _this.split(\",\")[0]) !== null && _split_ !== void 0 ? _split_ : url.protocol;\n    protocol = protocol.replace(/[:/]/, \"\");\n    return new URL(relativePath || url.pathname, \"\".concat(protocol, \"://\").concat(host));\n}\n //# sourceMappingURL=chunk-GVKVD773.mjs.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL25vZGVfbW9kdWxlcy9AY2xlcmsvc2hhcmVkL2Rpc3QvY2h1bmstR1ZLVkQ3NzMubWpzIiwibWFwcGluZ3MiOiI7Ozs7Ozs7OztBQUU4QjtBQUU5QixlQUFlO0FBQ2YsU0FBU0MsZ0JBQWdCQyxHQUFHO0lBQzFCLElBQUksQ0FBQ0EsS0FBSztRQUNSLE9BQU87SUFDVDtJQUNBLE9BQU9DLGNBQWNELFFBQVFFLG1CQUFtQkY7QUFDbEQ7QUFDQSxTQUFTQyxjQUFjRCxHQUFHO0lBQ3hCLE9BQU8saUJBQWlCRyxJQUFJLENBQUNILE9BQU87QUFDdEM7QUFDQSxTQUFTRSxtQkFBbUJGLEdBQUc7SUFDN0IsT0FBT0EsSUFBSUksVUFBVSxDQUFDO0FBQ3hCO0FBQ0EsU0FBU0Msc0JBQXNCQyxHQUFHO0lBQ2hDLElBQUksQ0FBQ0EsS0FBSztRQUNSLE9BQU87SUFDVDtJQUNBLE9BQU9KLG1CQUFtQkksT0FBTyxJQUFJQyxJQUFJRCxLQUFLRSxPQUFPQyxRQUFRLENBQUNDLE1BQU0sRUFBRUMsUUFBUSxLQUFLTDtBQUNyRjtBQUNBLFNBQVNNLGNBQWMsS0FBeUI7UUFBekIsRUFBRUMsT0FBTyxFQUFFQyxZQUFZLEVBQUUsR0FBekI7UUFLTEM7SUFKaEJqQiwrREFBVUEsQ0FBQyxpQkFBaUI7SUFDNUIsTUFBTSxFQUFFaUIsT0FBTyxFQUFFVCxLQUFLVSxVQUFVLEVBQUUsR0FBR0g7SUFDckMsTUFBTVAsTUFBTSxJQUFJQyxJQUFJUztRQUNQRCxjQUFBQSxNQUFBQTtJQUFiLE1BQU1FLE9BQU9GLENBQUFBLFFBQUFBLENBQUFBLE9BQUFBLENBQUFBLGVBQUFBLFFBQVFHLEdBQUcsQ0FBQyxpQ0FBWkgsMEJBQUFBLGVBQW1DQSxRQUFRRyxHQUFHLENBQUMscUJBQS9DSCxrQkFBQUEsT0FBMERBLE9BQU8sQ0FBQyxPQUFPLGNBQXpFQSxtQkFBQUEsUUFBNkVULElBQUlXLElBQUk7UUFDbEZGLGVBQUQ7SUFBZixJQUFJSSxXQUFXLFlBQUNKLFFBQUFBLENBQUFBLGdCQUFBQSxRQUFRRyxHQUFHLENBQUMsa0NBQVpILDJCQUFBQSxnQkFBb0NBLE9BQU8sQ0FBQyxvQkFBb0IsY0FBaEVBLDRCQUFELE1BQW9FSyxLQUFLLENBQUMsSUFBSSxDQUFDLEVBQUUsY0FBakYsK0JBQXFGZCxJQUFJYSxRQUFRO0lBQ2hIQSxXQUFXQSxTQUFTRSxPQUFPLENBQUMsUUFBUTtJQUNwQyxPQUFPLElBQUlkLElBQUlPLGdCQUFnQlIsSUFBSWdCLFFBQVEsRUFBRSxHQUFpQkwsT0FBZEUsVUFBUyxPQUFVLE9BQUxGO0FBQ2hFO0FBUUUsQ0FDRiwyQ0FBMkMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9fTl9FLy4vbm9kZV9tb2R1bGVzL0BjbGVyay9zaGFyZWQvZGlzdC9jaHVuay1HVktWRDc3My5tanM/ZWE5YyJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQge1xuICBkZXByZWNhdGVkXG59IGZyb20gXCIuL2NodW5rLUtKVko0Q0ZGLm1qc1wiO1xuXG4vLyBzcmMvcHJveHkudHNcbmZ1bmN0aW9uIGlzVmFsaWRQcm94eVVybChrZXkpIHtcbiAgaWYgKCFrZXkpIHtcbiAgICByZXR1cm4gdHJ1ZTtcbiAgfVxuICByZXR1cm4gaXNIdHRwT3JIdHRwcyhrZXkpIHx8IGlzUHJveHlVcmxSZWxhdGl2ZShrZXkpO1xufVxuZnVuY3Rpb24gaXNIdHRwT3JIdHRwcyhrZXkpIHtcbiAgcmV0dXJuIC9eaHR0cChzKT86XFwvXFwvLy50ZXN0KGtleSB8fCBcIlwiKTtcbn1cbmZ1bmN0aW9uIGlzUHJveHlVcmxSZWxhdGl2ZShrZXkpIHtcbiAgcmV0dXJuIGtleS5zdGFydHNXaXRoKFwiL1wiKTtcbn1cbmZ1bmN0aW9uIHByb3h5VXJsVG9BYnNvbHV0ZVVSTCh1cmwpIHtcbiAgaWYgKCF1cmwpIHtcbiAgICByZXR1cm4gXCJcIjtcbiAgfVxuICByZXR1cm4gaXNQcm94eVVybFJlbGF0aXZlKHVybCkgPyBuZXcgVVJMKHVybCwgd2luZG93LmxvY2F0aW9uLm9yaWdpbikudG9TdHJpbmcoKSA6IHVybDtcbn1cbmZ1bmN0aW9uIGdldFJlcXVlc3RVcmwoeyByZXF1ZXN0LCByZWxhdGl2ZVBhdGggfSkge1xuICBkZXByZWNhdGVkKFwiZ2V0UmVxdWVzdFVybFwiLCBcIlVzZSBgYnVpbGRSZXF1ZXN0VXJsYCBmcm9tIEBjbGVyay9iYWNrZW5kIGluc3RlYWQuXCIpO1xuICBjb25zdCB7IGhlYWRlcnMsIHVybDogaW5pdGlhbFVybCB9ID0gcmVxdWVzdDtcbiAgY29uc3QgdXJsID0gbmV3IFVSTChpbml0aWFsVXJsKTtcbiAgY29uc3QgaG9zdCA9IGhlYWRlcnMuZ2V0KFwiWC1Gb3J3YXJkZWQtSG9zdFwiKSA/PyBoZWFkZXJzLmdldChcImhvc3RcIikgPz8gaGVhZGVyc1tcImhvc3RcIl0gPz8gdXJsLmhvc3Q7XG4gIGxldCBwcm90b2NvbCA9IChoZWFkZXJzLmdldChcIlgtRm9yd2FyZGVkLVByb3RvXCIpID8/IGhlYWRlcnNbXCJYLUZvcndhcmRlZC1Qcm90b1wiXSk/LnNwbGl0KFwiLFwiKVswXSA/PyB1cmwucHJvdG9jb2w7XG4gIHByb3RvY29sID0gcHJvdG9jb2wucmVwbGFjZSgvWzovXS8sIFwiXCIpO1xuICByZXR1cm4gbmV3IFVSTChyZWxhdGl2ZVBhdGggfHwgdXJsLnBhdGhuYW1lLCBgJHtwcm90b2NvbH06Ly8ke2hvc3R9YCk7XG59XG5cbmV4cG9ydCB7XG4gIGlzVmFsaWRQcm94eVVybCxcbiAgaXNIdHRwT3JIdHRwcyxcbiAgaXNQcm94eVVybFJlbGF0aXZlLFxuICBwcm94eVVybFRvQWJzb2x1dGVVUkwsXG4gIGdldFJlcXVlc3RVcmxcbn07XG4vLyMgc291cmNlTWFwcGluZ1VSTD1jaHVuay1HVktWRDc3My5tanMubWFwIl0sIm5hbWVzIjpbImRlcHJlY2F0ZWQiLCJpc1ZhbGlkUHJveHlVcmwiLCJrZXkiLCJpc0h0dHBPckh0dHBzIiwiaXNQcm94eVVybFJlbGF0aXZlIiwidGVzdCIsInN0YXJ0c1dpdGgiLCJwcm94eVVybFRvQWJzb2x1dGVVUkwiLCJ1cmwiLCJVUkwiLCJ3aW5kb3ciLCJsb2NhdGlvbiIsIm9yaWdpbiIsInRvU3RyaW5nIiwiZ2V0UmVxdWVzdFVybCIsInJlcXVlc3QiLCJyZWxhdGl2ZVBhdGgiLCJoZWFkZXJzIiwiaW5pdGlhbFVybCIsImhvc3QiLCJnZXQiLCJwcm90b2NvbCIsInNwbGl0IiwicmVwbGFjZSIsInBhdGhuYW1lIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/@clerk/shared/dist/chunk-GVKVD773.mjs\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/@clerk/shared/dist/chunk-IAZRYRAH.mjs":
/*!************************************************************!*\
  !*** ./node_modules/@clerk/shared/dist/chunk-IAZRYRAH.mjs ***!
  \************************************************************/
/***/ (function(__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   buildPublishableKey: function() { return /* binding */ buildPublishableKey; },\n/* harmony export */   createDevOrStagingUrlCache: function() { return /* binding */ createDevOrStagingUrlCache; },\n/* harmony export */   isDevelopmentFromApiKey: function() { return /* binding */ isDevelopmentFromApiKey; },\n/* harmony export */   isLegacyFrontendApiKey: function() { return /* binding */ isLegacyFrontendApiKey; },\n/* harmony export */   isProductionFromApiKey: function() { return /* binding */ isProductionFromApiKey; },\n/* harmony export */   isPublishableKey: function() { return /* binding */ isPublishableKey; },\n/* harmony export */   parsePublishableKey: function() { return /* binding */ parsePublishableKey; }\n/* harmony export */ });\n/* harmony import */ var _chunk_TETGTEI2_mjs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./chunk-TETGTEI2.mjs */ \"(app-pages-browser)/./node_modules/@clerk/shared/dist/chunk-TETGTEI2.mjs\");\n\n// src/keys.ts\nvar PUBLISHABLE_KEY_LIVE_PREFIX = \"pk_live_\";\nvar PUBLISHABLE_KEY_TEST_PREFIX = \"pk_test_\";\nvar PUBLISHABLE_FRONTEND_API_DEV_REGEX = /^(([a-z]+)-){2}([0-9]{1,2})\\.clerk\\.accounts([a-z.]*)(dev|com)$/i;\nfunction buildPublishableKey(frontendApi) {\n    const keyPrefix = PUBLISHABLE_FRONTEND_API_DEV_REGEX.test(frontendApi) ? PUBLISHABLE_KEY_TEST_PREFIX : PUBLISHABLE_KEY_LIVE_PREFIX;\n    return \"\".concat(keyPrefix).concat(btoa(\"\".concat(frontendApi, \"$\")));\n}\nfunction parsePublishableKey(key) {\n    key = key || \"\";\n    if (!isPublishableKey(key)) {\n        return null;\n    }\n    const instanceType = key.startsWith(PUBLISHABLE_KEY_LIVE_PREFIX) ? \"production\" : \"development\";\n    let frontendApi = (0,_chunk_TETGTEI2_mjs__WEBPACK_IMPORTED_MODULE_0__.isomorphicAtob)(key.split(\"_\")[2]);\n    if (!frontendApi.endsWith(\"$\")) {\n        return null;\n    }\n    frontendApi = frontendApi.slice(0, -1);\n    return {\n        instanceType,\n        frontendApi\n    };\n}\nfunction isPublishableKey(key) {\n    key = key || \"\";\n    const hasValidPrefix = key.startsWith(PUBLISHABLE_KEY_LIVE_PREFIX) || key.startsWith(PUBLISHABLE_KEY_TEST_PREFIX);\n    const hasValidFrontendApiPostfix = (0,_chunk_TETGTEI2_mjs__WEBPACK_IMPORTED_MODULE_0__.isomorphicAtob)(key.split(\"_\")[2] || \"\").endsWith(\"$\");\n    return hasValidPrefix && hasValidFrontendApiPostfix;\n}\nfunction isLegacyFrontendApiKey(key) {\n    key = key || \"\";\n    return key.startsWith(\"clerk.\");\n}\nfunction createDevOrStagingUrlCache() {\n    const DEV_OR_STAGING_SUFFIXES = [\n        \".lcl.dev\",\n        \".stg.dev\",\n        \".lclstage.dev\",\n        \".stgstage.dev\",\n        \".dev.lclclerk.com\",\n        \".stg.lclclerk.com\",\n        \".accounts.lclclerk.com\",\n        \"accountsstage.dev\",\n        \"accounts.dev\"\n    ];\n    const devOrStagingUrlCache = /* @__PURE__ */ new Map();\n    return {\n        isDevOrStagingUrl: (url)=>{\n            if (!url) {\n                return false;\n            }\n            const hostname = typeof url === \"string\" ? url : url.hostname;\n            let res = devOrStagingUrlCache.get(hostname);\n            if (res === void 0) {\n                res = DEV_OR_STAGING_SUFFIXES.some((s)=>hostname.endsWith(s));\n                devOrStagingUrlCache.set(hostname, res);\n            }\n            return res;\n        }\n    };\n}\nfunction isDevelopmentFromApiKey(apiKey) {\n    return apiKey.startsWith(\"test_\") || apiKey.startsWith(\"sk_test_\");\n}\nfunction isProductionFromApiKey(apiKey) {\n    return apiKey.startsWith(\"live_\") || apiKey.startsWith(\"sk_live_\");\n}\n //# sourceMappingURL=chunk-IAZRYRAH.mjs.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL25vZGVfbW9kdWxlcy9AY2xlcmsvc2hhcmVkL2Rpc3QvY2h1bmstSUFaUllSQUgubWpzIiwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7O0FBRThCO0FBRTlCLGNBQWM7QUFDZCxJQUFJQyw4QkFBOEI7QUFDbEMsSUFBSUMsOEJBQThCO0FBQ2xDLElBQUlDLHFDQUFxQztBQUN6QyxTQUFTQyxvQkFBb0JDLFdBQVc7SUFDdEMsTUFBTUMsWUFBWUgsbUNBQW1DSSxJQUFJLENBQUNGLGVBQWVILDhCQUE4QkQ7SUFDdkcsT0FBTyxHQUFlTyxPQUFaRixXQUFvQyxPQUF4QkUsS0FBSyxHQUFlLE9BQVpILGFBQVk7QUFDNUM7QUFDQSxTQUFTSSxvQkFBb0JDLEdBQUc7SUFDOUJBLE1BQU1BLE9BQU87SUFDYixJQUFJLENBQUNDLGlCQUFpQkQsTUFBTTtRQUMxQixPQUFPO0lBQ1Q7SUFDQSxNQUFNRSxlQUFlRixJQUFJRyxVQUFVLENBQUNaLCtCQUErQixlQUFlO0lBQ2xGLElBQUlJLGNBQWNMLG1FQUFjQSxDQUFDVSxJQUFJSSxLQUFLLENBQUMsSUFBSSxDQUFDLEVBQUU7SUFDbEQsSUFBSSxDQUFDVCxZQUFZVSxRQUFRLENBQUMsTUFBTTtRQUM5QixPQUFPO0lBQ1Q7SUFDQVYsY0FBY0EsWUFBWVcsS0FBSyxDQUFDLEdBQUcsQ0FBQztJQUNwQyxPQUFPO1FBQ0xKO1FBQ0FQO0lBQ0Y7QUFDRjtBQUNBLFNBQVNNLGlCQUFpQkQsR0FBRztJQUMzQkEsTUFBTUEsT0FBTztJQUNiLE1BQU1PLGlCQUFpQlAsSUFBSUcsVUFBVSxDQUFDWixnQ0FBZ0NTLElBQUlHLFVBQVUsQ0FBQ1g7SUFDckYsTUFBTWdCLDZCQUE2QmxCLG1FQUFjQSxDQUFDVSxJQUFJSSxLQUFLLENBQUMsSUFBSSxDQUFDLEVBQUUsSUFBSSxJQUFJQyxRQUFRLENBQUM7SUFDcEYsT0FBT0Usa0JBQWtCQztBQUMzQjtBQUNBLFNBQVNDLHVCQUF1QlQsR0FBRztJQUNqQ0EsTUFBTUEsT0FBTztJQUNiLE9BQU9BLElBQUlHLFVBQVUsQ0FBQztBQUN4QjtBQUNBLFNBQVNPO0lBQ1AsTUFBTUMsMEJBQTBCO1FBQzlCO1FBQ0E7UUFDQTtRQUNBO1FBQ0E7UUFDQTtRQUNBO1FBQ0E7UUFDQTtLQUNEO0lBQ0QsTUFBTUMsdUJBQXVCLGFBQWEsR0FBRyxJQUFJQztJQUNqRCxPQUFPO1FBQ0xDLG1CQUFtQixDQUFDQztZQUNsQixJQUFJLENBQUNBLEtBQUs7Z0JBQ1IsT0FBTztZQUNUO1lBQ0EsTUFBTUMsV0FBVyxPQUFPRCxRQUFRLFdBQVdBLE1BQU1BLElBQUlDLFFBQVE7WUFDN0QsSUFBSUMsTUFBTUwscUJBQXFCTSxHQUFHLENBQUNGO1lBQ25DLElBQUlDLFFBQVEsS0FBSyxHQUFHO2dCQUNsQkEsTUFBTU4sd0JBQXdCUSxJQUFJLENBQUMsQ0FBQ0MsSUFBTUosU0FBU1gsUUFBUSxDQUFDZTtnQkFDNURSLHFCQUFxQlMsR0FBRyxDQUFDTCxVQUFVQztZQUNyQztZQUNBLE9BQU9BO1FBQ1Q7SUFDRjtBQUNGO0FBQ0EsU0FBU0ssd0JBQXdCQyxNQUFNO0lBQ3JDLE9BQU9BLE9BQU9wQixVQUFVLENBQUMsWUFBWW9CLE9BQU9wQixVQUFVLENBQUM7QUFDekQ7QUFDQSxTQUFTcUIsdUJBQXVCRCxNQUFNO0lBQ3BDLE9BQU9BLE9BQU9wQixVQUFVLENBQUMsWUFBWW9CLE9BQU9wQixVQUFVLENBQUM7QUFDekQ7QUFVRSxDQUNGLDJDQUEyQyIsInNvdXJjZXMiOlsid2VicGFjazovL19OX0UvLi9ub2RlX21vZHVsZXMvQGNsZXJrL3NoYXJlZC9kaXN0L2NodW5rLUlBWlJZUkFILm1qcz85YTc0Il0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7XG4gIGlzb21vcnBoaWNBdG9iXG59IGZyb20gXCIuL2NodW5rLVRFVEdURUkyLm1qc1wiO1xuXG4vLyBzcmMva2V5cy50c1xudmFyIFBVQkxJU0hBQkxFX0tFWV9MSVZFX1BSRUZJWCA9IFwicGtfbGl2ZV9cIjtcbnZhciBQVUJMSVNIQUJMRV9LRVlfVEVTVF9QUkVGSVggPSBcInBrX3Rlc3RfXCI7XG52YXIgUFVCTElTSEFCTEVfRlJPTlRFTkRfQVBJX0RFVl9SRUdFWCA9IC9eKChbYS16XSspLSl7Mn0oWzAtOV17MSwyfSlcXC5jbGVya1xcLmFjY291bnRzKFthLXouXSopKGRldnxjb20pJC9pO1xuZnVuY3Rpb24gYnVpbGRQdWJsaXNoYWJsZUtleShmcm9udGVuZEFwaSkge1xuICBjb25zdCBrZXlQcmVmaXggPSBQVUJMSVNIQUJMRV9GUk9OVEVORF9BUElfREVWX1JFR0VYLnRlc3QoZnJvbnRlbmRBcGkpID8gUFVCTElTSEFCTEVfS0VZX1RFU1RfUFJFRklYIDogUFVCTElTSEFCTEVfS0VZX0xJVkVfUFJFRklYO1xuICByZXR1cm4gYCR7a2V5UHJlZml4fSR7YnRvYShgJHtmcm9udGVuZEFwaX0kYCl9YDtcbn1cbmZ1bmN0aW9uIHBhcnNlUHVibGlzaGFibGVLZXkoa2V5KSB7XG4gIGtleSA9IGtleSB8fCBcIlwiO1xuICBpZiAoIWlzUHVibGlzaGFibGVLZXkoa2V5KSkge1xuICAgIHJldHVybiBudWxsO1xuICB9XG4gIGNvbnN0IGluc3RhbmNlVHlwZSA9IGtleS5zdGFydHNXaXRoKFBVQkxJU0hBQkxFX0tFWV9MSVZFX1BSRUZJWCkgPyBcInByb2R1Y3Rpb25cIiA6IFwiZGV2ZWxvcG1lbnRcIjtcbiAgbGV0IGZyb250ZW5kQXBpID0gaXNvbW9ycGhpY0F0b2Ioa2V5LnNwbGl0KFwiX1wiKVsyXSk7XG4gIGlmICghZnJvbnRlbmRBcGkuZW5kc1dpdGgoXCIkXCIpKSB7XG4gICAgcmV0dXJuIG51bGw7XG4gIH1cbiAgZnJvbnRlbmRBcGkgPSBmcm9udGVuZEFwaS5zbGljZSgwLCAtMSk7XG4gIHJldHVybiB7XG4gICAgaW5zdGFuY2VUeXBlLFxuICAgIGZyb250ZW5kQXBpXG4gIH07XG59XG5mdW5jdGlvbiBpc1B1Ymxpc2hhYmxlS2V5KGtleSkge1xuICBrZXkgPSBrZXkgfHwgXCJcIjtcbiAgY29uc3QgaGFzVmFsaWRQcmVmaXggPSBrZXkuc3RhcnRzV2l0aChQVUJMSVNIQUJMRV9LRVlfTElWRV9QUkVGSVgpIHx8IGtleS5zdGFydHNXaXRoKFBVQkxJU0hBQkxFX0tFWV9URVNUX1BSRUZJWCk7XG4gIGNvbnN0IGhhc1ZhbGlkRnJvbnRlbmRBcGlQb3N0Zml4ID0gaXNvbW9ycGhpY0F0b2Ioa2V5LnNwbGl0KFwiX1wiKVsyXSB8fCBcIlwiKS5lbmRzV2l0aChcIiRcIik7XG4gIHJldHVybiBoYXNWYWxpZFByZWZpeCAmJiBoYXNWYWxpZEZyb250ZW5kQXBpUG9zdGZpeDtcbn1cbmZ1bmN0aW9uIGlzTGVnYWN5RnJvbnRlbmRBcGlLZXkoa2V5KSB7XG4gIGtleSA9IGtleSB8fCBcIlwiO1xuICByZXR1cm4ga2V5LnN0YXJ0c1dpdGgoXCJjbGVyay5cIik7XG59XG5mdW5jdGlvbiBjcmVhdGVEZXZPclN0YWdpbmdVcmxDYWNoZSgpIHtcbiAgY29uc3QgREVWX09SX1NUQUdJTkdfU1VGRklYRVMgPSBbXG4gICAgXCIubGNsLmRldlwiLFxuICAgIFwiLnN0Zy5kZXZcIixcbiAgICBcIi5sY2xzdGFnZS5kZXZcIixcbiAgICBcIi5zdGdzdGFnZS5kZXZcIixcbiAgICBcIi5kZXYubGNsY2xlcmsuY29tXCIsXG4gICAgXCIuc3RnLmxjbGNsZXJrLmNvbVwiLFxuICAgIFwiLmFjY291bnRzLmxjbGNsZXJrLmNvbVwiLFxuICAgIFwiYWNjb3VudHNzdGFnZS5kZXZcIixcbiAgICBcImFjY291bnRzLmRldlwiXG4gIF07XG4gIGNvbnN0IGRldk9yU3RhZ2luZ1VybENhY2hlID0gLyogQF9fUFVSRV9fICovIG5ldyBNYXAoKTtcbiAgcmV0dXJuIHtcbiAgICBpc0Rldk9yU3RhZ2luZ1VybDogKHVybCkgPT4ge1xuICAgICAgaWYgKCF1cmwpIHtcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgfVxuICAgICAgY29uc3QgaG9zdG5hbWUgPSB0eXBlb2YgdXJsID09PSBcInN0cmluZ1wiID8gdXJsIDogdXJsLmhvc3RuYW1lO1xuICAgICAgbGV0IHJlcyA9IGRldk9yU3RhZ2luZ1VybENhY2hlLmdldChob3N0bmFtZSk7XG4gICAgICBpZiAocmVzID09PSB2b2lkIDApIHtcbiAgICAgICAgcmVzID0gREVWX09SX1NUQUdJTkdfU1VGRklYRVMuc29tZSgocykgPT4gaG9zdG5hbWUuZW5kc1dpdGgocykpO1xuICAgICAgICBkZXZPclN0YWdpbmdVcmxDYWNoZS5zZXQoaG9zdG5hbWUsIHJlcyk7XG4gICAgICB9XG4gICAgICByZXR1cm4gcmVzO1xuICAgIH1cbiAgfTtcbn1cbmZ1bmN0aW9uIGlzRGV2ZWxvcG1lbnRGcm9tQXBpS2V5KGFwaUtleSkge1xuICByZXR1cm4gYXBpS2V5LnN0YXJ0c1dpdGgoXCJ0ZXN0X1wiKSB8fCBhcGlLZXkuc3RhcnRzV2l0aChcInNrX3Rlc3RfXCIpO1xufVxuZnVuY3Rpb24gaXNQcm9kdWN0aW9uRnJvbUFwaUtleShhcGlLZXkpIHtcbiAgcmV0dXJuIGFwaUtleS5zdGFydHNXaXRoKFwibGl2ZV9cIikgfHwgYXBpS2V5LnN0YXJ0c1dpdGgoXCJza19saXZlX1wiKTtcbn1cblxuZXhwb3J0IHtcbiAgYnVpbGRQdWJsaXNoYWJsZUtleSxcbiAgcGFyc2VQdWJsaXNoYWJsZUtleSxcbiAgaXNQdWJsaXNoYWJsZUtleSxcbiAgaXNMZWdhY3lGcm9udGVuZEFwaUtleSxcbiAgY3JlYXRlRGV2T3JTdGFnaW5nVXJsQ2FjaGUsXG4gIGlzRGV2ZWxvcG1lbnRGcm9tQXBpS2V5LFxuICBpc1Byb2R1Y3Rpb25Gcm9tQXBpS2V5XG59O1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9Y2h1bmstSUFaUllSQUgubWpzLm1hcCJdLCJuYW1lcyI6WyJpc29tb3JwaGljQXRvYiIsIlBVQkxJU0hBQkxFX0tFWV9MSVZFX1BSRUZJWCIsIlBVQkxJU0hBQkxFX0tFWV9URVNUX1BSRUZJWCIsIlBVQkxJU0hBQkxFX0ZST05URU5EX0FQSV9ERVZfUkVHRVgiLCJidWlsZFB1Ymxpc2hhYmxlS2V5IiwiZnJvbnRlbmRBcGkiLCJrZXlQcmVmaXgiLCJ0ZXN0IiwiYnRvYSIsInBhcnNlUHVibGlzaGFibGVLZXkiLCJrZXkiLCJpc1B1Ymxpc2hhYmxlS2V5IiwiaW5zdGFuY2VUeXBlIiwic3RhcnRzV2l0aCIsInNwbGl0IiwiZW5kc1dpdGgiLCJzbGljZSIsImhhc1ZhbGlkUHJlZml4IiwiaGFzVmFsaWRGcm9udGVuZEFwaVBvc3RmaXgiLCJpc0xlZ2FjeUZyb250ZW5kQXBpS2V5IiwiY3JlYXRlRGV2T3JTdGFnaW5nVXJsQ2FjaGUiLCJERVZfT1JfU1RBR0lOR19TVUZGSVhFUyIsImRldk9yU3RhZ2luZ1VybENhY2hlIiwiTWFwIiwiaXNEZXZPclN0YWdpbmdVcmwiLCJ1cmwiLCJob3N0bmFtZSIsInJlcyIsImdldCIsInNvbWUiLCJzIiwic2V0IiwiaXNEZXZlbG9wbWVudEZyb21BcGlLZXkiLCJhcGlLZXkiLCJpc1Byb2R1Y3Rpb25Gcm9tQXBpS2V5Il0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/@clerk/shared/dist/chunk-IAZRYRAH.mjs\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/@clerk/shared/dist/chunk-JUQXCWMV.mjs":
/*!************************************************************!*\
  !*** ./node_modules/@clerk/shared/dist/chunk-JUQXCWMV.mjs ***!
  \************************************************************/
/***/ (function(__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   loadScript: function() { return /* binding */ loadScript; }\n/* harmony export */ });\n// src/loadScript.ts\nvar NO_DOCUMENT_ERROR = \"loadScript cannot be called when document does not exist\";\nvar NO_SRC_ERROR = \"loadScript cannot be called without a src\";\nasync function loadScript() {\n    let src = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : \"\", opts = arguments.length > 1 ? arguments[1] : void 0;\n    const { async, defer, beforeLoad, crossOrigin } = opts || {};\n    return new Promise((resolve, reject)=>{\n        if (!src) {\n            reject(NO_SRC_ERROR);\n        }\n        if (!document || !document.body) {\n            reject(NO_DOCUMENT_ERROR);\n        }\n        const script = document.createElement(\"script\");\n        crossOrigin && script.setAttribute(\"crossorigin\", crossOrigin);\n        script.async = async || false;\n        script.defer = defer || false;\n        script.addEventListener(\"load\", ()=>{\n            script.remove();\n            resolve(script);\n        });\n        script.addEventListener(\"error\", ()=>{\n            script.remove();\n            reject();\n        });\n        script.src = src;\n        beforeLoad === null || beforeLoad === void 0 ? void 0 : beforeLoad(script);\n        document.body.appendChild(script);\n    });\n}\n //# sourceMappingURL=chunk-JUQXCWMV.mjs.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL25vZGVfbW9kdWxlcy9AY2xlcmsvc2hhcmVkL2Rpc3QvY2h1bmstSlVRWENXTVYubWpzIiwibWFwcGluZ3MiOiI7Ozs7QUFBQSxvQkFBb0I7QUFDcEIsSUFBSUEsb0JBQW9CO0FBQ3hCLElBQUlDLGVBQWU7QUFDbkIsZUFBZUM7UUFBV0MsTUFBQUEsaUVBQU0sSUFBSUM7SUFDbEMsTUFBTSxFQUFFQyxLQUFLLEVBQUVDLEtBQUssRUFBRUMsVUFBVSxFQUFFQyxXQUFXLEVBQUUsR0FBR0osUUFBUSxDQUFDO0lBQzNELE9BQU8sSUFBSUssUUFBUSxDQUFDQyxTQUFTQztRQUMzQixJQUFJLENBQUNSLEtBQUs7WUFDUlEsT0FBT1Y7UUFDVDtRQUNBLElBQUksQ0FBQ1csWUFBWSxDQUFDQSxTQUFTQyxJQUFJLEVBQUU7WUFDL0JGLE9BQU9YO1FBQ1Q7UUFDQSxNQUFNYyxTQUFTRixTQUFTRyxhQUFhLENBQUM7UUFDdENQLGVBQWVNLE9BQU9FLFlBQVksQ0FBQyxlQUFlUjtRQUNsRE0sT0FBT1QsS0FBSyxHQUFHQSxTQUFTO1FBQ3hCUyxPQUFPUixLQUFLLEdBQUdBLFNBQVM7UUFDeEJRLE9BQU9HLGdCQUFnQixDQUFDLFFBQVE7WUFDOUJILE9BQU9JLE1BQU07WUFDYlIsUUFBUUk7UUFDVjtRQUNBQSxPQUFPRyxnQkFBZ0IsQ0FBQyxTQUFTO1lBQy9CSCxPQUFPSSxNQUFNO1lBQ2JQO1FBQ0Y7UUFDQUcsT0FBT1gsR0FBRyxHQUFHQTtRQUNiSSx1QkFBQUEsaUNBQUFBLFdBQWFPO1FBQ2JGLFNBQVNDLElBQUksQ0FBQ00sV0FBVyxDQUFDTDtJQUM1QjtBQUNGO0FBSUUsQ0FDRiwyQ0FBMkMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9fTl9FLy4vbm9kZV9tb2R1bGVzL0BjbGVyay9zaGFyZWQvZGlzdC9jaHVuay1KVVFYQ1dNVi5tanM/ZjgzMiJdLCJzb3VyY2VzQ29udGVudCI6WyIvLyBzcmMvbG9hZFNjcmlwdC50c1xudmFyIE5PX0RPQ1VNRU5UX0VSUk9SID0gXCJsb2FkU2NyaXB0IGNhbm5vdCBiZSBjYWxsZWQgd2hlbiBkb2N1bWVudCBkb2VzIG5vdCBleGlzdFwiO1xudmFyIE5PX1NSQ19FUlJPUiA9IFwibG9hZFNjcmlwdCBjYW5ub3QgYmUgY2FsbGVkIHdpdGhvdXQgYSBzcmNcIjtcbmFzeW5jIGZ1bmN0aW9uIGxvYWRTY3JpcHQoc3JjID0gXCJcIiwgb3B0cykge1xuICBjb25zdCB7IGFzeW5jLCBkZWZlciwgYmVmb3JlTG9hZCwgY3Jvc3NPcmlnaW4gfSA9IG9wdHMgfHwge307XG4gIHJldHVybiBuZXcgUHJvbWlzZSgocmVzb2x2ZSwgcmVqZWN0KSA9PiB7XG4gICAgaWYgKCFzcmMpIHtcbiAgICAgIHJlamVjdChOT19TUkNfRVJST1IpO1xuICAgIH1cbiAgICBpZiAoIWRvY3VtZW50IHx8ICFkb2N1bWVudC5ib2R5KSB7XG4gICAgICByZWplY3QoTk9fRE9DVU1FTlRfRVJST1IpO1xuICAgIH1cbiAgICBjb25zdCBzY3JpcHQgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwic2NyaXB0XCIpO1xuICAgIGNyb3NzT3JpZ2luICYmIHNjcmlwdC5zZXRBdHRyaWJ1dGUoXCJjcm9zc29yaWdpblwiLCBjcm9zc09yaWdpbik7XG4gICAgc2NyaXB0LmFzeW5jID0gYXN5bmMgfHwgZmFsc2U7XG4gICAgc2NyaXB0LmRlZmVyID0gZGVmZXIgfHwgZmFsc2U7XG4gICAgc2NyaXB0LmFkZEV2ZW50TGlzdGVuZXIoXCJsb2FkXCIsICgpID0+IHtcbiAgICAgIHNjcmlwdC5yZW1vdmUoKTtcbiAgICAgIHJlc29sdmUoc2NyaXB0KTtcbiAgICB9KTtcbiAgICBzY3JpcHQuYWRkRXZlbnRMaXN0ZW5lcihcImVycm9yXCIsICgpID0+IHtcbiAgICAgIHNjcmlwdC5yZW1vdmUoKTtcbiAgICAgIHJlamVjdCgpO1xuICAgIH0pO1xuICAgIHNjcmlwdC5zcmMgPSBzcmM7XG4gICAgYmVmb3JlTG9hZD8uKHNjcmlwdCk7XG4gICAgZG9jdW1lbnQuYm9keS5hcHBlbmRDaGlsZChzY3JpcHQpO1xuICB9KTtcbn1cblxuZXhwb3J0IHtcbiAgbG9hZFNjcmlwdFxufTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWNodW5rLUpVUVhDV01WLm1qcy5tYXAiXSwibmFtZXMiOlsiTk9fRE9DVU1FTlRfRVJST1IiLCJOT19TUkNfRVJST1IiLCJsb2FkU2NyaXB0Iiwic3JjIiwib3B0cyIsImFzeW5jIiwiZGVmZXIiLCJiZWZvcmVMb2FkIiwiY3Jvc3NPcmlnaW4iLCJQcm9taXNlIiwicmVzb2x2ZSIsInJlamVjdCIsImRvY3VtZW50IiwiYm9keSIsInNjcmlwdCIsImNyZWF0ZUVsZW1lbnQiLCJzZXRBdHRyaWJ1dGUiLCJhZGRFdmVudExpc3RlbmVyIiwicmVtb3ZlIiwiYXBwZW5kQ2hpbGQiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/@clerk/shared/dist/chunk-JUQXCWMV.mjs\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/@clerk/shared/dist/chunk-KJVJ4CFF.mjs":
/*!************************************************************!*\
  !*** ./node_modules/@clerk/shared/dist/chunk-KJVJ4CFF.mjs ***!
  \************************************************************/
/***/ (function(__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   deprecated: function() { return /* binding */ deprecated; },\n/* harmony export */   deprecatedObjectProperty: function() { return /* binding */ deprecatedObjectProperty; },\n/* harmony export */   deprecatedProperty: function() { return /* binding */ deprecatedProperty; },\n/* harmony export */   isDevelopmentEnvironment: function() { return /* binding */ isDevelopmentEnvironment; },\n/* harmony export */   isProductionEnvironment: function() { return /* binding */ isProductionEnvironment; },\n/* harmony export */   isTestEnvironment: function() { return /* binding */ isTestEnvironment; }\n/* harmony export */ });\n// src/utils/runtimeEnvironment.ts\nvar isDevelopmentEnvironment = ()=>{\n    try {\n        return \"development\" === \"development\";\n    } catch (err) {}\n    return false;\n};\nvar isTestEnvironment = ()=>{\n    try {\n        return \"development\" === \"test\";\n    } catch (err) {}\n    return false;\n};\nvar isProductionEnvironment = ()=>{\n    try {\n        return \"development\" === \"production\";\n    } catch (err) {}\n    return false;\n};\n// src/deprecated.ts\nvar displayedWarnings = /* @__PURE__ */ new Set();\nvar deprecated = (fnName, warning, key)=>{\n    const hideWarning = isTestEnvironment() || isProductionEnvironment();\n    const messageId = key !== null && key !== void 0 ? key : fnName;\n    if (displayedWarnings.has(messageId) || hideWarning) {\n        return;\n    }\n    displayedWarnings.add(messageId);\n    console.warn('Clerk - DEPRECATION WARNING: \"'.concat(fnName, '\" is deprecated and will be removed in the next major release.\\n').concat(warning));\n};\nvar deprecatedProperty = function(cls, propName, warning) {\n    let isStatic = arguments.length > 3 && arguments[3] !== void 0 ? arguments[3] : false;\n    const target = isStatic ? cls : cls.prototype;\n    let value = target[propName];\n    Object.defineProperty(target, propName, {\n        get () {\n            deprecated(propName, warning, \"\".concat(cls.name, \":\").concat(propName));\n            return value;\n        },\n        set (v) {\n            value = v;\n        }\n    });\n};\nvar deprecatedObjectProperty = (obj, propName, warning, key)=>{\n    let value = obj[propName];\n    Object.defineProperty(obj, propName, {\n        get () {\n            deprecated(propName, warning, key);\n            return value;\n        },\n        set (v) {\n            value = v;\n        }\n    });\n};\n //# sourceMappingURL=chunk-KJVJ4CFF.mjs.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL25vZGVfbW9kdWxlcy9AY2xlcmsvc2hhcmVkL2Rpc3QvY2h1bmstS0pWSjRDRkYubWpzIiwibWFwcGluZ3MiOiI7Ozs7Ozs7OztBQUFBLGtDQUFrQztBQUNsQyxJQUFJQSwyQkFBMkI7SUFDN0IsSUFBSTtRQUNGLE9BQU9DLGtCQUF5QjtJQUNsQyxFQUFFLE9BQU9DLEtBQUssQ0FDZDtJQUNBLE9BQU87QUFDVDtBQUNBLElBQUlDLG9CQUFvQjtJQUN0QixJQUFJO1FBQ0YsT0FBT0Ysa0JBQXlCO0lBQ2xDLEVBQUUsT0FBT0MsS0FBSyxDQUNkO0lBQ0EsT0FBTztBQUNUO0FBQ0EsSUFBSUUsMEJBQTBCO0lBQzVCLElBQUk7UUFDRixPQUFPSCxrQkFBeUI7SUFDbEMsRUFBRSxPQUFPQyxLQUFLLENBQ2Q7SUFDQSxPQUFPO0FBQ1Q7QUFFQSxvQkFBb0I7QUFDcEIsSUFBSUcsb0JBQW9CLGFBQWEsR0FBRyxJQUFJQztBQUM1QyxJQUFJQyxhQUFhLENBQUNDLFFBQVFDLFNBQVNDO0lBQ2pDLE1BQU1DLGNBQWNSLHVCQUF1QkM7SUFDM0MsTUFBTVEsWUFBWUYsZ0JBQUFBLGlCQUFBQSxNQUFPRjtJQUN6QixJQUFJSCxrQkFBa0JRLEdBQUcsQ0FBQ0QsY0FBY0QsYUFBYTtRQUNuRDtJQUNGO0lBQ0FOLGtCQUFrQlMsR0FBRyxDQUFDRjtJQUN0QkcsUUFBUUMsSUFBSSxDQUNWLGlDQUNGUCxPQURtQ0QsUUFBTyxvRUFDbEMsT0FBUkM7QUFFRjtBQUNBLElBQUlRLHFCQUFxQixTQUFDQyxLQUFLQyxVQUFVVjtRQUFTVyw0RUFBVztJQUMzRCxNQUFNQyxTQUFTRCxXQUFXRixNQUFNQSxJQUFJSSxTQUFTO0lBQzdDLElBQUlDLFFBQVFGLE1BQU0sQ0FBQ0YsU0FBUztJQUM1QkssT0FBT0MsY0FBYyxDQUFDSixRQUFRRixVQUFVO1FBQ3RDTztZQUNFbkIsV0FBV1ksVUFBVVYsU0FBUyxHQUFlVSxPQUFaRCxJQUFJUyxJQUFJLEVBQUMsS0FBWSxPQUFUUjtZQUM3QyxPQUFPSTtRQUNUO1FBQ0FLLEtBQUlDLENBQUM7WUFDSE4sUUFBUU07UUFDVjtJQUNGO0FBQ0Y7QUFDQSxJQUFJQywyQkFBMkIsQ0FBQ0MsS0FBS1osVUFBVVYsU0FBU0M7SUFDdEQsSUFBSWEsUUFBUVEsR0FBRyxDQUFDWixTQUFTO0lBQ3pCSyxPQUFPQyxjQUFjLENBQUNNLEtBQUtaLFVBQVU7UUFDbkNPO1lBQ0VuQixXQUFXWSxVQUFVVixTQUFTQztZQUM5QixPQUFPYTtRQUNUO1FBQ0FLLEtBQUlDLENBQUM7WUFDSE4sUUFBUU07UUFDVjtJQUNGO0FBQ0Y7QUFTRSxDQUNGLDJDQUEyQyIsInNvdXJjZXMiOlsid2VicGFjazovL19OX0UvLi9ub2RlX21vZHVsZXMvQGNsZXJrL3NoYXJlZC9kaXN0L2NodW5rLUtKVko0Q0ZGLm1qcz8yM2I3Il0sInNvdXJjZXNDb250ZW50IjpbIi8vIHNyYy91dGlscy9ydW50aW1lRW52aXJvbm1lbnQudHNcbnZhciBpc0RldmVsb3BtZW50RW52aXJvbm1lbnQgPSAoKSA9PiB7XG4gIHRyeSB7XG4gICAgcmV0dXJuIHByb2Nlc3MuZW52Lk5PREVfRU5WID09PSBcImRldmVsb3BtZW50XCI7XG4gIH0gY2F0Y2ggKGVycikge1xuICB9XG4gIHJldHVybiBmYWxzZTtcbn07XG52YXIgaXNUZXN0RW52aXJvbm1lbnQgPSAoKSA9PiB7XG4gIHRyeSB7XG4gICAgcmV0dXJuIHByb2Nlc3MuZW52Lk5PREVfRU5WID09PSBcInRlc3RcIjtcbiAgfSBjYXRjaCAoZXJyKSB7XG4gIH1cbiAgcmV0dXJuIGZhbHNlO1xufTtcbnZhciBpc1Byb2R1Y3Rpb25FbnZpcm9ubWVudCA9ICgpID0+IHtcbiAgdHJ5IHtcbiAgICByZXR1cm4gcHJvY2Vzcy5lbnYuTk9ERV9FTlYgPT09IFwicHJvZHVjdGlvblwiO1xuICB9IGNhdGNoIChlcnIpIHtcbiAgfVxuICByZXR1cm4gZmFsc2U7XG59O1xuXG4vLyBzcmMvZGVwcmVjYXRlZC50c1xudmFyIGRpc3BsYXllZFdhcm5pbmdzID0gLyogQF9fUFVSRV9fICovIG5ldyBTZXQoKTtcbnZhciBkZXByZWNhdGVkID0gKGZuTmFtZSwgd2FybmluZywga2V5KSA9PiB7XG4gIGNvbnN0IGhpZGVXYXJuaW5nID0gaXNUZXN0RW52aXJvbm1lbnQoKSB8fCBpc1Byb2R1Y3Rpb25FbnZpcm9ubWVudCgpO1xuICBjb25zdCBtZXNzYWdlSWQgPSBrZXkgPz8gZm5OYW1lO1xuICBpZiAoZGlzcGxheWVkV2FybmluZ3MuaGFzKG1lc3NhZ2VJZCkgfHwgaGlkZVdhcm5pbmcpIHtcbiAgICByZXR1cm47XG4gIH1cbiAgZGlzcGxheWVkV2FybmluZ3MuYWRkKG1lc3NhZ2VJZCk7XG4gIGNvbnNvbGUud2FybihcbiAgICBgQ2xlcmsgLSBERVBSRUNBVElPTiBXQVJOSU5HOiBcIiR7Zm5OYW1lfVwiIGlzIGRlcHJlY2F0ZWQgYW5kIHdpbGwgYmUgcmVtb3ZlZCBpbiB0aGUgbmV4dCBtYWpvciByZWxlYXNlLlxuJHt3YXJuaW5nfWBcbiAgKTtcbn07XG52YXIgZGVwcmVjYXRlZFByb3BlcnR5ID0gKGNscywgcHJvcE5hbWUsIHdhcm5pbmcsIGlzU3RhdGljID0gZmFsc2UpID0+IHtcbiAgY29uc3QgdGFyZ2V0ID0gaXNTdGF0aWMgPyBjbHMgOiBjbHMucHJvdG90eXBlO1xuICBsZXQgdmFsdWUgPSB0YXJnZXRbcHJvcE5hbWVdO1xuICBPYmplY3QuZGVmaW5lUHJvcGVydHkodGFyZ2V0LCBwcm9wTmFtZSwge1xuICAgIGdldCgpIHtcbiAgICAgIGRlcHJlY2F0ZWQocHJvcE5hbWUsIHdhcm5pbmcsIGAke2Nscy5uYW1lfToke3Byb3BOYW1lfWApO1xuICAgICAgcmV0dXJuIHZhbHVlO1xuICAgIH0sXG4gICAgc2V0KHYpIHtcbiAgICAgIHZhbHVlID0gdjtcbiAgICB9XG4gIH0pO1xufTtcbnZhciBkZXByZWNhdGVkT2JqZWN0UHJvcGVydHkgPSAob2JqLCBwcm9wTmFtZSwgd2FybmluZywga2V5KSA9PiB7XG4gIGxldCB2YWx1ZSA9IG9ialtwcm9wTmFtZV07XG4gIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShvYmosIHByb3BOYW1lLCB7XG4gICAgZ2V0KCkge1xuICAgICAgZGVwcmVjYXRlZChwcm9wTmFtZSwgd2FybmluZywga2V5KTtcbiAgICAgIHJldHVybiB2YWx1ZTtcbiAgICB9LFxuICAgIHNldCh2KSB7XG4gICAgICB2YWx1ZSA9IHY7XG4gICAgfVxuICB9KTtcbn07XG5cbmV4cG9ydCB7XG4gIGlzRGV2ZWxvcG1lbnRFbnZpcm9ubWVudCxcbiAgaXNUZXN0RW52aXJvbm1lbnQsXG4gIGlzUHJvZHVjdGlvbkVudmlyb25tZW50LFxuICBkZXByZWNhdGVkLFxuICBkZXByZWNhdGVkUHJvcGVydHksXG4gIGRlcHJlY2F0ZWRPYmplY3RQcm9wZXJ0eVxufTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWNodW5rLUtKVko0Q0ZGLm1qcy5tYXAiXSwibmFtZXMiOlsiaXNEZXZlbG9wbWVudEVudmlyb25tZW50IiwicHJvY2VzcyIsImVyciIsImlzVGVzdEVudmlyb25tZW50IiwiaXNQcm9kdWN0aW9uRW52aXJvbm1lbnQiLCJkaXNwbGF5ZWRXYXJuaW5ncyIsIlNldCIsImRlcHJlY2F0ZWQiLCJmbk5hbWUiLCJ3YXJuaW5nIiwia2V5IiwiaGlkZVdhcm5pbmciLCJtZXNzYWdlSWQiLCJoYXMiLCJhZGQiLCJjb25zb2xlIiwid2FybiIsImRlcHJlY2F0ZWRQcm9wZXJ0eSIsImNscyIsInByb3BOYW1lIiwiaXNTdGF0aWMiLCJ0YXJnZXQiLCJwcm90b3R5cGUiLCJ2YWx1ZSIsIk9iamVjdCIsImRlZmluZVByb3BlcnR5IiwiZ2V0IiwibmFtZSIsInNldCIsInYiLCJkZXByZWNhdGVkT2JqZWN0UHJvcGVydHkiLCJvYmoiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/@clerk/shared/dist/chunk-KJVJ4CFF.mjs\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/@clerk/shared/dist/chunk-NDCDZYN6.mjs":
/*!************************************************************!*\
  !*** ./node_modules/@clerk/shared/dist/chunk-NDCDZYN6.mjs ***!
  \************************************************************/
/***/ (function(__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   __export: function() { return /* binding */ __export; },\n/* harmony export */   __reExport: function() { return /* binding */ __reExport; }\n/* harmony export */ });\nvar __defProp = Object.defineProperty;\nvar __getOwnPropDesc = Object.getOwnPropertyDescriptor;\nvar __getOwnPropNames = Object.getOwnPropertyNames;\nvar __hasOwnProp = Object.prototype.hasOwnProperty;\nvar __export = (target, all)=>{\n    for(var name in all)__defProp(target, name, {\n        get: all[name],\n        enumerable: true\n    });\n};\nvar __copyProps = (to, from, except, desc)=>{\n    if (from && typeof from === \"object\" || typeof from === \"function\") {\n        for (let key of __getOwnPropNames(from))if (!__hasOwnProp.call(to, key) && key !== except) __defProp(to, key, {\n            get: ()=>from[key],\n            enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable\n        });\n    }\n    return to;\n};\nvar __reExport = (target, mod, secondTarget)=>(__copyProps(target, mod, \"default\"), secondTarget && __copyProps(secondTarget, mod, \"default\"));\n //# sourceMappingURL=chunk-NDCDZYN6.mjs.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL25vZGVfbW9kdWxlcy9AY2xlcmsvc2hhcmVkL2Rpc3QvY2h1bmstTkRDRFpZTjYubWpzIiwibWFwcGluZ3MiOiI7Ozs7O0FBQUEsSUFBSUEsWUFBWUMsT0FBT0MsY0FBYztBQUNyQyxJQUFJQyxtQkFBbUJGLE9BQU9HLHdCQUF3QjtBQUN0RCxJQUFJQyxvQkFBb0JKLE9BQU9LLG1CQUFtQjtBQUNsRCxJQUFJQyxlQUFlTixPQUFPTyxTQUFTLENBQUNDLGNBQWM7QUFDbEQsSUFBSUMsV0FBVyxDQUFDQyxRQUFRQztJQUN0QixJQUFLLElBQUlDLFFBQVFELElBQ2ZaLFVBQVVXLFFBQVFFLE1BQU07UUFBRUMsS0FBS0YsR0FBRyxDQUFDQyxLQUFLO1FBQUVFLFlBQVk7SUFBSztBQUMvRDtBQUNBLElBQUlDLGNBQWMsQ0FBQ0MsSUFBSUMsTUFBTUMsUUFBUUM7SUFDbkMsSUFBSUYsUUFBUSxPQUFPQSxTQUFTLFlBQVksT0FBT0EsU0FBUyxZQUFZO1FBQ2xFLEtBQUssSUFBSUcsT0FBT2hCLGtCQUFrQmEsTUFDaEMsSUFBSSxDQUFDWCxhQUFhZSxJQUFJLENBQUNMLElBQUlJLFFBQVFBLFFBQVFGLFFBQ3pDbkIsVUFBVWlCLElBQUlJLEtBQUs7WUFBRVAsS0FBSyxJQUFNSSxJQUFJLENBQUNHLElBQUk7WUFBRU4sWUFBWSxDQUFFSyxDQUFBQSxPQUFPakIsaUJBQWlCZSxNQUFNRyxJQUFHLEtBQU1ELEtBQUtMLFVBQVU7UUFBQztJQUN0SDtJQUNBLE9BQU9FO0FBQ1Q7QUFDQSxJQUFJTSxhQUFhLENBQUNaLFFBQVFhLEtBQUtDLGVBQWtCVCxDQUFBQSxZQUFZTCxRQUFRYSxLQUFLLFlBQVlDLGdCQUFnQlQsWUFBWVMsY0FBY0QsS0FBSyxVQUFTO0FBSzVJLENBQ0YsMkNBQTJDIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vX05fRS8uL25vZGVfbW9kdWxlcy9AY2xlcmsvc2hhcmVkL2Rpc3QvY2h1bmstTkRDRFpZTjYubWpzP2ZlZWEiXSwic291cmNlc0NvbnRlbnQiOlsidmFyIF9fZGVmUHJvcCA9IE9iamVjdC5kZWZpbmVQcm9wZXJ0eTtcbnZhciBfX2dldE93blByb3BEZXNjID0gT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcjtcbnZhciBfX2dldE93blByb3BOYW1lcyA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eU5hbWVzO1xudmFyIF9faGFzT3duUHJvcCA9IE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHk7XG52YXIgX19leHBvcnQgPSAodGFyZ2V0LCBhbGwpID0+IHtcbiAgZm9yICh2YXIgbmFtZSBpbiBhbGwpXG4gICAgX19kZWZQcm9wKHRhcmdldCwgbmFtZSwgeyBnZXQ6IGFsbFtuYW1lXSwgZW51bWVyYWJsZTogdHJ1ZSB9KTtcbn07XG52YXIgX19jb3B5UHJvcHMgPSAodG8sIGZyb20sIGV4Y2VwdCwgZGVzYykgPT4ge1xuICBpZiAoZnJvbSAmJiB0eXBlb2YgZnJvbSA9PT0gXCJvYmplY3RcIiB8fCB0eXBlb2YgZnJvbSA9PT0gXCJmdW5jdGlvblwiKSB7XG4gICAgZm9yIChsZXQga2V5IG9mIF9fZ2V0T3duUHJvcE5hbWVzKGZyb20pKVxuICAgICAgaWYgKCFfX2hhc093blByb3AuY2FsbCh0bywga2V5KSAmJiBrZXkgIT09IGV4Y2VwdClcbiAgICAgICAgX19kZWZQcm9wKHRvLCBrZXksIHsgZ2V0OiAoKSA9PiBmcm9tW2tleV0sIGVudW1lcmFibGU6ICEoZGVzYyA9IF9fZ2V0T3duUHJvcERlc2MoZnJvbSwga2V5KSkgfHwgZGVzYy5lbnVtZXJhYmxlIH0pO1xuICB9XG4gIHJldHVybiB0bztcbn07XG52YXIgX19yZUV4cG9ydCA9ICh0YXJnZXQsIG1vZCwgc2Vjb25kVGFyZ2V0KSA9PiAoX19jb3B5UHJvcHModGFyZ2V0LCBtb2QsIFwiZGVmYXVsdFwiKSwgc2Vjb25kVGFyZ2V0ICYmIF9fY29weVByb3BzKHNlY29uZFRhcmdldCwgbW9kLCBcImRlZmF1bHRcIikpO1xuXG5leHBvcnQge1xuICBfX2V4cG9ydCxcbiAgX19yZUV4cG9ydFxufTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWNodW5rLU5EQ0RaWU42Lm1qcy5tYXAiXSwibmFtZXMiOlsiX19kZWZQcm9wIiwiT2JqZWN0IiwiZGVmaW5lUHJvcGVydHkiLCJfX2dldE93blByb3BEZXNjIiwiZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yIiwiX19nZXRPd25Qcm9wTmFtZXMiLCJnZXRPd25Qcm9wZXJ0eU5hbWVzIiwiX19oYXNPd25Qcm9wIiwicHJvdG90eXBlIiwiaGFzT3duUHJvcGVydHkiLCJfX2V4cG9ydCIsInRhcmdldCIsImFsbCIsIm5hbWUiLCJnZXQiLCJlbnVtZXJhYmxlIiwiX19jb3B5UHJvcHMiLCJ0byIsImZyb20iLCJleGNlcHQiLCJkZXNjIiwia2V5IiwiY2FsbCIsIl9fcmVFeHBvcnQiLCJtb2QiLCJzZWNvbmRUYXJnZXQiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/@clerk/shared/dist/chunk-NDCDZYN6.mjs\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/@clerk/shared/dist/chunk-RSOCGYTF.mjs":
/*!************************************************************!*\
  !*** ./node_modules/@clerk/shared/dist/chunk-RSOCGYTF.mjs ***!
  \************************************************************/
/***/ (function(__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   LocalStorageBroadcastChannel: function() { return /* binding */ LocalStorageBroadcastChannel; }\n/* harmony export */ });\n// src/localStorageBroadcastChannel.ts\nvar KEY_PREFIX = \"__lsbc__\";\nvar LocalStorageBroadcastChannel = class {\n    prefixEventName(eventName) {\n        return this.channelKey + eventName;\n    }\n    constructor(name){\n        this.eventTarget = window;\n        this.postMessage = (data)=>{\n            if (false) {}\n            try {\n                window.localStorage.setItem(this.channelKey, JSON.stringify(data));\n                window.localStorage.removeItem(this.channelKey);\n            } catch (e) {}\n        };\n        this.addEventListener = (eventName, listener)=>{\n            this.eventTarget.addEventListener(this.prefixEventName(eventName), (e)=>{\n                listener(e);\n            });\n        };\n        this.setupLocalStorageListener = ()=>{\n            const notifyListeners = (e)=>{\n                if (e.key !== this.channelKey || !e.newValue) {\n                    return;\n                }\n                try {\n                    const data = JSON.parse(e.newValue || \"\");\n                    const event = new MessageEvent(this.prefixEventName(\"message\"), {\n                        data\n                    });\n                    this.eventTarget.dispatchEvent(event);\n                } catch (e2) {}\n            };\n            window.addEventListener(\"storage\", notifyListeners);\n        };\n        this.channelKey = KEY_PREFIX + name;\n        this.setupLocalStorageListener();\n    }\n};\n //# sourceMappingURL=chunk-RSOCGYTF.mjs.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL25vZGVfbW9kdWxlcy9AY2xlcmsvc2hhcmVkL2Rpc3QvY2h1bmstUlNPQ0dZVEYubWpzIiwibWFwcGluZ3MiOiI7Ozs7QUFBQSxzQ0FBc0M7QUFDdEMsSUFBSUEsYUFBYTtBQUNqQixJQUFJQywrQkFBK0I7SUFxQ2pDQyxnQkFBZ0JDLFNBQVMsRUFBRTtRQUN6QixPQUFPLElBQUksQ0FBQ0MsVUFBVSxHQUFHRDtJQUMzQjtJQXRDQUUsWUFBWUMsSUFBSSxDQUFFO1FBQ2hCLElBQUksQ0FBQ0MsV0FBVyxHQUFHQztRQUNuQixJQUFJLENBQUNDLFdBQVcsR0FBRyxDQUFDQztZQUNsQixJQUFJLEtBQTZCLEVBQUUsRUFFbEM7WUFDRCxJQUFJO2dCQUNGRixPQUFPRyxZQUFZLENBQUNDLE9BQU8sQ0FBQyxJQUFJLENBQUNSLFVBQVUsRUFBRVMsS0FBS0MsU0FBUyxDQUFDSjtnQkFDNURGLE9BQU9HLFlBQVksQ0FBQ0ksVUFBVSxDQUFDLElBQUksQ0FBQ1gsVUFBVTtZQUNoRCxFQUFFLE9BQU9ZLEdBQUcsQ0FDWjtRQUNGO1FBQ0EsSUFBSSxDQUFDQyxnQkFBZ0IsR0FBRyxDQUFDZCxXQUFXZTtZQUNsQyxJQUFJLENBQUNYLFdBQVcsQ0FBQ1UsZ0JBQWdCLENBQUMsSUFBSSxDQUFDZixlQUFlLENBQUNDLFlBQVksQ0FBQ2E7Z0JBQ2xFRSxTQUFTRjtZQUNYO1FBQ0Y7UUFDQSxJQUFJLENBQUNHLHlCQUF5QixHQUFHO1lBQy9CLE1BQU1DLGtCQUFrQixDQUFDSjtnQkFDdkIsSUFBSUEsRUFBRUssR0FBRyxLQUFLLElBQUksQ0FBQ2pCLFVBQVUsSUFBSSxDQUFDWSxFQUFFTSxRQUFRLEVBQUU7b0JBQzVDO2dCQUNGO2dCQUNBLElBQUk7b0JBQ0YsTUFBTVosT0FBT0csS0FBS1UsS0FBSyxDQUFDUCxFQUFFTSxRQUFRLElBQUk7b0JBQ3RDLE1BQU1FLFFBQVEsSUFBSUMsYUFBYSxJQUFJLENBQUN2QixlQUFlLENBQUMsWUFBWTt3QkFDOURRO29CQUNGO29CQUNBLElBQUksQ0FBQ0gsV0FBVyxDQUFDbUIsYUFBYSxDQUFDRjtnQkFDakMsRUFBRSxPQUFPRyxJQUFJLENBQ2I7WUFDRjtZQUNBbkIsT0FBT1MsZ0JBQWdCLENBQUMsV0FBV0c7UUFDckM7UUFDQSxJQUFJLENBQUNoQixVQUFVLEdBQUdKLGFBQWFNO1FBQy9CLElBQUksQ0FBQ2EseUJBQXlCO0lBQ2hDO0FBSUY7QUFJRSxDQUNGLDJDQUEyQyIsInNvdXJjZXMiOlsid2VicGFjazovL19OX0UvLi9ub2RlX21vZHVsZXMvQGNsZXJrL3NoYXJlZC9kaXN0L2NodW5rLVJTT0NHWVRGLm1qcz81MDljIl0sInNvdXJjZXNDb250ZW50IjpbIi8vIHNyYy9sb2NhbFN0b3JhZ2VCcm9hZGNhc3RDaGFubmVsLnRzXG52YXIgS0VZX1BSRUZJWCA9IFwiX19sc2JjX19cIjtcbnZhciBMb2NhbFN0b3JhZ2VCcm9hZGNhc3RDaGFubmVsID0gY2xhc3Mge1xuICBjb25zdHJ1Y3RvcihuYW1lKSB7XG4gICAgdGhpcy5ldmVudFRhcmdldCA9IHdpbmRvdztcbiAgICB0aGlzLnBvc3RNZXNzYWdlID0gKGRhdGEpID0+IHtcbiAgICAgIGlmICh0eXBlb2Ygd2luZG93ID09PSBcInVuZGVmaW5lZFwiKSB7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cbiAgICAgIHRyeSB7XG4gICAgICAgIHdpbmRvdy5sb2NhbFN0b3JhZ2Uuc2V0SXRlbSh0aGlzLmNoYW5uZWxLZXksIEpTT04uc3RyaW5naWZ5KGRhdGEpKTtcbiAgICAgICAgd2luZG93LmxvY2FsU3RvcmFnZS5yZW1vdmVJdGVtKHRoaXMuY2hhbm5lbEtleSk7XG4gICAgICB9IGNhdGNoIChlKSB7XG4gICAgICB9XG4gICAgfTtcbiAgICB0aGlzLmFkZEV2ZW50TGlzdGVuZXIgPSAoZXZlbnROYW1lLCBsaXN0ZW5lcikgPT4ge1xuICAgICAgdGhpcy5ldmVudFRhcmdldC5hZGRFdmVudExpc3RlbmVyKHRoaXMucHJlZml4RXZlbnROYW1lKGV2ZW50TmFtZSksIChlKSA9PiB7XG4gICAgICAgIGxpc3RlbmVyKGUpO1xuICAgICAgfSk7XG4gICAgfTtcbiAgICB0aGlzLnNldHVwTG9jYWxTdG9yYWdlTGlzdGVuZXIgPSAoKSA9PiB7XG4gICAgICBjb25zdCBub3RpZnlMaXN0ZW5lcnMgPSAoZSkgPT4ge1xuICAgICAgICBpZiAoZS5rZXkgIT09IHRoaXMuY2hhbm5lbEtleSB8fCAhZS5uZXdWYWx1ZSkge1xuICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICB0cnkge1xuICAgICAgICAgIGNvbnN0IGRhdGEgPSBKU09OLnBhcnNlKGUubmV3VmFsdWUgfHwgXCJcIik7XG4gICAgICAgICAgY29uc3QgZXZlbnQgPSBuZXcgTWVzc2FnZUV2ZW50KHRoaXMucHJlZml4RXZlbnROYW1lKFwibWVzc2FnZVwiKSwge1xuICAgICAgICAgICAgZGF0YVxuICAgICAgICAgIH0pO1xuICAgICAgICAgIHRoaXMuZXZlbnRUYXJnZXQuZGlzcGF0Y2hFdmVudChldmVudCk7XG4gICAgICAgIH0gY2F0Y2ggKGUyKSB7XG4gICAgICAgIH1cbiAgICAgIH07XG4gICAgICB3aW5kb3cuYWRkRXZlbnRMaXN0ZW5lcihcInN0b3JhZ2VcIiwgbm90aWZ5TGlzdGVuZXJzKTtcbiAgICB9O1xuICAgIHRoaXMuY2hhbm5lbEtleSA9IEtFWV9QUkVGSVggKyBuYW1lO1xuICAgIHRoaXMuc2V0dXBMb2NhbFN0b3JhZ2VMaXN0ZW5lcigpO1xuICB9XG4gIHByZWZpeEV2ZW50TmFtZShldmVudE5hbWUpIHtcbiAgICByZXR1cm4gdGhpcy5jaGFubmVsS2V5ICsgZXZlbnROYW1lO1xuICB9XG59O1xuXG5leHBvcnQge1xuICBMb2NhbFN0b3JhZ2VCcm9hZGNhc3RDaGFubmVsXG59O1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9Y2h1bmstUlNPQ0dZVEYubWpzLm1hcCJdLCJuYW1lcyI6WyJLRVlfUFJFRklYIiwiTG9jYWxTdG9yYWdlQnJvYWRjYXN0Q2hhbm5lbCIsInByZWZpeEV2ZW50TmFtZSIsImV2ZW50TmFtZSIsImNoYW5uZWxLZXkiLCJjb25zdHJ1Y3RvciIsIm5hbWUiLCJldmVudFRhcmdldCIsIndpbmRvdyIsInBvc3RNZXNzYWdlIiwiZGF0YSIsImxvY2FsU3RvcmFnZSIsInNldEl0ZW0iLCJKU09OIiwic3RyaW5naWZ5IiwicmVtb3ZlSXRlbSIsImUiLCJhZGRFdmVudExpc3RlbmVyIiwibGlzdGVuZXIiLCJzZXR1cExvY2FsU3RvcmFnZUxpc3RlbmVyIiwibm90aWZ5TGlzdGVuZXJzIiwia2V5IiwibmV3VmFsdWUiLCJwYXJzZSIsImV2ZW50IiwiTWVzc2FnZUV2ZW50IiwiZGlzcGF0Y2hFdmVudCIsImUyIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/@clerk/shared/dist/chunk-RSOCGYTF.mjs\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/@clerk/shared/dist/chunk-TETGTEI2.mjs":
/*!************************************************************!*\
  !*** ./node_modules/@clerk/shared/dist/chunk-TETGTEI2.mjs ***!
  \************************************************************/
/***/ (function(__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   isomorphicAtob: function() { return /* binding */ isomorphicAtob; }\n/* harmony export */ });\n// src/isomorphicAtob.ts\nvar isomorphicAtob = (data)=>{\n    if (typeof atob !== \"undefined\" && typeof atob === \"function\") {\n        return atob(data);\n    } else if (typeof global !== \"undefined\" && global.Buffer) {\n        return new global.Buffer(data, \"base64\").toString();\n    }\n    return data;\n};\n //# sourceMappingURL=chunk-TETGTEI2.mjs.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL25vZGVfbW9kdWxlcy9AY2xlcmsvc2hhcmVkL2Rpc3QvY2h1bmstVEVUR1RFSTIubWpzIiwibWFwcGluZ3MiOiI7Ozs7QUFBQSx3QkFBd0I7QUFDeEIsSUFBSUEsaUJBQWlCLENBQUNDO0lBQ3BCLElBQUksT0FBT0MsU0FBUyxlQUFlLE9BQU9BLFNBQVMsWUFBWTtRQUM3RCxPQUFPQSxLQUFLRDtJQUNkLE9BQU8sSUFBSSxPQUFPRSxXQUFXLGVBQWVBLE9BQU9DLE1BQU0sRUFBRTtRQUN6RCxPQUFPLElBQUlELE9BQU9DLE1BQU0sQ0FBQ0gsTUFBTSxVQUFVSSxRQUFRO0lBQ25EO0lBQ0EsT0FBT0o7QUFDVDtBQUlFLENBQ0YsMkNBQTJDIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vX05fRS8uL25vZGVfbW9kdWxlcy9AY2xlcmsvc2hhcmVkL2Rpc3QvY2h1bmstVEVUR1RFSTIubWpzP2Q3ZWEiXSwic291cmNlc0NvbnRlbnQiOlsiLy8gc3JjL2lzb21vcnBoaWNBdG9iLnRzXG52YXIgaXNvbW9ycGhpY0F0b2IgPSAoZGF0YSkgPT4ge1xuICBpZiAodHlwZW9mIGF0b2IgIT09IFwidW5kZWZpbmVkXCIgJiYgdHlwZW9mIGF0b2IgPT09IFwiZnVuY3Rpb25cIikge1xuICAgIHJldHVybiBhdG9iKGRhdGEpO1xuICB9IGVsc2UgaWYgKHR5cGVvZiBnbG9iYWwgIT09IFwidW5kZWZpbmVkXCIgJiYgZ2xvYmFsLkJ1ZmZlcikge1xuICAgIHJldHVybiBuZXcgZ2xvYmFsLkJ1ZmZlcihkYXRhLCBcImJhc2U2NFwiKS50b1N0cmluZygpO1xuICB9XG4gIHJldHVybiBkYXRhO1xufTtcblxuZXhwb3J0IHtcbiAgaXNvbW9ycGhpY0F0b2Jcbn07XG4vLyMgc291cmNlTWFwcGluZ1VSTD1jaHVuay1URVRHVEVJMi5tanMubWFwIl0sIm5hbWVzIjpbImlzb21vcnBoaWNBdG9iIiwiZGF0YSIsImF0b2IiLCJnbG9iYWwiLCJCdWZmZXIiLCJ0b1N0cmluZyJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/@clerk/shared/dist/chunk-TETGTEI2.mjs\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/@clerk/shared/dist/chunk-TRWMHODU.mjs":
/*!************************************************************!*\
  !*** ./node_modules/@clerk/shared/dist/chunk-TRWMHODU.mjs ***!
  \************************************************************/
/***/ (function(__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   handleValueOrFn: function() { return /* binding */ handleValueOrFn; }\n/* harmony export */ });\n// src/handleValueOrFn.ts\nfunction handleValueOrFn(value, url, defaultValue) {\n    if (typeof value === \"function\") {\n        return value(url);\n    }\n    if (typeof value !== \"undefined\") {\n        return value;\n    }\n    if (typeof defaultValue !== \"undefined\") {\n        return defaultValue;\n    }\n    return void 0;\n}\n //# sourceMappingURL=chunk-TRWMHODU.mjs.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL25vZGVfbW9kdWxlcy9AY2xlcmsvc2hhcmVkL2Rpc3QvY2h1bmstVFJXTUhPRFUubWpzIiwibWFwcGluZ3MiOiI7Ozs7QUFBQSx5QkFBeUI7QUFDekIsU0FBU0EsZ0JBQWdCQyxLQUFLLEVBQUVDLEdBQUcsRUFBRUMsWUFBWTtJQUMvQyxJQUFJLE9BQU9GLFVBQVUsWUFBWTtRQUMvQixPQUFPQSxNQUFNQztJQUNmO0lBQ0EsSUFBSSxPQUFPRCxVQUFVLGFBQWE7UUFDaEMsT0FBT0E7SUFDVDtJQUNBLElBQUksT0FBT0UsaUJBQWlCLGFBQWE7UUFDdkMsT0FBT0E7SUFDVDtJQUNBLE9BQU8sS0FBSztBQUNkO0FBSUUsQ0FDRiwyQ0FBMkMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9fTl9FLy4vbm9kZV9tb2R1bGVzL0BjbGVyay9zaGFyZWQvZGlzdC9jaHVuay1UUldNSE9EVS5tanM/ZjEwOCJdLCJzb3VyY2VzQ29udGVudCI6WyIvLyBzcmMvaGFuZGxlVmFsdWVPckZuLnRzXG5mdW5jdGlvbiBoYW5kbGVWYWx1ZU9yRm4odmFsdWUsIHVybCwgZGVmYXVsdFZhbHVlKSB7XG4gIGlmICh0eXBlb2YgdmFsdWUgPT09IFwiZnVuY3Rpb25cIikge1xuICAgIHJldHVybiB2YWx1ZSh1cmwpO1xuICB9XG4gIGlmICh0eXBlb2YgdmFsdWUgIT09IFwidW5kZWZpbmVkXCIpIHtcbiAgICByZXR1cm4gdmFsdWU7XG4gIH1cbiAgaWYgKHR5cGVvZiBkZWZhdWx0VmFsdWUgIT09IFwidW5kZWZpbmVkXCIpIHtcbiAgICByZXR1cm4gZGVmYXVsdFZhbHVlO1xuICB9XG4gIHJldHVybiB2b2lkIDA7XG59XG5cbmV4cG9ydCB7XG4gIGhhbmRsZVZhbHVlT3JGblxufTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWNodW5rLVRSV01IT0RVLm1qcy5tYXAiXSwibmFtZXMiOlsiaGFuZGxlVmFsdWVPckZuIiwidmFsdWUiLCJ1cmwiLCJkZWZhdWx0VmFsdWUiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/@clerk/shared/dist/chunk-TRWMHODU.mjs\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/@clerk/shared/dist/chunk-WUG2DC4W.mjs":
/*!************************************************************!*\
  !*** ./node_modules/@clerk/shared/dist/chunk-WUG2DC4W.mjs ***!
  \************************************************************/
/***/ (function(__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   colorToSameTypeString: function() { return /* binding */ colorToSameTypeString; },\n/* harmony export */   hasAlpha: function() { return /* binding */ hasAlpha; },\n/* harmony export */   hexStringToRgbaColor: function() { return /* binding */ hexStringToRgbaColor; },\n/* harmony export */   isHSLColor: function() { return /* binding */ isHSLColor; },\n/* harmony export */   isRGBColor: function() { return /* binding */ isRGBColor; },\n/* harmony export */   isTransparent: function() { return /* binding */ isTransparent; },\n/* harmony export */   isValidHexString: function() { return /* binding */ isValidHexString; },\n/* harmony export */   isValidHslaString: function() { return /* binding */ isValidHslaString; },\n/* harmony export */   isValidRgbaString: function() { return /* binding */ isValidRgbaString; },\n/* harmony export */   stringToHslaColor: function() { return /* binding */ stringToHslaColor; },\n/* harmony export */   stringToSameTypeColor: function() { return /* binding */ stringToSameTypeColor; }\n/* harmony export */ });\n// src/color.ts\nvar IS_HEX_COLOR_REGEX = /^#?([A-F0-9]{6}|[A-F0-9]{3})$/i;\nvar IS_RGB_COLOR_REGEX = /^rgb\\((\\d+),\\s*(\\d+),\\s*(\\d+)\\)$/i;\nvar IS_RGBA_COLOR_REGEX = /^rgba\\((\\d+),\\s*(\\d+),\\s*(\\d+)(,\\s*\\d+(\\.\\d+)?)\\)$/i;\nvar IS_HSL_COLOR_REGEX = /^hsl\\((\\d+),\\s*([\\d.]+)%,\\s*([\\d.]+)%\\)$/i;\nvar IS_HSLA_COLOR_REGEX = /^hsla\\((\\d+),\\s*([\\d.]+)%,\\s*([\\d.]+)%(,\\s*\\d+(\\.\\d+)?)*\\)$/i;\nvar isValidHexString = (s)=>{\n    return !!s.match(IS_HEX_COLOR_REGEX);\n};\nvar isValidRgbaString = (s)=>{\n    return !!(s.match(IS_RGB_COLOR_REGEX) || s.match(IS_RGBA_COLOR_REGEX));\n};\nvar isValidHslaString = (s)=>{\n    return !!s.match(IS_HSL_COLOR_REGEX) || !!s.match(IS_HSLA_COLOR_REGEX);\n};\nvar isRGBColor = (c)=>{\n    return typeof c !== \"string\" && \"r\" in c;\n};\nvar isHSLColor = (c)=>{\n    return typeof c !== \"string\" && \"h\" in c;\n};\nvar isTransparent = (c)=>{\n    return c === \"transparent\";\n};\nvar hasAlpha = (color)=>{\n    return typeof color !== \"string\" && color.a != void 0 && color.a < 1;\n};\nvar CLEAN_HSLA_REGEX = /[hsla()]/g;\nvar CLEAN_RGBA_REGEX = /[rgba()]/g;\nvar stringToHslaColor = (value)=>{\n    if (value === \"transparent\") {\n        return {\n            h: 0,\n            s: 0,\n            l: 0,\n            a: 0\n        };\n    }\n    if (isValidHexString(value)) {\n        return hexStringToHslaColor(value);\n    }\n    if (isValidHslaString(value)) {\n        return parseHslaString(value);\n    }\n    if (isValidRgbaString(value)) {\n        return rgbaStringToHslaColor(value);\n    }\n    return null;\n};\nvar stringToSameTypeColor = (value)=>{\n    value = value.trim();\n    if (isValidHexString(value)) {\n        return value.startsWith(\"#\") ? value : \"#\".concat(value);\n    }\n    if (isValidRgbaString(value)) {\n        return parseRgbaString(value);\n    }\n    if (isValidHslaString(value)) {\n        return parseHslaString(value);\n    }\n    if (isTransparent(value)) {\n        return value;\n    }\n    return \"\";\n};\nvar colorToSameTypeString = (color)=>{\n    if (typeof color === \"string\" && (isValidHexString(color) || isTransparent(color))) {\n        return color;\n    }\n    if (isRGBColor(color)) {\n        return rgbaColorToRgbaString(color);\n    }\n    if (isHSLColor(color)) {\n        return hslaColorToHslaString(color);\n    }\n    return \"\";\n};\nvar hexStringToRgbaColor = (hex)=>{\n    hex = hex.replace(\"#\", \"\");\n    const r = parseInt(hex.substring(0, 2), 16);\n    const g = parseInt(hex.substring(2, 4), 16);\n    const b = parseInt(hex.substring(4, 6), 16);\n    return {\n        r,\n        g,\n        b\n    };\n};\nvar rgbaColorToRgbaString = (color)=>{\n    const { a, b, g, r } = color;\n    return color.a === 0 ? \"transparent\" : color.a != void 0 ? \"rgba(\".concat(r, \",\").concat(g, \",\").concat(b, \",\").concat(a, \")\") : \"rgb(\".concat(r, \",\").concat(g, \",\").concat(b, \")\");\n};\nvar hslaColorToHslaString = (color)=>{\n    const { h, s, l, a } = color;\n    const sPerc = Math.round(s * 100);\n    const lPerc = Math.round(l * 100);\n    return color.a === 0 ? \"transparent\" : color.a != void 0 ? \"hsla(\".concat(h, \",\").concat(sPerc, \"%,\").concat(lPerc, \"%,\").concat(a, \")\") : \"hsl(\".concat(h, \",\").concat(sPerc, \"%,\").concat(lPerc, \"%)\");\n};\nvar hexStringToHslaColor = (hex)=>{\n    const rgbaString = colorToSameTypeString(hexStringToRgbaColor(hex));\n    return rgbaStringToHslaColor(rgbaString);\n};\nvar rgbaStringToHslaColor = (rgba)=>{\n    const rgbaColor = parseRgbaString(rgba);\n    const r = rgbaColor.r / 255;\n    const g = rgbaColor.g / 255;\n    const b = rgbaColor.b / 255;\n    const max = Math.max(r, g, b), min = Math.min(r, g, b);\n    let h, s;\n    const l = (max + min) / 2;\n    if (max == min) {\n        h = s = 0;\n    } else {\n        const d = max - min;\n        s = l >= 0.5 ? d / (2 - (max + min)) : d / (max + min);\n        switch(max){\n            case r:\n                h = (g - b) / d * 60;\n                break;\n            case g:\n                h = ((b - r) / d + 2) * 60;\n                break;\n            default:\n                h = ((r - g) / d + 4) * 60;\n                break;\n        }\n    }\n    const res = {\n        h: Math.round(h),\n        s,\n        l\n    };\n    const a = rgbaColor.a;\n    if (a != void 0) {\n        res.a = a;\n    }\n    return res;\n};\nvar parseRgbaString = (str)=>{\n    const [r, g, b, a] = str.replace(CLEAN_RGBA_REGEX, \"\").split(\",\").map((c)=>Number.parseFloat(c));\n    return {\n        r,\n        g,\n        b,\n        a\n    };\n};\nvar parseHslaString = (str)=>{\n    const [h, s, l, a] = str.replace(CLEAN_HSLA_REGEX, \"\").split(\",\").map((c)=>Number.parseFloat(c));\n    return {\n        h,\n        s: s / 100,\n        l: l / 100,\n        a\n    };\n};\n //# sourceMappingURL=chunk-WUG2DC4W.mjs.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL25vZGVfbW9kdWxlcy9AY2xlcmsvc2hhcmVkL2Rpc3QvY2h1bmstV1VHMkRDNFcubWpzIiwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7Ozs7O0FBQUEsZUFBZTtBQUNmLElBQUlBLHFCQUFxQjtBQUN6QixJQUFJQyxxQkFBcUI7QUFDekIsSUFBSUMsc0JBQXNCO0FBQzFCLElBQUlDLHFCQUFxQjtBQUN6QixJQUFJQyxzQkFBc0I7QUFDMUIsSUFBSUMsbUJBQW1CLENBQUNDO0lBQ3RCLE9BQU8sQ0FBQyxDQUFDQSxFQUFFQyxLQUFLLENBQUNQO0FBQ25CO0FBQ0EsSUFBSVEsb0JBQW9CLENBQUNGO0lBQ3ZCLE9BQU8sQ0FBQyxDQUFFQSxDQUFBQSxFQUFFQyxLQUFLLENBQUNOLHVCQUF1QkssRUFBRUMsS0FBSyxDQUFDTCxvQkFBbUI7QUFDdEU7QUFDQSxJQUFJTyxvQkFBb0IsQ0FBQ0g7SUFDdkIsT0FBTyxDQUFDLENBQUNBLEVBQUVDLEtBQUssQ0FBQ0osdUJBQXVCLENBQUMsQ0FBQ0csRUFBRUMsS0FBSyxDQUFDSDtBQUNwRDtBQUNBLElBQUlNLGFBQWEsQ0FBQ0M7SUFDaEIsT0FBTyxPQUFPQSxNQUFNLFlBQVksT0FBT0E7QUFDekM7QUFDQSxJQUFJQyxhQUFhLENBQUNEO0lBQ2hCLE9BQU8sT0FBT0EsTUFBTSxZQUFZLE9BQU9BO0FBQ3pDO0FBQ0EsSUFBSUUsZ0JBQWdCLENBQUNGO0lBQ25CLE9BQU9BLE1BQU07QUFDZjtBQUNBLElBQUlHLFdBQVcsQ0FBQ0M7SUFDZCxPQUFPLE9BQU9BLFVBQVUsWUFBWUEsTUFBTUMsQ0FBQyxJQUFJLEtBQUssS0FBS0QsTUFBTUMsQ0FBQyxHQUFHO0FBQ3JFO0FBQ0EsSUFBSUMsbUJBQW1CO0FBQ3ZCLElBQUlDLG1CQUFtQjtBQUN2QixJQUFJQyxvQkFBb0IsQ0FBQ0M7SUFDdkIsSUFBSUEsVUFBVSxlQUFlO1FBQzNCLE9BQU87WUFBRUMsR0FBRztZQUFHZixHQUFHO1lBQUdnQixHQUFHO1lBQUdOLEdBQUc7UUFBRTtJQUNsQztJQUNBLElBQUlYLGlCQUFpQmUsUUFBUTtRQUMzQixPQUFPRyxxQkFBcUJIO0lBQzlCO0lBQ0EsSUFBSVgsa0JBQWtCVyxRQUFRO1FBQzVCLE9BQU9JLGdCQUFnQko7SUFDekI7SUFDQSxJQUFJWixrQkFBa0JZLFFBQVE7UUFDNUIsT0FBT0ssc0JBQXNCTDtJQUMvQjtJQUNBLE9BQU87QUFDVDtBQUNBLElBQUlNLHdCQUF3QixDQUFDTjtJQUMzQkEsUUFBUUEsTUFBTU8sSUFBSTtJQUNsQixJQUFJdEIsaUJBQWlCZSxRQUFRO1FBQzNCLE9BQU9BLE1BQU1RLFVBQVUsQ0FBQyxPQUFPUixRQUFRLElBQVUsT0FBTkE7SUFDN0M7SUFDQSxJQUFJWixrQkFBa0JZLFFBQVE7UUFDNUIsT0FBT1MsZ0JBQWdCVDtJQUN6QjtJQUNBLElBQUlYLGtCQUFrQlcsUUFBUTtRQUM1QixPQUFPSSxnQkFBZ0JKO0lBQ3pCO0lBQ0EsSUFBSVAsY0FBY08sUUFBUTtRQUN4QixPQUFPQTtJQUNUO0lBQ0EsT0FBTztBQUNUO0FBQ0EsSUFBSVUsd0JBQXdCLENBQUNmO0lBQzNCLElBQUksT0FBT0EsVUFBVSxZQUFhVixDQUFBQSxpQkFBaUJVLFVBQVVGLGNBQWNFLE1BQUssR0FBSTtRQUNsRixPQUFPQTtJQUNUO0lBQ0EsSUFBSUwsV0FBV0ssUUFBUTtRQUNyQixPQUFPZ0Isc0JBQXNCaEI7SUFDL0I7SUFDQSxJQUFJSCxXQUFXRyxRQUFRO1FBQ3JCLE9BQU9pQixzQkFBc0JqQjtJQUMvQjtJQUNBLE9BQU87QUFDVDtBQUNBLElBQUlrQix1QkFBdUIsQ0FBQ0M7SUFDMUJBLE1BQU1BLElBQUlDLE9BQU8sQ0FBQyxLQUFLO0lBQ3ZCLE1BQU1DLElBQUlDLFNBQVNILElBQUlJLFNBQVMsQ0FBQyxHQUFHLElBQUk7SUFDeEMsTUFBTUMsSUFBSUYsU0FBU0gsSUFBSUksU0FBUyxDQUFDLEdBQUcsSUFBSTtJQUN4QyxNQUFNRSxJQUFJSCxTQUFTSCxJQUFJSSxTQUFTLENBQUMsR0FBRyxJQUFJO0lBQ3hDLE9BQU87UUFBRUY7UUFBR0c7UUFBR0M7SUFBRTtBQUNuQjtBQUNBLElBQUlULHdCQUF3QixDQUFDaEI7SUFDM0IsTUFBTSxFQUFFQyxDQUFDLEVBQUV3QixDQUFDLEVBQUVELENBQUMsRUFBRUgsQ0FBQyxFQUFFLEdBQUdyQjtJQUN2QixPQUFPQSxNQUFNQyxDQUFDLEtBQUssSUFBSSxnQkFBZ0JELE1BQU1DLENBQUMsSUFBSSxLQUFLLElBQUksUUFBYXVCLE9BQUxILEdBQUUsS0FBUUksT0FBTEQsR0FBRSxLQUFRdkIsT0FBTHdCLEdBQUUsS0FBSyxPQUFGeEIsR0FBRSxPQUFLLE9BQVl1QixPQUFMSCxHQUFFLEtBQVFJLE9BQUxELEdBQUUsS0FBSyxPQUFGQyxHQUFFO0FBQzlHO0FBQ0EsSUFBSVIsd0JBQXdCLENBQUNqQjtJQUMzQixNQUFNLEVBQUVNLENBQUMsRUFBRWYsQ0FBQyxFQUFFZ0IsQ0FBQyxFQUFFTixDQUFDLEVBQUUsR0FBR0Q7SUFDdkIsTUFBTTBCLFFBQVFDLEtBQUtDLEtBQUssQ0FBQ3JDLElBQUk7SUFDN0IsTUFBTXNDLFFBQVFGLEtBQUtDLEtBQUssQ0FBQ3JCLElBQUk7SUFDN0IsT0FBT1AsTUFBTUMsQ0FBQyxLQUFLLElBQUksZ0JBQWdCRCxNQUFNQyxDQUFDLElBQUksS0FBSyxJQUFJLFFBQWF5QixPQUFMcEIsR0FBRSxLQUFhdUIsT0FBVkgsT0FBTSxNQUFjekIsT0FBVjRCLE9BQU0sTUFBTSxPQUFGNUIsR0FBRSxPQUFLLE9BQVl5QixPQUFMcEIsR0FBRSxLQUFhdUIsT0FBVkgsT0FBTSxNQUFVLE9BQU5HLE9BQU07QUFDakk7QUFDQSxJQUFJckIsdUJBQXVCLENBQUNXO0lBQzFCLE1BQU1XLGFBQWFmLHNCQUFzQkcscUJBQXFCQztJQUM5RCxPQUFPVCxzQkFBc0JvQjtBQUMvQjtBQUNBLElBQUlwQix3QkFBd0IsQ0FBQ3FCO0lBQzNCLE1BQU1DLFlBQVlsQixnQkFBZ0JpQjtJQUNsQyxNQUFNVixJQUFJVyxVQUFVWCxDQUFDLEdBQUc7SUFDeEIsTUFBTUcsSUFBSVEsVUFBVVIsQ0FBQyxHQUFHO0lBQ3hCLE1BQU1DLElBQUlPLFVBQVVQLENBQUMsR0FBRztJQUN4QixNQUFNUSxNQUFNTixLQUFLTSxHQUFHLENBQUNaLEdBQUdHLEdBQUdDLElBQUlTLE1BQU1QLEtBQUtPLEdBQUcsQ0FBQ2IsR0FBR0csR0FBR0M7SUFDcEQsSUFBSW5CLEdBQUdmO0lBQ1AsTUFBTWdCLElBQUksQ0FBQzBCLE1BQU1DLEdBQUUsSUFBSztJQUN4QixJQUFJRCxPQUFPQyxLQUFLO1FBQ2Q1QixJQUFJZixJQUFJO0lBQ1YsT0FBTztRQUNMLE1BQU00QyxJQUFJRixNQUFNQztRQUNoQjNDLElBQUlnQixLQUFLLE1BQU00QixJQUFLLEtBQUtGLENBQUFBLE1BQU1DLEdBQUUsQ0FBQyxJQUFLQyxJQUFLRixDQUFBQSxNQUFNQyxHQUFFO1FBQ3BELE9BQVFEO1lBQ04sS0FBS1o7Z0JBQ0hmLElBQUksQ0FBQ2tCLElBQUlDLENBQUFBLElBQUtVLElBQUk7Z0JBQ2xCO1lBQ0YsS0FBS1g7Z0JBQ0hsQixJQUFJLENBQUMsQ0FBQ21CLElBQUlKLENBQUFBLElBQUtjLElBQUksS0FBSztnQkFDeEI7WUFDRjtnQkFDRTdCLElBQUksQ0FBQyxDQUFDZSxJQUFJRyxDQUFBQSxJQUFLVyxJQUFJLEtBQUs7Z0JBQ3hCO1FBQ0o7SUFDRjtJQUNBLE1BQU1DLE1BQU07UUFBRTlCLEdBQUdxQixLQUFLQyxLQUFLLENBQUN0QjtRQUFJZjtRQUFHZ0I7SUFBRTtJQUNyQyxNQUFNTixJQUFJK0IsVUFBVS9CLENBQUM7SUFDckIsSUFBSUEsS0FBSyxLQUFLLEdBQUc7UUFDZm1DLElBQUluQyxDQUFDLEdBQUdBO0lBQ1Y7SUFDQSxPQUFPbUM7QUFDVDtBQUNBLElBQUl0QixrQkFBa0IsQ0FBQ3VCO0lBQ3JCLE1BQU0sQ0FBQ2hCLEdBQUdHLEdBQUdDLEdBQUd4QixFQUFFLEdBQUdvQyxJQUFJakIsT0FBTyxDQUFDakIsa0JBQWtCLElBQUltQyxLQUFLLENBQUMsS0FBS0MsR0FBRyxDQUFDLENBQUMzQyxJQUFNNEMsT0FBT0MsVUFBVSxDQUFDN0M7SUFDL0YsT0FBTztRQUFFeUI7UUFBR0c7UUFBR0M7UUFBR3hCO0lBQUU7QUFDdEI7QUFDQSxJQUFJUSxrQkFBa0IsQ0FBQzRCO0lBQ3JCLE1BQU0sQ0FBQy9CLEdBQUdmLEdBQUdnQixHQUFHTixFQUFFLEdBQUdvQyxJQUFJakIsT0FBTyxDQUFDbEIsa0JBQWtCLElBQUlvQyxLQUFLLENBQUMsS0FBS0MsR0FBRyxDQUFDLENBQUMzQyxJQUFNNEMsT0FBT0MsVUFBVSxDQUFDN0M7SUFDL0YsT0FBTztRQUFFVTtRQUFHZixHQUFHQSxJQUFJO1FBQUtnQixHQUFHQSxJQUFJO1FBQUtOO0lBQUU7QUFDeEM7QUFjRSxDQUNGLDJDQUEyQyIsInNvdXJjZXMiOlsid2VicGFjazovL19OX0UvLi9ub2RlX21vZHVsZXMvQGNsZXJrL3NoYXJlZC9kaXN0L2NodW5rLVdVRzJEQzRXLm1qcz9hMThjIl0sInNvdXJjZXNDb250ZW50IjpbIi8vIHNyYy9jb2xvci50c1xudmFyIElTX0hFWF9DT0xPUl9SRUdFWCA9IC9eIz8oW0EtRjAtOV17Nn18W0EtRjAtOV17M30pJC9pO1xudmFyIElTX1JHQl9DT0xPUl9SRUdFWCA9IC9ecmdiXFwoKFxcZCspLFxccyooXFxkKyksXFxzKihcXGQrKVxcKSQvaTtcbnZhciBJU19SR0JBX0NPTE9SX1JFR0VYID0gL15yZ2JhXFwoKFxcZCspLFxccyooXFxkKyksXFxzKihcXGQrKSgsXFxzKlxcZCsoXFwuXFxkKyk/KVxcKSQvaTtcbnZhciBJU19IU0xfQ09MT1JfUkVHRVggPSAvXmhzbFxcKChcXGQrKSxcXHMqKFtcXGQuXSspJSxcXHMqKFtcXGQuXSspJVxcKSQvaTtcbnZhciBJU19IU0xBX0NPTE9SX1JFR0VYID0gL15oc2xhXFwoKFxcZCspLFxccyooW1xcZC5dKyklLFxccyooW1xcZC5dKyklKCxcXHMqXFxkKyhcXC5cXGQrKT8pKlxcKSQvaTtcbnZhciBpc1ZhbGlkSGV4U3RyaW5nID0gKHMpID0+IHtcbiAgcmV0dXJuICEhcy5tYXRjaChJU19IRVhfQ09MT1JfUkVHRVgpO1xufTtcbnZhciBpc1ZhbGlkUmdiYVN0cmluZyA9IChzKSA9PiB7XG4gIHJldHVybiAhIShzLm1hdGNoKElTX1JHQl9DT0xPUl9SRUdFWCkgfHwgcy5tYXRjaChJU19SR0JBX0NPTE9SX1JFR0VYKSk7XG59O1xudmFyIGlzVmFsaWRIc2xhU3RyaW5nID0gKHMpID0+IHtcbiAgcmV0dXJuICEhcy5tYXRjaChJU19IU0xfQ09MT1JfUkVHRVgpIHx8ICEhcy5tYXRjaChJU19IU0xBX0NPTE9SX1JFR0VYKTtcbn07XG52YXIgaXNSR0JDb2xvciA9IChjKSA9PiB7XG4gIHJldHVybiB0eXBlb2YgYyAhPT0gXCJzdHJpbmdcIiAmJiBcInJcIiBpbiBjO1xufTtcbnZhciBpc0hTTENvbG9yID0gKGMpID0+IHtcbiAgcmV0dXJuIHR5cGVvZiBjICE9PSBcInN0cmluZ1wiICYmIFwiaFwiIGluIGM7XG59O1xudmFyIGlzVHJhbnNwYXJlbnQgPSAoYykgPT4ge1xuICByZXR1cm4gYyA9PT0gXCJ0cmFuc3BhcmVudFwiO1xufTtcbnZhciBoYXNBbHBoYSA9IChjb2xvcikgPT4ge1xuICByZXR1cm4gdHlwZW9mIGNvbG9yICE9PSBcInN0cmluZ1wiICYmIGNvbG9yLmEgIT0gdm9pZCAwICYmIGNvbG9yLmEgPCAxO1xufTtcbnZhciBDTEVBTl9IU0xBX1JFR0VYID0gL1toc2xhKCldL2c7XG52YXIgQ0xFQU5fUkdCQV9SRUdFWCA9IC9bcmdiYSgpXS9nO1xudmFyIHN0cmluZ1RvSHNsYUNvbG9yID0gKHZhbHVlKSA9PiB7XG4gIGlmICh2YWx1ZSA9PT0gXCJ0cmFuc3BhcmVudFwiKSB7XG4gICAgcmV0dXJuIHsgaDogMCwgczogMCwgbDogMCwgYTogMCB9O1xuICB9XG4gIGlmIChpc1ZhbGlkSGV4U3RyaW5nKHZhbHVlKSkge1xuICAgIHJldHVybiBoZXhTdHJpbmdUb0hzbGFDb2xvcih2YWx1ZSk7XG4gIH1cbiAgaWYgKGlzVmFsaWRIc2xhU3RyaW5nKHZhbHVlKSkge1xuICAgIHJldHVybiBwYXJzZUhzbGFTdHJpbmcodmFsdWUpO1xuICB9XG4gIGlmIChpc1ZhbGlkUmdiYVN0cmluZyh2YWx1ZSkpIHtcbiAgICByZXR1cm4gcmdiYVN0cmluZ1RvSHNsYUNvbG9yKHZhbHVlKTtcbiAgfVxuICByZXR1cm4gbnVsbDtcbn07XG52YXIgc3RyaW5nVG9TYW1lVHlwZUNvbG9yID0gKHZhbHVlKSA9PiB7XG4gIHZhbHVlID0gdmFsdWUudHJpbSgpO1xuICBpZiAoaXNWYWxpZEhleFN0cmluZyh2YWx1ZSkpIHtcbiAgICByZXR1cm4gdmFsdWUuc3RhcnRzV2l0aChcIiNcIikgPyB2YWx1ZSA6IGAjJHt2YWx1ZX1gO1xuICB9XG4gIGlmIChpc1ZhbGlkUmdiYVN0cmluZyh2YWx1ZSkpIHtcbiAgICByZXR1cm4gcGFyc2VSZ2JhU3RyaW5nKHZhbHVlKTtcbiAgfVxuICBpZiAoaXNWYWxpZEhzbGFTdHJpbmcodmFsdWUpKSB7XG4gICAgcmV0dXJuIHBhcnNlSHNsYVN0cmluZyh2YWx1ZSk7XG4gIH1cbiAgaWYgKGlzVHJhbnNwYXJlbnQodmFsdWUpKSB7XG4gICAgcmV0dXJuIHZhbHVlO1xuICB9XG4gIHJldHVybiBcIlwiO1xufTtcbnZhciBjb2xvclRvU2FtZVR5cGVTdHJpbmcgPSAoY29sb3IpID0+IHtcbiAgaWYgKHR5cGVvZiBjb2xvciA9PT0gXCJzdHJpbmdcIiAmJiAoaXNWYWxpZEhleFN0cmluZyhjb2xvcikgfHwgaXNUcmFuc3BhcmVudChjb2xvcikpKSB7XG4gICAgcmV0dXJuIGNvbG9yO1xuICB9XG4gIGlmIChpc1JHQkNvbG9yKGNvbG9yKSkge1xuICAgIHJldHVybiByZ2JhQ29sb3JUb1JnYmFTdHJpbmcoY29sb3IpO1xuICB9XG4gIGlmIChpc0hTTENvbG9yKGNvbG9yKSkge1xuICAgIHJldHVybiBoc2xhQ29sb3JUb0hzbGFTdHJpbmcoY29sb3IpO1xuICB9XG4gIHJldHVybiBcIlwiO1xufTtcbnZhciBoZXhTdHJpbmdUb1JnYmFDb2xvciA9IChoZXgpID0+IHtcbiAgaGV4ID0gaGV4LnJlcGxhY2UoXCIjXCIsIFwiXCIpO1xuICBjb25zdCByID0gcGFyc2VJbnQoaGV4LnN1YnN0cmluZygwLCAyKSwgMTYpO1xuICBjb25zdCBnID0gcGFyc2VJbnQoaGV4LnN1YnN0cmluZygyLCA0KSwgMTYpO1xuICBjb25zdCBiID0gcGFyc2VJbnQoaGV4LnN1YnN0cmluZyg0LCA2KSwgMTYpO1xuICByZXR1cm4geyByLCBnLCBiIH07XG59O1xudmFyIHJnYmFDb2xvclRvUmdiYVN0cmluZyA9IChjb2xvcikgPT4ge1xuICBjb25zdCB7IGEsIGIsIGcsIHIgfSA9IGNvbG9yO1xuICByZXR1cm4gY29sb3IuYSA9PT0gMCA/IFwidHJhbnNwYXJlbnRcIiA6IGNvbG9yLmEgIT0gdm9pZCAwID8gYHJnYmEoJHtyfSwke2d9LCR7Yn0sJHthfSlgIDogYHJnYigke3J9LCR7Z30sJHtifSlgO1xufTtcbnZhciBoc2xhQ29sb3JUb0hzbGFTdHJpbmcgPSAoY29sb3IpID0+IHtcbiAgY29uc3QgeyBoLCBzLCBsLCBhIH0gPSBjb2xvcjtcbiAgY29uc3Qgc1BlcmMgPSBNYXRoLnJvdW5kKHMgKiAxMDApO1xuICBjb25zdCBsUGVyYyA9IE1hdGgucm91bmQobCAqIDEwMCk7XG4gIHJldHVybiBjb2xvci5hID09PSAwID8gXCJ0cmFuc3BhcmVudFwiIDogY29sb3IuYSAhPSB2b2lkIDAgPyBgaHNsYSgke2h9LCR7c1BlcmN9JSwke2xQZXJjfSUsJHthfSlgIDogYGhzbCgke2h9LCR7c1BlcmN9JSwke2xQZXJjfSUpYDtcbn07XG52YXIgaGV4U3RyaW5nVG9Ic2xhQ29sb3IgPSAoaGV4KSA9PiB7XG4gIGNvbnN0IHJnYmFTdHJpbmcgPSBjb2xvclRvU2FtZVR5cGVTdHJpbmcoaGV4U3RyaW5nVG9SZ2JhQ29sb3IoaGV4KSk7XG4gIHJldHVybiByZ2JhU3RyaW5nVG9Ic2xhQ29sb3IocmdiYVN0cmluZyk7XG59O1xudmFyIHJnYmFTdHJpbmdUb0hzbGFDb2xvciA9IChyZ2JhKSA9PiB7XG4gIGNvbnN0IHJnYmFDb2xvciA9IHBhcnNlUmdiYVN0cmluZyhyZ2JhKTtcbiAgY29uc3QgciA9IHJnYmFDb2xvci5yIC8gMjU1O1xuICBjb25zdCBnID0gcmdiYUNvbG9yLmcgLyAyNTU7XG4gIGNvbnN0IGIgPSByZ2JhQ29sb3IuYiAvIDI1NTtcbiAgY29uc3QgbWF4ID0gTWF0aC5tYXgociwgZywgYiksIG1pbiA9IE1hdGgubWluKHIsIGcsIGIpO1xuICBsZXQgaCwgcztcbiAgY29uc3QgbCA9IChtYXggKyBtaW4pIC8gMjtcbiAgaWYgKG1heCA9PSBtaW4pIHtcbiAgICBoID0gcyA9IDA7XG4gIH0gZWxzZSB7XG4gICAgY29uc3QgZCA9IG1heCAtIG1pbjtcbiAgICBzID0gbCA+PSAwLjUgPyBkIC8gKDIgLSAobWF4ICsgbWluKSkgOiBkIC8gKG1heCArIG1pbik7XG4gICAgc3dpdGNoIChtYXgpIHtcbiAgICAgIGNhc2UgcjpcbiAgICAgICAgaCA9IChnIC0gYikgLyBkICogNjA7XG4gICAgICAgIGJyZWFrO1xuICAgICAgY2FzZSBnOlxuICAgICAgICBoID0gKChiIC0gcikgLyBkICsgMikgKiA2MDtcbiAgICAgICAgYnJlYWs7XG4gICAgICBkZWZhdWx0OlxuICAgICAgICBoID0gKChyIC0gZykgLyBkICsgNCkgKiA2MDtcbiAgICAgICAgYnJlYWs7XG4gICAgfVxuICB9XG4gIGNvbnN0IHJlcyA9IHsgaDogTWF0aC5yb3VuZChoKSwgcywgbCB9O1xuICBjb25zdCBhID0gcmdiYUNvbG9yLmE7XG4gIGlmIChhICE9IHZvaWQgMCkge1xuICAgIHJlcy5hID0gYTtcbiAgfVxuICByZXR1cm4gcmVzO1xufTtcbnZhciBwYXJzZVJnYmFTdHJpbmcgPSAoc3RyKSA9PiB7XG4gIGNvbnN0IFtyLCBnLCBiLCBhXSA9IHN0ci5yZXBsYWNlKENMRUFOX1JHQkFfUkVHRVgsIFwiXCIpLnNwbGl0KFwiLFwiKS5tYXAoKGMpID0+IE51bWJlci5wYXJzZUZsb2F0KGMpKTtcbiAgcmV0dXJuIHsgciwgZywgYiwgYSB9O1xufTtcbnZhciBwYXJzZUhzbGFTdHJpbmcgPSAoc3RyKSA9PiB7XG4gIGNvbnN0IFtoLCBzLCBsLCBhXSA9IHN0ci5yZXBsYWNlKENMRUFOX0hTTEFfUkVHRVgsIFwiXCIpLnNwbGl0KFwiLFwiKS5tYXAoKGMpID0+IE51bWJlci5wYXJzZUZsb2F0KGMpKTtcbiAgcmV0dXJuIHsgaCwgczogcyAvIDEwMCwgbDogbCAvIDEwMCwgYSB9O1xufTtcblxuZXhwb3J0IHtcbiAgaXNWYWxpZEhleFN0cmluZyxcbiAgaXNWYWxpZFJnYmFTdHJpbmcsXG4gIGlzVmFsaWRIc2xhU3RyaW5nLFxuICBpc1JHQkNvbG9yLFxuICBpc0hTTENvbG9yLFxuICBpc1RyYW5zcGFyZW50LFxuICBoYXNBbHBoYSxcbiAgc3RyaW5nVG9Ic2xhQ29sb3IsXG4gIHN0cmluZ1RvU2FtZVR5cGVDb2xvcixcbiAgY29sb3JUb1NhbWVUeXBlU3RyaW5nLFxuICBoZXhTdHJpbmdUb1JnYmFDb2xvclxufTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWNodW5rLVdVRzJEQzRXLm1qcy5tYXAiXSwibmFtZXMiOlsiSVNfSEVYX0NPTE9SX1JFR0VYIiwiSVNfUkdCX0NPTE9SX1JFR0VYIiwiSVNfUkdCQV9DT0xPUl9SRUdFWCIsIklTX0hTTF9DT0xPUl9SRUdFWCIsIklTX0hTTEFfQ09MT1JfUkVHRVgiLCJpc1ZhbGlkSGV4U3RyaW5nIiwicyIsIm1hdGNoIiwiaXNWYWxpZFJnYmFTdHJpbmciLCJpc1ZhbGlkSHNsYVN0cmluZyIsImlzUkdCQ29sb3IiLCJjIiwiaXNIU0xDb2xvciIsImlzVHJhbnNwYXJlbnQiLCJoYXNBbHBoYSIsImNvbG9yIiwiYSIsIkNMRUFOX0hTTEFfUkVHRVgiLCJDTEVBTl9SR0JBX1JFR0VYIiwic3RyaW5nVG9Ic2xhQ29sb3IiLCJ2YWx1ZSIsImgiLCJsIiwiaGV4U3RyaW5nVG9Ic2xhQ29sb3IiLCJwYXJzZUhzbGFTdHJpbmciLCJyZ2JhU3RyaW5nVG9Ic2xhQ29sb3IiLCJzdHJpbmdUb1NhbWVUeXBlQ29sb3IiLCJ0cmltIiwic3RhcnRzV2l0aCIsInBhcnNlUmdiYVN0cmluZyIsImNvbG9yVG9TYW1lVHlwZVN0cmluZyIsInJnYmFDb2xvclRvUmdiYVN0cmluZyIsImhzbGFDb2xvclRvSHNsYVN0cmluZyIsImhleFN0cmluZ1RvUmdiYUNvbG9yIiwiaGV4IiwicmVwbGFjZSIsInIiLCJwYXJzZUludCIsInN1YnN0cmluZyIsImciLCJiIiwic1BlcmMiLCJNYXRoIiwicm91bmQiLCJsUGVyYyIsInJnYmFTdHJpbmciLCJyZ2JhIiwicmdiYUNvbG9yIiwibWF4IiwibWluIiwiZCIsInJlcyIsInN0ciIsInNwbGl0IiwibWFwIiwiTnVtYmVyIiwicGFyc2VGbG9hdCJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/@clerk/shared/dist/chunk-WUG2DC4W.mjs\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/@clerk/shared/dist/chunk-XKTTPTOL.mjs":
/*!************************************************************!*\
  !*** ./node_modules/@clerk/shared/dist/chunk-XKTTPTOL.mjs ***!
  \************************************************************/
/***/ (function(__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   inBrowser: function() { return /* binding */ inBrowser; },\n/* harmony export */   isBrowserOnline: function() { return /* binding */ isBrowserOnline; },\n/* harmony export */   isValidBrowser: function() { return /* binding */ isValidBrowser; },\n/* harmony export */   isValidBrowserOnline: function() { return /* binding */ isValidBrowserOnline; },\n/* harmony export */   userAgentIsRobot: function() { return /* binding */ userAgentIsRobot; }\n/* harmony export */ });\n// src/browser.ts\nfunction inBrowser() {\n    return \"object\" !== \"undefined\";\n}\nvar botAgents = [\n    \"bot\",\n    \"spider\",\n    \"crawl\",\n    \"APIs-Google\",\n    \"AdsBot\",\n    \"Googlebot\",\n    \"mediapartners\",\n    \"Google Favicon\",\n    \"FeedFetcher\",\n    \"Google-Read-Aloud\",\n    \"DuplexWeb-Google\",\n    \"googleweblight\",\n    \"bing\",\n    \"yandex\",\n    \"baidu\",\n    \"duckduck\",\n    \"yahoo\",\n    \"ecosia\",\n    \"ia_archiver\",\n    \"facebook\",\n    \"instagram\",\n    \"pinterest\",\n    \"reddit\",\n    \"slack\",\n    \"twitter\",\n    \"whatsapp\",\n    \"youtube\",\n    \"semrush\"\n];\nvar botAgentRegex = new RegExp(botAgents.join(\"|\"), \"i\");\nfunction userAgentIsRobot(userAgent) {\n    return !userAgent ? false : botAgentRegex.test(userAgent);\n}\nfunction isValidBrowser() {\n    var _window;\n    const navigator = (_window = window) === null || _window === void 0 ? void 0 : _window.navigator;\n    if (!inBrowser() || !navigator) {\n        return false;\n    }\n    return !userAgentIsRobot(navigator === null || navigator === void 0 ? void 0 : navigator.userAgent) && !(navigator === null || navigator === void 0 ? void 0 : navigator.webdriver);\n}\nfunction isBrowserOnline() {\n    var _window, _navigator_connection, _navigator_connection1;\n    const navigator = (_window = window) === null || _window === void 0 ? void 0 : _window.navigator;\n    if (!inBrowser() || !navigator) {\n        return false;\n    }\n    const isNavigatorOnline = navigator === null || navigator === void 0 ? void 0 : navigator.onLine;\n    const isExperimentalConnectionOnline = (navigator === null || navigator === void 0 ? void 0 : (_navigator_connection = navigator.connection) === null || _navigator_connection === void 0 ? void 0 : _navigator_connection.rtt) !== 0 && (navigator === null || navigator === void 0 ? void 0 : (_navigator_connection1 = navigator.connection) === null || _navigator_connection1 === void 0 ? void 0 : _navigator_connection1.downlink) !== 0;\n    return isExperimentalConnectionOnline && isNavigatorOnline;\n}\nfunction isValidBrowserOnline() {\n    return isBrowserOnline() && isValidBrowser();\n}\n //# sourceMappingURL=chunk-XKTTPTOL.mjs.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL25vZGVfbW9kdWxlcy9AY2xlcmsvc2hhcmVkL2Rpc3QvY2h1bmstWEtUVFBUT0wubWpzIiwibWFwcGluZ3MiOiI7Ozs7Ozs7O0FBQUEsaUJBQWlCO0FBQ2pCLFNBQVNBO0lBQ1AsT0FBTyxhQUFrQjtBQUMzQjtBQUNBLElBQUlDLFlBQVk7SUFDZDtJQUNBO0lBQ0E7SUFDQTtJQUNBO0lBQ0E7SUFDQTtJQUNBO0lBQ0E7SUFDQTtJQUNBO0lBQ0E7SUFDQTtJQUNBO0lBQ0E7SUFDQTtJQUNBO0lBQ0E7SUFDQTtJQUNBO0lBQ0E7SUFDQTtJQUNBO0lBQ0E7SUFDQTtJQUNBO0lBQ0E7SUFDQTtDQUNEO0FBQ0QsSUFBSUMsZ0JBQWdCLElBQUlDLE9BQU9GLFVBQVVHLElBQUksQ0FBQyxNQUFNO0FBQ3BELFNBQVNDLGlCQUFpQkMsU0FBUztJQUNqQyxPQUFPLENBQUNBLFlBQVksUUFBUUosY0FBY0ssSUFBSSxDQUFDRDtBQUNqRDtBQUNBLFNBQVNFO1FBQ1dDO0lBQWxCLE1BQU1DLGFBQVlELFVBQUFBLG9CQUFBQSw4QkFBQUEsUUFBUUMsU0FBUztJQUNuQyxJQUFJLENBQUNWLGVBQWUsQ0FBQ1UsV0FBVztRQUM5QixPQUFPO0lBQ1Q7SUFDQSxPQUFPLENBQUNMLGlCQUFpQkssc0JBQUFBLGdDQUFBQSxVQUFXSixTQUFTLEtBQUssRUFBQ0ksc0JBQUFBLGdDQUFBQSxVQUFXQyxTQUFTO0FBQ3pFO0FBQ0EsU0FBU0M7UUFDV0gsU0FLcUJDLHVCQUFvQ0E7SUFMM0UsTUFBTUEsYUFBWUQsVUFBQUEsb0JBQUFBLDhCQUFBQSxRQUFRQyxTQUFTO0lBQ25DLElBQUksQ0FBQ1YsZUFBZSxDQUFDVSxXQUFXO1FBQzlCLE9BQU87SUFDVDtJQUNBLE1BQU1HLG9CQUFvQkgsc0JBQUFBLGdDQUFBQSxVQUFXSSxNQUFNO0lBQzNDLE1BQU1DLGlDQUFpQ0wsQ0FBQUEsc0JBQUFBLGlDQUFBQSx3QkFBQUEsVUFBV00sVUFBVSxjQUFyQk4sNENBQUFBLHNCQUF1Qk8sR0FBRyxNQUFLLEtBQUtQLENBQUFBLHNCQUFBQSxpQ0FBQUEseUJBQUFBLFVBQVdNLFVBQVUsY0FBckJOLDZDQUFBQSx1QkFBdUJRLFFBQVEsTUFBSztJQUMvRyxPQUFPSCxrQ0FBa0NGO0FBQzNDO0FBQ0EsU0FBU007SUFDUCxPQUFPUCxxQkFBcUJKO0FBQzlCO0FBUUUsQ0FDRiwyQ0FBMkMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9fTl9FLy4vbm9kZV9tb2R1bGVzL0BjbGVyay9zaGFyZWQvZGlzdC9jaHVuay1YS1RUUFRPTC5tanM/MmRkMSJdLCJzb3VyY2VzQ29udGVudCI6WyIvLyBzcmMvYnJvd3Nlci50c1xuZnVuY3Rpb24gaW5Ccm93c2VyKCkge1xuICByZXR1cm4gdHlwZW9mIHdpbmRvdyAhPT0gXCJ1bmRlZmluZWRcIjtcbn1cbnZhciBib3RBZ2VudHMgPSBbXG4gIFwiYm90XCIsXG4gIFwic3BpZGVyXCIsXG4gIFwiY3Jhd2xcIixcbiAgXCJBUElzLUdvb2dsZVwiLFxuICBcIkFkc0JvdFwiLFxuICBcIkdvb2dsZWJvdFwiLFxuICBcIm1lZGlhcGFydG5lcnNcIixcbiAgXCJHb29nbGUgRmF2aWNvblwiLFxuICBcIkZlZWRGZXRjaGVyXCIsXG4gIFwiR29vZ2xlLVJlYWQtQWxvdWRcIixcbiAgXCJEdXBsZXhXZWItR29vZ2xlXCIsXG4gIFwiZ29vZ2xld2VibGlnaHRcIixcbiAgXCJiaW5nXCIsXG4gIFwieWFuZGV4XCIsXG4gIFwiYmFpZHVcIixcbiAgXCJkdWNrZHVja1wiLFxuICBcInlhaG9vXCIsXG4gIFwiZWNvc2lhXCIsXG4gIFwiaWFfYXJjaGl2ZXJcIixcbiAgXCJmYWNlYm9va1wiLFxuICBcImluc3RhZ3JhbVwiLFxuICBcInBpbnRlcmVzdFwiLFxuICBcInJlZGRpdFwiLFxuICBcInNsYWNrXCIsXG4gIFwidHdpdHRlclwiLFxuICBcIndoYXRzYXBwXCIsXG4gIFwieW91dHViZVwiLFxuICBcInNlbXJ1c2hcIlxuXTtcbnZhciBib3RBZ2VudFJlZ2V4ID0gbmV3IFJlZ0V4cChib3RBZ2VudHMuam9pbihcInxcIiksIFwiaVwiKTtcbmZ1bmN0aW9uIHVzZXJBZ2VudElzUm9ib3QodXNlckFnZW50KSB7XG4gIHJldHVybiAhdXNlckFnZW50ID8gZmFsc2UgOiBib3RBZ2VudFJlZ2V4LnRlc3QodXNlckFnZW50KTtcbn1cbmZ1bmN0aW9uIGlzVmFsaWRCcm93c2VyKCkge1xuICBjb25zdCBuYXZpZ2F0b3IgPSB3aW5kb3c/Lm5hdmlnYXRvcjtcbiAgaWYgKCFpbkJyb3dzZXIoKSB8fCAhbmF2aWdhdG9yKSB7XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG4gIHJldHVybiAhdXNlckFnZW50SXNSb2JvdChuYXZpZ2F0b3I/LnVzZXJBZ2VudCkgJiYgIW5hdmlnYXRvcj8ud2ViZHJpdmVyO1xufVxuZnVuY3Rpb24gaXNCcm93c2VyT25saW5lKCkge1xuICBjb25zdCBuYXZpZ2F0b3IgPSB3aW5kb3c/Lm5hdmlnYXRvcjtcbiAgaWYgKCFpbkJyb3dzZXIoKSB8fCAhbmF2aWdhdG9yKSB7XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG4gIGNvbnN0IGlzTmF2aWdhdG9yT25saW5lID0gbmF2aWdhdG9yPy5vbkxpbmU7XG4gIGNvbnN0IGlzRXhwZXJpbWVudGFsQ29ubmVjdGlvbk9ubGluZSA9IG5hdmlnYXRvcj8uY29ubmVjdGlvbj8ucnR0ICE9PSAwICYmIG5hdmlnYXRvcj8uY29ubmVjdGlvbj8uZG93bmxpbmsgIT09IDA7XG4gIHJldHVybiBpc0V4cGVyaW1lbnRhbENvbm5lY3Rpb25PbmxpbmUgJiYgaXNOYXZpZ2F0b3JPbmxpbmU7XG59XG5mdW5jdGlvbiBpc1ZhbGlkQnJvd3Nlck9ubGluZSgpIHtcbiAgcmV0dXJuIGlzQnJvd3Nlck9ubGluZSgpICYmIGlzVmFsaWRCcm93c2VyKCk7XG59XG5cbmV4cG9ydCB7XG4gIGluQnJvd3NlcixcbiAgdXNlckFnZW50SXNSb2JvdCxcbiAgaXNWYWxpZEJyb3dzZXIsXG4gIGlzQnJvd3Nlck9ubGluZSxcbiAgaXNWYWxpZEJyb3dzZXJPbmxpbmVcbn07XG4vLyMgc291cmNlTWFwcGluZ1VSTD1jaHVuay1YS1RUUFRPTC5tanMubWFwIl0sIm5hbWVzIjpbImluQnJvd3NlciIsImJvdEFnZW50cyIsImJvdEFnZW50UmVnZXgiLCJSZWdFeHAiLCJqb2luIiwidXNlckFnZW50SXNSb2JvdCIsInVzZXJBZ2VudCIsInRlc3QiLCJpc1ZhbGlkQnJvd3NlciIsIndpbmRvdyIsIm5hdmlnYXRvciIsIndlYmRyaXZlciIsImlzQnJvd3Nlck9ubGluZSIsImlzTmF2aWdhdG9yT25saW5lIiwib25MaW5lIiwiaXNFeHBlcmltZW50YWxDb25uZWN0aW9uT25saW5lIiwiY29ubmVjdGlvbiIsInJ0dCIsImRvd25saW5rIiwiaXNWYWxpZEJyb3dzZXJPbmxpbmUiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/@clerk/shared/dist/chunk-XKTTPTOL.mjs\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/@clerk/shared/dist/chunk-XRHDC7IT.mjs":
/*!************************************************************!*\
  !*** ./node_modules/@clerk/shared/dist/chunk-XRHDC7IT.mjs ***!
  \************************************************************/
/***/ (function(__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   Poller: function() { return /* binding */ Poller; },\n/* harmony export */   createWorkerTimers: function() { return /* binding */ createWorkerTimers; },\n/* harmony export */   noop: function() { return /* binding */ noop; }\n/* harmony export */ });\n// src/utils/noop.ts\nvar noop = function() {\n    for(var _len = arguments.length, _args = new Array(_len), _key = 0; _key < _len; _key++){\n        _args[_key] = arguments[_key];\n    }\n};\n// src/workerTimers/workerTimers.worker.ts\nvar workerTimers_worker_default = 'const respond=r=>{self.postMessage(r)},workerToTabIds={};self.addEventListener(\"message\",r=>{const e=r.data;switch(e.type){case\"setTimeout\":workerToTabIds[e.id]=setTimeout(()=>{respond({id:e.id})},e.ms);break;case\"clearTimeout\":workerToTabIds[e.id]&&(clearTimeout(workerToTabIds[e.id]),delete workerToTabIds[e.id]);break;case\"setInterval\":workerToTabIds[e.id]=setInterval(()=>{respond({id:e.id})},e.ms);break;case\"clearInterval\":workerToTabIds[e.id]&&(clearInterval(workerToTabIds[e.id]),delete workerToTabIds[e.id]);break}});\\n';\n// src/workerTimers/createWorkerTimers.ts\nvar createWebWorker = function(source) {\n    let opts = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : {};\n    if (typeof Worker === \"undefined\") {\n        return null;\n    }\n    try {\n        const blob = new Blob([\n            source\n        ], {\n            type: \"application/javascript; charset=utf-8\"\n        });\n        const workerScript = globalThis.URL.createObjectURL(blob);\n        return new Worker(workerScript, opts);\n    } catch (e) {\n        console.warn(\"Clerk: Cannot create worker from blob. Consider adding worker-src blob:; to your CSP\");\n        return null;\n    }\n};\nvar fallbackTimers = ()=>{\n    const setTimeout = globalThis.setTimeout.bind(globalThis);\n    const setInterval = globalThis.setInterval.bind(globalThis);\n    const clearTimeout = globalThis.clearTimeout.bind(globalThis);\n    const clearInterval = globalThis.clearInterval.bind(globalThis);\n    return {\n        setTimeout,\n        setInterval,\n        clearTimeout,\n        clearInterval,\n        cleanup: noop\n    };\n};\nvar createWorkerTimers = ()=>{\n    let id = 0;\n    const generateId = ()=>id++;\n    const callbacks = /* @__PURE__ */ new Map();\n    const post = (w, p)=>w === null || w === void 0 ? void 0 : w.postMessage(p);\n    const handleMessage = (e)=>{\n        var _callbacks_get;\n        (_callbacks_get = callbacks.get(e.data.id)) === null || _callbacks_get === void 0 ? void 0 : _callbacks_get();\n    };\n    let worker = createWebWorker(workerTimers_worker_default, {\n        name: \"clerk-timers\"\n    });\n    worker === null || worker === void 0 ? void 0 : worker.addEventListener(\"message\", handleMessage);\n    if (!worker) {\n        return fallbackTimers();\n    }\n    const init = ()=>{\n        if (!worker) {\n            worker = createWebWorker(workerTimers_worker_default, {\n                name: \"clerk-timers\"\n            });\n            worker === null || worker === void 0 ? void 0 : worker.addEventListener(\"message\", handleMessage);\n        }\n    };\n    const cleanup = ()=>{\n        if (worker) {\n            worker.terminate();\n            worker = null;\n            callbacks.clear();\n        }\n    };\n    const setTimeout = (cb, ms)=>{\n        init();\n        const id2 = generateId();\n        callbacks.set(id2, cb);\n        post(worker, {\n            type: \"setTimeout\",\n            id: id2,\n            ms\n        });\n        return id2;\n    };\n    const setInterval = (cb, ms)=>{\n        init();\n        const id2 = generateId();\n        callbacks.set(id2, cb);\n        post(worker, {\n            type: \"setInterval\",\n            id: id2,\n            ms\n        });\n        return id2;\n    };\n    const clearTimeout = (id2)=>{\n        init();\n        callbacks.delete(id2);\n        post(worker, {\n            type: \"clearTimeout\",\n            id: id2\n        });\n    };\n    const clearInterval = (id2)=>{\n        init();\n        callbacks.delete(id2);\n        post(worker, {\n            type: \"clearInterval\",\n            id: id2\n        });\n    };\n    return {\n        setTimeout,\n        setInterval,\n        clearTimeout,\n        clearInterval,\n        cleanup\n    };\n};\n// src/poller.ts\nfunction Poller() {\n    let { delayInMs } = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : {\n        delayInMs: 1e3\n    };\n    const workerTimers = createWorkerTimers();\n    let timerId;\n    let stopped = false;\n    const stop = ()=>{\n        if (timerId) {\n            workerTimers.clearTimeout(timerId);\n            workerTimers.cleanup();\n        }\n        stopped = true;\n    };\n    const run = async (cb)=>{\n        stopped = false;\n        await cb(stop);\n        if (stopped) {\n            return;\n        }\n        timerId = workerTimers.setTimeout(()=>{\n            void run(cb);\n        }, delayInMs);\n    };\n    return {\n        run,\n        stop\n    };\n}\n_c = Poller;\n //# sourceMappingURL=chunk-XRHDC7IT.mjs.map\nvar _c;\n$RefreshReg$(_c, \"Poller\");\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/@clerk/shared/dist/chunk-XRHDC7IT.mjs\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/@clerk/shared/dist/deprecated.mjs":
/*!********************************************************!*\
  !*** ./node_modules/@clerk/shared/dist/deprecated.mjs ***!
  \********************************************************/
/***/ (function(__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   deprecated: function() { return /* reexport safe */ _chunk_KJVJ4CFF_mjs__WEBPACK_IMPORTED_MODULE_0__.deprecated; },\n/* harmony export */   deprecatedObjectProperty: function() { return /* reexport safe */ _chunk_KJVJ4CFF_mjs__WEBPACK_IMPORTED_MODULE_0__.deprecatedObjectProperty; },\n/* harmony export */   deprecatedProperty: function() { return /* reexport safe */ _chunk_KJVJ4CFF_mjs__WEBPACK_IMPORTED_MODULE_0__.deprecatedProperty; }\n/* harmony export */ });\n/* harmony import */ var _chunk_KJVJ4CFF_mjs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./chunk-KJVJ4CFF.mjs */ \"(app-pages-browser)/./node_modules/@clerk/shared/dist/chunk-KJVJ4CFF.mjs\");\n/* harmony import */ var _chunk_NDCDZYN6_mjs__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./chunk-NDCDZYN6.mjs */ \"(app-pages-browser)/./node_modules/@clerk/shared/dist/chunk-NDCDZYN6.mjs\");\n\n\n //# sourceMappingURL=deprecated.mjs.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL25vZGVfbW9kdWxlcy9AY2xlcmsvc2hhcmVkL2Rpc3QvZGVwcmVjYXRlZC5tanMiLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7QUFJOEI7QUFDQTtBQUs1QixDQUNGLHVDQUF1QyIsInNvdXJjZXMiOlsid2VicGFjazovL19OX0UvLi9ub2RlX21vZHVsZXMvQGNsZXJrL3NoYXJlZC9kaXN0L2RlcHJlY2F0ZWQubWpzPzEwM2YiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHtcbiAgZGVwcmVjYXRlZCxcbiAgZGVwcmVjYXRlZE9iamVjdFByb3BlcnR5LFxuICBkZXByZWNhdGVkUHJvcGVydHlcbn0gZnJvbSBcIi4vY2h1bmstS0pWSjRDRkYubWpzXCI7XG5pbXBvcnQgXCIuL2NodW5rLU5EQ0RaWU42Lm1qc1wiO1xuZXhwb3J0IHtcbiAgZGVwcmVjYXRlZCxcbiAgZGVwcmVjYXRlZE9iamVjdFByb3BlcnR5LFxuICBkZXByZWNhdGVkUHJvcGVydHlcbn07XG4vLyMgc291cmNlTWFwcGluZ1VSTD1kZXByZWNhdGVkLm1qcy5tYXAiXSwibmFtZXMiOlsiZGVwcmVjYXRlZCIsImRlcHJlY2F0ZWRPYmplY3RQcm9wZXJ0eSIsImRlcHJlY2F0ZWRQcm9wZXJ0eSJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/@clerk/shared/dist/deprecated.mjs\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/@clerk/shared/dist/error.mjs":
/*!***************************************************!*\
  !*** ./node_modules/@clerk/shared/dist/error.mjs ***!
  \***************************************************/
/***/ (function(__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   ClerkAPIResponseError: function() { return /* reexport safe */ _chunk_5DRMPUGE_mjs__WEBPACK_IMPORTED_MODULE_0__.ClerkAPIResponseError; },\n/* harmony export */   ClerkRuntimeError: function() { return /* reexport safe */ _chunk_5DRMPUGE_mjs__WEBPACK_IMPORTED_MODULE_0__.ClerkRuntimeError; },\n/* harmony export */   EmailLinkError: function() { return /* reexport safe */ _chunk_5DRMPUGE_mjs__WEBPACK_IMPORTED_MODULE_0__.EmailLinkError; },\n/* harmony export */   EmailLinkErrorCode: function() { return /* reexport safe */ _chunk_5DRMPUGE_mjs__WEBPACK_IMPORTED_MODULE_0__.EmailLinkErrorCode; },\n/* harmony export */   MagicLinkError: function() { return /* reexport safe */ _chunk_5DRMPUGE_mjs__WEBPACK_IMPORTED_MODULE_0__.MagicLinkError; },\n/* harmony export */   MagicLinkErrorCode: function() { return /* reexport safe */ _chunk_5DRMPUGE_mjs__WEBPACK_IMPORTED_MODULE_0__.MagicLinkErrorCode; },\n/* harmony export */   buildErrorThrower: function() { return /* reexport safe */ _chunk_5DRMPUGE_mjs__WEBPACK_IMPORTED_MODULE_0__.buildErrorThrower; },\n/* harmony export */   is4xxError: function() { return /* reexport safe */ _chunk_5DRMPUGE_mjs__WEBPACK_IMPORTED_MODULE_0__.is4xxError; },\n/* harmony export */   isClerkAPIResponseError: function() { return /* reexport safe */ _chunk_5DRMPUGE_mjs__WEBPACK_IMPORTED_MODULE_0__.isClerkAPIResponseError; },\n/* harmony export */   isClerkRuntimeError: function() { return /* reexport safe */ _chunk_5DRMPUGE_mjs__WEBPACK_IMPORTED_MODULE_0__.isClerkRuntimeError; },\n/* harmony export */   isEmailLinkError: function() { return /* reexport safe */ _chunk_5DRMPUGE_mjs__WEBPACK_IMPORTED_MODULE_0__.isEmailLinkError; },\n/* harmony export */   isKnownError: function() { return /* reexport safe */ _chunk_5DRMPUGE_mjs__WEBPACK_IMPORTED_MODULE_0__.isKnownError; },\n/* harmony export */   isMagicLinkError: function() { return /* reexport safe */ _chunk_5DRMPUGE_mjs__WEBPACK_IMPORTED_MODULE_0__.isMagicLinkError; },\n/* harmony export */   isMetamaskError: function() { return /* reexport safe */ _chunk_5DRMPUGE_mjs__WEBPACK_IMPORTED_MODULE_0__.isMetamaskError; },\n/* harmony export */   isNetworkError: function() { return /* reexport safe */ _chunk_5DRMPUGE_mjs__WEBPACK_IMPORTED_MODULE_0__.isNetworkError; },\n/* harmony export */   isUnauthorizedError: function() { return /* reexport safe */ _chunk_5DRMPUGE_mjs__WEBPACK_IMPORTED_MODULE_0__.isUnauthorizedError; },\n/* harmony export */   isUserLockedError: function() { return /* reexport safe */ _chunk_5DRMPUGE_mjs__WEBPACK_IMPORTED_MODULE_0__.isUserLockedError; },\n/* harmony export */   parseError: function() { return /* reexport safe */ _chunk_5DRMPUGE_mjs__WEBPACK_IMPORTED_MODULE_0__.parseError; },\n/* harmony export */   parseErrors: function() { return /* reexport safe */ _chunk_5DRMPUGE_mjs__WEBPACK_IMPORTED_MODULE_0__.parseErrors; }\n/* harmony export */ });\n/* harmony import */ var _chunk_5DRMPUGE_mjs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./chunk-5DRMPUGE.mjs */ \"(app-pages-browser)/./node_modules/@clerk/shared/dist/chunk-5DRMPUGE.mjs\");\n/* harmony import */ var _chunk_KJVJ4CFF_mjs__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./chunk-KJVJ4CFF.mjs */ \"(app-pages-browser)/./node_modules/@clerk/shared/dist/chunk-KJVJ4CFF.mjs\");\n/* harmony import */ var _chunk_NDCDZYN6_mjs__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./chunk-NDCDZYN6.mjs */ \"(app-pages-browser)/./node_modules/@clerk/shared/dist/chunk-NDCDZYN6.mjs\");\n\n\n\n //# sourceMappingURL=error.mjs.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL25vZGVfbW9kdWxlcy9AY2xlcmsvc2hhcmVkL2Rpc3QvZXJyb3IubWpzIiwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7QUFvQjhCO0FBQ0E7QUFDQTtBQXFCNUIsQ0FDRixrQ0FBa0MiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9fTl9FLy4vbm9kZV9tb2R1bGVzL0BjbGVyay9zaGFyZWQvZGlzdC9lcnJvci5tanM/MzFkYiJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQge1xuICBDbGVya0FQSVJlc3BvbnNlRXJyb3IsXG4gIENsZXJrUnVudGltZUVycm9yLFxuICBFbWFpbExpbmtFcnJvcixcbiAgRW1haWxMaW5rRXJyb3JDb2RlLFxuICBNYWdpY0xpbmtFcnJvcixcbiAgTWFnaWNMaW5rRXJyb3JDb2RlLFxuICBidWlsZEVycm9yVGhyb3dlcixcbiAgaXM0eHhFcnJvcixcbiAgaXNDbGVya0FQSVJlc3BvbnNlRXJyb3IsXG4gIGlzQ2xlcmtSdW50aW1lRXJyb3IsXG4gIGlzRW1haWxMaW5rRXJyb3IsXG4gIGlzS25vd25FcnJvcixcbiAgaXNNYWdpY0xpbmtFcnJvcixcbiAgaXNNZXRhbWFza0Vycm9yLFxuICBpc05ldHdvcmtFcnJvcixcbiAgaXNVbmF1dGhvcml6ZWRFcnJvcixcbiAgaXNVc2VyTG9ja2VkRXJyb3IsXG4gIHBhcnNlRXJyb3IsXG4gIHBhcnNlRXJyb3JzXG59IGZyb20gXCIuL2NodW5rLTVEUk1QVUdFLm1qc1wiO1xuaW1wb3J0IFwiLi9jaHVuay1LSlZKNENGRi5tanNcIjtcbmltcG9ydCBcIi4vY2h1bmstTkRDRFpZTjYubWpzXCI7XG5leHBvcnQge1xuICBDbGVya0FQSVJlc3BvbnNlRXJyb3IsXG4gIENsZXJrUnVudGltZUVycm9yLFxuICBFbWFpbExpbmtFcnJvcixcbiAgRW1haWxMaW5rRXJyb3JDb2RlLFxuICBNYWdpY0xpbmtFcnJvcixcbiAgTWFnaWNMaW5rRXJyb3JDb2RlLFxuICBidWlsZEVycm9yVGhyb3dlcixcbiAgaXM0eHhFcnJvcixcbiAgaXNDbGVya0FQSVJlc3BvbnNlRXJyb3IsXG4gIGlzQ2xlcmtSdW50aW1lRXJyb3IsXG4gIGlzRW1haWxMaW5rRXJyb3IsXG4gIGlzS25vd25FcnJvcixcbiAgaXNNYWdpY0xpbmtFcnJvcixcbiAgaXNNZXRhbWFza0Vycm9yLFxuICBpc05ldHdvcmtFcnJvcixcbiAgaXNVbmF1dGhvcml6ZWRFcnJvcixcbiAgaXNVc2VyTG9ja2VkRXJyb3IsXG4gIHBhcnNlRXJyb3IsXG4gIHBhcnNlRXJyb3JzXG59O1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9ZXJyb3IubWpzLm1hcCJdLCJuYW1lcyI6WyJDbGVya0FQSVJlc3BvbnNlRXJyb3IiLCJDbGVya1J1bnRpbWVFcnJvciIsIkVtYWlsTGlua0Vycm9yIiwiRW1haWxMaW5rRXJyb3JDb2RlIiwiTWFnaWNMaW5rRXJyb3IiLCJNYWdpY0xpbmtFcnJvckNvZGUiLCJidWlsZEVycm9yVGhyb3dlciIsImlzNHh4RXJyb3IiLCJpc0NsZXJrQVBJUmVzcG9uc2VFcnJvciIsImlzQ2xlcmtSdW50aW1lRXJyb3IiLCJpc0VtYWlsTGlua0Vycm9yIiwiaXNLbm93bkVycm9yIiwiaXNNYWdpY0xpbmtFcnJvciIsImlzTWV0YW1hc2tFcnJvciIsImlzTmV0d29ya0Vycm9yIiwiaXNVbmF1dGhvcml6ZWRFcnJvciIsImlzVXNlckxvY2tlZEVycm9yIiwicGFyc2VFcnJvciIsInBhcnNlRXJyb3JzIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/@clerk/shared/dist/error.mjs\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/@clerk/shared/dist/handleValueOrFn.mjs":
/*!*************************************************************!*\
  !*** ./node_modules/@clerk/shared/dist/handleValueOrFn.mjs ***!
  \*************************************************************/
/***/ (function(__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   handleValueOrFn: function() { return /* reexport safe */ _chunk_TRWMHODU_mjs__WEBPACK_IMPORTED_MODULE_0__.handleValueOrFn; }\n/* harmony export */ });\n/* harmony import */ var _chunk_TRWMHODU_mjs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./chunk-TRWMHODU.mjs */ \"(app-pages-browser)/./node_modules/@clerk/shared/dist/chunk-TRWMHODU.mjs\");\n/* harmony import */ var _chunk_NDCDZYN6_mjs__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./chunk-NDCDZYN6.mjs */ \"(app-pages-browser)/./node_modules/@clerk/shared/dist/chunk-NDCDZYN6.mjs\");\n\n\n //# sourceMappingURL=handleValueOrFn.mjs.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL25vZGVfbW9kdWxlcy9AY2xlcmsvc2hhcmVkL2Rpc3QvaGFuZGxlVmFsdWVPckZuLm1qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7QUFFOEI7QUFDQTtBQUc1QixDQUNGLDRDQUE0QyIsInNvdXJjZXMiOlsid2VicGFjazovL19OX0UvLi9ub2RlX21vZHVsZXMvQGNsZXJrL3NoYXJlZC9kaXN0L2hhbmRsZVZhbHVlT3JGbi5tanM/NDU5NCJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQge1xuICBoYW5kbGVWYWx1ZU9yRm5cbn0gZnJvbSBcIi4vY2h1bmstVFJXTUhPRFUubWpzXCI7XG5pbXBvcnQgXCIuL2NodW5rLU5EQ0RaWU42Lm1qc1wiO1xuZXhwb3J0IHtcbiAgaGFuZGxlVmFsdWVPckZuXG59O1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9aGFuZGxlVmFsdWVPckZuLm1qcy5tYXAiXSwibmFtZXMiOlsiaGFuZGxlVmFsdWVPckZuIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/@clerk/shared/dist/handleValueOrFn.mjs\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/@clerk/shared/dist/index.mjs":
/*!***************************************************!*\
  !*** ./node_modules/@clerk/shared/dist/index.mjs ***!
  \***************************************************/
/***/ (function(__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   ClerkAPIResponseError: function() { return /* reexport safe */ _chunk_5DRMPUGE_mjs__WEBPACK_IMPORTED_MODULE_15__.ClerkAPIResponseError; },\n/* harmony export */   ClerkRuntimeError: function() { return /* reexport safe */ _chunk_5DRMPUGE_mjs__WEBPACK_IMPORTED_MODULE_15__.ClerkRuntimeError; },\n/* harmony export */   DEV_BROWSER_JWT_MARKER: function() { return /* reexport safe */ _chunk_3S7ZLCXD_mjs__WEBPACK_IMPORTED_MODULE_14__.DEV_BROWSER_JWT_MARKER; },\n/* harmony export */   DEV_BROWSER_SSO_JWT_PARAMETER: function() { return /* reexport safe */ _chunk_3S7ZLCXD_mjs__WEBPACK_IMPORTED_MODULE_14__.DEV_BROWSER_SSO_JWT_PARAMETER; },\n/* harmony export */   EmailLinkError: function() { return /* reexport safe */ _chunk_5DRMPUGE_mjs__WEBPACK_IMPORTED_MODULE_15__.EmailLinkError; },\n/* harmony export */   EmailLinkErrorCode: function() { return /* reexport safe */ _chunk_5DRMPUGE_mjs__WEBPACK_IMPORTED_MODULE_15__.EmailLinkErrorCode; },\n/* harmony export */   LocalStorageBroadcastChannel: function() { return /* reexport safe */ _chunk_RSOCGYTF_mjs__WEBPACK_IMPORTED_MODULE_9__.LocalStorageBroadcastChannel; },\n/* harmony export */   MagicLinkError: function() { return /* reexport safe */ _chunk_5DRMPUGE_mjs__WEBPACK_IMPORTED_MODULE_15__.MagicLinkError; },\n/* harmony export */   MagicLinkErrorCode: function() { return /* reexport safe */ _chunk_5DRMPUGE_mjs__WEBPACK_IMPORTED_MODULE_15__.MagicLinkErrorCode; },\n/* harmony export */   Poller: function() { return /* reexport safe */ _chunk_XRHDC7IT_mjs__WEBPACK_IMPORTED_MODULE_0__.Poller; },\n/* harmony export */   addClerkPrefix: function() { return /* reexport safe */ _chunk_5E5NNJ3O_mjs__WEBPACK_IMPORTED_MODULE_3__.addClerkPrefix; },\n/* harmony export */   addYears: function() { return /* reexport safe */ _chunk_FSKKI4LG_mjs__WEBPACK_IMPORTED_MODULE_13__.addYears; },\n/* harmony export */   buildErrorThrower: function() { return /* reexport safe */ _chunk_5DRMPUGE_mjs__WEBPACK_IMPORTED_MODULE_15__.buildErrorThrower; },\n/* harmony export */   buildPublishableKey: function() { return /* reexport safe */ _chunk_IAZRYRAH_mjs__WEBPACK_IMPORTED_MODULE_6__.buildPublishableKey; },\n/* harmony export */   callWithRetry: function() { return /* reexport safe */ _chunk_4PW5MDZA_mjs__WEBPACK_IMPORTED_MODULE_11__.callWithRetry; },\n/* harmony export */   camelToSnake: function() { return /* reexport safe */ _chunk_5QXIOV6T_mjs__WEBPACK_IMPORTED_MODULE_2__.camelToSnake; },\n/* harmony export */   colorToSameTypeString: function() { return /* reexport safe */ _chunk_WUG2DC4W_mjs__WEBPACK_IMPORTED_MODULE_12__.colorToSameTypeString; },\n/* harmony export */   createDeferredPromise: function() { return /* binding */ createDeferredPromise; },\n/* harmony export */   createDevOrStagingUrlCache: function() { return /* reexport safe */ _chunk_IAZRYRAH_mjs__WEBPACK_IMPORTED_MODULE_6__.createDevOrStagingUrlCache; },\n/* harmony export */   createWorkerTimers: function() { return /* reexport safe */ _chunk_XRHDC7IT_mjs__WEBPACK_IMPORTED_MODULE_0__.createWorkerTimers; },\n/* harmony export */   dateTo12HourTime: function() { return /* reexport safe */ _chunk_FSKKI4LG_mjs__WEBPACK_IMPORTED_MODULE_13__.dateTo12HourTime; },\n/* harmony export */   deepCamelToSnake: function() { return /* reexport safe */ _chunk_5QXIOV6T_mjs__WEBPACK_IMPORTED_MODULE_2__.deepCamelToSnake; },\n/* harmony export */   deepSnakeToCamel: function() { return /* reexport safe */ _chunk_5QXIOV6T_mjs__WEBPACK_IMPORTED_MODULE_2__.deepSnakeToCamel; },\n/* harmony export */   deprecated: function() { return /* reexport safe */ _chunk_KJVJ4CFF_mjs__WEBPACK_IMPORTED_MODULE_16__.deprecated; },\n/* harmony export */   deprecatedObjectProperty: function() { return /* reexport safe */ _chunk_KJVJ4CFF_mjs__WEBPACK_IMPORTED_MODULE_16__.deprecatedObjectProperty; },\n/* harmony export */   deprecatedProperty: function() { return /* reexport safe */ _chunk_KJVJ4CFF_mjs__WEBPACK_IMPORTED_MODULE_16__.deprecatedProperty; },\n/* harmony export */   differenceInCalendarDays: function() { return /* reexport safe */ _chunk_FSKKI4LG_mjs__WEBPACK_IMPORTED_MODULE_13__.differenceInCalendarDays; },\n/* harmony export */   extension: function() { return /* reexport safe */ _chunk_5JU2E5TY_mjs__WEBPACK_IMPORTED_MODULE_4__.extension; },\n/* harmony export */   extractDevBrowserJWTFromURLHash: function() { return /* reexport safe */ _chunk_3S7ZLCXD_mjs__WEBPACK_IMPORTED_MODULE_14__.extractDevBrowserJWTFromURLHash; },\n/* harmony export */   extractDevBrowserJWTFromURLSearchParams: function() { return /* reexport safe */ _chunk_3S7ZLCXD_mjs__WEBPACK_IMPORTED_MODULE_14__.extractDevBrowserJWTFromURLSearchParams; },\n/* harmony export */   formatRelative: function() { return /* reexport safe */ _chunk_FSKKI4LG_mjs__WEBPACK_IMPORTED_MODULE_13__.formatRelative; },\n/* harmony export */   getClerkJsMajorVersionOrTag: function() { return /* reexport safe */ _chunk_5E5NNJ3O_mjs__WEBPACK_IMPORTED_MODULE_3__.getClerkJsMajorVersionOrTag; },\n/* harmony export */   getRequestUrl: function() { return /* reexport safe */ _chunk_GVKVD773_mjs__WEBPACK_IMPORTED_MODULE_1__.getRequestUrl; },\n/* harmony export */   getScriptUrl: function() { return /* reexport safe */ _chunk_5E5NNJ3O_mjs__WEBPACK_IMPORTED_MODULE_3__.getScriptUrl; },\n/* harmony export */   handleValueOrFn: function() { return /* reexport safe */ _chunk_TRWMHODU_mjs__WEBPACK_IMPORTED_MODULE_5__.handleValueOrFn; },\n/* harmony export */   hasAlpha: function() { return /* reexport safe */ _chunk_WUG2DC4W_mjs__WEBPACK_IMPORTED_MODULE_12__.hasAlpha; },\n/* harmony export */   hexStringToRgbaColor: function() { return /* reexport safe */ _chunk_WUG2DC4W_mjs__WEBPACK_IMPORTED_MODULE_12__.hexStringToRgbaColor; },\n/* harmony export */   inBrowser: function() { return /* reexport safe */ _chunk_XKTTPTOL_mjs__WEBPACK_IMPORTED_MODULE_10__.inBrowser; },\n/* harmony export */   is4xxError: function() { return /* reexport safe */ _chunk_5DRMPUGE_mjs__WEBPACK_IMPORTED_MODULE_15__.is4xxError; },\n/* harmony export */   isBrowserOnline: function() { return /* reexport safe */ _chunk_XKTTPTOL_mjs__WEBPACK_IMPORTED_MODULE_10__.isBrowserOnline; },\n/* harmony export */   isClerkAPIResponseError: function() { return /* reexport safe */ _chunk_5DRMPUGE_mjs__WEBPACK_IMPORTED_MODULE_15__.isClerkAPIResponseError; },\n/* harmony export */   isClerkRuntimeError: function() { return /* reexport safe */ _chunk_5DRMPUGE_mjs__WEBPACK_IMPORTED_MODULE_15__.isClerkRuntimeError; },\n/* harmony export */   isDevelopmentEnvironment: function() { return /* reexport safe */ _chunk_KJVJ4CFF_mjs__WEBPACK_IMPORTED_MODULE_16__.isDevelopmentEnvironment; },\n/* harmony export */   isDevelopmentFromApiKey: function() { return /* reexport safe */ _chunk_IAZRYRAH_mjs__WEBPACK_IMPORTED_MODULE_6__.isDevelopmentFromApiKey; },\n/* harmony export */   isEmailLinkError: function() { return /* reexport safe */ _chunk_5DRMPUGE_mjs__WEBPACK_IMPORTED_MODULE_15__.isEmailLinkError; },\n/* harmony export */   isHSLColor: function() { return /* reexport safe */ _chunk_WUG2DC4W_mjs__WEBPACK_IMPORTED_MODULE_12__.isHSLColor; },\n/* harmony export */   isHttpOrHttps: function() { return /* reexport safe */ _chunk_GVKVD773_mjs__WEBPACK_IMPORTED_MODULE_1__.isHttpOrHttps; },\n/* harmony export */   isIPV4Address: function() { return /* reexport safe */ _chunk_5QXIOV6T_mjs__WEBPACK_IMPORTED_MODULE_2__.isIPV4Address; },\n/* harmony export */   isKnownError: function() { return /* reexport safe */ _chunk_5DRMPUGE_mjs__WEBPACK_IMPORTED_MODULE_15__.isKnownError; },\n/* harmony export */   isLegacyFrontendApiKey: function() { return /* reexport safe */ _chunk_IAZRYRAH_mjs__WEBPACK_IMPORTED_MODULE_6__.isLegacyFrontendApiKey; },\n/* harmony export */   isMagicLinkError: function() { return /* reexport safe */ _chunk_5DRMPUGE_mjs__WEBPACK_IMPORTED_MODULE_15__.isMagicLinkError; },\n/* harmony export */   isMetamaskError: function() { return /* reexport safe */ _chunk_5DRMPUGE_mjs__WEBPACK_IMPORTED_MODULE_15__.isMetamaskError; },\n/* harmony export */   isNetworkError: function() { return /* reexport safe */ _chunk_5DRMPUGE_mjs__WEBPACK_IMPORTED_MODULE_15__.isNetworkError; },\n/* harmony export */   isProductionEnvironment: function() { return /* reexport safe */ _chunk_KJVJ4CFF_mjs__WEBPACK_IMPORTED_MODULE_16__.isProductionEnvironment; },\n/* harmony export */   isProductionFromApiKey: function() { return /* reexport safe */ _chunk_IAZRYRAH_mjs__WEBPACK_IMPORTED_MODULE_6__.isProductionFromApiKey; },\n/* harmony export */   isProxyUrlRelative: function() { return /* reexport safe */ _chunk_GVKVD773_mjs__WEBPACK_IMPORTED_MODULE_1__.isProxyUrlRelative; },\n/* harmony export */   isPublishableKey: function() { return /* reexport safe */ _chunk_IAZRYRAH_mjs__WEBPACK_IMPORTED_MODULE_6__.isPublishableKey; },\n/* harmony export */   isRGBColor: function() { return /* reexport safe */ _chunk_WUG2DC4W_mjs__WEBPACK_IMPORTED_MODULE_12__.isRGBColor; },\n/* harmony export */   isStaging: function() { return /* reexport safe */ _chunk_5E5NNJ3O_mjs__WEBPACK_IMPORTED_MODULE_3__.isStaging; },\n/* harmony export */   isTestEnvironment: function() { return /* reexport safe */ _chunk_KJVJ4CFF_mjs__WEBPACK_IMPORTED_MODULE_16__.isTestEnvironment; },\n/* harmony export */   isTransparent: function() { return /* reexport safe */ _chunk_WUG2DC4W_mjs__WEBPACK_IMPORTED_MODULE_12__.isTransparent; },\n/* harmony export */   isUnauthorizedError: function() { return /* reexport safe */ _chunk_5DRMPUGE_mjs__WEBPACK_IMPORTED_MODULE_15__.isUnauthorizedError; },\n/* harmony export */   isUserLockedError: function() { return /* reexport safe */ _chunk_5DRMPUGE_mjs__WEBPACK_IMPORTED_MODULE_15__.isUserLockedError; },\n/* harmony export */   isValidBrowser: function() { return /* reexport safe */ _chunk_XKTTPTOL_mjs__WEBPACK_IMPORTED_MODULE_10__.isValidBrowser; },\n/* harmony export */   isValidBrowserOnline: function() { return /* reexport safe */ _chunk_XKTTPTOL_mjs__WEBPACK_IMPORTED_MODULE_10__.isValidBrowserOnline; },\n/* harmony export */   isValidHexString: function() { return /* reexport safe */ _chunk_WUG2DC4W_mjs__WEBPACK_IMPORTED_MODULE_12__.isValidHexString; },\n/* harmony export */   isValidHslaString: function() { return /* reexport safe */ _chunk_WUG2DC4W_mjs__WEBPACK_IMPORTED_MODULE_12__.isValidHslaString; },\n/* harmony export */   isValidProxyUrl: function() { return /* reexport safe */ _chunk_GVKVD773_mjs__WEBPACK_IMPORTED_MODULE_1__.isValidProxyUrl; },\n/* harmony export */   isValidRgbaString: function() { return /* reexport safe */ _chunk_WUG2DC4W_mjs__WEBPACK_IMPORTED_MODULE_12__.isValidRgbaString; },\n/* harmony export */   isomorphicAtob: function() { return /* reexport safe */ _chunk_TETGTEI2_mjs__WEBPACK_IMPORTED_MODULE_7__.isomorphicAtob; },\n/* harmony export */   loadScript: function() { return /* reexport safe */ _chunk_JUQXCWMV_mjs__WEBPACK_IMPORTED_MODULE_8__.loadScript; },\n/* harmony export */   logErrorInDevMode: function() { return /* binding */ logErrorInDevMode; },\n/* harmony export */   noop: function() { return /* reexport safe */ _chunk_XRHDC7IT_mjs__WEBPACK_IMPORTED_MODULE_0__.noop; },\n/* harmony export */   normalizeDate: function() { return /* reexport safe */ _chunk_FSKKI4LG_mjs__WEBPACK_IMPORTED_MODULE_13__.normalizeDate; },\n/* harmony export */   parseError: function() { return /* reexport safe */ _chunk_5DRMPUGE_mjs__WEBPACK_IMPORTED_MODULE_15__.parseError; },\n/* harmony export */   parseErrors: function() { return /* reexport safe */ _chunk_5DRMPUGE_mjs__WEBPACK_IMPORTED_MODULE_15__.parseErrors; },\n/* harmony export */   parsePublishableKey: function() { return /* reexport safe */ _chunk_IAZRYRAH_mjs__WEBPACK_IMPORTED_MODULE_6__.parsePublishableKey; },\n/* harmony export */   parseSearchParams: function() { return /* reexport safe */ _chunk_5E5NNJ3O_mjs__WEBPACK_IMPORTED_MODULE_3__.parseSearchParams; },\n/* harmony export */   proxyUrlToAbsoluteURL: function() { return /* reexport safe */ _chunk_GVKVD773_mjs__WEBPACK_IMPORTED_MODULE_1__.proxyUrlToAbsoluteURL; },\n/* harmony export */   readJSONFile: function() { return /* reexport safe */ _chunk_5JU2E5TY_mjs__WEBPACK_IMPORTED_MODULE_4__.readJSONFile; },\n/* harmony export */   runWithExponentialBackOff: function() { return /* binding */ runWithExponentialBackOff; },\n/* harmony export */   setDevBrowserJWTInURL: function() { return /* reexport safe */ _chunk_3S7ZLCXD_mjs__WEBPACK_IMPORTED_MODULE_14__.setDevBrowserJWTInURL; },\n/* harmony export */   snakeToCamel: function() { return /* reexport safe */ _chunk_5QXIOV6T_mjs__WEBPACK_IMPORTED_MODULE_2__.snakeToCamel; },\n/* harmony export */   stringToHslaColor: function() { return /* reexport safe */ _chunk_WUG2DC4W_mjs__WEBPACK_IMPORTED_MODULE_12__.stringToHslaColor; },\n/* harmony export */   stringToSameTypeColor: function() { return /* reexport safe */ _chunk_WUG2DC4W_mjs__WEBPACK_IMPORTED_MODULE_12__.stringToSameTypeColor; },\n/* harmony export */   stripScheme: function() { return /* reexport safe */ _chunk_5E5NNJ3O_mjs__WEBPACK_IMPORTED_MODULE_3__.stripScheme; },\n/* harmony export */   titleize: function() { return /* reexport safe */ _chunk_5QXIOV6T_mjs__WEBPACK_IMPORTED_MODULE_2__.titleize; },\n/* harmony export */   toSentence: function() { return /* reexport safe */ _chunk_5QXIOV6T_mjs__WEBPACK_IMPORTED_MODULE_2__.toSentence; },\n/* harmony export */   userAgentIsRobot: function() { return /* reexport safe */ _chunk_XKTTPTOL_mjs__WEBPACK_IMPORTED_MODULE_10__.userAgentIsRobot; }\n/* harmony export */ });\n/* harmony import */ var _chunk_XRHDC7IT_mjs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./chunk-XRHDC7IT.mjs */ \"(app-pages-browser)/./node_modules/@clerk/shared/dist/chunk-XRHDC7IT.mjs\");\n/* harmony import */ var _chunk_GVKVD773_mjs__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./chunk-GVKVD773.mjs */ \"(app-pages-browser)/./node_modules/@clerk/shared/dist/chunk-GVKVD773.mjs\");\n/* harmony import */ var _chunk_5QXIOV6T_mjs__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./chunk-5QXIOV6T.mjs */ \"(app-pages-browser)/./node_modules/@clerk/shared/dist/chunk-5QXIOV6T.mjs\");\n/* harmony import */ var _chunk_5E5NNJ3O_mjs__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./chunk-5E5NNJ3O.mjs */ \"(app-pages-browser)/./node_modules/@clerk/shared/dist/chunk-5E5NNJ3O.mjs\");\n/* harmony import */ var _chunk_5JU2E5TY_mjs__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./chunk-5JU2E5TY.mjs */ \"(app-pages-browser)/./node_modules/@clerk/shared/dist/chunk-5JU2E5TY.mjs\");\n/* harmony import */ var _chunk_TRWMHODU_mjs__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./chunk-TRWMHODU.mjs */ \"(app-pages-browser)/./node_modules/@clerk/shared/dist/chunk-TRWMHODU.mjs\");\n/* harmony import */ var _chunk_IAZRYRAH_mjs__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./chunk-IAZRYRAH.mjs */ \"(app-pages-browser)/./node_modules/@clerk/shared/dist/chunk-IAZRYRAH.mjs\");\n/* harmony import */ var _chunk_TETGTEI2_mjs__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./chunk-TETGTEI2.mjs */ \"(app-pages-browser)/./node_modules/@clerk/shared/dist/chunk-TETGTEI2.mjs\");\n/* harmony import */ var _chunk_JUQXCWMV_mjs__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ./chunk-JUQXCWMV.mjs */ \"(app-pages-browser)/./node_modules/@clerk/shared/dist/chunk-JUQXCWMV.mjs\");\n/* harmony import */ var _chunk_RSOCGYTF_mjs__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ./chunk-RSOCGYTF.mjs */ \"(app-pages-browser)/./node_modules/@clerk/shared/dist/chunk-RSOCGYTF.mjs\");\n/* harmony import */ var _chunk_XKTTPTOL_mjs__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ./chunk-XKTTPTOL.mjs */ \"(app-pages-browser)/./node_modules/@clerk/shared/dist/chunk-XKTTPTOL.mjs\");\n/* harmony import */ var _chunk_4PW5MDZA_mjs__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! ./chunk-4PW5MDZA.mjs */ \"(app-pages-browser)/./node_modules/@clerk/shared/dist/chunk-4PW5MDZA.mjs\");\n/* harmony import */ var _chunk_WUG2DC4W_mjs__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! ./chunk-WUG2DC4W.mjs */ \"(app-pages-browser)/./node_modules/@clerk/shared/dist/chunk-WUG2DC4W.mjs\");\n/* harmony import */ var _chunk_FSKKI4LG_mjs__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(/*! ./chunk-FSKKI4LG.mjs */ \"(app-pages-browser)/./node_modules/@clerk/shared/dist/chunk-FSKKI4LG.mjs\");\n/* harmony import */ var _chunk_3S7ZLCXD_mjs__WEBPACK_IMPORTED_MODULE_14__ = __webpack_require__(/*! ./chunk-3S7ZLCXD.mjs */ \"(app-pages-browser)/./node_modules/@clerk/shared/dist/chunk-3S7ZLCXD.mjs\");\n/* harmony import */ var _chunk_5DRMPUGE_mjs__WEBPACK_IMPORTED_MODULE_15__ = __webpack_require__(/*! ./chunk-5DRMPUGE.mjs */ \"(app-pages-browser)/./node_modules/@clerk/shared/dist/chunk-5DRMPUGE.mjs\");\n/* harmony import */ var _chunk_KJVJ4CFF_mjs__WEBPACK_IMPORTED_MODULE_16__ = __webpack_require__(/*! ./chunk-KJVJ4CFF.mjs */ \"(app-pages-browser)/./node_modules/@clerk/shared/dist/chunk-KJVJ4CFF.mjs\");\n/* harmony import */ var _chunk_NDCDZYN6_mjs__WEBPACK_IMPORTED_MODULE_17__ = __webpack_require__(/*! ./chunk-NDCDZYN6.mjs */ \"(app-pages-browser)/./node_modules/@clerk/shared/dist/chunk-NDCDZYN6.mjs\");\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n// src/utils/createDeferredPromise.ts\nvar createDeferredPromise = ()=>{\n    let resolve = _chunk_XRHDC7IT_mjs__WEBPACK_IMPORTED_MODULE_0__.noop;\n    let reject = _chunk_XRHDC7IT_mjs__WEBPACK_IMPORTED_MODULE_0__.noop;\n    const promise = new Promise((res, rej)=>{\n        resolve = res;\n        reject = rej;\n    });\n    return {\n        promise,\n        resolve,\n        reject\n    };\n};\n// src/utils/runWithExponentialBackOff.ts\nvar defaultOptions = {\n    firstDelay: 125,\n    maxDelay: 0,\n    timeMultiple: 2,\n    shouldRetry: ()=>true\n};\nvar sleep = async (ms)=>new Promise((s)=>setTimeout(s, ms));\nvar createExponentialDelayAsyncFn = (opts)=>{\n    let timesCalled = 0;\n    const calculateDelayInMs = ()=>{\n        const constant = opts.firstDelay;\n        const base = opts.timeMultiple;\n        const delay = constant * Math.pow(base, timesCalled);\n        return Math.min(opts.maxDelay || delay, delay);\n    };\n    return async ()=>{\n        await sleep(calculateDelayInMs());\n        timesCalled++;\n    };\n};\nvar runWithExponentialBackOff = async function(callback) {\n    let options = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : {};\n    let iterationsCount = 0;\n    const { shouldRetry, firstDelay, maxDelay, timeMultiple } = {\n        ...defaultOptions,\n        ...options\n    };\n    const delay = createExponentialDelayAsyncFn({\n        firstDelay,\n        maxDelay,\n        timeMultiple\n    });\n    while(true){\n        try {\n            return await callback();\n        } catch (e) {\n            iterationsCount++;\n            if (!shouldRetry(e, iterationsCount)) {\n                throw e;\n            }\n            await delay();\n        }\n    }\n};\n// src/utils/logErrorInDevMode.ts\nvar logErrorInDevMode = (message)=>{\n    if ((0,_chunk_KJVJ4CFF_mjs__WEBPACK_IMPORTED_MODULE_16__.isDevelopmentEnvironment)()) {\n        console.error(message);\n    }\n};\n //# sourceMappingURL=index.mjs.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/@clerk/shared/dist/index.mjs\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/@clerk/shared/dist/keys.mjs":
/*!**************************************************!*\
  !*** ./node_modules/@clerk/shared/dist/keys.mjs ***!
  \**************************************************/
/***/ (function(__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   buildPublishableKey: function() { return /* reexport safe */ _chunk_IAZRYRAH_mjs__WEBPACK_IMPORTED_MODULE_0__.buildPublishableKey; },\n/* harmony export */   createDevOrStagingUrlCache: function() { return /* reexport safe */ _chunk_IAZRYRAH_mjs__WEBPACK_IMPORTED_MODULE_0__.createDevOrStagingUrlCache; },\n/* harmony export */   isDevelopmentFromApiKey: function() { return /* reexport safe */ _chunk_IAZRYRAH_mjs__WEBPACK_IMPORTED_MODULE_0__.isDevelopmentFromApiKey; },\n/* harmony export */   isLegacyFrontendApiKey: function() { return /* reexport safe */ _chunk_IAZRYRAH_mjs__WEBPACK_IMPORTED_MODULE_0__.isLegacyFrontendApiKey; },\n/* harmony export */   isProductionFromApiKey: function() { return /* reexport safe */ _chunk_IAZRYRAH_mjs__WEBPACK_IMPORTED_MODULE_0__.isProductionFromApiKey; },\n/* harmony export */   isPublishableKey: function() { return /* reexport safe */ _chunk_IAZRYRAH_mjs__WEBPACK_IMPORTED_MODULE_0__.isPublishableKey; },\n/* harmony export */   parsePublishableKey: function() { return /* reexport safe */ _chunk_IAZRYRAH_mjs__WEBPACK_IMPORTED_MODULE_0__.parsePublishableKey; }\n/* harmony export */ });\n/* harmony import */ var _chunk_IAZRYRAH_mjs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./chunk-IAZRYRAH.mjs */ \"(app-pages-browser)/./node_modules/@clerk/shared/dist/chunk-IAZRYRAH.mjs\");\n/* harmony import */ var _chunk_TETGTEI2_mjs__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./chunk-TETGTEI2.mjs */ \"(app-pages-browser)/./node_modules/@clerk/shared/dist/chunk-TETGTEI2.mjs\");\n/* harmony import */ var _chunk_NDCDZYN6_mjs__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./chunk-NDCDZYN6.mjs */ \"(app-pages-browser)/./node_modules/@clerk/shared/dist/chunk-NDCDZYN6.mjs\");\n\n\n\n //# sourceMappingURL=keys.mjs.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL25vZGVfbW9kdWxlcy9AY2xlcmsvc2hhcmVkL2Rpc3Qva2V5cy5tanMiLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7OztBQVE4QjtBQUNBO0FBQ0E7QUFTNUIsQ0FDRixpQ0FBaUMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9fTl9FLy4vbm9kZV9tb2R1bGVzL0BjbGVyay9zaGFyZWQvZGlzdC9rZXlzLm1qcz9kYTdmIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7XG4gIGJ1aWxkUHVibGlzaGFibGVLZXksXG4gIGNyZWF0ZURldk9yU3RhZ2luZ1VybENhY2hlLFxuICBpc0RldmVsb3BtZW50RnJvbUFwaUtleSxcbiAgaXNMZWdhY3lGcm9udGVuZEFwaUtleSxcbiAgaXNQcm9kdWN0aW9uRnJvbUFwaUtleSxcbiAgaXNQdWJsaXNoYWJsZUtleSxcbiAgcGFyc2VQdWJsaXNoYWJsZUtleVxufSBmcm9tIFwiLi9jaHVuay1JQVpSWVJBSC5tanNcIjtcbmltcG9ydCBcIi4vY2h1bmstVEVUR1RFSTIubWpzXCI7XG5pbXBvcnQgXCIuL2NodW5rLU5EQ0RaWU42Lm1qc1wiO1xuZXhwb3J0IHtcbiAgYnVpbGRQdWJsaXNoYWJsZUtleSxcbiAgY3JlYXRlRGV2T3JTdGFnaW5nVXJsQ2FjaGUsXG4gIGlzRGV2ZWxvcG1lbnRGcm9tQXBpS2V5LFxuICBpc0xlZ2FjeUZyb250ZW5kQXBpS2V5LFxuICBpc1Byb2R1Y3Rpb25Gcm9tQXBpS2V5LFxuICBpc1B1Ymxpc2hhYmxlS2V5LFxuICBwYXJzZVB1Ymxpc2hhYmxlS2V5XG59O1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9a2V5cy5tanMubWFwIl0sIm5hbWVzIjpbImJ1aWxkUHVibGlzaGFibGVLZXkiLCJjcmVhdGVEZXZPclN0YWdpbmdVcmxDYWNoZSIsImlzRGV2ZWxvcG1lbnRGcm9tQXBpS2V5IiwiaXNMZWdhY3lGcm9udGVuZEFwaUtleSIsImlzUHJvZHVjdGlvbkZyb21BcGlLZXkiLCJpc1B1Ymxpc2hhYmxlS2V5IiwicGFyc2VQdWJsaXNoYWJsZUtleSJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/@clerk/shared/dist/keys.mjs\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/@clerk/shared/dist/loadScript.mjs":
/*!********************************************************!*\
  !*** ./node_modules/@clerk/shared/dist/loadScript.mjs ***!
  \********************************************************/
/***/ (function(__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   loadScript: function() { return /* reexport safe */ _chunk_JUQXCWMV_mjs__WEBPACK_IMPORTED_MODULE_0__.loadScript; }\n/* harmony export */ });\n/* harmony import */ var _chunk_JUQXCWMV_mjs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./chunk-JUQXCWMV.mjs */ \"(app-pages-browser)/./node_modules/@clerk/shared/dist/chunk-JUQXCWMV.mjs\");\n/* harmony import */ var _chunk_NDCDZYN6_mjs__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./chunk-NDCDZYN6.mjs */ \"(app-pages-browser)/./node_modules/@clerk/shared/dist/chunk-NDCDZYN6.mjs\");\n\n\n //# sourceMappingURL=loadScript.mjs.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL25vZGVfbW9kdWxlcy9AY2xlcmsvc2hhcmVkL2Rpc3QvbG9hZFNjcmlwdC5tanMiLCJtYXBwaW5ncyI6Ijs7Ozs7O0FBRThCO0FBQ0E7QUFHNUIsQ0FDRix1Q0FBdUMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9fTl9FLy4vbm9kZV9tb2R1bGVzL0BjbGVyay9zaGFyZWQvZGlzdC9sb2FkU2NyaXB0Lm1qcz9hMmM5Il0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7XG4gIGxvYWRTY3JpcHRcbn0gZnJvbSBcIi4vY2h1bmstSlVRWENXTVYubWpzXCI7XG5pbXBvcnQgXCIuL2NodW5rLU5EQ0RaWU42Lm1qc1wiO1xuZXhwb3J0IHtcbiAgbG9hZFNjcmlwdFxufTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWxvYWRTY3JpcHQubWpzLm1hcCJdLCJuYW1lcyI6WyJsb2FkU2NyaXB0Il0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/@clerk/shared/dist/loadScript.mjs\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/@clerk/shared/dist/proxy.mjs":
/*!***************************************************!*\
  !*** ./node_modules/@clerk/shared/dist/proxy.mjs ***!
  \***************************************************/
/***/ (function(__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   getRequestUrl: function() { return /* reexport safe */ _chunk_GVKVD773_mjs__WEBPACK_IMPORTED_MODULE_0__.getRequestUrl; },\n/* harmony export */   isHttpOrHttps: function() { return /* reexport safe */ _chunk_GVKVD773_mjs__WEBPACK_IMPORTED_MODULE_0__.isHttpOrHttps; },\n/* harmony export */   isProxyUrlRelative: function() { return /* reexport safe */ _chunk_GVKVD773_mjs__WEBPACK_IMPORTED_MODULE_0__.isProxyUrlRelative; },\n/* harmony export */   isValidProxyUrl: function() { return /* reexport safe */ _chunk_GVKVD773_mjs__WEBPACK_IMPORTED_MODULE_0__.isValidProxyUrl; },\n/* harmony export */   proxyUrlToAbsoluteURL: function() { return /* reexport safe */ _chunk_GVKVD773_mjs__WEBPACK_IMPORTED_MODULE_0__.proxyUrlToAbsoluteURL; }\n/* harmony export */ });\n/* harmony import */ var _chunk_GVKVD773_mjs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./chunk-GVKVD773.mjs */ \"(app-pages-browser)/./node_modules/@clerk/shared/dist/chunk-GVKVD773.mjs\");\n/* harmony import */ var _chunk_KJVJ4CFF_mjs__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./chunk-KJVJ4CFF.mjs */ \"(app-pages-browser)/./node_modules/@clerk/shared/dist/chunk-KJVJ4CFF.mjs\");\n/* harmony import */ var _chunk_NDCDZYN6_mjs__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./chunk-NDCDZYN6.mjs */ \"(app-pages-browser)/./node_modules/@clerk/shared/dist/chunk-NDCDZYN6.mjs\");\n\n\n\n //# sourceMappingURL=proxy.mjs.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL25vZGVfbW9kdWxlcy9AY2xlcmsvc2hhcmVkL2Rpc3QvcHJveHkubWpzIiwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7O0FBTThCO0FBQ0E7QUFDQTtBQU81QixDQUNGLGtDQUFrQyIsInNvdXJjZXMiOlsid2VicGFjazovL19OX0UvLi9ub2RlX21vZHVsZXMvQGNsZXJrL3NoYXJlZC9kaXN0L3Byb3h5Lm1qcz8wYTk3Il0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7XG4gIGdldFJlcXVlc3RVcmwsXG4gIGlzSHR0cE9ySHR0cHMsXG4gIGlzUHJveHlVcmxSZWxhdGl2ZSxcbiAgaXNWYWxpZFByb3h5VXJsLFxuICBwcm94eVVybFRvQWJzb2x1dGVVUkxcbn0gZnJvbSBcIi4vY2h1bmstR1ZLVkQ3NzMubWpzXCI7XG5pbXBvcnQgXCIuL2NodW5rLUtKVko0Q0ZGLm1qc1wiO1xuaW1wb3J0IFwiLi9jaHVuay1ORENEWllONi5tanNcIjtcbmV4cG9ydCB7XG4gIGdldFJlcXVlc3RVcmwsXG4gIGlzSHR0cE9ySHR0cHMsXG4gIGlzUHJveHlVcmxSZWxhdGl2ZSxcbiAgaXNWYWxpZFByb3h5VXJsLFxuICBwcm94eVVybFRvQWJzb2x1dGVVUkxcbn07XG4vLyMgc291cmNlTWFwcGluZ1VSTD1wcm94eS5tanMubWFwIl0sIm5hbWVzIjpbImdldFJlcXVlc3RVcmwiLCJpc0h0dHBPckh0dHBzIiwiaXNQcm94eVVybFJlbGF0aXZlIiwiaXNWYWxpZFByb3h5VXJsIiwicHJveHlVcmxUb0Fic29sdXRlVVJMIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/@clerk/shared/dist/proxy.mjs\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/@clerk/shared/dist/react/index.mjs":
/*!*********************************************************!*\
  !*** ./node_modules/@clerk/shared/dist/react/index.mjs ***!
  \*********************************************************/
/***/ (function(__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   ClerkInstanceContext: function() { return /* binding */ ClerkInstanceContext; },\n/* harmony export */   ClientContext: function() { return /* binding */ ClientContext; },\n/* harmony export */   OrganizationContext: function() { return /* binding */ OrganizationContext; },\n/* harmony export */   OrganizationProvider: function() { return /* binding */ OrganizationProvider; },\n/* harmony export */   SessionContext: function() { return /* binding */ SessionContext; },\n/* harmony export */   UserContext: function() { return /* binding */ UserContext; },\n/* harmony export */   assertContextExists: function() { return /* binding */ assertContextExists; },\n/* harmony export */   createContextAndHook: function() { return /* binding */ createContextAndHook; },\n/* harmony export */   useClerkInstanceContext: function() { return /* binding */ useClerkInstanceContext; },\n/* harmony export */   useClientContext: function() { return /* binding */ useClientContext; },\n/* harmony export */   useOrganization: function() { return /* binding */ useOrganization; },\n/* harmony export */   useOrganizationContext: function() { return /* binding */ useOrganizationContext; },\n/* harmony export */   useOrganizationList: function() { return /* binding */ useOrganizationList; },\n/* harmony export */   useOrganizations: function() { return /* binding */ useOrganizations; },\n/* harmony export */   useSafeLayoutEffect: function() { return /* binding */ useSafeLayoutEffect; },\n/* harmony export */   useSessionContext: function() { return /* binding */ useSessionContext; },\n/* harmony export */   useUserContext: function() { return /* binding */ useUserContext; }\n/* harmony export */ });\n/* harmony import */ var _chunk_KJVJ4CFF_mjs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../chunk-KJVJ4CFF.mjs */ \"(app-pages-browser)/./node_modules/@clerk/shared/dist/chunk-KJVJ4CFF.mjs\");\n/* harmony import */ var _chunk_NDCDZYN6_mjs__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../chunk-NDCDZYN6.mjs */ \"(app-pages-browser)/./node_modules/@clerk/shared/dist/chunk-NDCDZYN6.mjs\");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! react */ \"(app-pages-browser)/./node_modules/next/dist/compiled/react/index.js\");\n/* harmony import */ var swr__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! swr */ \"(app-pages-browser)/./node_modules/swr/core/dist/index.mjs\");\n/* harmony import */ var swr_infinite__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! swr/infinite */ \"(app-pages-browser)/./node_modules/swr/infinite/dist/index.mjs\");\nvar _s = $RefreshSig$(), _s1 = $RefreshSig$(), _s2 = $RefreshSig$(), _s3 = $RefreshSig$(), _s4 = $RefreshSig$();\n\n\n// src/react/hooks/createContextAndHook.ts\n\nfunction assertContextExists(contextVal, msgOrCtx) {\n    if (!contextVal) {\n        throw typeof msgOrCtx === \"string\" ? new Error(msgOrCtx) : new Error(\"\".concat(msgOrCtx.displayName, \" not found\"));\n    }\n}\nvar createContextAndHook = (displayName, options)=>{\n    var _s = $RefreshSig$(), _s1 = $RefreshSig$();\n    const { assertCtxFn = assertContextExists } = options || {};\n    const Ctx = /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_2__.createContext(void 0);\n    Ctx.displayName = displayName;\n    const useCtx = ()=>{\n        _s();\n        const ctx = react__WEBPACK_IMPORTED_MODULE_2__.useContext(Ctx);\n        assertCtxFn(ctx, \"\".concat(displayName, \" not found\"));\n        return ctx.value;\n    };\n    _s(useCtx, \"/dMy7t63NXD4eYACoT93CePwGrg=\");\n    const useCtxWithoutGuarantee = ()=>{\n        _s1();\n        const ctx = react__WEBPACK_IMPORTED_MODULE_2__.useContext(Ctx);\n        return ctx ? ctx.value : {};\n    };\n    _s1(useCtxWithoutGuarantee, \"/dMy7t63NXD4eYACoT93CePwGrg=\");\n    return [\n        Ctx,\n        useCtx,\n        useCtxWithoutGuarantee\n    ];\n};\n// src/react/clerk-swr.ts\nvar clerk_swr_exports = {};\n(0,_chunk_NDCDZYN6_mjs__WEBPACK_IMPORTED_MODULE_1__.__export)(clerk_swr_exports, {\n    SWRConfig: ()=>swr__WEBPACK_IMPORTED_MODULE_3__.SWRConfig,\n    useSWR: ()=>swr__WEBPACK_IMPORTED_MODULE_3__[\"default\"],\n    useSWRInfinite: ()=>swr_infinite__WEBPACK_IMPORTED_MODULE_4__[\"default\"]\n});\n(0,_chunk_NDCDZYN6_mjs__WEBPACK_IMPORTED_MODULE_1__.__reExport)(clerk_swr_exports, swr__WEBPACK_IMPORTED_MODULE_3__);\n\n\n\n// src/react/contexts.tsx\n\nvar [ClerkInstanceContext, useClerkInstanceContext] = createContextAndHook(\"ClerkInstanceContext\");\nvar [UserContext, useUserContext] = createContextAndHook(\"UserContext\");\nvar [ClientContext, useClientContext] = createContextAndHook(\"ClientContext\");\nvar [SessionContext, useSessionContext] = createContextAndHook(\"SessionContext\");\nvar [OrganizationContextInternal, useOrganizationContext] = createContextAndHook(\"OrganizationContext\");\nvar OrganizationProvider = (param)=>{\n    let { children, organization, lastOrganizationMember, lastOrganizationInvitation, swrConfig } = param;\n    return /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_2__.createElement(swr__WEBPACK_IMPORTED_MODULE_3__.SWRConfig, {\n        value: swrConfig\n    }, /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_2__.createElement(OrganizationContextInternal.Provider, {\n        value: {\n            value: {\n                organization,\n                lastOrganizationMember,\n                lastOrganizationInvitation\n            }\n        }\n    }, children));\n};\n_c = OrganizationProvider;\nvar OrganizationContext = function() {\n    for(var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++){\n        args[_key] = arguments[_key];\n    }\n    (0,_chunk_KJVJ4CFF_mjs__WEBPACK_IMPORTED_MODULE_0__.deprecated)(\"OrganizationContext\", \"Use `OrganizationProvider` instead\");\n    return OrganizationProvider(...args);\n};\n_c1 = OrganizationContext;\n// src/react/hooks/usePagesOrInfinite.ts\n\nfunction getDifferentKeys(obj1, obj2) {\n    const keysSet = new Set(Object.keys(obj2));\n    const differentKeysObject = {};\n    for (const key1 of Object.keys(obj1)){\n        if (!keysSet.has(key1)) {\n            differentKeysObject[key1] = obj1[key1];\n        }\n    }\n    return differentKeysObject;\n}\nvar useWithSafeValues = (params, defaultValues)=>{\n    _s();\n    const shouldUseDefaults = typeof params === \"boolean\" && params;\n    var _params_initialPage;\n    const initialPageRef = (0,react__WEBPACK_IMPORTED_MODULE_2__.useRef)(shouldUseDefaults ? defaultValues.initialPage : (_params_initialPage = params === null || params === void 0 ? void 0 : params.initialPage) !== null && _params_initialPage !== void 0 ? _params_initialPage : defaultValues.initialPage);\n    var _params_pageSize;\n    const pageSizeRef = (0,react__WEBPACK_IMPORTED_MODULE_2__.useRef)(shouldUseDefaults ? defaultValues.pageSize : (_params_pageSize = params === null || params === void 0 ? void 0 : params.pageSize) !== null && _params_pageSize !== void 0 ? _params_pageSize : defaultValues.pageSize);\n    const newObj = {};\n    for (const key of Object.keys(defaultValues)){\n        var _params_key;\n        newObj[key] = shouldUseDefaults ? defaultValues[key] : (_params_key = params === null || params === void 0 ? void 0 : params[key]) !== null && _params_key !== void 0 ? _params_key : defaultValues[key];\n    }\n    return {\n        ...newObj,\n        initialPage: initialPageRef.current,\n        pageSize: pageSizeRef.current\n    };\n};\n_s(useWithSafeValues, \"iZJ0qfLQbfhUhjr9T/h6cOGkgIE=\");\nvar usePagesOrInfinite = (params, fetcher, options, cacheKeys)=>{\n    _s1();\n    var _params_initialPage;\n    const [paginatedPage, setPaginatedPage] = (0,react__WEBPACK_IMPORTED_MODULE_2__.useState)((_params_initialPage = params.initialPage) !== null && _params_initialPage !== void 0 ? _params_initialPage : 1);\n    var _params_initialPage1;\n    const initialPageRef = (0,react__WEBPACK_IMPORTED_MODULE_2__.useRef)((_params_initialPage1 = params.initialPage) !== null && _params_initialPage1 !== void 0 ? _params_initialPage1 : 1);\n    var _params_pageSize;\n    const pageSizeRef = (0,react__WEBPACK_IMPORTED_MODULE_2__.useRef)((_params_pageSize = params.pageSize) !== null && _params_pageSize !== void 0 ? _params_pageSize : 10);\n    var _options_enabled;\n    const enabled = (_options_enabled = options.enabled) !== null && _options_enabled !== void 0 ? _options_enabled : true;\n    var _options_infinite;\n    const triggerInfinite = (_options_infinite = options.infinite) !== null && _options_infinite !== void 0 ? _options_infinite : false;\n    var _options_keepPreviousData;\n    const keepPreviousData = (_options_keepPreviousData = options.keepPreviousData) !== null && _options_keepPreviousData !== void 0 ? _options_keepPreviousData : false;\n    const pagesCacheKey = {\n        ...cacheKeys,\n        ...params,\n        initialPage: paginatedPage,\n        pageSize: pageSizeRef.current\n    };\n    const { data: swrData, isValidating: swrIsValidating, isLoading: swrIsLoading, error: swrError, mutate: swrMutate } = (0,swr__WEBPACK_IMPORTED_MODULE_3__[\"default\"])(!triggerInfinite && !!fetcher && enabled ? pagesCacheKey : null, (cacheKeyParams)=>{\n        const requestParams = getDifferentKeys(cacheKeyParams, cacheKeys);\n        return fetcher === null || fetcher === void 0 ? void 0 : fetcher(requestParams);\n    }, {\n        keepPreviousData\n    });\n    const { data: swrInfiniteData, isLoading: swrInfiniteIsLoading, isValidating: swrInfiniteIsValidating, error: swrInfiniteError, size, setSize, mutate: swrInfiniteMutate } = (0,swr_infinite__WEBPACK_IMPORTED_MODULE_4__[\"default\"])((pageIndex)=>{\n        if (!triggerInfinite || !enabled) {\n            return null;\n        }\n        return {\n            ...params,\n            ...cacheKeys,\n            initialPage: initialPageRef.current + pageIndex,\n            pageSize: pageSizeRef.current\n        };\n    }, (cacheKeyParams)=>{\n        const requestParams = getDifferentKeys(cacheKeyParams, cacheKeys);\n        return fetcher === null || fetcher === void 0 ? void 0 : fetcher(requestParams);\n    });\n    const page = (0,react__WEBPACK_IMPORTED_MODULE_2__.useMemo)(()=>{\n        if (triggerInfinite) {\n            return size;\n        }\n        return paginatedPage;\n    }, [\n        triggerInfinite,\n        size,\n        paginatedPage\n    ]);\n    const fetchPage = (0,react__WEBPACK_IMPORTED_MODULE_2__.useCallback)((numberOrgFn)=>{\n        if (triggerInfinite) {\n            void setSize(numberOrgFn);\n            return;\n        }\n        return setPaginatedPage(numberOrgFn);\n    }, [\n        setSize\n    ]);\n    const data = (0,react__WEBPACK_IMPORTED_MODULE_2__.useMemo)(()=>{\n        if (triggerInfinite) {\n            var _swrInfiniteData_map_flat;\n            return (_swrInfiniteData_map_flat = swrInfiniteData === null || swrInfiniteData === void 0 ? void 0 : swrInfiniteData.map((a)=>a === null || a === void 0 ? void 0 : a.data).flat()) !== null && _swrInfiniteData_map_flat !== void 0 ? _swrInfiniteData_map_flat : [];\n        }\n        var _swrData_data;\n        return (_swrData_data = swrData === null || swrData === void 0 ? void 0 : swrData.data) !== null && _swrData_data !== void 0 ? _swrData_data : [];\n    }, [\n        triggerInfinite,\n        swrData,\n        swrInfiniteData\n    ]);\n    const count = (0,react__WEBPACK_IMPORTED_MODULE_2__.useMemo)(()=>{\n        if (triggerInfinite) {\n            var _swrInfiniteData_;\n            return (swrInfiniteData === null || swrInfiniteData === void 0 ? void 0 : (_swrInfiniteData_ = swrInfiniteData[(swrInfiniteData === null || swrInfiniteData === void 0 ? void 0 : swrInfiniteData.length) - 1]) === null || _swrInfiniteData_ === void 0 ? void 0 : _swrInfiniteData_.total_count) || 0;\n        }\n        var _swrData_total_count;\n        return (_swrData_total_count = swrData === null || swrData === void 0 ? void 0 : swrData.total_count) !== null && _swrData_total_count !== void 0 ? _swrData_total_count : 0;\n    }, [\n        triggerInfinite,\n        swrData,\n        swrInfiniteData\n    ]);\n    const isLoading = triggerInfinite ? swrInfiniteIsLoading : swrIsLoading;\n    const isFetching = triggerInfinite ? swrInfiniteIsValidating : swrIsValidating;\n    const isError = !!(triggerInfinite ? swrInfiniteError : swrError);\n    const fetchNext = (0,react__WEBPACK_IMPORTED_MODULE_2__.useCallback)(()=>{\n        fetchPage((n)=>Math.max(0, n + 1));\n    }, [\n        fetchPage\n    ]);\n    const fetchPrevious = (0,react__WEBPACK_IMPORTED_MODULE_2__.useCallback)(()=>{\n        fetchPage((n)=>Math.max(0, n - 1));\n    }, [\n        fetchPage\n    ]);\n    const offsetCount = (initialPageRef.current - 1) * pageSizeRef.current;\n    const pageCount = Math.ceil((count - offsetCount) / pageSizeRef.current);\n    const hasNextPage = count - offsetCount * pageSizeRef.current > page * pageSizeRef.current;\n    const hasPreviousPage = (page - 1) * pageSizeRef.current > offsetCount * pageSizeRef.current;\n    const setData = triggerInfinite ? (value)=>swrInfiniteMutate(value, {\n            revalidate: false\n        }) : (value)=>swrMutate(value, {\n            revalidate: false\n        });\n    const revalidate = triggerInfinite ? ()=>swrInfiniteMutate() : ()=>swrMutate();\n    return {\n        data,\n        count,\n        isLoading,\n        isFetching,\n        isError,\n        page,\n        pageCount,\n        fetchPage,\n        fetchNext,\n        fetchPrevious,\n        hasNextPage,\n        hasPreviousPage,\n        // Let the hook return type define this type\n        revalidate,\n        // Let the hook return type define this type\n        setData\n    };\n};\n_s1(usePagesOrInfinite, \"QWI/gyDL9NS5edqwP5sQaICeqmI=\");\n// src/react/hooks/useOrganization.tsx\nvar undefinedPaginatedResource = {\n    data: void 0,\n    count: void 0,\n    isLoading: false,\n    isFetching: false,\n    isError: false,\n    page: void 0,\n    pageCount: void 0,\n    fetchPage: void 0,\n    fetchNext: void 0,\n    fetchPrevious: void 0,\n    hasNextPage: false,\n    hasPreviousPage: false,\n    revalidate: void 0,\n    setData: void 0\n};\nvar useOrganization = (params)=>{\n    _s2();\n    const { invitationList: invitationListParams, membershipList: membershipListParams, domains: domainListParams, membershipRequests: membershipRequestsListParams, memberships: membersListParams, invitations: invitationsListParams } = params || {};\n    const { organization, lastOrganizationMember, lastOrganizationInvitation } = useOrganizationContext();\n    const session = useSessionContext();\n    const domainSafeValues = useWithSafeValues(domainListParams, {\n        initialPage: 1,\n        pageSize: 10,\n        keepPreviousData: false,\n        infinite: false,\n        enrollmentMode: void 0\n    });\n    const membershipRequestSafeValues = useWithSafeValues(membershipRequestsListParams, {\n        initialPage: 1,\n        pageSize: 10,\n        status: \"pending\",\n        keepPreviousData: false,\n        infinite: false\n    });\n    const membersSafeValues = useWithSafeValues(membersListParams, {\n        initialPage: 1,\n        pageSize: 10,\n        role: void 0,\n        keepPreviousData: false,\n        infinite: false\n    });\n    const invitationsSafeValues = useWithSafeValues(invitationsListParams, {\n        initialPage: 1,\n        pageSize: 10,\n        status: [\n            \"pending\"\n        ],\n        keepPreviousData: false,\n        infinite: false\n    });\n    const clerk = useClerkInstanceContext();\n    const shouldFetch = !!(clerk.loaded && session && organization);\n    const domainParams = typeof domainListParams === \"undefined\" ? void 0 : {\n        initialPage: domainSafeValues.initialPage,\n        pageSize: domainSafeValues.pageSize,\n        enrollmentMode: domainSafeValues.enrollmentMode\n    };\n    const membershipRequestParams = typeof membershipRequestsListParams === \"undefined\" ? void 0 : {\n        initialPage: membershipRequestSafeValues.initialPage,\n        pageSize: membershipRequestSafeValues.pageSize,\n        status: membershipRequestSafeValues.status\n    };\n    const membersParams = typeof membersListParams === \"undefined\" ? void 0 : {\n        initialPage: membersSafeValues.initialPage,\n        pageSize: membersSafeValues.pageSize,\n        role: membersSafeValues.role\n    };\n    const invitationsParams = typeof invitationsListParams === \"undefined\" ? void 0 : {\n        initialPage: invitationsSafeValues.initialPage,\n        pageSize: invitationsSafeValues.pageSize,\n        status: invitationsSafeValues.status\n    };\n    const domains = usePagesOrInfinite({\n        ...domainParams\n    }, organization === null || organization === void 0 ? void 0 : organization.getDomains, {\n        keepPreviousData: domainSafeValues.keepPreviousData,\n        infinite: domainSafeValues.infinite,\n        enabled: !!domainParams\n    }, {\n        type: \"domains\",\n        organizationId: organization === null || organization === void 0 ? void 0 : organization.id\n    });\n    const membershipRequests = usePagesOrInfinite({\n        ...membershipRequestParams\n    }, organization === null || organization === void 0 ? void 0 : organization.getMembershipRequests, {\n        keepPreviousData: membershipRequestSafeValues.keepPreviousData,\n        infinite: membershipRequestSafeValues.infinite,\n        enabled: !!membershipRequestParams\n    }, {\n        type: \"membershipRequests\",\n        organizationId: organization === null || organization === void 0 ? void 0 : organization.id\n    });\n    const memberships = usePagesOrInfinite({\n        ...membersParams,\n        paginated: true\n    }, organization === null || organization === void 0 ? void 0 : organization.getMemberships, {\n        keepPreviousData: membersSafeValues.keepPreviousData,\n        infinite: membersSafeValues.infinite,\n        enabled: !!membersParams\n    }, {\n        type: \"members\",\n        organizationId: organization === null || organization === void 0 ? void 0 : organization.id\n    });\n    const invitations = usePagesOrInfinite({\n        ...invitationsParams\n    }, organization === null || organization === void 0 ? void 0 : organization.getInvitations, {\n        keepPreviousData: invitationsSafeValues.keepPreviousData,\n        infinite: invitationsSafeValues.infinite,\n        enabled: !!invitationsParams\n    }, {\n        type: \"invitations\",\n        organizationId: organization === null || organization === void 0 ? void 0 : organization.id\n    });\n    const pendingInvitations = !clerk.loaded ? ()=>[] : ()=>{\n        var _clerk_organization;\n        return (_clerk_organization = clerk.organization) === null || _clerk_organization === void 0 ? void 0 : _clerk_organization.getPendingInvitations(invitationListParams);\n    };\n    const currentOrganizationMemberships = !clerk.loaded ? ()=>[] : ()=>{\n        var _clerk_organization;\n        return (_clerk_organization = clerk.organization) === null || _clerk_organization === void 0 ? void 0 : _clerk_organization.getMemberships(membershipListParams);\n    };\n    if (invitationListParams) {\n        (0,_chunk_KJVJ4CFF_mjs__WEBPACK_IMPORTED_MODULE_0__.deprecated)(\"invitationList in useOrganization\", \"Use the `invitations` property and return value instead.\");\n    }\n    const { data: invitationList, isValidating: isInvitationsLoading, mutate: mutateInvitationList } = (0,swr__WEBPACK_IMPORTED_MODULE_3__[\"default\"])(shouldFetch && invitationListParams ? cacheKey(\"invites\", organization, lastOrganizationInvitation, invitationListParams) : null, pendingInvitations);\n    if (membershipListParams) {\n        (0,_chunk_KJVJ4CFF_mjs__WEBPACK_IMPORTED_MODULE_0__.deprecated)(\"membershipList in useOrganization\", \"Use the `memberships` property and return value instead.\");\n    }\n    const { data: membershipList, isValidating: isMembershipsLoading, mutate: mutateMembershipList } = (0,swr__WEBPACK_IMPORTED_MODULE_3__[\"default\"])(shouldFetch && membershipListParams ? cacheKey(\"memberships\", organization, lastOrganizationMember, membershipListParams) : null, currentOrganizationMemberships);\n    if (organization === void 0) {\n        return {\n            isLoaded: false,\n            organization: void 0,\n            invitationList: void 0,\n            membershipList: void 0,\n            membership: void 0,\n            domains: undefinedPaginatedResource,\n            membershipRequests: undefinedPaginatedResource,\n            memberships: undefinedPaginatedResource,\n            invitations: undefinedPaginatedResource\n        };\n    }\n    if (organization === null) {\n        return {\n            isLoaded: true,\n            organization: null,\n            invitationList: null,\n            membershipList: null,\n            membership: null,\n            domains: null,\n            membershipRequests: null,\n            memberships: null,\n            invitations: null\n        };\n    }\n    if (!clerk.loaded && organization) {\n        return {\n            isLoaded: true,\n            organization,\n            invitationList: void 0,\n            membershipList: void 0,\n            membership: void 0,\n            domains: undefinedPaginatedResource,\n            membershipRequests: undefinedPaginatedResource,\n            memberships: undefinedPaginatedResource,\n            invitations: undefinedPaginatedResource\n        };\n    }\n    return {\n        isLoaded: !isMembershipsLoading && !isInvitationsLoading,\n        organization,\n        membershipList,\n        membership: getCurrentOrganizationMembership(session.user.organizationMemberships, organization.id),\n        // your membership in the current org\n        invitationList,\n        unstable__mutate: ()=>{\n            void mutateMembershipList();\n            void mutateInvitationList();\n        },\n        domains,\n        membershipRequests,\n        memberships,\n        invitations\n    };\n};\n_s2(useOrganization, \"4s1qlQH/vO9eAZpo0oyg8l5LYO8=\", false, function() {\n    return [\n        useOrganizationContext,\n        useSessionContext,\n        useWithSafeValues,\n        useWithSafeValues,\n        useWithSafeValues,\n        useWithSafeValues,\n        useClerkInstanceContext,\n        usePagesOrInfinite,\n        usePagesOrInfinite,\n        usePagesOrInfinite,\n        usePagesOrInfinite\n    ];\n});\nfunction getCurrentOrganizationMembership(organizationMemberships, activeOrganizationId) {\n    return organizationMemberships.find((organizationMembership)=>organizationMembership.organization.id === activeOrganizationId);\n}\nfunction cacheKey(type, organization, resource, pagination) {\n    return [\n        type,\n        organization.id,\n        resource === null || resource === void 0 ? void 0 : resource.id,\n        resource === null || resource === void 0 ? void 0 : resource.updatedAt,\n        pagination.offset,\n        pagination.limit\n    ].filter(Boolean).join(\"-\");\n}\n// src/react/hooks/useOrganizationList.tsx\nvar undefinedPaginatedResource2 = {\n    data: void 0,\n    count: void 0,\n    isLoading: false,\n    isFetching: false,\n    isError: false,\n    page: void 0,\n    pageCount: void 0,\n    fetchPage: void 0,\n    fetchNext: void 0,\n    fetchPrevious: void 0,\n    hasNextPage: false,\n    hasPreviousPage: false,\n    revalidate: void 0,\n    setData: void 0\n};\nvar useOrganizationList = (params)=>{\n    _s3();\n    const { userMemberships, userInvitations, userSuggestions } = params || {};\n    const userMembershipsSafeValues = useWithSafeValues(userMemberships, {\n        initialPage: 1,\n        pageSize: 10,\n        keepPreviousData: false,\n        infinite: false\n    });\n    const userInvitationsSafeValues = useWithSafeValues(userInvitations, {\n        initialPage: 1,\n        pageSize: 10,\n        status: \"pending\",\n        keepPreviousData: false,\n        infinite: false\n    });\n    const userSuggestionsSafeValues = useWithSafeValues(userSuggestions, {\n        initialPage: 1,\n        pageSize: 10,\n        status: \"pending\",\n        keepPreviousData: false,\n        infinite: false\n    });\n    const clerk = useClerkInstanceContext();\n    const user = useUserContext();\n    const userMembershipsParams = typeof userMemberships === \"undefined\" ? void 0 : {\n        initialPage: userMembershipsSafeValues.initialPage,\n        pageSize: userMembershipsSafeValues.pageSize\n    };\n    const userInvitationsParams = typeof userInvitations === \"undefined\" ? void 0 : {\n        initialPage: userInvitationsSafeValues.initialPage,\n        pageSize: userInvitationsSafeValues.pageSize,\n        status: userInvitationsSafeValues.status\n    };\n    const userSuggestionsParams = typeof userSuggestions === \"undefined\" ? void 0 : {\n        initialPage: userSuggestionsSafeValues.initialPage,\n        pageSize: userSuggestionsSafeValues.pageSize,\n        status: userSuggestionsSafeValues.status\n    };\n    const isClerkLoaded = !!(clerk.loaded && user);\n    const memberships = usePagesOrInfinite({\n        ...userMembershipsParams,\n        paginated: true\n    }, user === null || user === void 0 ? void 0 : user.getOrganizationMemberships, {\n        keepPreviousData: userMembershipsSafeValues.keepPreviousData,\n        infinite: userMembershipsSafeValues.infinite,\n        enabled: !!userMembershipsParams\n    }, {\n        type: \"userMemberships\",\n        userId: user === null || user === void 0 ? void 0 : user.id\n    });\n    const invitations = usePagesOrInfinite({\n        ...userInvitationsParams\n    }, user === null || user === void 0 ? void 0 : user.getOrganizationInvitations, {\n        keepPreviousData: userInvitationsSafeValues.keepPreviousData,\n        infinite: userInvitationsSafeValues.infinite,\n        enabled: !!userInvitationsParams\n    }, {\n        type: \"userInvitations\",\n        userId: user === null || user === void 0 ? void 0 : user.id\n    });\n    const suggestions = usePagesOrInfinite({\n        ...userSuggestionsParams\n    }, user === null || user === void 0 ? void 0 : user.getOrganizationSuggestions, {\n        keepPreviousData: userSuggestionsSafeValues.keepPreviousData,\n        infinite: userSuggestionsSafeValues.infinite,\n        enabled: !!userSuggestionsParams\n    }, {\n        type: \"userSuggestions\",\n        userId: user === null || user === void 0 ? void 0 : user.id\n    });\n    if (!isClerkLoaded) {\n        return {\n            isLoaded: false,\n            organizationList: void 0,\n            createOrganization: void 0,\n            setActive: void 0,\n            userMemberships: undefinedPaginatedResource2,\n            userInvitations: undefinedPaginatedResource2,\n            userSuggestions: undefinedPaginatedResource2\n        };\n    }\n    const result = {\n        isLoaded: isClerkLoaded,\n        organizationList: createOrganizationList(user.organizationMemberships),\n        setActive: clerk.setActive,\n        createOrganization: clerk.createOrganization,\n        userMemberships: memberships,\n        userInvitations: invitations,\n        userSuggestions: suggestions\n    };\n    (0,_chunk_KJVJ4CFF_mjs__WEBPACK_IMPORTED_MODULE_0__.deprecatedObjectProperty)(result, \"organizationList\", \"Use `userMemberships` instead.\");\n    return result;\n};\n_s3(useOrganizationList, \"aguhsy72Q2fMIAw1jxx2f3CM8T4=\", false, function() {\n    return [\n        useWithSafeValues,\n        useWithSafeValues,\n        useWithSafeValues,\n        useClerkInstanceContext,\n        useUserContext,\n        usePagesOrInfinite,\n        usePagesOrInfinite,\n        usePagesOrInfinite\n    ];\n});\nfunction createOrganizationList(organizationMemberships) {\n    return organizationMemberships.map((organizationMembership)=>({\n            membership: organizationMembership,\n            organization: organizationMembership.organization\n        }));\n}\n// src/react/hooks/useOrganizations.tsx\nvar useOrganizations = ()=>{\n    _s4();\n    (0,_chunk_KJVJ4CFF_mjs__WEBPACK_IMPORTED_MODULE_0__.deprecated)(\"useOrganizations\", \"Use useOrganizationList, useOrganization, or useClerk instead.\");\n    const clerk = useClerkInstanceContext();\n    if (!clerk.loaded) {\n        return {\n            isLoaded: false,\n            createOrganization: void 0,\n            getOrganizationMemberships: void 0,\n            getOrganization: void 0\n        };\n    }\n    return {\n        isLoaded: true,\n        createOrganization: clerk.createOrganization,\n        getOrganizationMemberships: clerk.getOrganizationMemberships,\n        getOrganization: clerk.getOrganization\n    };\n};\n_s4(useOrganizations, \"P8I4SbsWtIh6a8gV5jzkWcUN6ls=\", false, function() {\n    return [\n        useClerkInstanceContext\n    ];\n});\n// src/react/hooks/useSafeLayoutEffect.tsx\n\nvar useSafeLayoutEffect =  true ? react__WEBPACK_IMPORTED_MODULE_2__.useLayoutEffect : 0;\n //# sourceMappingURL=index.mjs.map\nvar _c, _c1;\n$RefreshReg$(_c, \"OrganizationProvider\");\n$RefreshReg$(_c1, \"OrganizationContext\");\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/@clerk/shared/dist/react/index.mjs\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/@clerk/shared/dist/url.mjs":
/*!*************************************************!*\
  !*** ./node_modules/@clerk/shared/dist/url.mjs ***!
  \*************************************************/
/***/ (function(__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   addClerkPrefix: function() { return /* reexport safe */ _chunk_5E5NNJ3O_mjs__WEBPACK_IMPORTED_MODULE_0__.addClerkPrefix; },\n/* harmony export */   getClerkJsMajorVersionOrTag: function() { return /* reexport safe */ _chunk_5E5NNJ3O_mjs__WEBPACK_IMPORTED_MODULE_0__.getClerkJsMajorVersionOrTag; },\n/* harmony export */   getScriptUrl: function() { return /* reexport safe */ _chunk_5E5NNJ3O_mjs__WEBPACK_IMPORTED_MODULE_0__.getScriptUrl; },\n/* harmony export */   parseSearchParams: function() { return /* reexport safe */ _chunk_5E5NNJ3O_mjs__WEBPACK_IMPORTED_MODULE_0__.parseSearchParams; },\n/* harmony export */   stripScheme: function() { return /* reexport safe */ _chunk_5E5NNJ3O_mjs__WEBPACK_IMPORTED_MODULE_0__.stripScheme; }\n/* harmony export */ });\n/* harmony import */ var _chunk_5E5NNJ3O_mjs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./chunk-5E5NNJ3O.mjs */ \"(app-pages-browser)/./node_modules/@clerk/shared/dist/chunk-5E5NNJ3O.mjs\");\n/* harmony import */ var _chunk_NDCDZYN6_mjs__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./chunk-NDCDZYN6.mjs */ \"(app-pages-browser)/./node_modules/@clerk/shared/dist/chunk-NDCDZYN6.mjs\");\n\n\n //# sourceMappingURL=url.mjs.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL25vZGVfbW9kdWxlcy9AY2xlcmsvc2hhcmVkL2Rpc3QvdXJsLm1qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7O0FBTThCO0FBQ0E7QUFPNUIsQ0FDRixnQ0FBZ0MiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9fTl9FLy4vbm9kZV9tb2R1bGVzL0BjbGVyay9zaGFyZWQvZGlzdC91cmwubWpzPzM3YmEiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHtcbiAgYWRkQ2xlcmtQcmVmaXgsXG4gIGdldENsZXJrSnNNYWpvclZlcnNpb25PclRhZyxcbiAgZ2V0U2NyaXB0VXJsLFxuICBwYXJzZVNlYXJjaFBhcmFtcyxcbiAgc3RyaXBTY2hlbWVcbn0gZnJvbSBcIi4vY2h1bmstNUU1Tk5KM08ubWpzXCI7XG5pbXBvcnQgXCIuL2NodW5rLU5EQ0RaWU42Lm1qc1wiO1xuZXhwb3J0IHtcbiAgYWRkQ2xlcmtQcmVmaXgsXG4gIGdldENsZXJrSnNNYWpvclZlcnNpb25PclRhZyxcbiAgZ2V0U2NyaXB0VXJsLFxuICBwYXJzZVNlYXJjaFBhcmFtcyxcbiAgc3RyaXBTY2hlbWVcbn07XG4vLyMgc291cmNlTWFwcGluZ1VSTD11cmwubWpzLm1hcCJdLCJuYW1lcyI6WyJhZGRDbGVya1ByZWZpeCIsImdldENsZXJrSnNNYWpvclZlcnNpb25PclRhZyIsImdldFNjcmlwdFVybCIsInBhcnNlU2VhcmNoUGFyYW1zIiwic3RyaXBTY2hlbWUiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/@clerk/shared/dist/url.mjs\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/swr/_internal/dist/index.mjs":
/*!***************************************************!*\
  !*** ./node_modules/swr/_internal/dist/index.mjs ***!
  \***************************************************/
/***/ (function(__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   IS_REACT_LEGACY: function() { return /* binding */ IS_REACT_LEGACY; },\n/* harmony export */   IS_SERVER: function() { return /* binding */ IS_SERVER; },\n/* harmony export */   OBJECT: function() { return /* binding */ OBJECT; },\n/* harmony export */   SWRConfig: function() { return /* binding */ SWRConfig; },\n/* harmony export */   SWRGlobalState: function() { return /* binding */ SWRGlobalState; },\n/* harmony export */   UNDEFINED: function() { return /* binding */ UNDEFINED; },\n/* harmony export */   cache: function() { return /* binding */ cache; },\n/* harmony export */   compare: function() { return /* binding */ compare; },\n/* harmony export */   createCacheHelper: function() { return /* binding */ createCacheHelper; },\n/* harmony export */   defaultConfig: function() { return /* binding */ defaultConfig; },\n/* harmony export */   defaultConfigOptions: function() { return /* binding */ defaultConfigOptions; },\n/* harmony export */   getTimestamp: function() { return /* binding */ getTimestamp; },\n/* harmony export */   hasRequestAnimationFrame: function() { return /* binding */ hasRequestAnimationFrame; },\n/* harmony export */   initCache: function() { return /* binding */ initCache; },\n/* harmony export */   internalMutate: function() { return /* binding */ internalMutate; },\n/* harmony export */   isDocumentDefined: function() { return /* binding */ isDocumentDefined; },\n/* harmony export */   isFunction: function() { return /* binding */ isFunction; },\n/* harmony export */   isPromiseLike: function() { return /* binding */ isPromiseLike; },\n/* harmony export */   isUndefined: function() { return /* binding */ isUndefined; },\n/* harmony export */   isWindowDefined: function() { return /* binding */ isWindowDefined; },\n/* harmony export */   mergeConfigs: function() { return /* binding */ mergeConfigs; },\n/* harmony export */   mergeObjects: function() { return /* binding */ mergeObjects; },\n/* harmony export */   mutate: function() { return /* binding */ mutate; },\n/* harmony export */   noop: function() { return /* binding */ noop; },\n/* harmony export */   normalize: function() { return /* binding */ normalize; },\n/* harmony export */   preload: function() { return /* binding */ preload; },\n/* harmony export */   preset: function() { return /* binding */ preset; },\n/* harmony export */   rAF: function() { return /* binding */ rAF; },\n/* harmony export */   revalidateEvents: function() { return /* binding */ constants; },\n/* harmony export */   serialize: function() { return /* binding */ serialize; },\n/* harmony export */   slowConnection: function() { return /* binding */ slowConnection; },\n/* harmony export */   stableHash: function() { return /* binding */ stableHash; },\n/* harmony export */   subscribeCallback: function() { return /* binding */ subscribeCallback; },\n/* harmony export */   useIsomorphicLayoutEffect: function() { return /* binding */ useIsomorphicLayoutEffect; },\n/* harmony export */   useSWRConfig: function() { return /* binding */ useSWRConfig; },\n/* harmony export */   useStateWithDeps: function() { return /* binding */ useStateWithDeps; },\n/* harmony export */   withArgs: function() { return /* binding */ withArgs; },\n/* harmony export */   withMiddleware: function() { return /* binding */ withMiddleware; }\n/* harmony export */ });\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react */ \"(app-pages-browser)/./node_modules/next/dist/compiled/react/index.js\");\nvar _s = $RefreshSig$(), _s1 = $RefreshSig$(), _s2 = $RefreshSig$(), _s3 = $RefreshSig$();\n\n// Shared state between server components and client components\nconst noop = ()=>{};\n// Using noop() as the undefined value as undefined can be replaced\n// by something else. Prettier ignore and extra parentheses are necessary here\n// to ensure that tsc doesn't remove the __NOINLINE__ comment.\n// prettier-ignore\nconst UNDEFINED = /*#__NOINLINE__*/ noop();\nconst OBJECT = Object;\nconst isUndefined = (v)=>v === UNDEFINED;\nconst isFunction = (v)=>typeof v == \"function\";\nconst mergeObjects = (a, b)=>({\n        ...a,\n        ...b\n    });\nconst isPromiseLike = (x)=>isFunction(x.then);\n// use WeakMap to store the object->key mapping\n// so the objects can be garbage collected.\n// WeakMap uses a hashtable under the hood, so the lookup\n// complexity is almost O(1).\nconst table = new WeakMap();\n// counter of the key\nlet counter = 0;\n// A stable hash implementation that supports:\n// - Fast and ensures unique hash properties\n// - Handles unserializable values\n// - Handles object key ordering\n// - Generates short results\n//\n// This is not a serialization function, and the result is not guaranteed to be\n// parsable.\nconst stableHash = (arg)=>{\n    const type = typeof arg;\n    const constructor = arg && arg.constructor;\n    const isDate = constructor == Date;\n    let result;\n    let index;\n    if (OBJECT(arg) === arg && !isDate && constructor != RegExp) {\n        // Object/function, not null/date/regexp. Use WeakMap to store the id first.\n        // If it's already hashed, directly return the result.\n        result = table.get(arg);\n        if (result) return result;\n        // Store the hash first for circular reference detection before entering the\n        // recursive `stableHash` calls.\n        // For other objects like set and map, we use this id directly as the hash.\n        result = ++counter + \"~\";\n        table.set(arg, result);\n        if (constructor == Array) {\n            // Array.\n            result = \"@\";\n            for(index = 0; index < arg.length; index++){\n                result += stableHash(arg[index]) + \",\";\n            }\n            table.set(arg, result);\n        }\n        if (constructor == OBJECT) {\n            // Object, sort keys.\n            result = \"#\";\n            const keys = OBJECT.keys(arg).sort();\n            while(!isUndefined(index = keys.pop())){\n                if (!isUndefined(arg[index])) {\n                    result += index + \":\" + stableHash(arg[index]) + \",\";\n                }\n            }\n            table.set(arg, result);\n        }\n    } else {\n        result = isDate ? arg.toJSON() : type == \"symbol\" ? arg.toString() : type == \"string\" ? JSON.stringify(arg) : \"\" + arg;\n    }\n    return result;\n};\n// Global state used to deduplicate requests and store listeners\nconst SWRGlobalState = new WeakMap();\nconst EMPTY_CACHE = {};\nconst INITIAL_CACHE = {};\nconst STR_UNDEFINED = \"undefined\";\n// NOTE: Use the function to guarantee it's re-evaluated between jsdom and node runtime for tests.\nconst isWindowDefined = \"object\" != STR_UNDEFINED;\nconst isDocumentDefined = typeof document != STR_UNDEFINED;\nconst hasRequestAnimationFrame = ()=>isWindowDefined && typeof window[\"requestAnimationFrame\"] != STR_UNDEFINED;\nconst createCacheHelper = (cache, key)=>{\n    const state = SWRGlobalState.get(cache);\n    return [\n        // Getter\n        ()=>!isUndefined(key) && cache.get(key) || EMPTY_CACHE,\n        // Setter\n        (info)=>{\n            if (!isUndefined(key)) {\n                const prev = cache.get(key);\n                // Before writing to the store, we keep the value in the initial cache\n                // if it's not there yet.\n                if (!(key in INITIAL_CACHE)) {\n                    INITIAL_CACHE[key] = prev;\n                }\n                state[5](key, mergeObjects(prev, info), prev || EMPTY_CACHE);\n            }\n        },\n        // Subscriber\n        state[6],\n        // Get server cache snapshot\n        ()=>{\n            if (!isUndefined(key)) {\n                // If the cache was updated on the client, we return the stored initial value.\n                if (key in INITIAL_CACHE) return INITIAL_CACHE[key];\n            }\n            // If we haven't done any client-side updates, we return the current value.\n            return !isUndefined(key) && cache.get(key) || EMPTY_CACHE;\n        }\n    ];\n} // export { UNDEFINED, OBJECT, isUndefined, isFunction, mergeObjects, isPromiseLike }\n;\n/**\n * Due to the bug https://bugs.chromium.org/p/chromium/issues/detail?id=678075,\n * it's not reliable to detect if the browser is currently online or offline\n * based on `navigator.onLine`.\n * As a workaround, we always assume it's online on the first load, and change\n * the status upon `online` or `offline` events.\n */ let online = true;\nconst isOnline = ()=>online;\n// For node and React Native, `add/removeEventListener` doesn't exist on window.\nconst [onWindowEvent, offWindowEvent] = isWindowDefined && window.addEventListener ? [\n    window.addEventListener.bind(window),\n    window.removeEventListener.bind(window)\n] : [\n    noop,\n    noop\n];\nconst isVisible = ()=>{\n    const visibilityState = isDocumentDefined && document.visibilityState;\n    return isUndefined(visibilityState) || visibilityState !== \"hidden\";\n};\nconst initFocus = (callback)=>{\n    // focus revalidate\n    if (isDocumentDefined) {\n        document.addEventListener(\"visibilitychange\", callback);\n    }\n    onWindowEvent(\"focus\", callback);\n    return ()=>{\n        if (isDocumentDefined) {\n            document.removeEventListener(\"visibilitychange\", callback);\n        }\n        offWindowEvent(\"focus\", callback);\n    };\n};\nconst initReconnect = (callback)=>{\n    // revalidate on reconnected\n    const onOnline = ()=>{\n        online = true;\n        callback();\n    };\n    // nothing to revalidate, just update the status\n    const onOffline = ()=>{\n        online = false;\n    };\n    onWindowEvent(\"online\", onOnline);\n    onWindowEvent(\"offline\", onOffline);\n    return ()=>{\n        offWindowEvent(\"online\", onOnline);\n        offWindowEvent(\"offline\", onOffline);\n    };\n};\nconst preset = {\n    isOnline,\n    isVisible\n};\nconst defaultConfigOptions = {\n    initFocus,\n    initReconnect\n};\nconst IS_REACT_LEGACY = !react__WEBPACK_IMPORTED_MODULE_0__.useId;\nconst IS_SERVER = !isWindowDefined || \"Deno\" in window;\n// Polyfill requestAnimationFrame\nconst rAF = (f)=>hasRequestAnimationFrame() ? window[\"requestAnimationFrame\"](f) : setTimeout(f, 1);\n// React currently throws a warning when using useLayoutEffect on the server.\n// To get around it, we can conditionally useEffect on the server (no-op) and\n// useLayoutEffect in the browser.\nconst useIsomorphicLayoutEffect = IS_SERVER ? react__WEBPACK_IMPORTED_MODULE_0__.useEffect : react__WEBPACK_IMPORTED_MODULE_0__.useLayoutEffect;\n// This assignment is to extend the Navigator type to use effectiveType.\nconst navigatorConnection = typeof navigator !== \"undefined\" && navigator.connection;\n// Adjust the config based on slow connection status (<= 70Kbps).\nconst slowConnection = !IS_SERVER && navigatorConnection && ([\n    \"slow-2g\",\n    \"2g\"\n].includes(navigatorConnection.effectiveType) || navigatorConnection.saveData);\nconst serialize = (key)=>{\n    if (isFunction(key)) {\n        try {\n            key = key();\n        } catch (err) {\n            // dependencies not ready\n            key = \"\";\n        }\n    }\n    // Use the original key as the argument of fetcher. This can be a string or an\n    // array of values.\n    const args = key;\n    // If key is not falsy, or not an empty array, hash it.\n    key = typeof key == \"string\" ? key : (Array.isArray(key) ? key.length : key) ? stableHash(key) : \"\";\n    return [\n        key,\n        args\n    ];\n};\n// Global timestamp.\nlet __timestamp = 0;\nconst getTimestamp = ()=>++__timestamp;\nconst FOCUS_EVENT = 0;\nconst RECONNECT_EVENT = 1;\nconst MUTATE_EVENT = 2;\nconst ERROR_REVALIDATE_EVENT = 3;\nvar constants = {\n    __proto__: null,\n    ERROR_REVALIDATE_EVENT: ERROR_REVALIDATE_EVENT,\n    FOCUS_EVENT: FOCUS_EVENT,\n    MUTATE_EVENT: MUTATE_EVENT,\n    RECONNECT_EVENT: RECONNECT_EVENT\n};\nasync function internalMutate() {\n    for(var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++){\n        args[_key] = arguments[_key];\n    }\n    const [cache, _key1, _data, _opts] = args;\n    // When passing as a boolean, it's explicitly used to disable/enable\n    // revalidation.\n    const options = mergeObjects({\n        populateCache: true,\n        throwOnError: true\n    }, typeof _opts === \"boolean\" ? {\n        revalidate: _opts\n    } : _opts || {});\n    let populateCache = options.populateCache;\n    const rollbackOnErrorOption = options.rollbackOnError;\n    let optimisticData = options.optimisticData;\n    const revalidate = options.revalidate !== false;\n    const rollbackOnError = (error)=>{\n        return typeof rollbackOnErrorOption === \"function\" ? rollbackOnErrorOption(error) : rollbackOnErrorOption !== false;\n    };\n    const throwOnError = options.throwOnError;\n    // If the second argument is a key filter, return the mutation results for all\n    // filtered keys.\n    if (isFunction(_key1)) {\n        const keyFilter = _key1;\n        const matchedKeys = [];\n        const it = cache.keys();\n        for (const key of it){\n            if (!/^\\$(inf|sub)\\$/.test(key) && keyFilter(cache.get(key)._k)) {\n                matchedKeys.push(key);\n            }\n        }\n        return Promise.all(matchedKeys.map(mutateByKey));\n    }\n    return mutateByKey(_key1);\n    async function mutateByKey(_k) {\n        // Serialize key\n        const [key] = serialize(_k);\n        if (!key) return;\n        const [get, set] = createCacheHelper(cache, key);\n        const [EVENT_REVALIDATORS, MUTATION, FETCH, PRELOAD] = SWRGlobalState.get(cache);\n        const revalidators = EVENT_REVALIDATORS[key];\n        const startRevalidate = ()=>{\n            if (revalidate) {\n                // Invalidate the key by deleting the concurrent request markers so new\n                // requests will not be deduped.\n                delete FETCH[key];\n                delete PRELOAD[key];\n                if (revalidators && revalidators[0]) {\n                    return revalidators[0](MUTATE_EVENT).then(()=>get().data);\n                }\n            }\n            return get().data;\n        };\n        // If there is no new data provided, revalidate the key with current state.\n        if (args.length < 3) {\n            // Revalidate and broadcast state.\n            return startRevalidate();\n        }\n        let data = _data;\n        let error;\n        // Update global timestamps.\n        const beforeMutationTs = getTimestamp();\n        MUTATION[key] = [\n            beforeMutationTs,\n            0\n        ];\n        const hasOptimisticData = !isUndefined(optimisticData);\n        const state = get();\n        // `displayedData` is the current value on screen. It could be the optimistic value\n        // that is going to be overridden by a `committedData`, or get reverted back.\n        // `committedData` is the validated value that comes from a fetch or mutation.\n        const displayedData = state.data;\n        const currentData = state._c;\n        const committedData = isUndefined(currentData) ? displayedData : currentData;\n        // Do optimistic data update.\n        if (hasOptimisticData) {\n            optimisticData = isFunction(optimisticData) ? optimisticData(committedData, displayedData) : optimisticData;\n            // When we set optimistic data, backup the current committedData data in `_c`.\n            set({\n                data: optimisticData,\n                _c: committedData\n            });\n        }\n        if (isFunction(data)) {\n            // `data` is a function, call it passing current cache value.\n            try {\n                data = data(committedData);\n            } catch (err) {\n                // If it throws an error synchronously, we shouldn't update the cache.\n                error = err;\n            }\n        }\n        // `data` is a promise/thenable, resolve the final data first.\n        if (data && isPromiseLike(data)) {\n            // This means that the mutation is async, we need to check timestamps to\n            // avoid race conditions.\n            data = await data.catch((err)=>{\n                error = err;\n            });\n            // Check if other mutations have occurred since we've started this mutation.\n            // If there's a race we don't update cache or broadcast the change,\n            // just return the data.\n            if (beforeMutationTs !== MUTATION[key][0]) {\n                if (error) throw error;\n                return data;\n            } else if (error && hasOptimisticData && rollbackOnError(error)) {\n                // Rollback. Always populate the cache in this case but without\n                // transforming the data.\n                populateCache = true;\n                data = committedData;\n                // Reset data to be the latest committed data, and clear the `_c` value.\n                set({\n                    data,\n                    _c: UNDEFINED\n                });\n            }\n        }\n        // If we should write back the cache after request.\n        if (populateCache) {\n            if (!error) {\n                // Transform the result into data.\n                if (isFunction(populateCache)) {\n                    data = populateCache(data, committedData);\n                }\n                // Only update cached data and reset the error if there's no error. Data can be `undefined` here.\n                set({\n                    data,\n                    error: UNDEFINED,\n                    _c: UNDEFINED\n                });\n            }\n        }\n        // Reset the timestamp to mark the mutation has ended.\n        MUTATION[key][1] = getTimestamp();\n        // Update existing SWR Hooks' internal states:\n        const res = await startRevalidate();\n        // The mutation and revalidation are ended, we can clear it since the data is\n        // not an optimistic value anymore.\n        set({\n            _c: UNDEFINED\n        });\n        // Throw error or return data\n        if (error) {\n            if (throwOnError) throw error;\n            return;\n        }\n        return populateCache ? res : data;\n    }\n}\nconst revalidateAllKeys = (revalidators, type)=>{\n    for(const key in revalidators){\n        if (revalidators[key][0]) revalidators[key][0](type);\n    }\n};\nconst initCache = (provider, options)=>{\n    // The global state for a specific provider will be used to deduplicate\n    // requests and store listeners. As well as a mutate function that is bound to\n    // the cache.\n    // The provider's global state might be already initialized. Let's try to get the\n    // global state associated with the provider first.\n    if (!SWRGlobalState.has(provider)) {\n        const opts = mergeObjects(defaultConfigOptions, options);\n        // If there's no global state bound to the provider, create a new one with the\n        // new mutate function.\n        const EVENT_REVALIDATORS = {};\n        const mutate = internalMutate.bind(UNDEFINED, provider);\n        let unmount = noop;\n        const subscriptions = {};\n        const subscribe = (key, callback)=>{\n            const subs = subscriptions[key] || [];\n            subscriptions[key] = subs;\n            subs.push(callback);\n            return ()=>subs.splice(subs.indexOf(callback), 1);\n        };\n        const setter = (key, value, prev)=>{\n            provider.set(key, value);\n            const subs = subscriptions[key];\n            if (subs) {\n                for (const fn of subs){\n                    fn(value, prev);\n                }\n            }\n        };\n        const initProvider = ()=>{\n            if (!SWRGlobalState.has(provider)) {\n                // Update the state if it's new, or if the provider has been extended.\n                SWRGlobalState.set(provider, [\n                    EVENT_REVALIDATORS,\n                    {},\n                    {},\n                    {},\n                    mutate,\n                    setter,\n                    subscribe\n                ]);\n                if (!IS_SERVER) {\n                    // When listening to the native events for auto revalidations,\n                    // we intentionally put a delay (setTimeout) here to make sure they are\n                    // fired after immediate JavaScript executions, which can be\n                    // React's state updates.\n                    // This avoids some unnecessary revalidations such as\n                    // https://github.com/vercel/swr/issues/1680.\n                    const releaseFocus = opts.initFocus(setTimeout.bind(UNDEFINED, revalidateAllKeys.bind(UNDEFINED, EVENT_REVALIDATORS, FOCUS_EVENT)));\n                    const releaseReconnect = opts.initReconnect(setTimeout.bind(UNDEFINED, revalidateAllKeys.bind(UNDEFINED, EVENT_REVALIDATORS, RECONNECT_EVENT)));\n                    unmount = ()=>{\n                        releaseFocus && releaseFocus();\n                        releaseReconnect && releaseReconnect();\n                        // When un-mounting, we need to remove the cache provider from the state\n                        // storage too because it's a side-effect. Otherwise, when re-mounting we\n                        // will not re-register those event listeners.\n                        SWRGlobalState.delete(provider);\n                    };\n                }\n            }\n        };\n        initProvider();\n        // This is a new provider, we need to initialize it and setup DOM events\n        // listeners for `focus` and `reconnect` actions.\n        // We might want to inject an extra layer on top of `provider` in the future,\n        // such as key serialization, auto GC, etc.\n        // For now, it's just a `Map` interface without any modifications.\n        return [\n            provider,\n            mutate,\n            initProvider,\n            unmount\n        ];\n    }\n    return [\n        provider,\n        SWRGlobalState.get(provider)[4]\n    ];\n};\n// error retry\nconst onErrorRetry = (_, __, config, revalidate, opts)=>{\n    const maxRetryCount = config.errorRetryCount;\n    const currentRetryCount = opts.retryCount;\n    // Exponential backoff\n    const timeout = ~~((Math.random() + 0.5) * (1 << (currentRetryCount < 8 ? currentRetryCount : 8))) * config.errorRetryInterval;\n    if (!isUndefined(maxRetryCount) && currentRetryCount > maxRetryCount) {\n        return;\n    }\n    setTimeout(revalidate, timeout, opts);\n};\nconst compare = (currentData, newData)=>stableHash(currentData) == stableHash(newData);\n// Default cache provider\nconst [cache, mutate] = initCache(new Map());\n// Default config\nconst defaultConfig = mergeObjects({\n    // events\n    onLoadingSlow: noop,\n    onSuccess: noop,\n    onError: noop,\n    onErrorRetry,\n    onDiscarded: noop,\n    // switches\n    revalidateOnFocus: true,\n    revalidateOnReconnect: true,\n    revalidateIfStale: true,\n    shouldRetryOnError: true,\n    // timeouts\n    errorRetryInterval: slowConnection ? 10000 : 5000,\n    focusThrottleInterval: 5 * 1000,\n    dedupingInterval: 2 * 1000,\n    loadingTimeout: slowConnection ? 5000 : 3000,\n    // providers\n    compare,\n    isPaused: ()=>false,\n    cache,\n    mutate,\n    fallback: {}\n}, preset);\nconst mergeConfigs = (a, b)=>{\n    // Need to create a new object to avoid mutating the original here.\n    const v = mergeObjects(a, b);\n    // If two configs are provided, merge their `use` and `fallback` options.\n    if (b) {\n        const { use: u1, fallback: f1 } = a;\n        const { use: u2, fallback: f2 } = b;\n        if (u1 && u2) {\n            v.use = u1.concat(u2);\n        }\n        if (f1 && f2) {\n            v.fallback = mergeObjects(f1, f2);\n        }\n    }\n    return v;\n};\nconst SWRConfigContext = /*#__PURE__*/ (0,react__WEBPACK_IMPORTED_MODULE_0__.createContext)({});\nconst SWRConfig = (props)=>{\n    _s();\n    const { value } = props;\n    const parentConfig = (0,react__WEBPACK_IMPORTED_MODULE_0__.useContext)(SWRConfigContext);\n    const isFunctionalConfig = isFunction(value);\n    const config = (0,react__WEBPACK_IMPORTED_MODULE_0__.useMemo)(()=>isFunctionalConfig ? value(parentConfig) : value, [\n        isFunctionalConfig,\n        parentConfig,\n        value\n    ]);\n    // Extend parent context values and middleware.\n    const extendedConfig = (0,react__WEBPACK_IMPORTED_MODULE_0__.useMemo)(()=>isFunctionalConfig ? config : mergeConfigs(parentConfig, config), [\n        isFunctionalConfig,\n        parentConfig,\n        config\n    ]);\n    // Should not use the inherited provider.\n    const provider = config && config.provider;\n    // initialize the cache only on first access.\n    const cacheContextRef = (0,react__WEBPACK_IMPORTED_MODULE_0__.useRef)(UNDEFINED);\n    if (provider && !cacheContextRef.current) {\n        cacheContextRef.current = initCache(provider(extendedConfig.cache || cache), config);\n    }\n    const cacheContext = cacheContextRef.current;\n    // Override the cache if a new provider is given.\n    if (cacheContext) {\n        extendedConfig.cache = cacheContext[0];\n        extendedConfig.mutate = cacheContext[1];\n    }\n    // Unsubscribe events.\n    useIsomorphicLayoutEffect(()=>{\n        if (cacheContext) {\n            cacheContext[2] && cacheContext[2]();\n            return cacheContext[3];\n        }\n    }, []);\n    return /*#__PURE__*/ (0,react__WEBPACK_IMPORTED_MODULE_0__.createElement)(SWRConfigContext.Provider, mergeObjects(props, {\n        value: extendedConfig\n    }));\n};\n_s(SWRConfig, \"A6qnBUlOKXkyZ5NVwzVYJI6vl14=\", false, function() {\n    return [\n        useIsomorphicLayoutEffect\n    ];\n});\n_c = SWRConfig;\n// @ts-expect-error\nconst enableDevtools = isWindowDefined && window.__SWR_DEVTOOLS_USE__;\nconst use = enableDevtools ? window.__SWR_DEVTOOLS_USE__ : [];\nconst setupDevTools = ()=>{\n    if (enableDevtools) {\n        // @ts-expect-error\n        window.__SWR_DEVTOOLS_REACT__ = react__WEBPACK_IMPORTED_MODULE_0__;\n    }\n};\nconst normalize = (args)=>{\n    return isFunction(args[1]) ? [\n        args[0],\n        args[1],\n        args[2] || {}\n    ] : [\n        args[0],\n        null,\n        (args[1] === null ? args[2] : args[1]) || {}\n    ];\n};\nconst useSWRConfig = ()=>{\n    _s1();\n    return mergeObjects(defaultConfig, (0,react__WEBPACK_IMPORTED_MODULE_0__.useContext)(SWRConfigContext));\n};\n_s1(useSWRConfig, \"gDsCjeeItUuvgOWf1v4qoK9RF6k=\");\nconst preload = (key_, fetcher)=>{\n    const [key, fnArg] = serialize(key_);\n    const [, , , PRELOAD] = SWRGlobalState.get(cache);\n    // Prevent preload to be called multiple times before used.\n    if (PRELOAD[key]) return PRELOAD[key];\n    const req = fetcher(fnArg);\n    PRELOAD[key] = req;\n    return req;\n};\nconst middleware = (useSWRNext)=>_s2((key_, fetcher_, config)=>{\n        _s2();\n        // fetcher might be a sync function, so this should not be an async function\n        const fetcher = fetcher_ && function() {\n            for(var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++){\n                args[_key] = arguments[_key];\n            }\n            const [key] = serialize(key_);\n            const [, , , PRELOAD] = SWRGlobalState.get(cache);\n            const req = PRELOAD[key];\n            if (isUndefined(req)) return fetcher_(...args);\n            delete PRELOAD[key];\n            return req;\n        };\n        return useSWRNext(key_, fetcher, config);\n    }, \"RTkVZBECrG9zJXEJbThq7tlksiE=\", true);\nconst BUILT_IN_MIDDLEWARE = use.concat(middleware);\n// It's tricky to pass generic types as parameters, so we just directly override\n// the types here.\nconst withArgs = (hook)=>{\n    var _s = $RefreshSig$();\n    return _s(function useSWRArgs() {\n        for(var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++){\n            args[_key] = arguments[_key];\n        }\n        _s();\n        // Get the default and inherited configuration.\n        const fallbackConfig = useSWRConfig();\n        // Normalize arguments.\n        const [key, fn, _config] = normalize(args);\n        // Merge configurations.\n        const config = mergeConfigs(fallbackConfig, _config);\n        // Apply middleware\n        let next = hook;\n        const { use } = config;\n        const middleware = (use || []).concat(BUILT_IN_MIDDLEWARE);\n        for(let i = middleware.length; i--;){\n            next = middleware[i](next);\n        }\n        return next(key, fn || config.fetcher || null, config);\n    }, \"jx7Wrj3OuZGSBtq4uhrHFUJGkMw=\", false, function() {\n        return [\n            useSWRConfig\n        ];\n    });\n};\n/**\n * An implementation of state with dependency-tracking.\n */ const useStateWithDeps = (state)=>{\n    _s3();\n    const rerender = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)({})[1];\n    const unmountedRef = (0,react__WEBPACK_IMPORTED_MODULE_0__.useRef)(false);\n    const stateRef = (0,react__WEBPACK_IMPORTED_MODULE_0__.useRef)(state);\n    // If a state property (data, error, or isValidating) is accessed by the render\n    // function, we mark the property as a dependency so if it is updated again\n    // in the future, we trigger a rerender.\n    // This is also known as dependency-tracking.\n    const stateDependenciesRef = (0,react__WEBPACK_IMPORTED_MODULE_0__.useRef)({\n        data: false,\n        error: false,\n        isValidating: false\n    });\n    /**\n   * @param payload To change stateRef, pass the values explicitly to setState:\n   * @example\n   * ```js\n   * setState({\n   *   isValidating: false\n   *   data: newData // set data to newData\n   *   error: undefined // set error to undefined\n   * })\n   *\n   * setState({\n   *   isValidating: false\n   *   data: undefined // set data to undefined\n   *   error: err // set error to err\n   * })\n   * ```\n   */ const setState = (0,react__WEBPACK_IMPORTED_MODULE_0__.useCallback)((payload)=>{\n        let shouldRerender = false;\n        const currentState = stateRef.current;\n        for(const _ in payload){\n            const k = _;\n            // If the property has changed, update the state and mark rerender as\n            // needed.\n            if (currentState[k] !== payload[k]) {\n                currentState[k] = payload[k];\n                // If the property is accessed by the component, a rerender should be\n                // triggered.\n                if (stateDependenciesRef.current[k]) {\n                    shouldRerender = true;\n                }\n            }\n        }\n        if (shouldRerender && !unmountedRef.current) {\n            if (IS_REACT_LEGACY) {\n                rerender({});\n            } else {\n                react__WEBPACK_IMPORTED_MODULE_0__.startTransition(()=>rerender({}));\n            }\n        }\n    }, [\n        rerender\n    ]);\n    useIsomorphicLayoutEffect(()=>{\n        unmountedRef.current = false;\n        return ()=>{\n            unmountedRef.current = true;\n        };\n    });\n    return [\n        stateRef,\n        stateDependenciesRef.current,\n        setState\n    ];\n};\n_s3(useStateWithDeps, \"YnkpOf+gdjfvDH9HuFkeHs2x5BI=\", false, function() {\n    return [\n        useIsomorphicLayoutEffect\n    ];\n});\n// Add a callback function to a list of keyed callback functions and return\n// the unsubscribe function.\nconst subscribeCallback = (key, callbacks, callback)=>{\n    const keyedRevalidators = callbacks[key] || (callbacks[key] = []);\n    keyedRevalidators.push(callback);\n    return ()=>{\n        const index = keyedRevalidators.indexOf(callback);\n        if (index >= 0) {\n            // O(1): faster than splice\n            keyedRevalidators[index] = keyedRevalidators[keyedRevalidators.length - 1];\n            keyedRevalidators.pop();\n        }\n    };\n};\n// Create a custom hook with a middleware\nconst withMiddleware = (useSWR, middleware)=>{\n    var _s = $RefreshSig$();\n    return _s(function() {\n        for(var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++){\n            args[_key] = arguments[_key];\n        }\n        _s();\n        const [key, fn, config] = normalize(args);\n        const uses = (config.use || []).concat(middleware);\n        return useSWR(key, fn, {\n            ...config,\n            use: uses\n        });\n    }, \"7xERTuQa/rCStZtEZdi0LgBAmUk=\", false, function() {\n        return [\n            useSWR\n        ];\n    });\n};\nsetupDevTools();\n\nvar _c;\n$RefreshReg$(_c, \"SWRConfig\");\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL25vZGVfbW9kdWxlcy9zd3IvX2ludGVybmFsL2Rpc3QvaW5kZXgubWpzIiwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7QUFBNEk7QUFFNUksK0RBQStEO0FBQy9ELE1BQU1VLE9BQU8sS0FBSztBQUNsQixtRUFBbUU7QUFDbkUsOEVBQThFO0FBQzlFLDhEQUE4RDtBQUM5RCxrQkFBa0I7QUFDbEIsTUFBTUMsWUFBWSxlQUFlLEdBQUdEO0FBQ3BDLE1BQU1FLFNBQVNDO0FBQ2YsTUFBTUMsY0FBYyxDQUFDQyxJQUFJQSxNQUFNSjtBQUMvQixNQUFNSyxhQUFhLENBQUNELElBQUksT0FBT0EsS0FBSztBQUNwQyxNQUFNRSxlQUFlLENBQUNDLEdBQUdDLElBQUs7UUFDdEIsR0FBR0QsQ0FBQztRQUNKLEdBQUdDLENBQUM7SUFDUjtBQUNKLE1BQU1DLGdCQUFnQixDQUFDQyxJQUFJTCxXQUFXSyxFQUFFQyxJQUFJO0FBRTVDLCtDQUErQztBQUMvQywyQ0FBMkM7QUFDM0MseURBQXlEO0FBQ3pELDZCQUE2QjtBQUM3QixNQUFNQyxRQUFRLElBQUlDO0FBQ2xCLHFCQUFxQjtBQUNyQixJQUFJQyxVQUFVO0FBQ2QsOENBQThDO0FBQzlDLDRDQUE0QztBQUM1QyxrQ0FBa0M7QUFDbEMsZ0NBQWdDO0FBQ2hDLDRCQUE0QjtBQUM1QixFQUFFO0FBQ0YsK0VBQStFO0FBQy9FLFlBQVk7QUFDWixNQUFNQyxhQUFhLENBQUNDO0lBQ2hCLE1BQU1DLE9BQU8sT0FBT0Q7SUFDcEIsTUFBTUUsY0FBY0YsT0FBT0EsSUFBSUUsV0FBVztJQUMxQyxNQUFNQyxTQUFTRCxlQUFlRTtJQUM5QixJQUFJQztJQUNKLElBQUlDO0lBQ0osSUFBSXJCLE9BQU9lLFNBQVNBLE9BQU8sQ0FBQ0csVUFBVUQsZUFBZUssUUFBUTtRQUN6RCw0RUFBNEU7UUFDNUUsc0RBQXNEO1FBQ3RERixTQUFTVCxNQUFNWSxHQUFHLENBQUNSO1FBQ25CLElBQUlLLFFBQVEsT0FBT0E7UUFDbkIsNEVBQTRFO1FBQzVFLGdDQUFnQztRQUNoQywyRUFBMkU7UUFDM0VBLFNBQVMsRUFBRVAsVUFBVTtRQUNyQkYsTUFBTWEsR0FBRyxDQUFDVCxLQUFLSztRQUNmLElBQUlILGVBQWVRLE9BQU87WUFDdEIsU0FBUztZQUNUTCxTQUFTO1lBQ1QsSUFBSUMsUUFBUSxHQUFHQSxRQUFRTixJQUFJVyxNQUFNLEVBQUVMLFFBQVE7Z0JBQ3ZDRCxVQUFVTixXQUFXQyxHQUFHLENBQUNNLE1BQU0sSUFBSTtZQUN2QztZQUNBVixNQUFNYSxHQUFHLENBQUNULEtBQUtLO1FBQ25CO1FBQ0EsSUFBSUgsZUFBZWpCLFFBQVE7WUFDdkIscUJBQXFCO1lBQ3JCb0IsU0FBUztZQUNULE1BQU1PLE9BQU8zQixPQUFPMkIsSUFBSSxDQUFDWixLQUFLYSxJQUFJO1lBQ2xDLE1BQU0sQ0FBQzFCLFlBQVltQixRQUFRTSxLQUFLRSxHQUFHLElBQUk7Z0JBQ25DLElBQUksQ0FBQzNCLFlBQVlhLEdBQUcsQ0FBQ00sTUFBTSxHQUFHO29CQUMxQkQsVUFBVUMsUUFBUSxNQUFNUCxXQUFXQyxHQUFHLENBQUNNLE1BQU0sSUFBSTtnQkFDckQ7WUFDSjtZQUNBVixNQUFNYSxHQUFHLENBQUNULEtBQUtLO1FBQ25CO0lBQ0osT0FBTztRQUNIQSxTQUFTRixTQUFTSCxJQUFJZSxNQUFNLEtBQUtkLFFBQVEsV0FBV0QsSUFBSWdCLFFBQVEsS0FBS2YsUUFBUSxXQUFXZ0IsS0FBS0MsU0FBUyxDQUFDbEIsT0FBTyxLQUFLQTtJQUN2SDtJQUNBLE9BQU9LO0FBQ1g7QUFFQSxnRUFBZ0U7QUFDaEUsTUFBTWMsaUJBQWlCLElBQUl0QjtBQUUzQixNQUFNdUIsY0FBYyxDQUFDO0FBQ3JCLE1BQU1DLGdCQUFnQixDQUFDO0FBQ3ZCLE1BQU1DLGdCQUFnQjtBQUN0QixrR0FBa0c7QUFDbEcsTUFBTUMsa0JBQWtCLFlBQWlCRDtBQUN6QyxNQUFNRSxvQkFBb0IsT0FBT0MsWUFBWUg7QUFDN0MsTUFBTUksMkJBQTJCLElBQUlILG1CQUFtQixPQUFPSSxNQUFNLENBQUMsd0JBQXdCLElBQUlMO0FBQ2xHLE1BQU1NLG9CQUFvQixDQUFDQyxPQUFPQztJQUM5QixNQUFNQyxRQUFRWixlQUFlWCxHQUFHLENBQUNxQjtJQUNqQyxPQUFPO1FBQ0gsU0FBUztRQUNULElBQUksQ0FBQzFDLFlBQVkyQyxRQUFRRCxNQUFNckIsR0FBRyxDQUFDc0IsUUFBUVY7UUFDM0MsU0FBUztRQUNULENBQUNZO1lBQ0csSUFBSSxDQUFDN0MsWUFBWTJDLE1BQU07Z0JBQ25CLE1BQU1HLE9BQU9KLE1BQU1yQixHQUFHLENBQUNzQjtnQkFDdkIsc0VBQXNFO2dCQUN0RSx5QkFBeUI7Z0JBQ3pCLElBQUksQ0FBRUEsQ0FBQUEsT0FBT1QsYUFBWSxHQUFJO29CQUN6QkEsYUFBYSxDQUFDUyxJQUFJLEdBQUdHO2dCQUN6QjtnQkFDQUYsS0FBSyxDQUFDLEVBQUUsQ0FBQ0QsS0FBS3hDLGFBQWEyQyxNQUFNRCxPQUFPQyxRQUFRYjtZQUNwRDtRQUNKO1FBQ0EsYUFBYTtRQUNiVyxLQUFLLENBQUMsRUFBRTtRQUNSLDRCQUE0QjtRQUM1QjtZQUNJLElBQUksQ0FBQzVDLFlBQVkyQyxNQUFNO2dCQUNuQiw4RUFBOEU7Z0JBQzlFLElBQUlBLE9BQU9ULGVBQWUsT0FBT0EsYUFBYSxDQUFDUyxJQUFJO1lBQ3ZEO1lBQ0EsMkVBQTJFO1lBQzNFLE9BQU8sQ0FBQzNDLFlBQVkyQyxRQUFRRCxNQUFNckIsR0FBRyxDQUFDc0IsUUFBUVY7UUFDbEQ7S0FDSDtBQUNMLEVBQUUscUZBQXFGOztBQUd2Rjs7Ozs7O0NBTUMsR0FBRyxJQUFJYyxTQUFTO0FBQ2pCLE1BQU1DLFdBQVcsSUFBSUQ7QUFDckIsZ0ZBQWdGO0FBQ2hGLE1BQU0sQ0FBQ0UsZUFBZUMsZUFBZSxHQUFHZCxtQkFBbUJJLE9BQU9XLGdCQUFnQixHQUFHO0lBQ2pGWCxPQUFPVyxnQkFBZ0IsQ0FBQ0MsSUFBSSxDQUFDWjtJQUM3QkEsT0FBT2EsbUJBQW1CLENBQUNELElBQUksQ0FBQ1o7Q0FDbkMsR0FBRztJQUNBNUM7SUFDQUE7Q0FDSDtBQUNELE1BQU0wRCxZQUFZO0lBQ2QsTUFBTUMsa0JBQWtCbEIscUJBQXFCQyxTQUFTaUIsZUFBZTtJQUNyRSxPQUFPdkQsWUFBWXVELG9CQUFvQkEsb0JBQW9CO0FBQy9EO0FBQ0EsTUFBTUMsWUFBWSxDQUFDQztJQUNmLG1CQUFtQjtJQUNuQixJQUFJcEIsbUJBQW1CO1FBQ25CQyxTQUFTYSxnQkFBZ0IsQ0FBQyxvQkFBb0JNO0lBQ2xEO0lBQ0FSLGNBQWMsU0FBU1E7SUFDdkIsT0FBTztRQUNILElBQUlwQixtQkFBbUI7WUFDbkJDLFNBQVNlLG1CQUFtQixDQUFDLG9CQUFvQkk7UUFDckQ7UUFDQVAsZUFBZSxTQUFTTztJQUM1QjtBQUNKO0FBQ0EsTUFBTUMsZ0JBQWdCLENBQUNEO0lBQ25CLDRCQUE0QjtJQUM1QixNQUFNRSxXQUFXO1FBQ2JaLFNBQVM7UUFDVFU7SUFDSjtJQUNBLGdEQUFnRDtJQUNoRCxNQUFNRyxZQUFZO1FBQ2RiLFNBQVM7SUFDYjtJQUNBRSxjQUFjLFVBQVVVO0lBQ3hCVixjQUFjLFdBQVdXO0lBQ3pCLE9BQU87UUFDSFYsZUFBZSxVQUFVUztRQUN6QlQsZUFBZSxXQUFXVTtJQUM5QjtBQUNKO0FBQ0EsTUFBTUMsU0FBUztJQUNYYjtJQUNBTTtBQUNKO0FBQ0EsTUFBTVEsdUJBQXVCO0lBQ3pCTjtJQUNBRTtBQUNKO0FBRUEsTUFBTUssa0JBQWtCLENBQUM3RSx3Q0FBVztBQUNwQyxNQUFNK0UsWUFBWSxDQUFDN0IsbUJBQW1CLFVBQVVJO0FBQ2hELGlDQUFpQztBQUNqQyxNQUFNMEIsTUFBTSxDQUFDQyxJQUFJNUIsNkJBQTZCQyxNQUFNLENBQUMsd0JBQXdCLENBQUMyQixLQUFLQyxXQUFXRCxHQUFHO0FBQ2pHLDZFQUE2RTtBQUM3RSw2RUFBNkU7QUFDN0Usa0NBQWtDO0FBQ2xDLE1BQU1FLDRCQUE0QkosWUFBWTlFLDRDQUFTQSxHQUFHQyxrREFBZUE7QUFDekUsd0VBQXdFO0FBQ3hFLE1BQU1rRixzQkFBc0IsT0FBT0MsY0FBYyxlQUFlQSxVQUFVQyxVQUFVO0FBQ3BGLGlFQUFpRTtBQUNqRSxNQUFNQyxpQkFBaUIsQ0FBQ1IsYUFBYUssdUJBQXdCO0lBQ3pEO0lBQ0E7Q0FDSCxDQUFDSSxRQUFRLENBQUNKLG9CQUFvQkssYUFBYSxLQUFLTCxvQkFBb0JNLFFBQVE7QUFFN0UsTUFBTUMsWUFBWSxDQUFDbEM7SUFDZixJQUFJekMsV0FBV3lDLE1BQU07UUFDakIsSUFBSTtZQUNBQSxNQUFNQTtRQUNWLEVBQUUsT0FBT21DLEtBQUs7WUFDVix5QkFBeUI7WUFDekJuQyxNQUFNO1FBQ1Y7SUFDSjtJQUNBLDhFQUE4RTtJQUM5RSxtQkFBbUI7SUFDbkIsTUFBTW9DLE9BQU9wQztJQUNiLHVEQUF1RDtJQUN2REEsTUFBTSxPQUFPQSxPQUFPLFdBQVdBLE1BQU0sQ0FBQ3BCLE1BQU15RCxPQUFPLENBQUNyQyxPQUFPQSxJQUFJbkIsTUFBTSxHQUFHbUIsR0FBRSxJQUFLL0IsV0FBVytCLE9BQU87SUFDakcsT0FBTztRQUNIQTtRQUNBb0M7S0FDSDtBQUNMO0FBRUEsb0JBQW9CO0FBQ3BCLElBQUlFLGNBQWM7QUFDbEIsTUFBTUMsZUFBZSxJQUFJLEVBQUVEO0FBRTNCLE1BQU1FLGNBQWM7QUFDcEIsTUFBTUMsa0JBQWtCO0FBQ3hCLE1BQU1DLGVBQWU7QUFDckIsTUFBTUMseUJBQXlCO0FBRS9CLElBQUlDLFlBQVk7SUFDZEMsV0FBVztJQUNYRix3QkFBd0JBO0lBQ3hCSCxhQUFhQTtJQUNiRSxjQUFjQTtJQUNkRCxpQkFBaUJBO0FBQ25CO0FBRUEsZUFBZUs7SUFBZTtRQUFHVixLQUFILHVCQUFPOztJQUNqQyxNQUFNLENBQUNyQyxPQUFPZ0QsT0FBTUMsT0FBT0MsTUFBTSxHQUFHYjtJQUNwQyxvRUFBb0U7SUFDcEUsZ0JBQWdCO0lBQ2hCLE1BQU1jLFVBQVUxRixhQUFhO1FBQ3pCMkYsZUFBZTtRQUNmQyxjQUFjO0lBQ2xCLEdBQUcsT0FBT0gsVUFBVSxZQUFZO1FBQzVCSSxZQUFZSjtJQUNoQixJQUFJQSxTQUFTLENBQUM7SUFDZCxJQUFJRSxnQkFBZ0JELFFBQVFDLGFBQWE7SUFDekMsTUFBTUcsd0JBQXdCSixRQUFRSyxlQUFlO0lBQ3JELElBQUlDLGlCQUFpQk4sUUFBUU0sY0FBYztJQUMzQyxNQUFNSCxhQUFhSCxRQUFRRyxVQUFVLEtBQUs7SUFDMUMsTUFBTUUsa0JBQWtCLENBQUNFO1FBQ3JCLE9BQU8sT0FBT0gsMEJBQTBCLGFBQWFBLHNCQUFzQkcsU0FBU0gsMEJBQTBCO0lBQ2xIO0lBQ0EsTUFBTUYsZUFBZUYsUUFBUUUsWUFBWTtJQUN6Qyw4RUFBOEU7SUFDOUUsaUJBQWlCO0lBQ2pCLElBQUk3RixXQUFXd0YsUUFBTztRQUNsQixNQUFNVyxZQUFZWDtRQUNsQixNQUFNWSxjQUFjLEVBQUU7UUFDdEIsTUFBTUMsS0FBSzdELE1BQU1qQixJQUFJO1FBQ3JCLEtBQUssTUFBTWtCLE9BQU80RCxHQUFHO1lBQ2pCLElBQ0EsQ0FBQyxpQkFBaUJDLElBQUksQ0FBQzdELFFBQVEwRCxVQUFVM0QsTUFBTXJCLEdBQUcsQ0FBQ3NCLEtBQUs4RCxFQUFFLEdBQUc7Z0JBQ3pESCxZQUFZSSxJQUFJLENBQUMvRDtZQUNyQjtRQUNKO1FBQ0EsT0FBT2dFLFFBQVFDLEdBQUcsQ0FBQ04sWUFBWU8sR0FBRyxDQUFDQztJQUN2QztJQUNBLE9BQU9BLFlBQVlwQjtJQUNuQixlQUFlb0IsWUFBWUwsRUFBRTtRQUN6QixnQkFBZ0I7UUFDaEIsTUFBTSxDQUFDOUQsSUFBSSxHQUFHa0MsVUFBVTRCO1FBQ3hCLElBQUksQ0FBQzlELEtBQUs7UUFDVixNQUFNLENBQUN0QixLQUFLQyxJQUFJLEdBQUdtQixrQkFBa0JDLE9BQU9DO1FBQzVDLE1BQU0sQ0FBQ29FLG9CQUFvQkMsVUFBVUMsT0FBT0MsUUFBUSxHQUFHbEYsZUFBZVgsR0FBRyxDQUFDcUI7UUFDMUUsTUFBTXlFLGVBQWVKLGtCQUFrQixDQUFDcEUsSUFBSTtRQUM1QyxNQUFNeUUsa0JBQWtCO1lBQ3BCLElBQUlwQixZQUFZO2dCQUNaLHVFQUF1RTtnQkFDdkUsZ0NBQWdDO2dCQUNoQyxPQUFPaUIsS0FBSyxDQUFDdEUsSUFBSTtnQkFDakIsT0FBT3VFLE9BQU8sQ0FBQ3ZFLElBQUk7Z0JBQ25CLElBQUl3RSxnQkFBZ0JBLFlBQVksQ0FBQyxFQUFFLEVBQUU7b0JBQ2pDLE9BQU9BLFlBQVksQ0FBQyxFQUFFLENBQUM5QixjQUFjN0UsSUFBSSxDQUFDLElBQUlhLE1BQU1nRyxJQUFJO2dCQUM1RDtZQUNKO1lBQ0EsT0FBT2hHLE1BQU1nRyxJQUFJO1FBQ3JCO1FBQ0EsMkVBQTJFO1FBQzNFLElBQUl0QyxLQUFLdkQsTUFBTSxHQUFHLEdBQUc7WUFDakIsa0NBQWtDO1lBQ2xDLE9BQU80RjtRQUNYO1FBQ0EsSUFBSUMsT0FBTzFCO1FBQ1gsSUFBSVM7UUFDSiw0QkFBNEI7UUFDNUIsTUFBTWtCLG1CQUFtQnBDO1FBQ3pCOEIsUUFBUSxDQUFDckUsSUFBSSxHQUFHO1lBQ1oyRTtZQUNBO1NBQ0g7UUFDRCxNQUFNQyxvQkFBb0IsQ0FBQ3ZILFlBQVltRztRQUN2QyxNQUFNdkQsUUFBUXZCO1FBQ2QsbUZBQW1GO1FBQ25GLDZFQUE2RTtRQUM3RSw4RUFBOEU7UUFDOUUsTUFBTW1HLGdCQUFnQjVFLE1BQU15RSxJQUFJO1FBQ2hDLE1BQU1JLGNBQWM3RSxNQUFNOEUsRUFBRTtRQUM1QixNQUFNQyxnQkFBZ0IzSCxZQUFZeUgsZUFBZUQsZ0JBQWdCQztRQUNqRSw2QkFBNkI7UUFDN0IsSUFBSUYsbUJBQW1CO1lBQ25CcEIsaUJBQWlCakcsV0FBV2lHLGtCQUFrQkEsZUFBZXdCLGVBQWVILGlCQUFpQnJCO1lBQzdGLDhFQUE4RTtZQUM5RTdFLElBQUk7Z0JBQ0ErRixNQUFNbEI7Z0JBQ051QixJQUFJQztZQUNSO1FBQ0o7UUFDQSxJQUFJekgsV0FBV21ILE9BQU87WUFDbEIsNkRBQTZEO1lBQzdELElBQUk7Z0JBQ0FBLE9BQU9BLEtBQUtNO1lBQ2hCLEVBQUUsT0FBTzdDLEtBQUs7Z0JBQ1Ysc0VBQXNFO2dCQUN0RXNCLFFBQVF0QjtZQUNaO1FBQ0o7UUFDQSw4REFBOEQ7UUFDOUQsSUFBSXVDLFFBQVEvRyxjQUFjK0csT0FBTztZQUM3Qix3RUFBd0U7WUFDeEUseUJBQXlCO1lBQ3pCQSxPQUFPLE1BQU1BLEtBQUtPLEtBQUssQ0FBQyxDQUFDOUM7Z0JBQ3JCc0IsUUFBUXRCO1lBQ1o7WUFDQSw0RUFBNEU7WUFDNUUsbUVBQW1FO1lBQ25FLHdCQUF3QjtZQUN4QixJQUFJd0MscUJBQXFCTixRQUFRLENBQUNyRSxJQUFJLENBQUMsRUFBRSxFQUFFO2dCQUN2QyxJQUFJeUQsT0FBTyxNQUFNQTtnQkFDakIsT0FBT2lCO1lBQ1gsT0FBTyxJQUFJakIsU0FBU21CLHFCQUFxQnJCLGdCQUFnQkUsUUFBUTtnQkFDN0QsK0RBQStEO2dCQUMvRCx5QkFBeUI7Z0JBQ3pCTixnQkFBZ0I7Z0JBQ2hCdUIsT0FBT007Z0JBQ1Asd0VBQXdFO2dCQUN4RXJHLElBQUk7b0JBQ0ErRjtvQkFDQUssSUFBSTdIO2dCQUNSO1lBQ0o7UUFDSjtRQUNBLG1EQUFtRDtRQUNuRCxJQUFJaUcsZUFBZTtZQUNmLElBQUksQ0FBQ00sT0FBTztnQkFDUixrQ0FBa0M7Z0JBQ2xDLElBQUlsRyxXQUFXNEYsZ0JBQWdCO29CQUMzQnVCLE9BQU92QixjQUFjdUIsTUFBTU07Z0JBQy9CO2dCQUNBLGlHQUFpRztnQkFDakdyRyxJQUFJO29CQUNBK0Y7b0JBQ0FqQixPQUFPdkc7b0JBQ1A2SCxJQUFJN0g7Z0JBQ1I7WUFDSjtRQUNKO1FBQ0Esc0RBQXNEO1FBQ3REbUgsUUFBUSxDQUFDckUsSUFBSSxDQUFDLEVBQUUsR0FBR3VDO1FBQ25CLDhDQUE4QztRQUM5QyxNQUFNMkMsTUFBTSxNQUFNVDtRQUNsQiw2RUFBNkU7UUFDN0UsbUNBQW1DO1FBQ25DOUYsSUFBSTtZQUNBb0csSUFBSTdIO1FBQ1I7UUFDQSw2QkFBNkI7UUFDN0IsSUFBSXVHLE9BQU87WUFDUCxJQUFJTCxjQUFjLE1BQU1LO1lBQ3hCO1FBQ0o7UUFDQSxPQUFPTixnQkFBZ0IrQixNQUFNUjtJQUNqQztBQUNKO0FBRUEsTUFBTVMsb0JBQW9CLENBQUNYLGNBQWNyRztJQUNyQyxJQUFJLE1BQU02QixPQUFPd0UsYUFBYTtRQUMxQixJQUFJQSxZQUFZLENBQUN4RSxJQUFJLENBQUMsRUFBRSxFQUFFd0UsWUFBWSxDQUFDeEUsSUFBSSxDQUFDLEVBQUUsQ0FBQzdCO0lBQ25EO0FBQ0o7QUFDQSxNQUFNaUgsWUFBWSxDQUFDQyxVQUFVbkM7SUFDekIsdUVBQXVFO0lBQ3ZFLDhFQUE4RTtJQUM5RSxhQUFhO0lBQ2IsaUZBQWlGO0lBQ2pGLG1EQUFtRDtJQUNuRCxJQUFJLENBQUM3RCxlQUFlaUcsR0FBRyxDQUFDRCxXQUFXO1FBQy9CLE1BQU1FLE9BQU8vSCxhQUFhMkQsc0JBQXNCK0I7UUFDaEQsOEVBQThFO1FBQzlFLHVCQUF1QjtRQUN2QixNQUFNa0IscUJBQXFCLENBQUM7UUFDNUIsTUFBTW9CLFNBQVMxQyxlQUFlckMsSUFBSSxDQUFDdkQsV0FBV21JO1FBQzlDLElBQUlJLFVBQVV4STtRQUNkLE1BQU15SSxnQkFBZ0IsQ0FBQztRQUN2QixNQUFNQyxZQUFZLENBQUMzRixLQUFLYztZQUNwQixNQUFNOEUsT0FBT0YsYUFBYSxDQUFDMUYsSUFBSSxJQUFJLEVBQUU7WUFDckMwRixhQUFhLENBQUMxRixJQUFJLEdBQUc0RjtZQUNyQkEsS0FBSzdCLElBQUksQ0FBQ2pEO1lBQ1YsT0FBTyxJQUFJOEUsS0FBS0MsTUFBTSxDQUFDRCxLQUFLRSxPQUFPLENBQUNoRixXQUFXO1FBQ25EO1FBQ0EsTUFBTWlGLFNBQVMsQ0FBQy9GLEtBQUtnRyxPQUFPN0Y7WUFDeEJrRixTQUFTMUcsR0FBRyxDQUFDcUIsS0FBS2dHO1lBQ2xCLE1BQU1KLE9BQU9GLGFBQWEsQ0FBQzFGLElBQUk7WUFDL0IsSUFBSTRGLE1BQU07Z0JBQ04sS0FBSyxNQUFNSyxNQUFNTCxLQUFLO29CQUNsQkssR0FBR0QsT0FBTzdGO2dCQUNkO1lBQ0o7UUFDSjtRQUNBLE1BQU0rRixlQUFlO1lBQ2pCLElBQUksQ0FBQzdHLGVBQWVpRyxHQUFHLENBQUNELFdBQVc7Z0JBQy9CLHNFQUFzRTtnQkFDdEVoRyxlQUFlVixHQUFHLENBQUMwRyxVQUFVO29CQUN6QmpCO29CQUNBLENBQUM7b0JBQ0QsQ0FBQztvQkFDRCxDQUFDO29CQUNEb0I7b0JBQ0FPO29CQUNBSjtpQkFDSDtnQkFDRCxJQUFJLENBQUNyRSxXQUFXO29CQUNaLDhEQUE4RDtvQkFDOUQsdUVBQXVFO29CQUN2RSw0REFBNEQ7b0JBQzVELHlCQUF5QjtvQkFDekIscURBQXFEO29CQUNyRCw2Q0FBNkM7b0JBQzdDLE1BQU02RSxlQUFlWixLQUFLMUUsU0FBUyxDQUFDWSxXQUFXaEIsSUFBSSxDQUFDdkQsV0FBV2lJLGtCQUFrQjFFLElBQUksQ0FBQ3ZELFdBQVdrSCxvQkFBb0I1QjtvQkFDckgsTUFBTTRELG1CQUFtQmIsS0FBS3hFLGFBQWEsQ0FBQ1UsV0FBV2hCLElBQUksQ0FBQ3ZELFdBQVdpSSxrQkFBa0IxRSxJQUFJLENBQUN2RCxXQUFXa0gsb0JBQW9CM0I7b0JBQzdIZ0QsVUFBVTt3QkFDTlUsZ0JBQWdCQTt3QkFDaEJDLG9CQUFvQkE7d0JBQ3BCLHdFQUF3RTt3QkFDeEUseUVBQXlFO3dCQUN6RSw4Q0FBOEM7d0JBQzlDL0csZUFBZWdILE1BQU0sQ0FBQ2hCO29CQUMxQjtnQkFDSjtZQUNKO1FBQ0o7UUFDQWE7UUFDQSx3RUFBd0U7UUFDeEUsaURBQWlEO1FBQ2pELDZFQUE2RTtRQUM3RSwyQ0FBMkM7UUFDM0Msa0VBQWtFO1FBQ2xFLE9BQU87WUFDSGI7WUFDQUc7WUFDQVU7WUFDQVQ7U0FDSDtJQUNMO0lBQ0EsT0FBTztRQUNISjtRQUNBaEcsZUFBZVgsR0FBRyxDQUFDMkcsU0FBUyxDQUFDLEVBQUU7S0FDbEM7QUFDTDtBQUVBLGNBQWM7QUFDZCxNQUFNaUIsZUFBZSxDQUFDQyxHQUFHQyxJQUFJQyxRQUFRcEQsWUFBWWtDO0lBQzdDLE1BQU1tQixnQkFBZ0JELE9BQU9FLGVBQWU7SUFDNUMsTUFBTUMsb0JBQW9CckIsS0FBS3NCLFVBQVU7SUFDekMsc0JBQXNCO0lBQ3RCLE1BQU1DLFVBQVUsQ0FBQyxDQUFFLEVBQUNDLEtBQUtDLE1BQU0sS0FBSyxHQUFFLElBQU0sTUFBTUosQ0FBQUEsb0JBQW9CLElBQUlBLG9CQUFvQixFQUFDLENBQUMsSUFBS0gsT0FBT1Esa0JBQWtCO0lBQzlILElBQUksQ0FBQzVKLFlBQVlxSixrQkFBa0JFLG9CQUFvQkYsZUFBZTtRQUNsRTtJQUNKO0lBQ0FqRixXQUFXNEIsWUFBWXlELFNBQVN2QjtBQUNwQztBQUNBLE1BQU0yQixVQUFVLENBQUNwQyxhQUFhcUMsVUFBVWxKLFdBQVc2RyxnQkFBZ0I3RyxXQUFXa0o7QUFDOUUseUJBQXlCO0FBQ3pCLE1BQU0sQ0FBQ3BILE9BQU95RixPQUFPLEdBQUdKLFVBQVUsSUFBSWdDO0FBQ3RDLGlCQUFpQjtBQUNqQixNQUFNQyxnQkFBZ0I3SixhQUFhO0lBQy9CLFNBQVM7SUFDVDhKLGVBQWVySztJQUNmc0ssV0FBV3RLO0lBQ1h1SyxTQUFTdks7SUFDVHFKO0lBQ0FtQixhQUFheEs7SUFDYixXQUFXO0lBQ1h5SyxtQkFBbUI7SUFDbkJDLHVCQUF1QjtJQUN2QkMsbUJBQW1CO0lBQ25CQyxvQkFBb0I7SUFDcEIsV0FBVztJQUNYWixvQkFBb0JuRixpQkFBaUIsUUFBUTtJQUM3Q2dHLHVCQUF1QixJQUFJO0lBQzNCQyxrQkFBa0IsSUFBSTtJQUN0QkMsZ0JBQWdCbEcsaUJBQWlCLE9BQU87SUFDeEMsWUFBWTtJQUNab0Y7SUFDQWUsVUFBVSxJQUFJO0lBQ2RsSTtJQUNBeUY7SUFDQTBDLFVBQVUsQ0FBQztBQUNmLEdBQ0FoSDtBQUVBLE1BQU1pSCxlQUFlLENBQUMxSyxHQUFHQztJQUNyQixtRUFBbUU7SUFDbkUsTUFBTUosSUFBSUUsYUFBYUMsR0FBR0M7SUFDMUIseUVBQXlFO0lBQ3pFLElBQUlBLEdBQUc7UUFDSCxNQUFNLEVBQUUwSyxLQUFLQyxFQUFFLEVBQUdILFVBQVVJLEVBQUUsRUFBRyxHQUFHN0s7UUFDcEMsTUFBTSxFQUFFMkssS0FBS0csRUFBRSxFQUFHTCxVQUFVTSxFQUFFLEVBQUcsR0FBRzlLO1FBQ3BDLElBQUkySyxNQUFNRSxJQUFJO1lBQ1ZqTCxFQUFFOEssR0FBRyxHQUFHQyxHQUFHSSxNQUFNLENBQUNGO1FBQ3RCO1FBQ0EsSUFBSUQsTUFBTUUsSUFBSTtZQUNWbEwsRUFBRTRLLFFBQVEsR0FBRzFLLGFBQWE4SyxJQUFJRTtRQUNsQztJQUNKO0lBQ0EsT0FBT2xMO0FBQ1g7QUFFQSxNQUFNb0wsaUNBQW1CaE0sb0RBQWFBLENBQUMsQ0FBQztBQUN4QyxNQUFNaU0sWUFBWSxDQUFDQzs7SUFDZixNQUFNLEVBQUU1QyxLQUFLLEVBQUcsR0FBRzRDO0lBQ25CLE1BQU1DLGVBQWVsTSxpREFBVUEsQ0FBQytMO0lBQ2hDLE1BQU1JLHFCQUFxQnZMLFdBQVd5STtJQUN0QyxNQUFNUyxTQUFTN0osOENBQU9BLENBQUMsSUFBSWtNLHFCQUFxQjlDLE1BQU02QyxnQkFBZ0I3QyxPQUFPO1FBQ3pFOEM7UUFDQUQ7UUFDQTdDO0tBQ0g7SUFDRCwrQ0FBK0M7SUFDL0MsTUFBTStDLGlCQUFpQm5NLDhDQUFPQSxDQUFDLElBQUlrTSxxQkFBcUJyQyxTQUFTMEIsYUFBYVUsY0FBY3BDLFNBQVM7UUFDakdxQztRQUNBRDtRQUNBcEM7S0FDSDtJQUNELHlDQUF5QztJQUN6QyxNQUFNcEIsV0FBV29CLFVBQVVBLE9BQU9wQixRQUFRO0lBQzFDLDZDQUE2QztJQUM3QyxNQUFNMkQsa0JBQWtCbk0sNkNBQU1BLENBQUNLO0lBQy9CLElBQUltSSxZQUFZLENBQUMyRCxnQkFBZ0JDLE9BQU8sRUFBRTtRQUN0Q0QsZ0JBQWdCQyxPQUFPLEdBQUc3RCxVQUFVQyxTQUFTMEQsZUFBZWhKLEtBQUssSUFBSUEsUUFBUTBHO0lBQ2pGO0lBQ0EsTUFBTXlDLGVBQWVGLGdCQUFnQkMsT0FBTztJQUM1QyxpREFBaUQ7SUFDakQsSUFBSUMsY0FBYztRQUNkSCxlQUFlaEosS0FBSyxHQUFHbUosWUFBWSxDQUFDLEVBQUU7UUFDdENILGVBQWV2RCxNQUFNLEdBQUcwRCxZQUFZLENBQUMsRUFBRTtJQUMzQztJQUNBLHNCQUFzQjtJQUN0QnhILDBCQUEwQjtRQUN0QixJQUFJd0gsY0FBYztZQUNkQSxZQUFZLENBQUMsRUFBRSxJQUFJQSxZQUFZLENBQUMsRUFBRTtZQUNsQyxPQUFPQSxZQUFZLENBQUMsRUFBRTtRQUMxQjtJQUNKLEdBQUcsRUFBRTtJQUNMLHFCQUFPcE0sb0RBQWFBLENBQUM0TCxpQkFBaUJTLFFBQVEsRUFBRTNMLGFBQWFvTCxPQUFPO1FBQ2hFNUMsT0FBTytDO0lBQ1g7QUFDSjtHQXRDTUo7O1FBNkJGakg7OztLQTdCRWlIO0FBd0NOLG1CQUFtQjtBQUNuQixNQUFNUyxpQkFBaUIzSixtQkFBbUJJLE9BQU93SixvQkFBb0I7QUFDckUsTUFBTWpCLE1BQU1nQixpQkFBaUJ2SixPQUFPd0osb0JBQW9CLEdBQUcsRUFBRTtBQUM3RCxNQUFNQyxnQkFBZ0I7SUFDbEIsSUFBSUYsZ0JBQWdCO1FBQ2hCLG1CQUFtQjtRQUNuQnZKLE9BQU8wSixzQkFBc0IsR0FBR2hOLGtDQUFLQTtJQUN6QztBQUNKO0FBRUEsTUFBTWlOLFlBQVksQ0FBQ3BIO0lBQ2YsT0FBTzdFLFdBQVc2RSxJQUFJLENBQUMsRUFBRSxJQUFJO1FBQ3pCQSxJQUFJLENBQUMsRUFBRTtRQUNQQSxJQUFJLENBQUMsRUFBRTtRQUNQQSxJQUFJLENBQUMsRUFBRSxJQUFJLENBQUM7S0FDZixHQUFHO1FBQ0FBLElBQUksQ0FBQyxFQUFFO1FBQ1A7UUFDQ0EsQ0FBQUEsSUFBSSxDQUFDLEVBQUUsS0FBSyxPQUFPQSxJQUFJLENBQUMsRUFBRSxHQUFHQSxJQUFJLENBQUMsRUFBRSxLQUFLLENBQUM7S0FDOUM7QUFDTDtBQUVBLE1BQU1xSCxlQUFlOztJQUNqQixPQUFPak0sYUFBYTZKLGVBQWUxSyxpREFBVUEsQ0FBQytMO0FBQ2xEO0lBRk1lO0FBSU4sTUFBTUMsVUFBVSxDQUFDQyxNQUFNQztJQUNuQixNQUFNLENBQUM1SixLQUFLNkosTUFBTSxHQUFHM0gsVUFBVXlIO0lBQy9CLE1BQU0sT0FBT3BGLFFBQVEsR0FBR2xGLGVBQWVYLEdBQUcsQ0FBQ3FCO0lBQzNDLDJEQUEyRDtJQUMzRCxJQUFJd0UsT0FBTyxDQUFDdkUsSUFBSSxFQUFFLE9BQU91RSxPQUFPLENBQUN2RSxJQUFJO0lBQ3JDLE1BQU04SixNQUFNRixRQUFRQztJQUNwQnRGLE9BQU8sQ0FBQ3ZFLElBQUksR0FBRzhKO0lBQ2YsT0FBT0E7QUFDWDtBQUNBLE1BQU1DLGFBQWEsQ0FBQ0MsaUJBQWEsQ0FBQ0wsTUFBTU0sVUFBVXhEOztRQUMxQyw0RUFBNEU7UUFDNUUsTUFBTW1ELFVBQVVLLFlBQWE7NkNBQUk3SDtnQkFBQUE7O1lBQzdCLE1BQU0sQ0FBQ3BDLElBQUksR0FBR2tDLFVBQVV5SDtZQUN4QixNQUFNLE9BQU9wRixRQUFRLEdBQUdsRixlQUFlWCxHQUFHLENBQUNxQjtZQUMzQyxNQUFNK0osTUFBTXZGLE9BQU8sQ0FBQ3ZFLElBQUk7WUFDeEIsSUFBSTNDLFlBQVl5TSxNQUFNLE9BQU9HLFlBQVk3SDtZQUN6QyxPQUFPbUMsT0FBTyxDQUFDdkUsSUFBSTtZQUNuQixPQUFPOEo7UUFDWDtRQUNBLE9BQU9FLFdBQVdMLE1BQU1DLFNBQVNuRDtJQUNyQztBQUVKLE1BQU15RCxzQkFBc0I5QixJQUFJSyxNQUFNLENBQUNzQjtBQUV2QyxnRkFBZ0Y7QUFDaEYsa0JBQWtCO0FBQ2xCLE1BQU1JLFdBQVcsQ0FBQ0M7O0lBQ2QsVUFBTyxTQUFTQztRQUFXO1lBQUdqSSxLQUFILHVCQUFPOzs7UUFDOUIsK0NBQStDO1FBQy9DLE1BQU1rSSxpQkFBaUJiO1FBQ3ZCLHVCQUF1QjtRQUN2QixNQUFNLENBQUN6SixLQUFLaUcsSUFBSXNFLFFBQVEsR0FBR2YsVUFBVXBIO1FBQ3JDLHdCQUF3QjtRQUN4QixNQUFNcUUsU0FBUzBCLGFBQWFtQyxnQkFBZ0JDO1FBQzVDLG1CQUFtQjtRQUNuQixJQUFJQyxPQUFPSjtRQUNYLE1BQU0sRUFBRWhDLEdBQUcsRUFBRyxHQUFHM0I7UUFDakIsTUFBTXNELGFBQWEsQ0FBQzNCLE9BQU8sRUFBRSxFQUFFSyxNQUFNLENBQUN5QjtRQUN0QyxJQUFJLElBQUlPLElBQUlWLFdBQVdsTCxNQUFNLEVBQUU0TCxLQUFLO1lBQ2hDRCxPQUFPVCxVQUFVLENBQUNVLEVBQUUsQ0FBQ0Q7UUFDekI7UUFDQSxPQUFPQSxLQUFLeEssS0FBS2lHLE1BQU1RLE9BQU9tRCxPQUFPLElBQUksTUFBTW5EO0lBQ25EOztZQWIyQmdEOzs7QUFjL0I7QUFFQTs7Q0FFQyxHQUFHLE1BQU1pQixtQkFBbUIsQ0FBQ3pLOztJQUMxQixNQUFNMEssV0FBVzVOLCtDQUFRQSxDQUFDLENBQUMsRUFBRSxDQUFDLEVBQUU7SUFDaEMsTUFBTTZOLGVBQWUvTiw2Q0FBTUEsQ0FBQztJQUM1QixNQUFNZ08sV0FBV2hPLDZDQUFNQSxDQUFDb0Q7SUFDeEIsK0VBQStFO0lBQy9FLDJFQUEyRTtJQUMzRSx3Q0FBd0M7SUFDeEMsNkNBQTZDO0lBQzdDLE1BQU02Syx1QkFBdUJqTyw2Q0FBTUEsQ0FBQztRQUNoQzZILE1BQU07UUFDTmpCLE9BQU87UUFDUHNILGNBQWM7SUFDbEI7SUFDQTs7Ozs7Ozs7Ozs7Ozs7OztHQWdCRCxHQUFHLE1BQU1DLFdBQVdoTyxrREFBV0EsQ0FBQyxDQUFDaU87UUFDNUIsSUFBSUMsaUJBQWlCO1FBQ3JCLE1BQU1DLGVBQWVOLFNBQVM1QixPQUFPO1FBQ3JDLElBQUksTUFBTTFDLEtBQUswRSxRQUFRO1lBQ25CLE1BQU1HLElBQUk3RTtZQUNWLHFFQUFxRTtZQUNyRSxVQUFVO1lBQ1YsSUFBSTRFLFlBQVksQ0FBQ0MsRUFBRSxLQUFLSCxPQUFPLENBQUNHLEVBQUUsRUFBRTtnQkFDaENELFlBQVksQ0FBQ0MsRUFBRSxHQUFHSCxPQUFPLENBQUNHLEVBQUU7Z0JBQzVCLHFFQUFxRTtnQkFDckUsYUFBYTtnQkFDYixJQUFJTixxQkFBcUI3QixPQUFPLENBQUNtQyxFQUFFLEVBQUU7b0JBQ2pDRixpQkFBaUI7Z0JBQ3JCO1lBQ0o7UUFDSjtRQUNBLElBQUlBLGtCQUFrQixDQUFDTixhQUFhM0IsT0FBTyxFQUFFO1lBQ3pDLElBQUk3SCxpQkFBaUI7Z0JBQ2pCdUosU0FBUyxDQUFDO1lBQ2QsT0FBTztnQkFDSHBPLGtEQUFxQixDQUFDLElBQUlvTyxTQUFTLENBQUM7WUFDeEM7UUFDSjtJQUNKLEdBQUc7UUFDQ0E7S0FDSDtJQUNEakosMEJBQTBCO1FBQ3RCa0osYUFBYTNCLE9BQU8sR0FBRztRQUN2QixPQUFPO1lBQ0gyQixhQUFhM0IsT0FBTyxHQUFHO1FBQzNCO0lBQ0o7SUFDQSxPQUFPO1FBQ0g0QjtRQUNBQyxxQkFBcUI3QixPQUFPO1FBQzVCK0I7S0FDSDtBQUNMO0lBbEVVTjs7UUF1RE5oSjs7O0FBYUosMkVBQTJFO0FBQzNFLDRCQUE0QjtBQUM1QixNQUFNNEosb0JBQW9CLENBQUN0TCxLQUFLdUwsV0FBV3pLO0lBQ3ZDLE1BQU0wSyxvQkFBb0JELFNBQVMsQ0FBQ3ZMLElBQUksSUFBS3VMLENBQUFBLFNBQVMsQ0FBQ3ZMLElBQUksR0FBRyxFQUFFO0lBQ2hFd0wsa0JBQWtCekgsSUFBSSxDQUFDakQ7SUFDdkIsT0FBTztRQUNILE1BQU10QyxRQUFRZ04sa0JBQWtCMUYsT0FBTyxDQUFDaEY7UUFDeEMsSUFBSXRDLFNBQVMsR0FBRztZQUNaLDJCQUEyQjtZQUMzQmdOLGlCQUFpQixDQUFDaE4sTUFBTSxHQUFHZ04saUJBQWlCLENBQUNBLGtCQUFrQjNNLE1BQU0sR0FBRyxFQUFFO1lBQzFFMk0sa0JBQWtCeE0sR0FBRztRQUN6QjtJQUNKO0FBQ0o7QUFFQSx5Q0FBeUM7QUFDekMsTUFBTXlNLGlCQUFpQixDQUFDQyxRQUFRM0I7O0lBQzVCLFVBQU87eUNBQUkzSDtZQUFBQTs7O1FBQ1AsTUFBTSxDQUFDcEMsS0FBS2lHLElBQUlRLE9BQU8sR0FBRytDLFVBQVVwSDtRQUNwQyxNQUFNdUosT0FBTyxDQUFDbEYsT0FBTzJCLEdBQUcsSUFBSSxFQUFFLEVBQUVLLE1BQU0sQ0FBQ3NCO1FBQ3ZDLE9BQU8yQixPQUFPMUwsS0FBS2lHLElBQUk7WUFDbkIsR0FBR1EsTUFBTTtZQUNUMkIsS0FBS3VEO1FBQ1Q7SUFDSjs7WUFKV0Q7OztBQUtmO0FBRUFwQztBQUVvaUIiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9fTl9FLy4vbm9kZV9tb2R1bGVzL3N3ci9faW50ZXJuYWwvZGlzdC9pbmRleC5tanM/YTM2YiJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgUmVhY3QsIHsgdXNlRWZmZWN0LCB1c2VMYXlvdXRFZmZlY3QsIGNyZWF0ZUNvbnRleHQsIHVzZUNvbnRleHQsIHVzZU1lbW8sIHVzZVJlZiwgY3JlYXRlRWxlbWVudCwgdXNlU3RhdGUsIHVzZUNhbGxiYWNrIH0gZnJvbSAncmVhY3QnO1xuXG4vLyBTaGFyZWQgc3RhdGUgYmV0d2VlbiBzZXJ2ZXIgY29tcG9uZW50cyBhbmQgY2xpZW50IGNvbXBvbmVudHNcbmNvbnN0IG5vb3AgPSAoKT0+e307XG4vLyBVc2luZyBub29wKCkgYXMgdGhlIHVuZGVmaW5lZCB2YWx1ZSBhcyB1bmRlZmluZWQgY2FuIGJlIHJlcGxhY2VkXG4vLyBieSBzb21ldGhpbmcgZWxzZS4gUHJldHRpZXIgaWdub3JlIGFuZCBleHRyYSBwYXJlbnRoZXNlcyBhcmUgbmVjZXNzYXJ5IGhlcmVcbi8vIHRvIGVuc3VyZSB0aGF0IHRzYyBkb2Vzbid0IHJlbW92ZSB0aGUgX19OT0lOTElORV9fIGNvbW1lbnQuXG4vLyBwcmV0dGllci1pZ25vcmVcbmNvbnN0IFVOREVGSU5FRCA9IC8qI19fTk9JTkxJTkVfXyovIG5vb3AoKTtcbmNvbnN0IE9CSkVDVCA9IE9iamVjdDtcbmNvbnN0IGlzVW5kZWZpbmVkID0gKHYpPT52ID09PSBVTkRFRklORUQ7XG5jb25zdCBpc0Z1bmN0aW9uID0gKHYpPT50eXBlb2YgdiA9PSAnZnVuY3Rpb24nO1xuY29uc3QgbWVyZ2VPYmplY3RzID0gKGEsIGIpPT4oe1xuICAgICAgICAuLi5hLFxuICAgICAgICAuLi5iXG4gICAgfSk7XG5jb25zdCBpc1Byb21pc2VMaWtlID0gKHgpPT5pc0Z1bmN0aW9uKHgudGhlbik7XG5cbi8vIHVzZSBXZWFrTWFwIHRvIHN0b3JlIHRoZSBvYmplY3QtPmtleSBtYXBwaW5nXG4vLyBzbyB0aGUgb2JqZWN0cyBjYW4gYmUgZ2FyYmFnZSBjb2xsZWN0ZWQuXG4vLyBXZWFrTWFwIHVzZXMgYSBoYXNodGFibGUgdW5kZXIgdGhlIGhvb2QsIHNvIHRoZSBsb29rdXBcbi8vIGNvbXBsZXhpdHkgaXMgYWxtb3N0IE8oMSkuXG5jb25zdCB0YWJsZSA9IG5ldyBXZWFrTWFwKCk7XG4vLyBjb3VudGVyIG9mIHRoZSBrZXlcbmxldCBjb3VudGVyID0gMDtcbi8vIEEgc3RhYmxlIGhhc2ggaW1wbGVtZW50YXRpb24gdGhhdCBzdXBwb3J0czpcbi8vIC0gRmFzdCBhbmQgZW5zdXJlcyB1bmlxdWUgaGFzaCBwcm9wZXJ0aWVzXG4vLyAtIEhhbmRsZXMgdW5zZXJpYWxpemFibGUgdmFsdWVzXG4vLyAtIEhhbmRsZXMgb2JqZWN0IGtleSBvcmRlcmluZ1xuLy8gLSBHZW5lcmF0ZXMgc2hvcnQgcmVzdWx0c1xuLy9cbi8vIFRoaXMgaXMgbm90IGEgc2VyaWFsaXphdGlvbiBmdW5jdGlvbiwgYW5kIHRoZSByZXN1bHQgaXMgbm90IGd1YXJhbnRlZWQgdG8gYmVcbi8vIHBhcnNhYmxlLlxuY29uc3Qgc3RhYmxlSGFzaCA9IChhcmcpPT57XG4gICAgY29uc3QgdHlwZSA9IHR5cGVvZiBhcmc7XG4gICAgY29uc3QgY29uc3RydWN0b3IgPSBhcmcgJiYgYXJnLmNvbnN0cnVjdG9yO1xuICAgIGNvbnN0IGlzRGF0ZSA9IGNvbnN0cnVjdG9yID09IERhdGU7XG4gICAgbGV0IHJlc3VsdDtcbiAgICBsZXQgaW5kZXg7XG4gICAgaWYgKE9CSkVDVChhcmcpID09PSBhcmcgJiYgIWlzRGF0ZSAmJiBjb25zdHJ1Y3RvciAhPSBSZWdFeHApIHtcbiAgICAgICAgLy8gT2JqZWN0L2Z1bmN0aW9uLCBub3QgbnVsbC9kYXRlL3JlZ2V4cC4gVXNlIFdlYWtNYXAgdG8gc3RvcmUgdGhlIGlkIGZpcnN0LlxuICAgICAgICAvLyBJZiBpdCdzIGFscmVhZHkgaGFzaGVkLCBkaXJlY3RseSByZXR1cm4gdGhlIHJlc3VsdC5cbiAgICAgICAgcmVzdWx0ID0gdGFibGUuZ2V0KGFyZyk7XG4gICAgICAgIGlmIChyZXN1bHQpIHJldHVybiByZXN1bHQ7XG4gICAgICAgIC8vIFN0b3JlIHRoZSBoYXNoIGZpcnN0IGZvciBjaXJjdWxhciByZWZlcmVuY2UgZGV0ZWN0aW9uIGJlZm9yZSBlbnRlcmluZyB0aGVcbiAgICAgICAgLy8gcmVjdXJzaXZlIGBzdGFibGVIYXNoYCBjYWxscy5cbiAgICAgICAgLy8gRm9yIG90aGVyIG9iamVjdHMgbGlrZSBzZXQgYW5kIG1hcCwgd2UgdXNlIHRoaXMgaWQgZGlyZWN0bHkgYXMgdGhlIGhhc2guXG4gICAgICAgIHJlc3VsdCA9ICsrY291bnRlciArICd+JztcbiAgICAgICAgdGFibGUuc2V0KGFyZywgcmVzdWx0KTtcbiAgICAgICAgaWYgKGNvbnN0cnVjdG9yID09IEFycmF5KSB7XG4gICAgICAgICAgICAvLyBBcnJheS5cbiAgICAgICAgICAgIHJlc3VsdCA9ICdAJztcbiAgICAgICAgICAgIGZvcihpbmRleCA9IDA7IGluZGV4IDwgYXJnLmxlbmd0aDsgaW5kZXgrKyl7XG4gICAgICAgICAgICAgICAgcmVzdWx0ICs9IHN0YWJsZUhhc2goYXJnW2luZGV4XSkgKyAnLCc7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICB0YWJsZS5zZXQoYXJnLCByZXN1bHQpO1xuICAgICAgICB9XG4gICAgICAgIGlmIChjb25zdHJ1Y3RvciA9PSBPQkpFQ1QpIHtcbiAgICAgICAgICAgIC8vIE9iamVjdCwgc29ydCBrZXlzLlxuICAgICAgICAgICAgcmVzdWx0ID0gJyMnO1xuICAgICAgICAgICAgY29uc3Qga2V5cyA9IE9CSkVDVC5rZXlzKGFyZykuc29ydCgpO1xuICAgICAgICAgICAgd2hpbGUoIWlzVW5kZWZpbmVkKGluZGV4ID0ga2V5cy5wb3AoKSkpe1xuICAgICAgICAgICAgICAgIGlmICghaXNVbmRlZmluZWQoYXJnW2luZGV4XSkpIHtcbiAgICAgICAgICAgICAgICAgICAgcmVzdWx0ICs9IGluZGV4ICsgJzonICsgc3RhYmxlSGFzaChhcmdbaW5kZXhdKSArICcsJztcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICB0YWJsZS5zZXQoYXJnLCByZXN1bHQpO1xuICAgICAgICB9XG4gICAgfSBlbHNlIHtcbiAgICAgICAgcmVzdWx0ID0gaXNEYXRlID8gYXJnLnRvSlNPTigpIDogdHlwZSA9PSAnc3ltYm9sJyA/IGFyZy50b1N0cmluZygpIDogdHlwZSA9PSAnc3RyaW5nJyA/IEpTT04uc3RyaW5naWZ5KGFyZykgOiAnJyArIGFyZztcbiAgICB9XG4gICAgcmV0dXJuIHJlc3VsdDtcbn07XG5cbi8vIEdsb2JhbCBzdGF0ZSB1c2VkIHRvIGRlZHVwbGljYXRlIHJlcXVlc3RzIGFuZCBzdG9yZSBsaXN0ZW5lcnNcbmNvbnN0IFNXUkdsb2JhbFN0YXRlID0gbmV3IFdlYWtNYXAoKTtcblxuY29uc3QgRU1QVFlfQ0FDSEUgPSB7fTtcbmNvbnN0IElOSVRJQUxfQ0FDSEUgPSB7fTtcbmNvbnN0IFNUUl9VTkRFRklORUQgPSAndW5kZWZpbmVkJztcbi8vIE5PVEU6IFVzZSB0aGUgZnVuY3Rpb24gdG8gZ3VhcmFudGVlIGl0J3MgcmUtZXZhbHVhdGVkIGJldHdlZW4ganNkb20gYW5kIG5vZGUgcnVudGltZSBmb3IgdGVzdHMuXG5jb25zdCBpc1dpbmRvd0RlZmluZWQgPSB0eXBlb2Ygd2luZG93ICE9IFNUUl9VTkRFRklORUQ7XG5jb25zdCBpc0RvY3VtZW50RGVmaW5lZCA9IHR5cGVvZiBkb2N1bWVudCAhPSBTVFJfVU5ERUZJTkVEO1xuY29uc3QgaGFzUmVxdWVzdEFuaW1hdGlvbkZyYW1lID0gKCk9PmlzV2luZG93RGVmaW5lZCAmJiB0eXBlb2Ygd2luZG93WydyZXF1ZXN0QW5pbWF0aW9uRnJhbWUnXSAhPSBTVFJfVU5ERUZJTkVEO1xuY29uc3QgY3JlYXRlQ2FjaGVIZWxwZXIgPSAoY2FjaGUsIGtleSk9PntcbiAgICBjb25zdCBzdGF0ZSA9IFNXUkdsb2JhbFN0YXRlLmdldChjYWNoZSk7XG4gICAgcmV0dXJuIFtcbiAgICAgICAgLy8gR2V0dGVyXG4gICAgICAgICgpPT4haXNVbmRlZmluZWQoa2V5KSAmJiBjYWNoZS5nZXQoa2V5KSB8fCBFTVBUWV9DQUNIRSxcbiAgICAgICAgLy8gU2V0dGVyXG4gICAgICAgIChpbmZvKT0+e1xuICAgICAgICAgICAgaWYgKCFpc1VuZGVmaW5lZChrZXkpKSB7XG4gICAgICAgICAgICAgICAgY29uc3QgcHJldiA9IGNhY2hlLmdldChrZXkpO1xuICAgICAgICAgICAgICAgIC8vIEJlZm9yZSB3cml0aW5nIHRvIHRoZSBzdG9yZSwgd2Uga2VlcCB0aGUgdmFsdWUgaW4gdGhlIGluaXRpYWwgY2FjaGVcbiAgICAgICAgICAgICAgICAvLyBpZiBpdCdzIG5vdCB0aGVyZSB5ZXQuXG4gICAgICAgICAgICAgICAgaWYgKCEoa2V5IGluIElOSVRJQUxfQ0FDSEUpKSB7XG4gICAgICAgICAgICAgICAgICAgIElOSVRJQUxfQ0FDSEVba2V5XSA9IHByZXY7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIHN0YXRlWzVdKGtleSwgbWVyZ2VPYmplY3RzKHByZXYsIGluZm8pLCBwcmV2IHx8IEVNUFRZX0NBQ0hFKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSxcbiAgICAgICAgLy8gU3Vic2NyaWJlclxuICAgICAgICBzdGF0ZVs2XSxcbiAgICAgICAgLy8gR2V0IHNlcnZlciBjYWNoZSBzbmFwc2hvdFxuICAgICAgICAoKT0+e1xuICAgICAgICAgICAgaWYgKCFpc1VuZGVmaW5lZChrZXkpKSB7XG4gICAgICAgICAgICAgICAgLy8gSWYgdGhlIGNhY2hlIHdhcyB1cGRhdGVkIG9uIHRoZSBjbGllbnQsIHdlIHJldHVybiB0aGUgc3RvcmVkIGluaXRpYWwgdmFsdWUuXG4gICAgICAgICAgICAgICAgaWYgKGtleSBpbiBJTklUSUFMX0NBQ0hFKSByZXR1cm4gSU5JVElBTF9DQUNIRVtrZXldO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgLy8gSWYgd2UgaGF2ZW4ndCBkb25lIGFueSBjbGllbnQtc2lkZSB1cGRhdGVzLCB3ZSByZXR1cm4gdGhlIGN1cnJlbnQgdmFsdWUuXG4gICAgICAgICAgICByZXR1cm4gIWlzVW5kZWZpbmVkKGtleSkgJiYgY2FjaGUuZ2V0KGtleSkgfHwgRU1QVFlfQ0FDSEU7XG4gICAgICAgIH1cbiAgICBdO1xufSAvLyBleHBvcnQgeyBVTkRFRklORUQsIE9CSkVDVCwgaXNVbmRlZmluZWQsIGlzRnVuY3Rpb24sIG1lcmdlT2JqZWN0cywgaXNQcm9taXNlTGlrZSB9XG47XG5cbi8qKlxuICogRHVlIHRvIHRoZSBidWcgaHR0cHM6Ly9idWdzLmNocm9taXVtLm9yZy9wL2Nocm9taXVtL2lzc3Vlcy9kZXRhaWw/aWQ9Njc4MDc1LFxuICogaXQncyBub3QgcmVsaWFibGUgdG8gZGV0ZWN0IGlmIHRoZSBicm93c2VyIGlzIGN1cnJlbnRseSBvbmxpbmUgb3Igb2ZmbGluZVxuICogYmFzZWQgb24gYG5hdmlnYXRvci5vbkxpbmVgLlxuICogQXMgYSB3b3JrYXJvdW5kLCB3ZSBhbHdheXMgYXNzdW1lIGl0J3Mgb25saW5lIG9uIHRoZSBmaXJzdCBsb2FkLCBhbmQgY2hhbmdlXG4gKiB0aGUgc3RhdHVzIHVwb24gYG9ubGluZWAgb3IgYG9mZmxpbmVgIGV2ZW50cy5cbiAqLyBsZXQgb25saW5lID0gdHJ1ZTtcbmNvbnN0IGlzT25saW5lID0gKCk9Pm9ubGluZTtcbi8vIEZvciBub2RlIGFuZCBSZWFjdCBOYXRpdmUsIGBhZGQvcmVtb3ZlRXZlbnRMaXN0ZW5lcmAgZG9lc24ndCBleGlzdCBvbiB3aW5kb3cuXG5jb25zdCBbb25XaW5kb3dFdmVudCwgb2ZmV2luZG93RXZlbnRdID0gaXNXaW5kb3dEZWZpbmVkICYmIHdpbmRvdy5hZGRFdmVudExpc3RlbmVyID8gW1xuICAgIHdpbmRvdy5hZGRFdmVudExpc3RlbmVyLmJpbmQod2luZG93KSxcbiAgICB3aW5kb3cucmVtb3ZlRXZlbnRMaXN0ZW5lci5iaW5kKHdpbmRvdylcbl0gOiBbXG4gICAgbm9vcCxcbiAgICBub29wXG5dO1xuY29uc3QgaXNWaXNpYmxlID0gKCk9PntcbiAgICBjb25zdCB2aXNpYmlsaXR5U3RhdGUgPSBpc0RvY3VtZW50RGVmaW5lZCAmJiBkb2N1bWVudC52aXNpYmlsaXR5U3RhdGU7XG4gICAgcmV0dXJuIGlzVW5kZWZpbmVkKHZpc2liaWxpdHlTdGF0ZSkgfHwgdmlzaWJpbGl0eVN0YXRlICE9PSAnaGlkZGVuJztcbn07XG5jb25zdCBpbml0Rm9jdXMgPSAoY2FsbGJhY2spPT57XG4gICAgLy8gZm9jdXMgcmV2YWxpZGF0ZVxuICAgIGlmIChpc0RvY3VtZW50RGVmaW5lZCkge1xuICAgICAgICBkb2N1bWVudC5hZGRFdmVudExpc3RlbmVyKCd2aXNpYmlsaXR5Y2hhbmdlJywgY2FsbGJhY2spO1xuICAgIH1cbiAgICBvbldpbmRvd0V2ZW50KCdmb2N1cycsIGNhbGxiYWNrKTtcbiAgICByZXR1cm4gKCk9PntcbiAgICAgICAgaWYgKGlzRG9jdW1lbnREZWZpbmVkKSB7XG4gICAgICAgICAgICBkb2N1bWVudC5yZW1vdmVFdmVudExpc3RlbmVyKCd2aXNpYmlsaXR5Y2hhbmdlJywgY2FsbGJhY2spO1xuICAgICAgICB9XG4gICAgICAgIG9mZldpbmRvd0V2ZW50KCdmb2N1cycsIGNhbGxiYWNrKTtcbiAgICB9O1xufTtcbmNvbnN0IGluaXRSZWNvbm5lY3QgPSAoY2FsbGJhY2spPT57XG4gICAgLy8gcmV2YWxpZGF0ZSBvbiByZWNvbm5lY3RlZFxuICAgIGNvbnN0IG9uT25saW5lID0gKCk9PntcbiAgICAgICAgb25saW5lID0gdHJ1ZTtcbiAgICAgICAgY2FsbGJhY2soKTtcbiAgICB9O1xuICAgIC8vIG5vdGhpbmcgdG8gcmV2YWxpZGF0ZSwganVzdCB1cGRhdGUgdGhlIHN0YXR1c1xuICAgIGNvbnN0IG9uT2ZmbGluZSA9ICgpPT57XG4gICAgICAgIG9ubGluZSA9IGZhbHNlO1xuICAgIH07XG4gICAgb25XaW5kb3dFdmVudCgnb25saW5lJywgb25PbmxpbmUpO1xuICAgIG9uV2luZG93RXZlbnQoJ29mZmxpbmUnLCBvbk9mZmxpbmUpO1xuICAgIHJldHVybiAoKT0+e1xuICAgICAgICBvZmZXaW5kb3dFdmVudCgnb25saW5lJywgb25PbmxpbmUpO1xuICAgICAgICBvZmZXaW5kb3dFdmVudCgnb2ZmbGluZScsIG9uT2ZmbGluZSk7XG4gICAgfTtcbn07XG5jb25zdCBwcmVzZXQgPSB7XG4gICAgaXNPbmxpbmUsXG4gICAgaXNWaXNpYmxlXG59O1xuY29uc3QgZGVmYXVsdENvbmZpZ09wdGlvbnMgPSB7XG4gICAgaW5pdEZvY3VzLFxuICAgIGluaXRSZWNvbm5lY3Rcbn07XG5cbmNvbnN0IElTX1JFQUNUX0xFR0FDWSA9ICFSZWFjdC51c2VJZDtcbmNvbnN0IElTX1NFUlZFUiA9ICFpc1dpbmRvd0RlZmluZWQgfHwgJ0Rlbm8nIGluIHdpbmRvdztcbi8vIFBvbHlmaWxsIHJlcXVlc3RBbmltYXRpb25GcmFtZVxuY29uc3QgckFGID0gKGYpPT5oYXNSZXF1ZXN0QW5pbWF0aW9uRnJhbWUoKSA/IHdpbmRvd1sncmVxdWVzdEFuaW1hdGlvbkZyYW1lJ10oZikgOiBzZXRUaW1lb3V0KGYsIDEpO1xuLy8gUmVhY3QgY3VycmVudGx5IHRocm93cyBhIHdhcm5pbmcgd2hlbiB1c2luZyB1c2VMYXlvdXRFZmZlY3Qgb24gdGhlIHNlcnZlci5cbi8vIFRvIGdldCBhcm91bmQgaXQsIHdlIGNhbiBjb25kaXRpb25hbGx5IHVzZUVmZmVjdCBvbiB0aGUgc2VydmVyIChuby1vcCkgYW5kXG4vLyB1c2VMYXlvdXRFZmZlY3QgaW4gdGhlIGJyb3dzZXIuXG5jb25zdCB1c2VJc29tb3JwaGljTGF5b3V0RWZmZWN0ID0gSVNfU0VSVkVSID8gdXNlRWZmZWN0IDogdXNlTGF5b3V0RWZmZWN0O1xuLy8gVGhpcyBhc3NpZ25tZW50IGlzIHRvIGV4dGVuZCB0aGUgTmF2aWdhdG9yIHR5cGUgdG8gdXNlIGVmZmVjdGl2ZVR5cGUuXG5jb25zdCBuYXZpZ2F0b3JDb25uZWN0aW9uID0gdHlwZW9mIG5hdmlnYXRvciAhPT0gJ3VuZGVmaW5lZCcgJiYgbmF2aWdhdG9yLmNvbm5lY3Rpb247XG4vLyBBZGp1c3QgdGhlIGNvbmZpZyBiYXNlZCBvbiBzbG93IGNvbm5lY3Rpb24gc3RhdHVzICg8PSA3MEticHMpLlxuY29uc3Qgc2xvd0Nvbm5lY3Rpb24gPSAhSVNfU0VSVkVSICYmIG5hdmlnYXRvckNvbm5lY3Rpb24gJiYgKFtcbiAgICAnc2xvdy0yZycsXG4gICAgJzJnJ1xuXS5pbmNsdWRlcyhuYXZpZ2F0b3JDb25uZWN0aW9uLmVmZmVjdGl2ZVR5cGUpIHx8IG5hdmlnYXRvckNvbm5lY3Rpb24uc2F2ZURhdGEpO1xuXG5jb25zdCBzZXJpYWxpemUgPSAoa2V5KT0+e1xuICAgIGlmIChpc0Z1bmN0aW9uKGtleSkpIHtcbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgIGtleSA9IGtleSgpO1xuICAgICAgICB9IGNhdGNoIChlcnIpIHtcbiAgICAgICAgICAgIC8vIGRlcGVuZGVuY2llcyBub3QgcmVhZHlcbiAgICAgICAgICAgIGtleSA9ICcnO1xuICAgICAgICB9XG4gICAgfVxuICAgIC8vIFVzZSB0aGUgb3JpZ2luYWwga2V5IGFzIHRoZSBhcmd1bWVudCBvZiBmZXRjaGVyLiBUaGlzIGNhbiBiZSBhIHN0cmluZyBvciBhblxuICAgIC8vIGFycmF5IG9mIHZhbHVlcy5cbiAgICBjb25zdCBhcmdzID0ga2V5O1xuICAgIC8vIElmIGtleSBpcyBub3QgZmFsc3ksIG9yIG5vdCBhbiBlbXB0eSBhcnJheSwgaGFzaCBpdC5cbiAgICBrZXkgPSB0eXBlb2Yga2V5ID09ICdzdHJpbmcnID8ga2V5IDogKEFycmF5LmlzQXJyYXkoa2V5KSA/IGtleS5sZW5ndGggOiBrZXkpID8gc3RhYmxlSGFzaChrZXkpIDogJyc7XG4gICAgcmV0dXJuIFtcbiAgICAgICAga2V5LFxuICAgICAgICBhcmdzXG4gICAgXTtcbn07XG5cbi8vIEdsb2JhbCB0aW1lc3RhbXAuXG5sZXQgX190aW1lc3RhbXAgPSAwO1xuY29uc3QgZ2V0VGltZXN0YW1wID0gKCk9PisrX190aW1lc3RhbXA7XG5cbmNvbnN0IEZPQ1VTX0VWRU5UID0gMDtcbmNvbnN0IFJFQ09OTkVDVF9FVkVOVCA9IDE7XG5jb25zdCBNVVRBVEVfRVZFTlQgPSAyO1xuY29uc3QgRVJST1JfUkVWQUxJREFURV9FVkVOVCA9IDM7XG5cbnZhciBjb25zdGFudHMgPSB7XG4gIF9fcHJvdG9fXzogbnVsbCxcbiAgRVJST1JfUkVWQUxJREFURV9FVkVOVDogRVJST1JfUkVWQUxJREFURV9FVkVOVCxcbiAgRk9DVVNfRVZFTlQ6IEZPQ1VTX0VWRU5ULFxuICBNVVRBVEVfRVZFTlQ6IE1VVEFURV9FVkVOVCxcbiAgUkVDT05ORUNUX0VWRU5UOiBSRUNPTk5FQ1RfRVZFTlRcbn07XG5cbmFzeW5jIGZ1bmN0aW9uIGludGVybmFsTXV0YXRlKC4uLmFyZ3MpIHtcbiAgICBjb25zdCBbY2FjaGUsIF9rZXksIF9kYXRhLCBfb3B0c10gPSBhcmdzO1xuICAgIC8vIFdoZW4gcGFzc2luZyBhcyBhIGJvb2xlYW4sIGl0J3MgZXhwbGljaXRseSB1c2VkIHRvIGRpc2FibGUvZW5hYmxlXG4gICAgLy8gcmV2YWxpZGF0aW9uLlxuICAgIGNvbnN0IG9wdGlvbnMgPSBtZXJnZU9iamVjdHMoe1xuICAgICAgICBwb3B1bGF0ZUNhY2hlOiB0cnVlLFxuICAgICAgICB0aHJvd09uRXJyb3I6IHRydWVcbiAgICB9LCB0eXBlb2YgX29wdHMgPT09ICdib29sZWFuJyA/IHtcbiAgICAgICAgcmV2YWxpZGF0ZTogX29wdHNcbiAgICB9IDogX29wdHMgfHwge30pO1xuICAgIGxldCBwb3B1bGF0ZUNhY2hlID0gb3B0aW9ucy5wb3B1bGF0ZUNhY2hlO1xuICAgIGNvbnN0IHJvbGxiYWNrT25FcnJvck9wdGlvbiA9IG9wdGlvbnMucm9sbGJhY2tPbkVycm9yO1xuICAgIGxldCBvcHRpbWlzdGljRGF0YSA9IG9wdGlvbnMub3B0aW1pc3RpY0RhdGE7XG4gICAgY29uc3QgcmV2YWxpZGF0ZSA9IG9wdGlvbnMucmV2YWxpZGF0ZSAhPT0gZmFsc2U7XG4gICAgY29uc3Qgcm9sbGJhY2tPbkVycm9yID0gKGVycm9yKT0+e1xuICAgICAgICByZXR1cm4gdHlwZW9mIHJvbGxiYWNrT25FcnJvck9wdGlvbiA9PT0gJ2Z1bmN0aW9uJyA/IHJvbGxiYWNrT25FcnJvck9wdGlvbihlcnJvcikgOiByb2xsYmFja09uRXJyb3JPcHRpb24gIT09IGZhbHNlO1xuICAgIH07XG4gICAgY29uc3QgdGhyb3dPbkVycm9yID0gb3B0aW9ucy50aHJvd09uRXJyb3I7XG4gICAgLy8gSWYgdGhlIHNlY29uZCBhcmd1bWVudCBpcyBhIGtleSBmaWx0ZXIsIHJldHVybiB0aGUgbXV0YXRpb24gcmVzdWx0cyBmb3IgYWxsXG4gICAgLy8gZmlsdGVyZWQga2V5cy5cbiAgICBpZiAoaXNGdW5jdGlvbihfa2V5KSkge1xuICAgICAgICBjb25zdCBrZXlGaWx0ZXIgPSBfa2V5O1xuICAgICAgICBjb25zdCBtYXRjaGVkS2V5cyA9IFtdO1xuICAgICAgICBjb25zdCBpdCA9IGNhY2hlLmtleXMoKTtcbiAgICAgICAgZm9yIChjb25zdCBrZXkgb2YgaXQpe1xuICAgICAgICAgICAgaWYgKC8vIFNraXAgdGhlIHNwZWNpYWwgdXNlU1dSSW5maW5pdGUgYW5kIHVzZVNXUlN1YnNjcmlwdGlvbiBrZXlzLlxuICAgICAgICAgICAgIS9eXFwkKGluZnxzdWIpXFwkLy50ZXN0KGtleSkgJiYga2V5RmlsdGVyKGNhY2hlLmdldChrZXkpLl9rKSkge1xuICAgICAgICAgICAgICAgIG1hdGNoZWRLZXlzLnB1c2goa2V5KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gUHJvbWlzZS5hbGwobWF0Y2hlZEtleXMubWFwKG11dGF0ZUJ5S2V5KSk7XG4gICAgfVxuICAgIHJldHVybiBtdXRhdGVCeUtleShfa2V5KTtcbiAgICBhc3luYyBmdW5jdGlvbiBtdXRhdGVCeUtleShfaykge1xuICAgICAgICAvLyBTZXJpYWxpemUga2V5XG4gICAgICAgIGNvbnN0IFtrZXldID0gc2VyaWFsaXplKF9rKTtcbiAgICAgICAgaWYgKCFrZXkpIHJldHVybjtcbiAgICAgICAgY29uc3QgW2dldCwgc2V0XSA9IGNyZWF0ZUNhY2hlSGVscGVyKGNhY2hlLCBrZXkpO1xuICAgICAgICBjb25zdCBbRVZFTlRfUkVWQUxJREFUT1JTLCBNVVRBVElPTiwgRkVUQ0gsIFBSRUxPQURdID0gU1dSR2xvYmFsU3RhdGUuZ2V0KGNhY2hlKTtcbiAgICAgICAgY29uc3QgcmV2YWxpZGF0b3JzID0gRVZFTlRfUkVWQUxJREFUT1JTW2tleV07XG4gICAgICAgIGNvbnN0IHN0YXJ0UmV2YWxpZGF0ZSA9ICgpPT57XG4gICAgICAgICAgICBpZiAocmV2YWxpZGF0ZSkge1xuICAgICAgICAgICAgICAgIC8vIEludmFsaWRhdGUgdGhlIGtleSBieSBkZWxldGluZyB0aGUgY29uY3VycmVudCByZXF1ZXN0IG1hcmtlcnMgc28gbmV3XG4gICAgICAgICAgICAgICAgLy8gcmVxdWVzdHMgd2lsbCBub3QgYmUgZGVkdXBlZC5cbiAgICAgICAgICAgICAgICBkZWxldGUgRkVUQ0hba2V5XTtcbiAgICAgICAgICAgICAgICBkZWxldGUgUFJFTE9BRFtrZXldO1xuICAgICAgICAgICAgICAgIGlmIChyZXZhbGlkYXRvcnMgJiYgcmV2YWxpZGF0b3JzWzBdKSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiByZXZhbGlkYXRvcnNbMF0oTVVUQVRFX0VWRU5UKS50aGVuKCgpPT5nZXQoKS5kYXRhKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gZ2V0KCkuZGF0YTtcbiAgICAgICAgfTtcbiAgICAgICAgLy8gSWYgdGhlcmUgaXMgbm8gbmV3IGRhdGEgcHJvdmlkZWQsIHJldmFsaWRhdGUgdGhlIGtleSB3aXRoIGN1cnJlbnQgc3RhdGUuXG4gICAgICAgIGlmIChhcmdzLmxlbmd0aCA8IDMpIHtcbiAgICAgICAgICAgIC8vIFJldmFsaWRhdGUgYW5kIGJyb2FkY2FzdCBzdGF0ZS5cbiAgICAgICAgICAgIHJldHVybiBzdGFydFJldmFsaWRhdGUoKTtcbiAgICAgICAgfVxuICAgICAgICBsZXQgZGF0YSA9IF9kYXRhO1xuICAgICAgICBsZXQgZXJyb3I7XG4gICAgICAgIC8vIFVwZGF0ZSBnbG9iYWwgdGltZXN0YW1wcy5cbiAgICAgICAgY29uc3QgYmVmb3JlTXV0YXRpb25UcyA9IGdldFRpbWVzdGFtcCgpO1xuICAgICAgICBNVVRBVElPTltrZXldID0gW1xuICAgICAgICAgICAgYmVmb3JlTXV0YXRpb25UcyxcbiAgICAgICAgICAgIDBcbiAgICAgICAgXTtcbiAgICAgICAgY29uc3QgaGFzT3B0aW1pc3RpY0RhdGEgPSAhaXNVbmRlZmluZWQob3B0aW1pc3RpY0RhdGEpO1xuICAgICAgICBjb25zdCBzdGF0ZSA9IGdldCgpO1xuICAgICAgICAvLyBgZGlzcGxheWVkRGF0YWAgaXMgdGhlIGN1cnJlbnQgdmFsdWUgb24gc2NyZWVuLiBJdCBjb3VsZCBiZSB0aGUgb3B0aW1pc3RpYyB2YWx1ZVxuICAgICAgICAvLyB0aGF0IGlzIGdvaW5nIHRvIGJlIG92ZXJyaWRkZW4gYnkgYSBgY29tbWl0dGVkRGF0YWAsIG9yIGdldCByZXZlcnRlZCBiYWNrLlxuICAgICAgICAvLyBgY29tbWl0dGVkRGF0YWAgaXMgdGhlIHZhbGlkYXRlZCB2YWx1ZSB0aGF0IGNvbWVzIGZyb20gYSBmZXRjaCBvciBtdXRhdGlvbi5cbiAgICAgICAgY29uc3QgZGlzcGxheWVkRGF0YSA9IHN0YXRlLmRhdGE7XG4gICAgICAgIGNvbnN0IGN1cnJlbnREYXRhID0gc3RhdGUuX2M7XG4gICAgICAgIGNvbnN0IGNvbW1pdHRlZERhdGEgPSBpc1VuZGVmaW5lZChjdXJyZW50RGF0YSkgPyBkaXNwbGF5ZWREYXRhIDogY3VycmVudERhdGE7XG4gICAgICAgIC8vIERvIG9wdGltaXN0aWMgZGF0YSB1cGRhdGUuXG4gICAgICAgIGlmIChoYXNPcHRpbWlzdGljRGF0YSkge1xuICAgICAgICAgICAgb3B0aW1pc3RpY0RhdGEgPSBpc0Z1bmN0aW9uKG9wdGltaXN0aWNEYXRhKSA/IG9wdGltaXN0aWNEYXRhKGNvbW1pdHRlZERhdGEsIGRpc3BsYXllZERhdGEpIDogb3B0aW1pc3RpY0RhdGE7XG4gICAgICAgICAgICAvLyBXaGVuIHdlIHNldCBvcHRpbWlzdGljIGRhdGEsIGJhY2t1cCB0aGUgY3VycmVudCBjb21taXR0ZWREYXRhIGRhdGEgaW4gYF9jYC5cbiAgICAgICAgICAgIHNldCh7XG4gICAgICAgICAgICAgICAgZGF0YTogb3B0aW1pc3RpY0RhdGEsXG4gICAgICAgICAgICAgICAgX2M6IGNvbW1pdHRlZERhdGFcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9XG4gICAgICAgIGlmIChpc0Z1bmN0aW9uKGRhdGEpKSB7XG4gICAgICAgICAgICAvLyBgZGF0YWAgaXMgYSBmdW5jdGlvbiwgY2FsbCBpdCBwYXNzaW5nIGN1cnJlbnQgY2FjaGUgdmFsdWUuXG4gICAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgICAgIGRhdGEgPSBkYXRhKGNvbW1pdHRlZERhdGEpO1xuICAgICAgICAgICAgfSBjYXRjaCAoZXJyKSB7XG4gICAgICAgICAgICAgICAgLy8gSWYgaXQgdGhyb3dzIGFuIGVycm9yIHN5bmNocm9ub3VzbHksIHdlIHNob3VsZG4ndCB1cGRhdGUgdGhlIGNhY2hlLlxuICAgICAgICAgICAgICAgIGVycm9yID0gZXJyO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIC8vIGBkYXRhYCBpcyBhIHByb21pc2UvdGhlbmFibGUsIHJlc29sdmUgdGhlIGZpbmFsIGRhdGEgZmlyc3QuXG4gICAgICAgIGlmIChkYXRhICYmIGlzUHJvbWlzZUxpa2UoZGF0YSkpIHtcbiAgICAgICAgICAgIC8vIFRoaXMgbWVhbnMgdGhhdCB0aGUgbXV0YXRpb24gaXMgYXN5bmMsIHdlIG5lZWQgdG8gY2hlY2sgdGltZXN0YW1wcyB0b1xuICAgICAgICAgICAgLy8gYXZvaWQgcmFjZSBjb25kaXRpb25zLlxuICAgICAgICAgICAgZGF0YSA9IGF3YWl0IGRhdGEuY2F0Y2goKGVycik9PntcbiAgICAgICAgICAgICAgICBlcnJvciA9IGVycjtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgLy8gQ2hlY2sgaWYgb3RoZXIgbXV0YXRpb25zIGhhdmUgb2NjdXJyZWQgc2luY2Ugd2UndmUgc3RhcnRlZCB0aGlzIG11dGF0aW9uLlxuICAgICAgICAgICAgLy8gSWYgdGhlcmUncyBhIHJhY2Ugd2UgZG9uJ3QgdXBkYXRlIGNhY2hlIG9yIGJyb2FkY2FzdCB0aGUgY2hhbmdlLFxuICAgICAgICAgICAgLy8ganVzdCByZXR1cm4gdGhlIGRhdGEuXG4gICAgICAgICAgICBpZiAoYmVmb3JlTXV0YXRpb25UcyAhPT0gTVVUQVRJT05ba2V5XVswXSkge1xuICAgICAgICAgICAgICAgIGlmIChlcnJvcikgdGhyb3cgZXJyb3I7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGRhdGE7XG4gICAgICAgICAgICB9IGVsc2UgaWYgKGVycm9yICYmIGhhc09wdGltaXN0aWNEYXRhICYmIHJvbGxiYWNrT25FcnJvcihlcnJvcikpIHtcbiAgICAgICAgICAgICAgICAvLyBSb2xsYmFjay4gQWx3YXlzIHBvcHVsYXRlIHRoZSBjYWNoZSBpbiB0aGlzIGNhc2UgYnV0IHdpdGhvdXRcbiAgICAgICAgICAgICAgICAvLyB0cmFuc2Zvcm1pbmcgdGhlIGRhdGEuXG4gICAgICAgICAgICAgICAgcG9wdWxhdGVDYWNoZSA9IHRydWU7XG4gICAgICAgICAgICAgICAgZGF0YSA9IGNvbW1pdHRlZERhdGE7XG4gICAgICAgICAgICAgICAgLy8gUmVzZXQgZGF0YSB0byBiZSB0aGUgbGF0ZXN0IGNvbW1pdHRlZCBkYXRhLCBhbmQgY2xlYXIgdGhlIGBfY2AgdmFsdWUuXG4gICAgICAgICAgICAgICAgc2V0KHtcbiAgICAgICAgICAgICAgICAgICAgZGF0YSxcbiAgICAgICAgICAgICAgICAgICAgX2M6IFVOREVGSU5FRFxuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIC8vIElmIHdlIHNob3VsZCB3cml0ZSBiYWNrIHRoZSBjYWNoZSBhZnRlciByZXF1ZXN0LlxuICAgICAgICBpZiAocG9wdWxhdGVDYWNoZSkge1xuICAgICAgICAgICAgaWYgKCFlcnJvcikge1xuICAgICAgICAgICAgICAgIC8vIFRyYW5zZm9ybSB0aGUgcmVzdWx0IGludG8gZGF0YS5cbiAgICAgICAgICAgICAgICBpZiAoaXNGdW5jdGlvbihwb3B1bGF0ZUNhY2hlKSkge1xuICAgICAgICAgICAgICAgICAgICBkYXRhID0gcG9wdWxhdGVDYWNoZShkYXRhLCBjb21taXR0ZWREYXRhKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgLy8gT25seSB1cGRhdGUgY2FjaGVkIGRhdGEgYW5kIHJlc2V0IHRoZSBlcnJvciBpZiB0aGVyZSdzIG5vIGVycm9yLiBEYXRhIGNhbiBiZSBgdW5kZWZpbmVkYCBoZXJlLlxuICAgICAgICAgICAgICAgIHNldCh7XG4gICAgICAgICAgICAgICAgICAgIGRhdGEsXG4gICAgICAgICAgICAgICAgICAgIGVycm9yOiBVTkRFRklORUQsXG4gICAgICAgICAgICAgICAgICAgIF9jOiBVTkRFRklORURcbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICAvLyBSZXNldCB0aGUgdGltZXN0YW1wIHRvIG1hcmsgdGhlIG11dGF0aW9uIGhhcyBlbmRlZC5cbiAgICAgICAgTVVUQVRJT05ba2V5XVsxXSA9IGdldFRpbWVzdGFtcCgpO1xuICAgICAgICAvLyBVcGRhdGUgZXhpc3RpbmcgU1dSIEhvb2tzJyBpbnRlcm5hbCBzdGF0ZXM6XG4gICAgICAgIGNvbnN0IHJlcyA9IGF3YWl0IHN0YXJ0UmV2YWxpZGF0ZSgpO1xuICAgICAgICAvLyBUaGUgbXV0YXRpb24gYW5kIHJldmFsaWRhdGlvbiBhcmUgZW5kZWQsIHdlIGNhbiBjbGVhciBpdCBzaW5jZSB0aGUgZGF0YSBpc1xuICAgICAgICAvLyBub3QgYW4gb3B0aW1pc3RpYyB2YWx1ZSBhbnltb3JlLlxuICAgICAgICBzZXQoe1xuICAgICAgICAgICAgX2M6IFVOREVGSU5FRFxuICAgICAgICB9KTtcbiAgICAgICAgLy8gVGhyb3cgZXJyb3Igb3IgcmV0dXJuIGRhdGFcbiAgICAgICAgaWYgKGVycm9yKSB7XG4gICAgICAgICAgICBpZiAodGhyb3dPbkVycm9yKSB0aHJvdyBlcnJvcjtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gcG9wdWxhdGVDYWNoZSA/IHJlcyA6IGRhdGE7XG4gICAgfVxufVxuXG5jb25zdCByZXZhbGlkYXRlQWxsS2V5cyA9IChyZXZhbGlkYXRvcnMsIHR5cGUpPT57XG4gICAgZm9yKGNvbnN0IGtleSBpbiByZXZhbGlkYXRvcnMpe1xuICAgICAgICBpZiAocmV2YWxpZGF0b3JzW2tleV1bMF0pIHJldmFsaWRhdG9yc1trZXldWzBdKHR5cGUpO1xuICAgIH1cbn07XG5jb25zdCBpbml0Q2FjaGUgPSAocHJvdmlkZXIsIG9wdGlvbnMpPT57XG4gICAgLy8gVGhlIGdsb2JhbCBzdGF0ZSBmb3IgYSBzcGVjaWZpYyBwcm92aWRlciB3aWxsIGJlIHVzZWQgdG8gZGVkdXBsaWNhdGVcbiAgICAvLyByZXF1ZXN0cyBhbmQgc3RvcmUgbGlzdGVuZXJzLiBBcyB3ZWxsIGFzIGEgbXV0YXRlIGZ1bmN0aW9uIHRoYXQgaXMgYm91bmQgdG9cbiAgICAvLyB0aGUgY2FjaGUuXG4gICAgLy8gVGhlIHByb3ZpZGVyJ3MgZ2xvYmFsIHN0YXRlIG1pZ2h0IGJlIGFscmVhZHkgaW5pdGlhbGl6ZWQuIExldCdzIHRyeSB0byBnZXQgdGhlXG4gICAgLy8gZ2xvYmFsIHN0YXRlIGFzc29jaWF0ZWQgd2l0aCB0aGUgcHJvdmlkZXIgZmlyc3QuXG4gICAgaWYgKCFTV1JHbG9iYWxTdGF0ZS5oYXMocHJvdmlkZXIpKSB7XG4gICAgICAgIGNvbnN0IG9wdHMgPSBtZXJnZU9iamVjdHMoZGVmYXVsdENvbmZpZ09wdGlvbnMsIG9wdGlvbnMpO1xuICAgICAgICAvLyBJZiB0aGVyZSdzIG5vIGdsb2JhbCBzdGF0ZSBib3VuZCB0byB0aGUgcHJvdmlkZXIsIGNyZWF0ZSBhIG5ldyBvbmUgd2l0aCB0aGVcbiAgICAgICAgLy8gbmV3IG11dGF0ZSBmdW5jdGlvbi5cbiAgICAgICAgY29uc3QgRVZFTlRfUkVWQUxJREFUT1JTID0ge307XG4gICAgICAgIGNvbnN0IG11dGF0ZSA9IGludGVybmFsTXV0YXRlLmJpbmQoVU5ERUZJTkVELCBwcm92aWRlcik7XG4gICAgICAgIGxldCB1bm1vdW50ID0gbm9vcDtcbiAgICAgICAgY29uc3Qgc3Vic2NyaXB0aW9ucyA9IHt9O1xuICAgICAgICBjb25zdCBzdWJzY3JpYmUgPSAoa2V5LCBjYWxsYmFjayk9PntcbiAgICAgICAgICAgIGNvbnN0IHN1YnMgPSBzdWJzY3JpcHRpb25zW2tleV0gfHwgW107XG4gICAgICAgICAgICBzdWJzY3JpcHRpb25zW2tleV0gPSBzdWJzO1xuICAgICAgICAgICAgc3Vicy5wdXNoKGNhbGxiYWNrKTtcbiAgICAgICAgICAgIHJldHVybiAoKT0+c3Vicy5zcGxpY2Uoc3Vicy5pbmRleE9mKGNhbGxiYWNrKSwgMSk7XG4gICAgICAgIH07XG4gICAgICAgIGNvbnN0IHNldHRlciA9IChrZXksIHZhbHVlLCBwcmV2KT0+e1xuICAgICAgICAgICAgcHJvdmlkZXIuc2V0KGtleSwgdmFsdWUpO1xuICAgICAgICAgICAgY29uc3Qgc3VicyA9IHN1YnNjcmlwdGlvbnNba2V5XTtcbiAgICAgICAgICAgIGlmIChzdWJzKSB7XG4gICAgICAgICAgICAgICAgZm9yIChjb25zdCBmbiBvZiBzdWJzKXtcbiAgICAgICAgICAgICAgICAgICAgZm4odmFsdWUsIHByZXYpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfTtcbiAgICAgICAgY29uc3QgaW5pdFByb3ZpZGVyID0gKCk9PntcbiAgICAgICAgICAgIGlmICghU1dSR2xvYmFsU3RhdGUuaGFzKHByb3ZpZGVyKSkge1xuICAgICAgICAgICAgICAgIC8vIFVwZGF0ZSB0aGUgc3RhdGUgaWYgaXQncyBuZXcsIG9yIGlmIHRoZSBwcm92aWRlciBoYXMgYmVlbiBleHRlbmRlZC5cbiAgICAgICAgICAgICAgICBTV1JHbG9iYWxTdGF0ZS5zZXQocHJvdmlkZXIsIFtcbiAgICAgICAgICAgICAgICAgICAgRVZFTlRfUkVWQUxJREFUT1JTLFxuICAgICAgICAgICAgICAgICAgICB7fSxcbiAgICAgICAgICAgICAgICAgICAge30sXG4gICAgICAgICAgICAgICAgICAgIHt9LFxuICAgICAgICAgICAgICAgICAgICBtdXRhdGUsXG4gICAgICAgICAgICAgICAgICAgIHNldHRlcixcbiAgICAgICAgICAgICAgICAgICAgc3Vic2NyaWJlXG4gICAgICAgICAgICAgICAgXSk7XG4gICAgICAgICAgICAgICAgaWYgKCFJU19TRVJWRVIpIHtcbiAgICAgICAgICAgICAgICAgICAgLy8gV2hlbiBsaXN0ZW5pbmcgdG8gdGhlIG5hdGl2ZSBldmVudHMgZm9yIGF1dG8gcmV2YWxpZGF0aW9ucyxcbiAgICAgICAgICAgICAgICAgICAgLy8gd2UgaW50ZW50aW9uYWxseSBwdXQgYSBkZWxheSAoc2V0VGltZW91dCkgaGVyZSB0byBtYWtlIHN1cmUgdGhleSBhcmVcbiAgICAgICAgICAgICAgICAgICAgLy8gZmlyZWQgYWZ0ZXIgaW1tZWRpYXRlIEphdmFTY3JpcHQgZXhlY3V0aW9ucywgd2hpY2ggY2FuIGJlXG4gICAgICAgICAgICAgICAgICAgIC8vIFJlYWN0J3Mgc3RhdGUgdXBkYXRlcy5cbiAgICAgICAgICAgICAgICAgICAgLy8gVGhpcyBhdm9pZHMgc29tZSB1bm5lY2Vzc2FyeSByZXZhbGlkYXRpb25zIHN1Y2ggYXNcbiAgICAgICAgICAgICAgICAgICAgLy8gaHR0cHM6Ly9naXRodWIuY29tL3ZlcmNlbC9zd3IvaXNzdWVzLzE2ODAuXG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IHJlbGVhc2VGb2N1cyA9IG9wdHMuaW5pdEZvY3VzKHNldFRpbWVvdXQuYmluZChVTkRFRklORUQsIHJldmFsaWRhdGVBbGxLZXlzLmJpbmQoVU5ERUZJTkVELCBFVkVOVF9SRVZBTElEQVRPUlMsIEZPQ1VTX0VWRU5UKSkpO1xuICAgICAgICAgICAgICAgICAgICBjb25zdCByZWxlYXNlUmVjb25uZWN0ID0gb3B0cy5pbml0UmVjb25uZWN0KHNldFRpbWVvdXQuYmluZChVTkRFRklORUQsIHJldmFsaWRhdGVBbGxLZXlzLmJpbmQoVU5ERUZJTkVELCBFVkVOVF9SRVZBTElEQVRPUlMsIFJFQ09OTkVDVF9FVkVOVCkpKTtcbiAgICAgICAgICAgICAgICAgICAgdW5tb3VudCA9ICgpPT57XG4gICAgICAgICAgICAgICAgICAgICAgICByZWxlYXNlRm9jdXMgJiYgcmVsZWFzZUZvY3VzKCk7XG4gICAgICAgICAgICAgICAgICAgICAgICByZWxlYXNlUmVjb25uZWN0ICYmIHJlbGVhc2VSZWNvbm5lY3QoKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vIFdoZW4gdW4tbW91bnRpbmcsIHdlIG5lZWQgdG8gcmVtb3ZlIHRoZSBjYWNoZSBwcm92aWRlciBmcm9tIHRoZSBzdGF0ZVxuICAgICAgICAgICAgICAgICAgICAgICAgLy8gc3RvcmFnZSB0b28gYmVjYXVzZSBpdCdzIGEgc2lkZS1lZmZlY3QuIE90aGVyd2lzZSwgd2hlbiByZS1tb3VudGluZyB3ZVxuICAgICAgICAgICAgICAgICAgICAgICAgLy8gd2lsbCBub3QgcmUtcmVnaXN0ZXIgdGhvc2UgZXZlbnQgbGlzdGVuZXJzLlxuICAgICAgICAgICAgICAgICAgICAgICAgU1dSR2xvYmFsU3RhdGUuZGVsZXRlKHByb3ZpZGVyKTtcbiAgICAgICAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH07XG4gICAgICAgIGluaXRQcm92aWRlcigpO1xuICAgICAgICAvLyBUaGlzIGlzIGEgbmV3IHByb3ZpZGVyLCB3ZSBuZWVkIHRvIGluaXRpYWxpemUgaXQgYW5kIHNldHVwIERPTSBldmVudHNcbiAgICAgICAgLy8gbGlzdGVuZXJzIGZvciBgZm9jdXNgIGFuZCBgcmVjb25uZWN0YCBhY3Rpb25zLlxuICAgICAgICAvLyBXZSBtaWdodCB3YW50IHRvIGluamVjdCBhbiBleHRyYSBsYXllciBvbiB0b3Agb2YgYHByb3ZpZGVyYCBpbiB0aGUgZnV0dXJlLFxuICAgICAgICAvLyBzdWNoIGFzIGtleSBzZXJpYWxpemF0aW9uLCBhdXRvIEdDLCBldGMuXG4gICAgICAgIC8vIEZvciBub3csIGl0J3MganVzdCBhIGBNYXBgIGludGVyZmFjZSB3aXRob3V0IGFueSBtb2RpZmljYXRpb25zLlxuICAgICAgICByZXR1cm4gW1xuICAgICAgICAgICAgcHJvdmlkZXIsXG4gICAgICAgICAgICBtdXRhdGUsXG4gICAgICAgICAgICBpbml0UHJvdmlkZXIsXG4gICAgICAgICAgICB1bm1vdW50XG4gICAgICAgIF07XG4gICAgfVxuICAgIHJldHVybiBbXG4gICAgICAgIHByb3ZpZGVyLFxuICAgICAgICBTV1JHbG9iYWxTdGF0ZS5nZXQocHJvdmlkZXIpWzRdXG4gICAgXTtcbn07XG5cbi8vIGVycm9yIHJldHJ5XG5jb25zdCBvbkVycm9yUmV0cnkgPSAoXywgX18sIGNvbmZpZywgcmV2YWxpZGF0ZSwgb3B0cyk9PntcbiAgICBjb25zdCBtYXhSZXRyeUNvdW50ID0gY29uZmlnLmVycm9yUmV0cnlDb3VudDtcbiAgICBjb25zdCBjdXJyZW50UmV0cnlDb3VudCA9IG9wdHMucmV0cnlDb3VudDtcbiAgICAvLyBFeHBvbmVudGlhbCBiYWNrb2ZmXG4gICAgY29uc3QgdGltZW91dCA9IH5+KChNYXRoLnJhbmRvbSgpICsgMC41KSAqICgxIDw8IChjdXJyZW50UmV0cnlDb3VudCA8IDggPyBjdXJyZW50UmV0cnlDb3VudCA6IDgpKSkgKiBjb25maWcuZXJyb3JSZXRyeUludGVydmFsO1xuICAgIGlmICghaXNVbmRlZmluZWQobWF4UmV0cnlDb3VudCkgJiYgY3VycmVudFJldHJ5Q291bnQgPiBtYXhSZXRyeUNvdW50KSB7XG4gICAgICAgIHJldHVybjtcbiAgICB9XG4gICAgc2V0VGltZW91dChyZXZhbGlkYXRlLCB0aW1lb3V0LCBvcHRzKTtcbn07XG5jb25zdCBjb21wYXJlID0gKGN1cnJlbnREYXRhLCBuZXdEYXRhKT0+c3RhYmxlSGFzaChjdXJyZW50RGF0YSkgPT0gc3RhYmxlSGFzaChuZXdEYXRhKTtcbi8vIERlZmF1bHQgY2FjaGUgcHJvdmlkZXJcbmNvbnN0IFtjYWNoZSwgbXV0YXRlXSA9IGluaXRDYWNoZShuZXcgTWFwKCkpO1xuLy8gRGVmYXVsdCBjb25maWdcbmNvbnN0IGRlZmF1bHRDb25maWcgPSBtZXJnZU9iamVjdHMoe1xuICAgIC8vIGV2ZW50c1xuICAgIG9uTG9hZGluZ1Nsb3c6IG5vb3AsXG4gICAgb25TdWNjZXNzOiBub29wLFxuICAgIG9uRXJyb3I6IG5vb3AsXG4gICAgb25FcnJvclJldHJ5LFxuICAgIG9uRGlzY2FyZGVkOiBub29wLFxuICAgIC8vIHN3aXRjaGVzXG4gICAgcmV2YWxpZGF0ZU9uRm9jdXM6IHRydWUsXG4gICAgcmV2YWxpZGF0ZU9uUmVjb25uZWN0OiB0cnVlLFxuICAgIHJldmFsaWRhdGVJZlN0YWxlOiB0cnVlLFxuICAgIHNob3VsZFJldHJ5T25FcnJvcjogdHJ1ZSxcbiAgICAvLyB0aW1lb3V0c1xuICAgIGVycm9yUmV0cnlJbnRlcnZhbDogc2xvd0Nvbm5lY3Rpb24gPyAxMDAwMCA6IDUwMDAsXG4gICAgZm9jdXNUaHJvdHRsZUludGVydmFsOiA1ICogMTAwMCxcbiAgICBkZWR1cGluZ0ludGVydmFsOiAyICogMTAwMCxcbiAgICBsb2FkaW5nVGltZW91dDogc2xvd0Nvbm5lY3Rpb24gPyA1MDAwIDogMzAwMCxcbiAgICAvLyBwcm92aWRlcnNcbiAgICBjb21wYXJlLFxuICAgIGlzUGF1c2VkOiAoKT0+ZmFsc2UsXG4gICAgY2FjaGUsXG4gICAgbXV0YXRlLFxuICAgIGZhbGxiYWNrOiB7fVxufSwgLy8gdXNlIHdlYiBwcmVzZXQgYnkgZGVmYXVsdFxucHJlc2V0KTtcblxuY29uc3QgbWVyZ2VDb25maWdzID0gKGEsIGIpPT57XG4gICAgLy8gTmVlZCB0byBjcmVhdGUgYSBuZXcgb2JqZWN0IHRvIGF2b2lkIG11dGF0aW5nIHRoZSBvcmlnaW5hbCBoZXJlLlxuICAgIGNvbnN0IHYgPSBtZXJnZU9iamVjdHMoYSwgYik7XG4gICAgLy8gSWYgdHdvIGNvbmZpZ3MgYXJlIHByb3ZpZGVkLCBtZXJnZSB0aGVpciBgdXNlYCBhbmQgYGZhbGxiYWNrYCBvcHRpb25zLlxuICAgIGlmIChiKSB7XG4gICAgICAgIGNvbnN0IHsgdXNlOiB1MSAsIGZhbGxiYWNrOiBmMSAgfSA9IGE7XG4gICAgICAgIGNvbnN0IHsgdXNlOiB1MiAsIGZhbGxiYWNrOiBmMiAgfSA9IGI7XG4gICAgICAgIGlmICh1MSAmJiB1Mikge1xuICAgICAgICAgICAgdi51c2UgPSB1MS5jb25jYXQodTIpO1xuICAgICAgICB9XG4gICAgICAgIGlmIChmMSAmJiBmMikge1xuICAgICAgICAgICAgdi5mYWxsYmFjayA9IG1lcmdlT2JqZWN0cyhmMSwgZjIpO1xuICAgICAgICB9XG4gICAgfVxuICAgIHJldHVybiB2O1xufTtcblxuY29uc3QgU1dSQ29uZmlnQ29udGV4dCA9IGNyZWF0ZUNvbnRleHQoe30pO1xuY29uc3QgU1dSQ29uZmlnID0gKHByb3BzKT0+e1xuICAgIGNvbnN0IHsgdmFsdWUgIH0gPSBwcm9wcztcbiAgICBjb25zdCBwYXJlbnRDb25maWcgPSB1c2VDb250ZXh0KFNXUkNvbmZpZ0NvbnRleHQpO1xuICAgIGNvbnN0IGlzRnVuY3Rpb25hbENvbmZpZyA9IGlzRnVuY3Rpb24odmFsdWUpO1xuICAgIGNvbnN0IGNvbmZpZyA9IHVzZU1lbW8oKCk9PmlzRnVuY3Rpb25hbENvbmZpZyA/IHZhbHVlKHBhcmVudENvbmZpZykgOiB2YWx1ZSwgW1xuICAgICAgICBpc0Z1bmN0aW9uYWxDb25maWcsXG4gICAgICAgIHBhcmVudENvbmZpZyxcbiAgICAgICAgdmFsdWVcbiAgICBdKTtcbiAgICAvLyBFeHRlbmQgcGFyZW50IGNvbnRleHQgdmFsdWVzIGFuZCBtaWRkbGV3YXJlLlxuICAgIGNvbnN0IGV4dGVuZGVkQ29uZmlnID0gdXNlTWVtbygoKT0+aXNGdW5jdGlvbmFsQ29uZmlnID8gY29uZmlnIDogbWVyZ2VDb25maWdzKHBhcmVudENvbmZpZywgY29uZmlnKSwgW1xuICAgICAgICBpc0Z1bmN0aW9uYWxDb25maWcsXG4gICAgICAgIHBhcmVudENvbmZpZyxcbiAgICAgICAgY29uZmlnXG4gICAgXSk7XG4gICAgLy8gU2hvdWxkIG5vdCB1c2UgdGhlIGluaGVyaXRlZCBwcm92aWRlci5cbiAgICBjb25zdCBwcm92aWRlciA9IGNvbmZpZyAmJiBjb25maWcucHJvdmlkZXI7XG4gICAgLy8gaW5pdGlhbGl6ZSB0aGUgY2FjaGUgb25seSBvbiBmaXJzdCBhY2Nlc3MuXG4gICAgY29uc3QgY2FjaGVDb250ZXh0UmVmID0gdXNlUmVmKFVOREVGSU5FRCk7XG4gICAgaWYgKHByb3ZpZGVyICYmICFjYWNoZUNvbnRleHRSZWYuY3VycmVudCkge1xuICAgICAgICBjYWNoZUNvbnRleHRSZWYuY3VycmVudCA9IGluaXRDYWNoZShwcm92aWRlcihleHRlbmRlZENvbmZpZy5jYWNoZSB8fCBjYWNoZSksIGNvbmZpZyk7XG4gICAgfVxuICAgIGNvbnN0IGNhY2hlQ29udGV4dCA9IGNhY2hlQ29udGV4dFJlZi5jdXJyZW50O1xuICAgIC8vIE92ZXJyaWRlIHRoZSBjYWNoZSBpZiBhIG5ldyBwcm92aWRlciBpcyBnaXZlbi5cbiAgICBpZiAoY2FjaGVDb250ZXh0KSB7XG4gICAgICAgIGV4dGVuZGVkQ29uZmlnLmNhY2hlID0gY2FjaGVDb250ZXh0WzBdO1xuICAgICAgICBleHRlbmRlZENvbmZpZy5tdXRhdGUgPSBjYWNoZUNvbnRleHRbMV07XG4gICAgfVxuICAgIC8vIFVuc3Vic2NyaWJlIGV2ZW50cy5cbiAgICB1c2VJc29tb3JwaGljTGF5b3V0RWZmZWN0KCgpPT57XG4gICAgICAgIGlmIChjYWNoZUNvbnRleHQpIHtcbiAgICAgICAgICAgIGNhY2hlQ29udGV4dFsyXSAmJiBjYWNoZUNvbnRleHRbMl0oKTtcbiAgICAgICAgICAgIHJldHVybiBjYWNoZUNvbnRleHRbM107XG4gICAgICAgIH1cbiAgICB9LCBbXSk7XG4gICAgcmV0dXJuIGNyZWF0ZUVsZW1lbnQoU1dSQ29uZmlnQ29udGV4dC5Qcm92aWRlciwgbWVyZ2VPYmplY3RzKHByb3BzLCB7XG4gICAgICAgIHZhbHVlOiBleHRlbmRlZENvbmZpZ1xuICAgIH0pKTtcbn07XG5cbi8vIEB0cy1leHBlY3QtZXJyb3JcbmNvbnN0IGVuYWJsZURldnRvb2xzID0gaXNXaW5kb3dEZWZpbmVkICYmIHdpbmRvdy5fX1NXUl9ERVZUT09MU19VU0VfXztcbmNvbnN0IHVzZSA9IGVuYWJsZURldnRvb2xzID8gd2luZG93Ll9fU1dSX0RFVlRPT0xTX1VTRV9fIDogW107XG5jb25zdCBzZXR1cERldlRvb2xzID0gKCk9PntcbiAgICBpZiAoZW5hYmxlRGV2dG9vbHMpIHtcbiAgICAgICAgLy8gQHRzLWV4cGVjdC1lcnJvclxuICAgICAgICB3aW5kb3cuX19TV1JfREVWVE9PTFNfUkVBQ1RfXyA9IFJlYWN0O1xuICAgIH1cbn07XG5cbmNvbnN0IG5vcm1hbGl6ZSA9IChhcmdzKT0+e1xuICAgIHJldHVybiBpc0Z1bmN0aW9uKGFyZ3NbMV0pID8gW1xuICAgICAgICBhcmdzWzBdLFxuICAgICAgICBhcmdzWzFdLFxuICAgICAgICBhcmdzWzJdIHx8IHt9XG4gICAgXSA6IFtcbiAgICAgICAgYXJnc1swXSxcbiAgICAgICAgbnVsbCxcbiAgICAgICAgKGFyZ3NbMV0gPT09IG51bGwgPyBhcmdzWzJdIDogYXJnc1sxXSkgfHwge31cbiAgICBdO1xufTtcblxuY29uc3QgdXNlU1dSQ29uZmlnID0gKCk9PntcbiAgICByZXR1cm4gbWVyZ2VPYmplY3RzKGRlZmF1bHRDb25maWcsIHVzZUNvbnRleHQoU1dSQ29uZmlnQ29udGV4dCkpO1xufTtcblxuY29uc3QgcHJlbG9hZCA9IChrZXlfLCBmZXRjaGVyKT0+e1xuICAgIGNvbnN0IFtrZXksIGZuQXJnXSA9IHNlcmlhbGl6ZShrZXlfKTtcbiAgICBjb25zdCBbLCAsICwgUFJFTE9BRF0gPSBTV1JHbG9iYWxTdGF0ZS5nZXQoY2FjaGUpO1xuICAgIC8vIFByZXZlbnQgcHJlbG9hZCB0byBiZSBjYWxsZWQgbXVsdGlwbGUgdGltZXMgYmVmb3JlIHVzZWQuXG4gICAgaWYgKFBSRUxPQURba2V5XSkgcmV0dXJuIFBSRUxPQURba2V5XTtcbiAgICBjb25zdCByZXEgPSBmZXRjaGVyKGZuQXJnKTtcbiAgICBQUkVMT0FEW2tleV0gPSByZXE7XG4gICAgcmV0dXJuIHJlcTtcbn07XG5jb25zdCBtaWRkbGV3YXJlID0gKHVzZVNXUk5leHQpPT4oa2V5XywgZmV0Y2hlcl8sIGNvbmZpZyk9PntcbiAgICAgICAgLy8gZmV0Y2hlciBtaWdodCBiZSBhIHN5bmMgZnVuY3Rpb24sIHNvIHRoaXMgc2hvdWxkIG5vdCBiZSBhbiBhc3luYyBmdW5jdGlvblxuICAgICAgICBjb25zdCBmZXRjaGVyID0gZmV0Y2hlcl8gJiYgKCguLi5hcmdzKT0+e1xuICAgICAgICAgICAgY29uc3QgW2tleV0gPSBzZXJpYWxpemUoa2V5Xyk7XG4gICAgICAgICAgICBjb25zdCBbLCAsICwgUFJFTE9BRF0gPSBTV1JHbG9iYWxTdGF0ZS5nZXQoY2FjaGUpO1xuICAgICAgICAgICAgY29uc3QgcmVxID0gUFJFTE9BRFtrZXldO1xuICAgICAgICAgICAgaWYgKGlzVW5kZWZpbmVkKHJlcSkpIHJldHVybiBmZXRjaGVyXyguLi5hcmdzKTtcbiAgICAgICAgICAgIGRlbGV0ZSBQUkVMT0FEW2tleV07XG4gICAgICAgICAgICByZXR1cm4gcmVxO1xuICAgICAgICB9KTtcbiAgICAgICAgcmV0dXJuIHVzZVNXUk5leHQoa2V5XywgZmV0Y2hlciwgY29uZmlnKTtcbiAgICB9O1xuXG5jb25zdCBCVUlMVF9JTl9NSURETEVXQVJFID0gdXNlLmNvbmNhdChtaWRkbGV3YXJlKTtcblxuLy8gSXQncyB0cmlja3kgdG8gcGFzcyBnZW5lcmljIHR5cGVzIGFzIHBhcmFtZXRlcnMsIHNvIHdlIGp1c3QgZGlyZWN0bHkgb3ZlcnJpZGVcbi8vIHRoZSB0eXBlcyBoZXJlLlxuY29uc3Qgd2l0aEFyZ3MgPSAoaG9vayk9PntcbiAgICByZXR1cm4gZnVuY3Rpb24gdXNlU1dSQXJncyguLi5hcmdzKSB7XG4gICAgICAgIC8vIEdldCB0aGUgZGVmYXVsdCBhbmQgaW5oZXJpdGVkIGNvbmZpZ3VyYXRpb24uXG4gICAgICAgIGNvbnN0IGZhbGxiYWNrQ29uZmlnID0gdXNlU1dSQ29uZmlnKCk7XG4gICAgICAgIC8vIE5vcm1hbGl6ZSBhcmd1bWVudHMuXG4gICAgICAgIGNvbnN0IFtrZXksIGZuLCBfY29uZmlnXSA9IG5vcm1hbGl6ZShhcmdzKTtcbiAgICAgICAgLy8gTWVyZ2UgY29uZmlndXJhdGlvbnMuXG4gICAgICAgIGNvbnN0IGNvbmZpZyA9IG1lcmdlQ29uZmlncyhmYWxsYmFja0NvbmZpZywgX2NvbmZpZyk7XG4gICAgICAgIC8vIEFwcGx5IG1pZGRsZXdhcmVcbiAgICAgICAgbGV0IG5leHQgPSBob29rO1xuICAgICAgICBjb25zdCB7IHVzZSAgfSA9IGNvbmZpZztcbiAgICAgICAgY29uc3QgbWlkZGxld2FyZSA9ICh1c2UgfHwgW10pLmNvbmNhdChCVUlMVF9JTl9NSURETEVXQVJFKTtcbiAgICAgICAgZm9yKGxldCBpID0gbWlkZGxld2FyZS5sZW5ndGg7IGktLTspe1xuICAgICAgICAgICAgbmV4dCA9IG1pZGRsZXdhcmVbaV0obmV4dCk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIG5leHQoa2V5LCBmbiB8fCBjb25maWcuZmV0Y2hlciB8fCBudWxsLCBjb25maWcpO1xuICAgIH07XG59O1xuXG4vKipcbiAqIEFuIGltcGxlbWVudGF0aW9uIG9mIHN0YXRlIHdpdGggZGVwZW5kZW5jeS10cmFja2luZy5cbiAqLyBjb25zdCB1c2VTdGF0ZVdpdGhEZXBzID0gKHN0YXRlKT0+e1xuICAgIGNvbnN0IHJlcmVuZGVyID0gdXNlU3RhdGUoe30pWzFdO1xuICAgIGNvbnN0IHVubW91bnRlZFJlZiA9IHVzZVJlZihmYWxzZSk7XG4gICAgY29uc3Qgc3RhdGVSZWYgPSB1c2VSZWYoc3RhdGUpO1xuICAgIC8vIElmIGEgc3RhdGUgcHJvcGVydHkgKGRhdGEsIGVycm9yLCBvciBpc1ZhbGlkYXRpbmcpIGlzIGFjY2Vzc2VkIGJ5IHRoZSByZW5kZXJcbiAgICAvLyBmdW5jdGlvbiwgd2UgbWFyayB0aGUgcHJvcGVydHkgYXMgYSBkZXBlbmRlbmN5IHNvIGlmIGl0IGlzIHVwZGF0ZWQgYWdhaW5cbiAgICAvLyBpbiB0aGUgZnV0dXJlLCB3ZSB0cmlnZ2VyIGEgcmVyZW5kZXIuXG4gICAgLy8gVGhpcyBpcyBhbHNvIGtub3duIGFzIGRlcGVuZGVuY3ktdHJhY2tpbmcuXG4gICAgY29uc3Qgc3RhdGVEZXBlbmRlbmNpZXNSZWYgPSB1c2VSZWYoe1xuICAgICAgICBkYXRhOiBmYWxzZSxcbiAgICAgICAgZXJyb3I6IGZhbHNlLFxuICAgICAgICBpc1ZhbGlkYXRpbmc6IGZhbHNlXG4gICAgfSk7XG4gICAgLyoqXG4gICAqIEBwYXJhbSBwYXlsb2FkIFRvIGNoYW5nZSBzdGF0ZVJlZiwgcGFzcyB0aGUgdmFsdWVzIGV4cGxpY2l0bHkgdG8gc2V0U3RhdGU6XG4gICAqIEBleGFtcGxlXG4gICAqIGBgYGpzXG4gICAqIHNldFN0YXRlKHtcbiAgICogICBpc1ZhbGlkYXRpbmc6IGZhbHNlXG4gICAqICAgZGF0YTogbmV3RGF0YSAvLyBzZXQgZGF0YSB0byBuZXdEYXRhXG4gICAqICAgZXJyb3I6IHVuZGVmaW5lZCAvLyBzZXQgZXJyb3IgdG8gdW5kZWZpbmVkXG4gICAqIH0pXG4gICAqXG4gICAqIHNldFN0YXRlKHtcbiAgICogICBpc1ZhbGlkYXRpbmc6IGZhbHNlXG4gICAqICAgZGF0YTogdW5kZWZpbmVkIC8vIHNldCBkYXRhIHRvIHVuZGVmaW5lZFxuICAgKiAgIGVycm9yOiBlcnIgLy8gc2V0IGVycm9yIHRvIGVyclxuICAgKiB9KVxuICAgKiBgYGBcbiAgICovIGNvbnN0IHNldFN0YXRlID0gdXNlQ2FsbGJhY2soKHBheWxvYWQpPT57XG4gICAgICAgIGxldCBzaG91bGRSZXJlbmRlciA9IGZhbHNlO1xuICAgICAgICBjb25zdCBjdXJyZW50U3RhdGUgPSBzdGF0ZVJlZi5jdXJyZW50O1xuICAgICAgICBmb3IoY29uc3QgXyBpbiBwYXlsb2FkKXtcbiAgICAgICAgICAgIGNvbnN0IGsgPSBfO1xuICAgICAgICAgICAgLy8gSWYgdGhlIHByb3BlcnR5IGhhcyBjaGFuZ2VkLCB1cGRhdGUgdGhlIHN0YXRlIGFuZCBtYXJrIHJlcmVuZGVyIGFzXG4gICAgICAgICAgICAvLyBuZWVkZWQuXG4gICAgICAgICAgICBpZiAoY3VycmVudFN0YXRlW2tdICE9PSBwYXlsb2FkW2tdKSB7XG4gICAgICAgICAgICAgICAgY3VycmVudFN0YXRlW2tdID0gcGF5bG9hZFtrXTtcbiAgICAgICAgICAgICAgICAvLyBJZiB0aGUgcHJvcGVydHkgaXMgYWNjZXNzZWQgYnkgdGhlIGNvbXBvbmVudCwgYSByZXJlbmRlciBzaG91bGQgYmVcbiAgICAgICAgICAgICAgICAvLyB0cmlnZ2VyZWQuXG4gICAgICAgICAgICAgICAgaWYgKHN0YXRlRGVwZW5kZW5jaWVzUmVmLmN1cnJlbnRba10pIHtcbiAgICAgICAgICAgICAgICAgICAgc2hvdWxkUmVyZW5kZXIgPSB0cnVlO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBpZiAoc2hvdWxkUmVyZW5kZXIgJiYgIXVubW91bnRlZFJlZi5jdXJyZW50KSB7XG4gICAgICAgICAgICBpZiAoSVNfUkVBQ1RfTEVHQUNZKSB7XG4gICAgICAgICAgICAgICAgcmVyZW5kZXIoe30pO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICBSZWFjdC5zdGFydFRyYW5zaXRpb24oKCk9PnJlcmVuZGVyKHt9KSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9LCBbXG4gICAgICAgIHJlcmVuZGVyXG4gICAgXSk7XG4gICAgdXNlSXNvbW9ycGhpY0xheW91dEVmZmVjdCgoKT0+e1xuICAgICAgICB1bm1vdW50ZWRSZWYuY3VycmVudCA9IGZhbHNlO1xuICAgICAgICByZXR1cm4gKCk9PntcbiAgICAgICAgICAgIHVubW91bnRlZFJlZi5jdXJyZW50ID0gdHJ1ZTtcbiAgICAgICAgfTtcbiAgICB9KTtcbiAgICByZXR1cm4gW1xuICAgICAgICBzdGF0ZVJlZixcbiAgICAgICAgc3RhdGVEZXBlbmRlbmNpZXNSZWYuY3VycmVudCxcbiAgICAgICAgc2V0U3RhdGVcbiAgICBdO1xufTtcblxuLy8gQWRkIGEgY2FsbGJhY2sgZnVuY3Rpb24gdG8gYSBsaXN0IG9mIGtleWVkIGNhbGxiYWNrIGZ1bmN0aW9ucyBhbmQgcmV0dXJuXG4vLyB0aGUgdW5zdWJzY3JpYmUgZnVuY3Rpb24uXG5jb25zdCBzdWJzY3JpYmVDYWxsYmFjayA9IChrZXksIGNhbGxiYWNrcywgY2FsbGJhY2spPT57XG4gICAgY29uc3Qga2V5ZWRSZXZhbGlkYXRvcnMgPSBjYWxsYmFja3Nba2V5XSB8fCAoY2FsbGJhY2tzW2tleV0gPSBbXSk7XG4gICAga2V5ZWRSZXZhbGlkYXRvcnMucHVzaChjYWxsYmFjayk7XG4gICAgcmV0dXJuICgpPT57XG4gICAgICAgIGNvbnN0IGluZGV4ID0ga2V5ZWRSZXZhbGlkYXRvcnMuaW5kZXhPZihjYWxsYmFjayk7XG4gICAgICAgIGlmIChpbmRleCA+PSAwKSB7XG4gICAgICAgICAgICAvLyBPKDEpOiBmYXN0ZXIgdGhhbiBzcGxpY2VcbiAgICAgICAgICAgIGtleWVkUmV2YWxpZGF0b3JzW2luZGV4XSA9IGtleWVkUmV2YWxpZGF0b3JzW2tleWVkUmV2YWxpZGF0b3JzLmxlbmd0aCAtIDFdO1xuICAgICAgICAgICAga2V5ZWRSZXZhbGlkYXRvcnMucG9wKCk7XG4gICAgICAgIH1cbiAgICB9O1xufTtcblxuLy8gQ3JlYXRlIGEgY3VzdG9tIGhvb2sgd2l0aCBhIG1pZGRsZXdhcmVcbmNvbnN0IHdpdGhNaWRkbGV3YXJlID0gKHVzZVNXUiwgbWlkZGxld2FyZSk9PntcbiAgICByZXR1cm4gKC4uLmFyZ3MpPT57XG4gICAgICAgIGNvbnN0IFtrZXksIGZuLCBjb25maWddID0gbm9ybWFsaXplKGFyZ3MpO1xuICAgICAgICBjb25zdCB1c2VzID0gKGNvbmZpZy51c2UgfHwgW10pLmNvbmNhdChtaWRkbGV3YXJlKTtcbiAgICAgICAgcmV0dXJuIHVzZVNXUihrZXksIGZuLCB7XG4gICAgICAgICAgICAuLi5jb25maWcsXG4gICAgICAgICAgICB1c2U6IHVzZXNcbiAgICAgICAgfSk7XG4gICAgfTtcbn07XG5cbnNldHVwRGV2VG9vbHMoKTtcblxuZXhwb3J0IHsgSVNfUkVBQ1RfTEVHQUNZLCBJU19TRVJWRVIsIE9CSkVDVCwgU1dSQ29uZmlnLCBTV1JHbG9iYWxTdGF0ZSwgVU5ERUZJTkVELCBjYWNoZSwgY29tcGFyZSwgY3JlYXRlQ2FjaGVIZWxwZXIsIGRlZmF1bHRDb25maWcsIGRlZmF1bHRDb25maWdPcHRpb25zLCBnZXRUaW1lc3RhbXAsIGhhc1JlcXVlc3RBbmltYXRpb25GcmFtZSwgaW5pdENhY2hlLCBpbnRlcm5hbE11dGF0ZSwgaXNEb2N1bWVudERlZmluZWQsIGlzRnVuY3Rpb24sIGlzUHJvbWlzZUxpa2UsIGlzVW5kZWZpbmVkLCBpc1dpbmRvd0RlZmluZWQsIG1lcmdlQ29uZmlncywgbWVyZ2VPYmplY3RzLCBtdXRhdGUsIG5vb3AsIG5vcm1hbGl6ZSwgcHJlbG9hZCwgcHJlc2V0LCByQUYsIGNvbnN0YW50cyBhcyByZXZhbGlkYXRlRXZlbnRzLCBzZXJpYWxpemUsIHNsb3dDb25uZWN0aW9uLCBzdGFibGVIYXNoLCBzdWJzY3JpYmVDYWxsYmFjaywgdXNlSXNvbW9ycGhpY0xheW91dEVmZmVjdCwgdXNlU1dSQ29uZmlnLCB1c2VTdGF0ZVdpdGhEZXBzLCB3aXRoQXJncywgd2l0aE1pZGRsZXdhcmUgfTtcbiJdLCJuYW1lcyI6WyJSZWFjdCIsInVzZUVmZmVjdCIsInVzZUxheW91dEVmZmVjdCIsImNyZWF0ZUNvbnRleHQiLCJ1c2VDb250ZXh0IiwidXNlTWVtbyIsInVzZVJlZiIsImNyZWF0ZUVsZW1lbnQiLCJ1c2VTdGF0ZSIsInVzZUNhbGxiYWNrIiwibm9vcCIsIlVOREVGSU5FRCIsIk9CSkVDVCIsIk9iamVjdCIsImlzVW5kZWZpbmVkIiwidiIsImlzRnVuY3Rpb24iLCJtZXJnZU9iamVjdHMiLCJhIiwiYiIsImlzUHJvbWlzZUxpa2UiLCJ4IiwidGhlbiIsInRhYmxlIiwiV2Vha01hcCIsImNvdW50ZXIiLCJzdGFibGVIYXNoIiwiYXJnIiwidHlwZSIsImNvbnN0cnVjdG9yIiwiaXNEYXRlIiwiRGF0ZSIsInJlc3VsdCIsImluZGV4IiwiUmVnRXhwIiwiZ2V0Iiwic2V0IiwiQXJyYXkiLCJsZW5ndGgiLCJrZXlzIiwic29ydCIsInBvcCIsInRvSlNPTiIsInRvU3RyaW5nIiwiSlNPTiIsInN0cmluZ2lmeSIsIlNXUkdsb2JhbFN0YXRlIiwiRU1QVFlfQ0FDSEUiLCJJTklUSUFMX0NBQ0hFIiwiU1RSX1VOREVGSU5FRCIsImlzV2luZG93RGVmaW5lZCIsImlzRG9jdW1lbnREZWZpbmVkIiwiZG9jdW1lbnQiLCJoYXNSZXF1ZXN0QW5pbWF0aW9uRnJhbWUiLCJ3aW5kb3ciLCJjcmVhdGVDYWNoZUhlbHBlciIsImNhY2hlIiwia2V5Iiwic3RhdGUiLCJpbmZvIiwicHJldiIsIm9ubGluZSIsImlzT25saW5lIiwib25XaW5kb3dFdmVudCIsIm9mZldpbmRvd0V2ZW50IiwiYWRkRXZlbnRMaXN0ZW5lciIsImJpbmQiLCJyZW1vdmVFdmVudExpc3RlbmVyIiwiaXNWaXNpYmxlIiwidmlzaWJpbGl0eVN0YXRlIiwiaW5pdEZvY3VzIiwiY2FsbGJhY2siLCJpbml0UmVjb25uZWN0Iiwib25PbmxpbmUiLCJvbk9mZmxpbmUiLCJwcmVzZXQiLCJkZWZhdWx0Q29uZmlnT3B0aW9ucyIsIklTX1JFQUNUX0xFR0FDWSIsInVzZUlkIiwiSVNfU0VSVkVSIiwickFGIiwiZiIsInNldFRpbWVvdXQiLCJ1c2VJc29tb3JwaGljTGF5b3V0RWZmZWN0IiwibmF2aWdhdG9yQ29ubmVjdGlvbiIsIm5hdmlnYXRvciIsImNvbm5lY3Rpb24iLCJzbG93Q29ubmVjdGlvbiIsImluY2x1ZGVzIiwiZWZmZWN0aXZlVHlwZSIsInNhdmVEYXRhIiwic2VyaWFsaXplIiwiZXJyIiwiYXJncyIsImlzQXJyYXkiLCJfX3RpbWVzdGFtcCIsImdldFRpbWVzdGFtcCIsIkZPQ1VTX0VWRU5UIiwiUkVDT05ORUNUX0VWRU5UIiwiTVVUQVRFX0VWRU5UIiwiRVJST1JfUkVWQUxJREFURV9FVkVOVCIsImNvbnN0YW50cyIsIl9fcHJvdG9fXyIsImludGVybmFsTXV0YXRlIiwiX2tleSIsIl9kYXRhIiwiX29wdHMiLCJvcHRpb25zIiwicG9wdWxhdGVDYWNoZSIsInRocm93T25FcnJvciIsInJldmFsaWRhdGUiLCJyb2xsYmFja09uRXJyb3JPcHRpb24iLCJyb2xsYmFja09uRXJyb3IiLCJvcHRpbWlzdGljRGF0YSIsImVycm9yIiwia2V5RmlsdGVyIiwibWF0Y2hlZEtleXMiLCJpdCIsInRlc3QiLCJfayIsInB1c2giLCJQcm9taXNlIiwiYWxsIiwibWFwIiwibXV0YXRlQnlLZXkiLCJFVkVOVF9SRVZBTElEQVRPUlMiLCJNVVRBVElPTiIsIkZFVENIIiwiUFJFTE9BRCIsInJldmFsaWRhdG9ycyIsInN0YXJ0UmV2YWxpZGF0ZSIsImRhdGEiLCJiZWZvcmVNdXRhdGlvblRzIiwiaGFzT3B0aW1pc3RpY0RhdGEiLCJkaXNwbGF5ZWREYXRhIiwiY3VycmVudERhdGEiLCJfYyIsImNvbW1pdHRlZERhdGEiLCJjYXRjaCIsInJlcyIsInJldmFsaWRhdGVBbGxLZXlzIiwiaW5pdENhY2hlIiwicHJvdmlkZXIiLCJoYXMiLCJvcHRzIiwibXV0YXRlIiwidW5tb3VudCIsInN1YnNjcmlwdGlvbnMiLCJzdWJzY3JpYmUiLCJzdWJzIiwic3BsaWNlIiwiaW5kZXhPZiIsInNldHRlciIsInZhbHVlIiwiZm4iLCJpbml0UHJvdmlkZXIiLCJyZWxlYXNlRm9jdXMiLCJyZWxlYXNlUmVjb25uZWN0IiwiZGVsZXRlIiwib25FcnJvclJldHJ5IiwiXyIsIl9fIiwiY29uZmlnIiwibWF4UmV0cnlDb3VudCIsImVycm9yUmV0cnlDb3VudCIsImN1cnJlbnRSZXRyeUNvdW50IiwicmV0cnlDb3VudCIsInRpbWVvdXQiLCJNYXRoIiwicmFuZG9tIiwiZXJyb3JSZXRyeUludGVydmFsIiwiY29tcGFyZSIsIm5ld0RhdGEiLCJNYXAiLCJkZWZhdWx0Q29uZmlnIiwib25Mb2FkaW5nU2xvdyIsIm9uU3VjY2VzcyIsIm9uRXJyb3IiLCJvbkRpc2NhcmRlZCIsInJldmFsaWRhdGVPbkZvY3VzIiwicmV2YWxpZGF0ZU9uUmVjb25uZWN0IiwicmV2YWxpZGF0ZUlmU3RhbGUiLCJzaG91bGRSZXRyeU9uRXJyb3IiLCJmb2N1c1Rocm90dGxlSW50ZXJ2YWwiLCJkZWR1cGluZ0ludGVydmFsIiwibG9hZGluZ1RpbWVvdXQiLCJpc1BhdXNlZCIsImZhbGxiYWNrIiwibWVyZ2VDb25maWdzIiwidXNlIiwidTEiLCJmMSIsInUyIiwiZjIiLCJjb25jYXQiLCJTV1JDb25maWdDb250ZXh0IiwiU1dSQ29uZmlnIiwicHJvcHMiLCJwYXJlbnRDb25maWciLCJpc0Z1bmN0aW9uYWxDb25maWciLCJleHRlbmRlZENvbmZpZyIsImNhY2hlQ29udGV4dFJlZiIsImN1cnJlbnQiLCJjYWNoZUNvbnRleHQiLCJQcm92aWRlciIsImVuYWJsZURldnRvb2xzIiwiX19TV1JfREVWVE9PTFNfVVNFX18iLCJzZXR1cERldlRvb2xzIiwiX19TV1JfREVWVE9PTFNfUkVBQ1RfXyIsIm5vcm1hbGl6ZSIsInVzZVNXUkNvbmZpZyIsInByZWxvYWQiLCJrZXlfIiwiZmV0Y2hlciIsImZuQXJnIiwicmVxIiwibWlkZGxld2FyZSIsInVzZVNXUk5leHQiLCJmZXRjaGVyXyIsIkJVSUxUX0lOX01JRERMRVdBUkUiLCJ3aXRoQXJncyIsImhvb2siLCJ1c2VTV1JBcmdzIiwiZmFsbGJhY2tDb25maWciLCJfY29uZmlnIiwibmV4dCIsImkiLCJ1c2VTdGF0ZVdpdGhEZXBzIiwicmVyZW5kZXIiLCJ1bm1vdW50ZWRSZWYiLCJzdGF0ZVJlZiIsInN0YXRlRGVwZW5kZW5jaWVzUmVmIiwiaXNWYWxpZGF0aW5nIiwic2V0U3RhdGUiLCJwYXlsb2FkIiwic2hvdWxkUmVyZW5kZXIiLCJjdXJyZW50U3RhdGUiLCJrIiwic3RhcnRUcmFuc2l0aW9uIiwic3Vic2NyaWJlQ2FsbGJhY2siLCJjYWxsYmFja3MiLCJrZXllZFJldmFsaWRhdG9ycyIsIndpdGhNaWRkbGV3YXJlIiwidXNlU1dSIiwidXNlcyIsInJldmFsaWRhdGVFdmVudHMiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/swr/_internal/dist/index.mjs\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/swr/core/dist/index.mjs":
/*!**********************************************!*\
  !*** ./node_modules/swr/core/dist/index.mjs ***!
  \**********************************************/
/***/ (function(__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   SWRConfig: function() { return /* binding */ SWRConfig; },\n/* harmony export */   \"default\": function() { return /* binding */ useSWR; },\n/* harmony export */   mutate: function() { return /* reexport safe */ swr_internal__WEBPACK_IMPORTED_MODULE_2__.mutate; },\n/* harmony export */   preload: function() { return /* reexport safe */ swr_internal__WEBPACK_IMPORTED_MODULE_2__.preload; },\n/* harmony export */   unstable_serialize: function() { return /* binding */ unstable_serialize; },\n/* harmony export */   useSWRConfig: function() { return /* reexport safe */ swr_internal__WEBPACK_IMPORTED_MODULE_2__.useSWRConfig; }\n/* harmony export */ });\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react */ \"(app-pages-browser)/./node_modules/next/dist/compiled/react/index.js\");\n/* harmony import */ var use_sync_external_store_shim_index_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! use-sync-external-store/shim/index.js */ \"(app-pages-browser)/./node_modules/use-sync-external-store/shim/index.js\");\n/* harmony import */ var swr_internal__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! swr/_internal */ \"(app-pages-browser)/./node_modules/swr/_internal/dist/index.mjs\");\nvar _s = $RefreshSig$();\n\n\n\n\nconst unstable_serialize = (key)=>(0,swr_internal__WEBPACK_IMPORTED_MODULE_2__.serialize)(key)[0];\n/// <reference types=\"react/experimental\" />\nconst use = react__WEBPACK_IMPORTED_MODULE_0__.use || ((promise)=>{\n    if (promise.status === \"pending\") {\n        throw promise;\n    } else if (promise.status === \"fulfilled\") {\n        return promise.value;\n    } else if (promise.status === \"rejected\") {\n        throw promise.reason;\n    } else {\n        promise.status = \"pending\";\n        promise.then((v)=>{\n            promise.status = \"fulfilled\";\n            promise.value = v;\n        }, (e)=>{\n            promise.status = \"rejected\";\n            promise.reason = e;\n        });\n        throw promise;\n    }\n});\nconst WITH_DEDUPE = {\n    dedupe: true\n};\nconst useSWRHandler = (_key, fetcher, config)=>{\n    _s();\n    const { cache, compare, suspense, fallbackData, revalidateOnMount, revalidateIfStale, refreshInterval, refreshWhenHidden, refreshWhenOffline, keepPreviousData } = config;\n    const [EVENT_REVALIDATORS, MUTATION, FETCH, PRELOAD] = swr_internal__WEBPACK_IMPORTED_MODULE_2__.SWRGlobalState.get(cache);\n    // `key` is the identifier of the SWR internal state,\n    // `fnArg` is the argument/arguments parsed from the key, which will be passed\n    // to the fetcher.\n    // All of them are derived from `_key`.\n    const [key, fnArg] = (0,swr_internal__WEBPACK_IMPORTED_MODULE_2__.serialize)(_key);\n    // If it's the initial render of this hook.\n    const initialMountedRef = (0,react__WEBPACK_IMPORTED_MODULE_0__.useRef)(false);\n    // If the hook is unmounted already. This will be used to prevent some effects\n    // to be called after unmounting.\n    const unmountedRef = (0,react__WEBPACK_IMPORTED_MODULE_0__.useRef)(false);\n    // Refs to keep the key and config.\n    const keyRef = (0,react__WEBPACK_IMPORTED_MODULE_0__.useRef)(key);\n    const fetcherRef = (0,react__WEBPACK_IMPORTED_MODULE_0__.useRef)(fetcher);\n    const configRef = (0,react__WEBPACK_IMPORTED_MODULE_0__.useRef)(config);\n    const getConfig = ()=>configRef.current;\n    const isActive = ()=>getConfig().isVisible() && getConfig().isOnline();\n    const [getCache, setCache, subscribeCache, getInitialCache] = (0,swr_internal__WEBPACK_IMPORTED_MODULE_2__.createCacheHelper)(cache, key);\n    const stateDependencies = (0,react__WEBPACK_IMPORTED_MODULE_0__.useRef)({}).current;\n    const fallback = (0,swr_internal__WEBPACK_IMPORTED_MODULE_2__.isUndefined)(fallbackData) ? config.fallback[key] : fallbackData;\n    const isEqual = (prev, current)=>{\n        for(const _ in stateDependencies){\n            const t = _;\n            if (t === \"data\") {\n                if (!compare(prev[t], current[t])) {\n                    if (!(0,swr_internal__WEBPACK_IMPORTED_MODULE_2__.isUndefined)(prev[t])) {\n                        return false;\n                    }\n                    if (!compare(returnedData, current[t])) {\n                        return false;\n                    }\n                }\n            } else {\n                if (current[t] !== prev[t]) {\n                    return false;\n                }\n            }\n        }\n        return true;\n    };\n    const getSnapshot = (0,react__WEBPACK_IMPORTED_MODULE_0__.useMemo)(()=>{\n        const shouldStartRequest = (()=>{\n            if (!key) return false;\n            if (!fetcher) return false;\n            // If `revalidateOnMount` is set, we take the value directly.\n            if (!(0,swr_internal__WEBPACK_IMPORTED_MODULE_2__.isUndefined)(revalidateOnMount)) return revalidateOnMount;\n            // If it's paused, we skip revalidation.\n            if (getConfig().isPaused()) return false;\n            if (suspense) return false;\n            if (!(0,swr_internal__WEBPACK_IMPORTED_MODULE_2__.isUndefined)(revalidateIfStale)) return revalidateIfStale;\n            return true;\n        })();\n        // Get the cache and merge it with expected states.\n        const getSelectedCache = (state)=>{\n            // We only select the needed fields from the state.\n            const snapshot = (0,swr_internal__WEBPACK_IMPORTED_MODULE_2__.mergeObjects)(state);\n            delete snapshot._k;\n            if (!shouldStartRequest) {\n                return snapshot;\n            }\n            return {\n                isValidating: true,\n                isLoading: true,\n                ...snapshot\n            };\n        };\n        const cachedData = getCache();\n        const initialData = getInitialCache();\n        const clientSnapshot = getSelectedCache(cachedData);\n        const serverSnapshot = cachedData === initialData ? clientSnapshot : getSelectedCache(initialData);\n        // To make sure that we are returning the same object reference to avoid\n        // unnecessary re-renders, we keep the previous snapshot and use deep\n        // comparison to check if we need to return a new one.\n        let memorizedSnapshot = clientSnapshot;\n        return [\n            ()=>{\n                const newSnapshot = getSelectedCache(getCache());\n                const compareResult = isEqual(newSnapshot, memorizedSnapshot);\n                if (compareResult) {\n                    // Mentally, we should always return the `memorizedSnapshot` here\n                    // as there's no change between the new and old snapshots.\n                    // However, since the `isEqual` function only compares selected fields,\n                    // the values of the unselected fields might be changed. That's\n                    // simply because we didn't track them.\n                    // To support the case in https://github.com/vercel/swr/pull/2576,\n                    // we need to update these fields in the `memorizedSnapshot` too\n                    // with direct mutations to ensure the snapshot is always up-to-date\n                    // even for the unselected fields, but only trigger re-renders when\n                    // the selected fields are changed.\n                    memorizedSnapshot.data = newSnapshot.data;\n                    memorizedSnapshot.isLoading = newSnapshot.isLoading;\n                    memorizedSnapshot.isValidating = newSnapshot.isValidating;\n                    memorizedSnapshot.error = newSnapshot.error;\n                    return memorizedSnapshot;\n                } else {\n                    memorizedSnapshot = newSnapshot;\n                    return newSnapshot;\n                }\n            },\n            ()=>serverSnapshot\n        ];\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n    }, [\n        cache,\n        key\n    ]);\n    // Get the current state that SWR should return.\n    const cached = (0,use_sync_external_store_shim_index_js__WEBPACK_IMPORTED_MODULE_1__.useSyncExternalStore)((0,react__WEBPACK_IMPORTED_MODULE_0__.useCallback)((callback)=>subscribeCache(key, (current, prev)=>{\n            if (!isEqual(prev, current)) callback();\n        }), [\n        cache,\n        key\n    ]), getSnapshot[0], getSnapshot[1]);\n    const isInitialMount = !initialMountedRef.current;\n    const hasRevalidator = EVENT_REVALIDATORS[key] && EVENT_REVALIDATORS[key].length > 0;\n    const cachedData = cached.data;\n    const data = (0,swr_internal__WEBPACK_IMPORTED_MODULE_2__.isUndefined)(cachedData) ? fallback : cachedData;\n    const error = cached.error;\n    // Use a ref to store previously returned data. Use the initial data as its initial value.\n    const laggyDataRef = (0,react__WEBPACK_IMPORTED_MODULE_0__.useRef)(data);\n    const returnedData = keepPreviousData ? (0,swr_internal__WEBPACK_IMPORTED_MODULE_2__.isUndefined)(cachedData) ? laggyDataRef.current : cachedData : data;\n    // - Suspense mode and there's stale data for the initial render.\n    // - Not suspense mode and there is no fallback data and `revalidateIfStale` is enabled.\n    // - `revalidateIfStale` is enabled but `data` is not defined.\n    const shouldDoInitialRevalidation = (()=>{\n        // if a key already has revalidators and also has error, we should not trigger revalidation\n        if (hasRevalidator && !(0,swr_internal__WEBPACK_IMPORTED_MODULE_2__.isUndefined)(error)) return false;\n        // If `revalidateOnMount` is set, we take the value directly.\n        if (isInitialMount && !(0,swr_internal__WEBPACK_IMPORTED_MODULE_2__.isUndefined)(revalidateOnMount)) return revalidateOnMount;\n        // If it's paused, we skip revalidation.\n        if (getConfig().isPaused()) return false;\n        // Under suspense mode, it will always fetch on render if there is no\n        // stale data so no need to revalidate immediately mount it again.\n        // If data exists, only revalidate if `revalidateIfStale` is true.\n        if (suspense) return (0,swr_internal__WEBPACK_IMPORTED_MODULE_2__.isUndefined)(data) ? false : revalidateIfStale;\n        // If there is no stale data, we need to revalidate when mount;\n        // If `revalidateIfStale` is set to true, we will always revalidate.\n        return (0,swr_internal__WEBPACK_IMPORTED_MODULE_2__.isUndefined)(data) || revalidateIfStale;\n    })();\n    // Resolve the default validating state:\n    // If it's able to validate, and it should revalidate when mount, this will be true.\n    const defaultValidatingState = !!(key && fetcher && isInitialMount && shouldDoInitialRevalidation);\n    const isValidating = (0,swr_internal__WEBPACK_IMPORTED_MODULE_2__.isUndefined)(cached.isValidating) ? defaultValidatingState : cached.isValidating;\n    const isLoading = (0,swr_internal__WEBPACK_IMPORTED_MODULE_2__.isUndefined)(cached.isLoading) ? defaultValidatingState : cached.isLoading;\n    // The revalidation function is a carefully crafted wrapper of the original\n    // `fetcher`, to correctly handle the many edge cases.\n    const revalidate = (0,react__WEBPACK_IMPORTED_MODULE_0__.useCallback)(async (revalidateOpts)=>{\n        const currentFetcher = fetcherRef.current;\n        if (!key || !currentFetcher || unmountedRef.current || getConfig().isPaused()) {\n            return false;\n        }\n        let newData;\n        let startAt;\n        let loading = true;\n        const opts = revalidateOpts || {};\n        // If there is no ongoing concurrent request, or `dedupe` is not set, a\n        // new request should be initiated.\n        const shouldStartNewRequest = !FETCH[key] || !opts.dedupe;\n        /*\n         For React 17\n         Do unmount check for calls:\n         If key has changed during the revalidation, or the component has been\n         unmounted, old dispatch and old event callbacks should not take any\n         effect\n\n        For React 18\n        only check if key has changed\n        https://github.com/reactwg/react-18/discussions/82\n      */ const callbackSafeguard = ()=>{\n            if (swr_internal__WEBPACK_IMPORTED_MODULE_2__.IS_REACT_LEGACY) {\n                return !unmountedRef.current && key === keyRef.current && initialMountedRef.current;\n            }\n            return key === keyRef.current;\n        };\n        // The final state object when the request finishes.\n        const finalState = {\n            isValidating: false,\n            isLoading: false\n        };\n        const finishRequestAndUpdateState = ()=>{\n            setCache(finalState);\n        };\n        const cleanupState = ()=>{\n            // Check if it's still the same request before deleting it.\n            const requestInfo = FETCH[key];\n            if (requestInfo && requestInfo[1] === startAt) {\n                delete FETCH[key];\n            }\n        };\n        // Start fetching. Change the `isValidating` state, update the cache.\n        const initialState = {\n            isValidating: true\n        };\n        // It is in the `isLoading` state, if and only if there is no cached data.\n        // This bypasses fallback data and laggy data.\n        if ((0,swr_internal__WEBPACK_IMPORTED_MODULE_2__.isUndefined)(getCache().data)) {\n            initialState.isLoading = true;\n        }\n        try {\n            if (shouldStartNewRequest) {\n                setCache(initialState);\n                // If no cache is being rendered currently (it shows a blank page),\n                // we trigger the loading slow event.\n                if (config.loadingTimeout && (0,swr_internal__WEBPACK_IMPORTED_MODULE_2__.isUndefined)(getCache().data)) {\n                    setTimeout(()=>{\n                        if (loading && callbackSafeguard()) {\n                            getConfig().onLoadingSlow(key, config);\n                        }\n                    }, config.loadingTimeout);\n                }\n                // Start the request and save the timestamp.\n                // Key must be truthy if entering here.\n                FETCH[key] = [\n                    currentFetcher(fnArg),\n                    (0,swr_internal__WEBPACK_IMPORTED_MODULE_2__.getTimestamp)()\n                ];\n            }\n            [newData, startAt] = FETCH[key];\n            newData = await newData;\n            if (shouldStartNewRequest) {\n                // If the request isn't interrupted, clean it up after the\n                // deduplication interval.\n                setTimeout(cleanupState, config.dedupingInterval);\n            }\n            // If there're other ongoing request(s), started after the current one,\n            // we need to ignore the current one to avoid possible race conditions:\n            //   req1------------------>res1        (current one)\n            //        req2---------------->res2\n            // the request that fired later will always be kept.\n            // The timestamp maybe be `undefined` or a number\n            if (!FETCH[key] || FETCH[key][1] !== startAt) {\n                if (shouldStartNewRequest) {\n                    if (callbackSafeguard()) {\n                        getConfig().onDiscarded(key);\n                    }\n                }\n                return false;\n            }\n            // Clear error.\n            finalState.error = swr_internal__WEBPACK_IMPORTED_MODULE_2__.UNDEFINED;\n            // If there're other mutations(s), that overlapped with the current revalidation:\n            // case 1:\n            //   req------------------>res\n            //       mutate------>end\n            // case 2:\n            //         req------------>res\n            //   mutate------>end\n            // case 3:\n            //   req------------------>res\n            //       mutate-------...---------->\n            // we have to ignore the revalidation result (res) because it's no longer fresh.\n            // meanwhile, a new revalidation should be triggered when the mutation ends.\n            const mutationInfo = MUTATION[key];\n            if (!(0,swr_internal__WEBPACK_IMPORTED_MODULE_2__.isUndefined)(mutationInfo) && // case 1\n            (startAt <= mutationInfo[0] || // case 2\n            startAt <= mutationInfo[1] || // case 3\n            mutationInfo[1] === 0)) {\n                finishRequestAndUpdateState();\n                if (shouldStartNewRequest) {\n                    if (callbackSafeguard()) {\n                        getConfig().onDiscarded(key);\n                    }\n                }\n                return false;\n            }\n            // Deep compare with the latest state to avoid extra re-renders.\n            // For local state, compare and assign.\n            const cacheData = getCache().data;\n            // Since the compare fn could be custom fn\n            // cacheData might be different from newData even when compare fn returns True\n            finalState.data = compare(cacheData, newData) ? cacheData : newData;\n            // Trigger the successful callback if it's the original request.\n            if (shouldStartNewRequest) {\n                if (callbackSafeguard()) {\n                    getConfig().onSuccess(newData, key, config);\n                }\n            }\n        } catch (err) {\n            cleanupState();\n            const currentConfig = getConfig();\n            const { shouldRetryOnError } = currentConfig;\n            // Not paused, we continue handling the error. Otherwise, discard it.\n            if (!currentConfig.isPaused()) {\n                // Get a new error, don't use deep comparison for errors.\n                finalState.error = err;\n                // Error event and retry logic. Only for the actual request, not\n                // deduped ones.\n                if (shouldStartNewRequest && callbackSafeguard()) {\n                    currentConfig.onError(err, key, currentConfig);\n                    if (shouldRetryOnError === true || (0,swr_internal__WEBPACK_IMPORTED_MODULE_2__.isFunction)(shouldRetryOnError) && shouldRetryOnError(err)) {\n                        if (isActive()) {\n                            // If it's inactive, stop. It will auto-revalidate when\n                            // refocusing or reconnecting.\n                            // When retrying, deduplication is always enabled.\n                            currentConfig.onErrorRetry(err, key, currentConfig, (_opts)=>{\n                                const revalidators = EVENT_REVALIDATORS[key];\n                                if (revalidators && revalidators[0]) {\n                                    revalidators[0](swr_internal__WEBPACK_IMPORTED_MODULE_2__.revalidateEvents.ERROR_REVALIDATE_EVENT, _opts);\n                                }\n                            }, {\n                                retryCount: (opts.retryCount || 0) + 1,\n                                dedupe: true\n                            });\n                        }\n                    }\n                }\n            }\n        }\n        // Mark loading as stopped.\n        loading = false;\n        // Update the current hook's state.\n        finishRequestAndUpdateState();\n        return true;\n    }, // `keyValidating` are depending on `key`, so we can exclude them from\n    // the deps array.\n    //\n    // FIXME:\n    // `fn` and `config` might be changed during the lifecycle,\n    // but they might be changed every render like this.\n    // `useSWR('key', () => fetch('/api/'), { suspense: true })`\n    // So we omit the values from the deps array\n    // even though it might cause unexpected behaviors.\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n    [\n        key,\n        cache\n    ]);\n    // Similar to the global mutate but bound to the current cache and key.\n    // `cache` isn't allowed to change during the lifecycle.\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n    const boundMutate = (0,react__WEBPACK_IMPORTED_MODULE_0__.useCallback)(function() {\n        for(var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++){\n            args[_key] = arguments[_key];\n        }\n        return (0,swr_internal__WEBPACK_IMPORTED_MODULE_2__.internalMutate)(cache, keyRef.current, ...args);\n    }, []);\n    // The logic for updating refs.\n    (0,swr_internal__WEBPACK_IMPORTED_MODULE_2__.useIsomorphicLayoutEffect)(()=>{\n        fetcherRef.current = fetcher;\n        configRef.current = config;\n        // Handle laggy data updates. If there's cached data of the current key,\n        // it'll be the correct reference.\n        if (!(0,swr_internal__WEBPACK_IMPORTED_MODULE_2__.isUndefined)(cachedData)) {\n            laggyDataRef.current = cachedData;\n        }\n    });\n    // After mounted or key changed.\n    (0,swr_internal__WEBPACK_IMPORTED_MODULE_2__.useIsomorphicLayoutEffect)(()=>{\n        if (!key) return;\n        const softRevalidate = revalidate.bind(swr_internal__WEBPACK_IMPORTED_MODULE_2__.UNDEFINED, WITH_DEDUPE);\n        // Expose revalidators to global event listeners. So we can trigger\n        // revalidation from the outside.\n        let nextFocusRevalidatedAt = 0;\n        const onRevalidate = function(type) {\n            let opts = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : {};\n            if (type == swr_internal__WEBPACK_IMPORTED_MODULE_2__.revalidateEvents.FOCUS_EVENT) {\n                const now = Date.now();\n                if (getConfig().revalidateOnFocus && now > nextFocusRevalidatedAt && isActive()) {\n                    nextFocusRevalidatedAt = now + getConfig().focusThrottleInterval;\n                    softRevalidate();\n                }\n            } else if (type == swr_internal__WEBPACK_IMPORTED_MODULE_2__.revalidateEvents.RECONNECT_EVENT) {\n                if (getConfig().revalidateOnReconnect && isActive()) {\n                    softRevalidate();\n                }\n            } else if (type == swr_internal__WEBPACK_IMPORTED_MODULE_2__.revalidateEvents.MUTATE_EVENT) {\n                return revalidate();\n            } else if (type == swr_internal__WEBPACK_IMPORTED_MODULE_2__.revalidateEvents.ERROR_REVALIDATE_EVENT) {\n                return revalidate(opts);\n            }\n            return;\n        };\n        const unsubEvents = (0,swr_internal__WEBPACK_IMPORTED_MODULE_2__.subscribeCallback)(key, EVENT_REVALIDATORS, onRevalidate);\n        // Mark the component as mounted and update corresponding refs.\n        unmountedRef.current = false;\n        keyRef.current = key;\n        initialMountedRef.current = true;\n        // Keep the original key in the cache.\n        setCache({\n            _k: fnArg\n        });\n        // Trigger a revalidation\n        if (shouldDoInitialRevalidation) {\n            if ((0,swr_internal__WEBPACK_IMPORTED_MODULE_2__.isUndefined)(data) || swr_internal__WEBPACK_IMPORTED_MODULE_2__.IS_SERVER) {\n                // Revalidate immediately.\n                softRevalidate();\n            } else {\n                // Delay the revalidate if we have data to return so we won't block\n                // rendering.\n                (0,swr_internal__WEBPACK_IMPORTED_MODULE_2__.rAF)(softRevalidate);\n            }\n        }\n        return ()=>{\n            // Mark it as unmounted.\n            unmountedRef.current = true;\n            unsubEvents();\n        };\n    }, [\n        key\n    ]);\n    // Polling\n    (0,swr_internal__WEBPACK_IMPORTED_MODULE_2__.useIsomorphicLayoutEffect)(()=>{\n        let timer;\n        function next() {\n            // Use the passed interval\n            // ...or invoke the function with the updated data to get the interval\n            const interval = (0,swr_internal__WEBPACK_IMPORTED_MODULE_2__.isFunction)(refreshInterval) ? refreshInterval(getCache().data) : refreshInterval;\n            // We only start the next interval if `refreshInterval` is not 0, and:\n            // - `force` is true, which is the start of polling\n            // - or `timer` is not 0, which means the effect wasn't canceled\n            if (interval && timer !== -1) {\n                timer = setTimeout(execute, interval);\n            }\n        }\n        function execute() {\n            // Check if it's OK to execute:\n            // Only revalidate when the page is visible, online, and not errored.\n            if (!getCache().error && (refreshWhenHidden || getConfig().isVisible()) && (refreshWhenOffline || getConfig().isOnline())) {\n                revalidate(WITH_DEDUPE).then(next);\n            } else {\n                // Schedule the next interval to check again.\n                next();\n            }\n        }\n        next();\n        return ()=>{\n            if (timer) {\n                clearTimeout(timer);\n                timer = -1;\n            }\n        };\n    }, [\n        refreshInterval,\n        refreshWhenHidden,\n        refreshWhenOffline,\n        key\n    ]);\n    // Display debug info in React DevTools.\n    (0,react__WEBPACK_IMPORTED_MODULE_0__.useDebugValue)(returnedData);\n    // In Suspense mode, we can't return the empty `data` state.\n    // If there is an `error`, the `error` needs to be thrown to the error boundary.\n    // If there is no `error`, the `revalidation` promise needs to be thrown to\n    // the suspense boundary.\n    if (suspense && (0,swr_internal__WEBPACK_IMPORTED_MODULE_2__.isUndefined)(data) && key) {\n        // SWR should throw when trying to use Suspense on the server with React 18,\n        // without providing any initial data. See:\n        // https://github.com/vercel/swr/issues/1832\n        if (!swr_internal__WEBPACK_IMPORTED_MODULE_2__.IS_REACT_LEGACY && swr_internal__WEBPACK_IMPORTED_MODULE_2__.IS_SERVER) {\n            throw new Error(\"Fallback data is required when using suspense in SSR.\");\n        }\n        // Always update fetcher and config refs even with the Suspense mode.\n        fetcherRef.current = fetcher;\n        configRef.current = config;\n        unmountedRef.current = false;\n        const req = PRELOAD[key];\n        if (!(0,swr_internal__WEBPACK_IMPORTED_MODULE_2__.isUndefined)(req)) {\n            const promise = boundMutate(req);\n            use(promise);\n        }\n        if ((0,swr_internal__WEBPACK_IMPORTED_MODULE_2__.isUndefined)(error)) {\n            const promise = revalidate(WITH_DEDUPE);\n            if (!(0,swr_internal__WEBPACK_IMPORTED_MODULE_2__.isUndefined)(returnedData)) {\n                promise.status = \"fulfilled\";\n                promise.value = true;\n            }\n            use(promise);\n        } else {\n            throw error;\n        }\n    }\n    return {\n        mutate: boundMutate,\n        get data () {\n            stateDependencies.data = true;\n            return returnedData;\n        },\n        get error () {\n            stateDependencies.error = true;\n            return error;\n        },\n        get isValidating () {\n            stateDependencies.isValidating = true;\n            return isValidating;\n        },\n        get isLoading () {\n            stateDependencies.isLoading = true;\n            return isLoading;\n        }\n    };\n};\n_s(useSWRHandler, \"+ayPP8H7pDOON0maCstrp+ygOb8=\", false, function() {\n    return [\n        use_sync_external_store_shim_index_js__WEBPACK_IMPORTED_MODULE_1__.useSyncExternalStore,\n        swr_internal__WEBPACK_IMPORTED_MODULE_2__.useIsomorphicLayoutEffect,\n        swr_internal__WEBPACK_IMPORTED_MODULE_2__.useIsomorphicLayoutEffect,\n        swr_internal__WEBPACK_IMPORTED_MODULE_2__.useIsomorphicLayoutEffect\n    ];\n});\nconst SWRConfig = swr_internal__WEBPACK_IMPORTED_MODULE_2__.OBJECT.defineProperty(swr_internal__WEBPACK_IMPORTED_MODULE_2__.SWRConfig, \"defaultValue\", {\n    value: swr_internal__WEBPACK_IMPORTED_MODULE_2__.defaultConfig\n});\n_c = SWRConfig;\n/**\n * A hook to fetch data.\n *\n * @link https://swr.vercel.app\n * @example\n * ```jsx\n * import useSWR from 'swr'\n * function Profile() {\n *   const { data, error } = useSWR('/api/user', fetcher)\n *   if (error) return <div>failed to load</div>\n *   if (!data) return <div>loading...</div>\n *   return <div>hello {data.name}!</div>\n * }\n * ```\n */ const useSWR = (0,swr_internal__WEBPACK_IMPORTED_MODULE_2__.withArgs)(useSWRHandler);\n// useSWR\n\nvar _c;\n$RefreshReg$(_c, \"SWRConfig\");\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/swr/core/dist/index.mjs\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/swr/infinite/dist/index.mjs":
/*!**************************************************!*\
  !*** ./node_modules/swr/infinite/dist/index.mjs ***!
  \**************************************************/
/***/ (function(__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": function() { return /* binding */ useSWRInfinite; },\n/* harmony export */   infinite: function() { return /* binding */ infinite; },\n/* harmony export */   unstable_serialize: function() { return /* binding */ unstable_serialize; }\n/* harmony export */ });\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react */ \"(app-pages-browser)/./node_modules/next/dist/compiled/react/index.js\");\n/* harmony import */ var swr__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! swr */ \"(app-pages-browser)/./node_modules/swr/core/dist/index.mjs\");\n/* harmony import */ var swr_internal__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! swr/_internal */ \"(app-pages-browser)/./node_modules/swr/_internal/dist/index.mjs\");\n/* harmony import */ var use_sync_external_store_shim_index_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! use-sync-external-store/shim/index.js */ \"(app-pages-browser)/./node_modules/use-sync-external-store/shim/index.js\");\nvar _s = $RefreshSig$();\n\n\n\n\nconst INFINITE_PREFIX = \"$inf$\";\nconst getFirstPageKey = (getKey)=>{\n    return (0,swr_internal__WEBPACK_IMPORTED_MODULE_2__.serialize)(getKey ? getKey(0, null) : null)[0];\n};\nconst unstable_serialize = (getKey)=>{\n    return INFINITE_PREFIX + getFirstPageKey(getKey);\n};\n// We have to several type castings here because `useSWRInfinite` is a special\n// const INFINITE_PREFIX = '$inf$'\nconst EMPTY_PROMISE = Promise.resolve();\n// export const unstable_serialize = (getKey: SWRInfiniteKeyLoader) => {\n//   return INFINITE_PREFIX + getFirstPageKey(getKey)\n// }\nconst infinite = (useSWRNext)=>_s((getKey, fn, config)=>{\n        _s();\n        const didMountRef = (0,react__WEBPACK_IMPORTED_MODULE_0__.useRef)(false);\n        const { cache, initialSize = 1, revalidateAll = false, persistSize = false, revalidateFirstPage = true, revalidateOnMount = false, parallel = false } = config;\n        // The serialized key of the first page. This key will be used to store\n        // metadata of this SWR infinite hook.\n        let infiniteKey;\n        try {\n            infiniteKey = getFirstPageKey(getKey);\n            if (infiniteKey) infiniteKey = INFINITE_PREFIX + infiniteKey;\n        } catch (err) {\n        // Not ready yet.\n        }\n        const [get, set, subscribeCache] = (0,swr_internal__WEBPACK_IMPORTED_MODULE_2__.createCacheHelper)(cache, infiniteKey);\n        const getSnapshot = (0,react__WEBPACK_IMPORTED_MODULE_0__.useCallback)(()=>{\n            const size = (0,swr_internal__WEBPACK_IMPORTED_MODULE_2__.isUndefined)(get()._l) ? initialSize : get()._l;\n            return size;\n        // eslint-disable-next-line react-hooks/exhaustive-deps\n        }, [\n            cache,\n            infiniteKey,\n            initialSize\n        ]);\n        (0,use_sync_external_store_shim_index_js__WEBPACK_IMPORTED_MODULE_3__.useSyncExternalStore)((0,react__WEBPACK_IMPORTED_MODULE_0__.useCallback)((callback)=>{\n            if (infiniteKey) return subscribeCache(infiniteKey, ()=>{\n                callback();\n            });\n            return ()=>{};\n        }, [\n            cache,\n            infiniteKey\n        ]), getSnapshot, getSnapshot);\n        const resolvePageSize = (0,react__WEBPACK_IMPORTED_MODULE_0__.useCallback)(()=>{\n            const cachedPageSize = get()._l;\n            return (0,swr_internal__WEBPACK_IMPORTED_MODULE_2__.isUndefined)(cachedPageSize) ? initialSize : cachedPageSize;\n        // `cache` isn't allowed to change during the lifecycle\n        // eslint-disable-next-line react-hooks/exhaustive-deps\n        }, [\n            infiniteKey,\n            initialSize\n        ]);\n        // keep the last page size to restore it with the persistSize option\n        const lastPageSizeRef = (0,react__WEBPACK_IMPORTED_MODULE_0__.useRef)(resolvePageSize());\n        // When the page key changes, we reset the page size if it's not persisted\n        (0,swr_internal__WEBPACK_IMPORTED_MODULE_2__.useIsomorphicLayoutEffect)(()=>{\n            if (!didMountRef.current) {\n                didMountRef.current = true;\n                return;\n            }\n            if (infiniteKey) {\n                // If the key has been changed, we keep the current page size if persistSize is enabled\n                // Otherwise, we reset the page size to cached pageSize\n                set({\n                    _l: persistSize ? lastPageSizeRef.current : resolvePageSize()\n                });\n            }\n        // `initialSize` isn't allowed to change during the lifecycle\n        // eslint-disable-next-line react-hooks/exhaustive-deps\n        }, [\n            infiniteKey,\n            cache\n        ]);\n        // Needs to check didMountRef during mounting, not in the fetcher\n        const shouldRevalidateOnMount = revalidateOnMount && !didMountRef.current;\n        // Actual SWR hook to load all pages in one fetcher.\n        const swr = useSWRNext(infiniteKey, async (key)=>{\n            // get the revalidate context\n            const forceRevalidateAll = get()._i;\n            // return an array of page data\n            const data = [];\n            const pageSize = resolvePageSize();\n            const [getCache] = (0,swr_internal__WEBPACK_IMPORTED_MODULE_2__.createCacheHelper)(cache, key);\n            const cacheData = getCache().data;\n            const revalidators = [];\n            let previousPageData = null;\n            for(let i = 0; i < pageSize; ++i){\n                const [pageKey, pageArg] = (0,swr_internal__WEBPACK_IMPORTED_MODULE_2__.serialize)(getKey(i, parallel ? null : previousPageData));\n                if (!pageKey) {\n                    break;\n                }\n                const [getSWRCache, setSWRCache] = (0,swr_internal__WEBPACK_IMPORTED_MODULE_2__.createCacheHelper)(cache, pageKey);\n                // Get the cached page data.\n                let pageData = getSWRCache().data;\n                // should fetch (or revalidate) if:\n                // - `revalidateAll` is enabled\n                // - `mutate()` called\n                // - the cache is missing\n                // - it's the first page and it's not the initial render\n                // - `revalidateOnMount` is enabled and it's on mount\n                // - cache for that page has changed\n                const shouldFetchPage = revalidateAll || forceRevalidateAll || (0,swr_internal__WEBPACK_IMPORTED_MODULE_2__.isUndefined)(pageData) || revalidateFirstPage && !i && !(0,swr_internal__WEBPACK_IMPORTED_MODULE_2__.isUndefined)(cacheData) || shouldRevalidateOnMount || cacheData && !(0,swr_internal__WEBPACK_IMPORTED_MODULE_2__.isUndefined)(cacheData[i]) && !config.compare(cacheData[i], pageData);\n                if (fn && shouldFetchPage) {\n                    const revalidate = async ()=>{\n                        pageData = await fn(pageArg);\n                        setSWRCache({\n                            data: pageData,\n                            _k: pageArg\n                        });\n                        data[i] = pageData;\n                    };\n                    if (parallel) {\n                        revalidators.push(revalidate);\n                    } else {\n                        await revalidate();\n                    }\n                } else {\n                    data[i] = pageData;\n                }\n                if (!parallel) {\n                    previousPageData = pageData;\n                }\n            }\n            // flush all revalidateions in parallel\n            if (parallel) {\n                await Promise.all(revalidators.map((r)=>r()));\n            }\n            // once we executed the data fetching based on the context, clear the context\n            set({\n                _i: swr_internal__WEBPACK_IMPORTED_MODULE_2__.UNDEFINED\n            });\n            // return the data\n            return data;\n        }, config);\n        const mutate = (0,react__WEBPACK_IMPORTED_MODULE_0__.useCallback)(function(data, opts) {\n            // When passing as a boolean, it's explicitly used to disable/enable\n            // revalidation.\n            const options = typeof opts === \"boolean\" ? {\n                revalidate: opts\n            } : opts || {};\n            // Default to true.\n            const shouldRevalidate = options.revalidate !== false;\n            // It is possible that the key is still falsy.\n            if (!infiniteKey) return EMPTY_PROMISE;\n            if (shouldRevalidate) {\n                if (!(0,swr_internal__WEBPACK_IMPORTED_MODULE_2__.isUndefined)(data)) {\n                    // We only revalidate the pages that are changed\n                    set({\n                        _i: false\n                    });\n                } else {\n                    // Calling `mutate()`, we revalidate all pages\n                    set({\n                        _i: true\n                    });\n                }\n            }\n            return arguments.length ? swr.mutate(data, {\n                ...options,\n                revalidate: shouldRevalidate\n            }) : swr.mutate();\n        }, // eslint-disable-next-line react-hooks/exhaustive-deps\n        [\n            infiniteKey,\n            cache\n        ]);\n        // Extend the SWR API\n        const setSize = (0,react__WEBPACK_IMPORTED_MODULE_0__.useCallback)((arg)=>{\n            // It is possible that the key is still falsy.\n            if (!infiniteKey) return EMPTY_PROMISE;\n            const [, changeSize] = (0,swr_internal__WEBPACK_IMPORTED_MODULE_2__.createCacheHelper)(cache, infiniteKey);\n            let size;\n            if ((0,swr_internal__WEBPACK_IMPORTED_MODULE_2__.isFunction)(arg)) {\n                size = arg(resolvePageSize());\n            } else if (typeof arg == \"number\") {\n                size = arg;\n            }\n            if (typeof size != \"number\") return EMPTY_PROMISE;\n            changeSize({\n                _l: size\n            });\n            lastPageSizeRef.current = size;\n            // Calculate the page data after the size change.\n            const data = [];\n            const [getInfiniteCache] = (0,swr_internal__WEBPACK_IMPORTED_MODULE_2__.createCacheHelper)(cache, infiniteKey);\n            let previousPageData = null;\n            for(let i = 0; i < size; ++i){\n                const [pageKey] = (0,swr_internal__WEBPACK_IMPORTED_MODULE_2__.serialize)(getKey(i, previousPageData));\n                const [getCache] = (0,swr_internal__WEBPACK_IMPORTED_MODULE_2__.createCacheHelper)(cache, pageKey);\n                // Get the cached page data.\n                const pageData = pageKey ? getCache().data : swr_internal__WEBPACK_IMPORTED_MODULE_2__.UNDEFINED;\n                // Call `mutate` with infinte cache data if we can't get it from the page cache.\n                if ((0,swr_internal__WEBPACK_IMPORTED_MODULE_2__.isUndefined)(pageData)) {\n                    return mutate(getInfiniteCache().data);\n                }\n                data.push(pageData);\n                previousPageData = pageData;\n            }\n            return mutate(data);\n        }, // eslint-disable-next-line react-hooks/exhaustive-deps\n        [\n            infiniteKey,\n            cache,\n            mutate,\n            resolvePageSize\n        ]);\n        // Use getter functions to avoid unnecessary re-renders caused by triggering\n        // all the getters of the returned swr object.\n        return {\n            size: resolvePageSize(),\n            setSize,\n            mutate,\n            get data () {\n                return swr.data;\n            },\n            get error () {\n                return swr.error;\n            },\n            get isValidating () {\n                return swr.isValidating;\n            },\n            get isLoading () {\n                return swr.isLoading;\n            }\n        };\n    }, \"i89pmFLFvzdZTEywjnVAUUPIc98=\", true, function() {\n        return [\n            use_sync_external_store_shim_index_js__WEBPACK_IMPORTED_MODULE_3__.useSyncExternalStore,\n            swr_internal__WEBPACK_IMPORTED_MODULE_2__.useIsomorphicLayoutEffect\n        ];\n    });\nconst useSWRInfinite = (0,swr_internal__WEBPACK_IMPORTED_MODULE_2__.withMiddleware)(swr__WEBPACK_IMPORTED_MODULE_1__[\"default\"], infinite);\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/swr/infinite/dist/index.mjs\n"));

/***/ }),

/***/ "(app-pages-browser)/./public/login.json":
/*!***************************!*\
  !*** ./public/login.json ***!
  \***************************/
/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

"use strict";
module.exports = JSON.parse('{"v":"4.8.0","meta":{"g":"LottieFiles AE 1.0.0","a":"","k":"","d":"","tc":""},"fr":60,"ip":0,"op":164,"w":600,"h":500,"nm":"Comp 1","ddd":0,"assets":[{"id":"comp_0","layers":[{"ddd":0,"ind":1,"ty":4,"nm":"Shape Layer 1","sr":1,"ks":{"o":{"a":0,"k":100,"ix":11},"r":{"a":0,"k":0,"ix":10},"p":{"a":0,"k":[2161,1643,0],"ix":2},"a":{"a":0,"k":[0,0,0],"ix":1},"s":{"a":0,"k":[100,100,100],"ix":6}},"ao":0,"shapes":[{"ty":"gr","it":[{"ind":0,"ty":"sh","ix":1,"ks":{"a":0,"k":{"i":[[84.5,-13.5],[104.5,12],[149.5,-42]],"o":[[84.5,-13.5],[104.5,12],[149.5,-42]],"v":[[84.5,-13.5],[104.5,12],[149.5,-42]],"c":false},"ix":2},"nm":"Path 1","mn":"ADBE Vector Shape - Group","hd":false},{"ty":"tm","s":{"a":0,"k":0,"ix":1},"e":{"a":1,"k":[{"i":{"x":[0.34],"y":[1]},"o":{"x":[0.66],"y":[0]},"t":82,"s":[0]},{"t":92,"s":[100]}],"ix":2},"o":{"a":0,"k":0,"ix":3},"m":1,"ix":2,"nm":"Trim Paths 1","mn":"ADBE Vector Filter - Trim","hd":false},{"ty":"st","c":{"a":0,"k":[0.9961,0.9529,0.8667,1],"ix":3},"o":{"a":0,"k":100,"ix":4},"w":{"a":0,"k":20,"ix":5},"lc":2,"lj":1,"ml":4,"bm":0,"nm":"Stroke 1","mn":"ADBE Vector Graphic - Stroke","hd":false},{"ty":"tr","p":{"a":0,"k":[0,0],"ix":2},"a":{"a":0,"k":[0,0],"ix":1},"s":{"a":0,"k":[100,100],"ix":3},"r":{"a":0,"k":0,"ix":6},"o":{"a":0,"k":100,"ix":7},"sk":{"a":0,"k":0,"ix":4},"sa":{"a":0,"k":0,"ix":5},"nm":"Transform"}],"nm":"Shape 1","np":3,"cix":2,"bm":3,"ix":1,"mn":"ADBE Vector Group","hd":false}],"ip":31,"op":331,"st":31,"bm":0,"completed":true},{"ddd":0,"ind":2,"ty":4,"nm":"Ellipse 13","sr":1,"ks":{"o":{"a":0,"k":100,"ix":11},"r":{"a":0,"k":0,"ix":10},"p":{"a":0,"k":[2274.287,1629.819,0],"ix":2},"a":{"a":0,"k":[0,0,0],"ix":1},"s":{"a":1,"k":[{"i":{"x":[0.34,0.34,0.34],"y":[1,1,1]},"o":{"x":[0.66,0.66,0.66],"y":[0,0,0]},"t":46,"s":[0,0,100]},{"i":{"x":[0.34,0.34,0.34],"y":[1,1,1]},"o":{"x":[0.66,0.66,0.66],"y":[0,0,0]},"t":66,"s":[100,100,100]},{"i":{"x":[0.34,0.34,0.34],"y":[1,1,1]},"o":{"x":[0.66,0.66,0.66],"y":[0,0,0]},"t":77,"s":[100,100,100]},{"i":{"x":[0,0,0],"y":[1.881,1.881,1]},"o":{"x":[0.5,0.5,0.5],"y":[-3.8,-3.8,0]},"t":88,"s":[79,79,100]},{"t":107,"s":[100,100,100]}],"ix":6}},"ao":0,"shapes":[{"ty":"gr","it":[{"d":1,"ty":"el","s":{"a":0,"k":[66.656,66.656],"ix":2},"p":{"a":0,"k":[0,0],"ix":3},"nm":"Ellipse Path 1","mn":"ADBE Vector Shape - Ellipse","hd":false},{"ty":"st","c":{"a":0,"k":[0.9961,0.9529,0.8667,1],"ix":3},"o":{"a":0,"k":100,"ix":4},"w":{"a":0,"k":4,"ix":5},"lc":1,"lj":1,"ml":4,"bm":0,"nm":"Stroke 1","mn":"ADBE Vector Graphic - Stroke","hd":false},{"ty":"fl","c":{"a":0,"k":[0.9523,0.9241,0.8677,1],"ix":4},"o":{"a":0,"k":100,"ix":5},"r":1,"bm":0,"nm":"Fill 1","mn":"ADBE Vector Graphic - Fill","hd":false},{"ty":"tr","p":{"a":0,"k":[0,0],"ix":2},"a":{"a":0,"k":[0,0],"ix":1},"s":{"a":0,"k":[300,300],"ix":3},"r":{"a":0,"k":0,"ix":6},"o":{"a":0,"k":100,"ix":7},"sk":{"a":0,"k":0,"ix":4},"sa":{"a":0,"k":0,"ix":5},"nm":"Transform"}],"nm":"Ellipse 13","np":3,"cix":2,"bm":0,"ix":1,"mn":"ADBE Vector Group","hd":false}],"ip":31,"op":331,"st":31,"bm":1,"completed":true},{"ddd":0,"ind":3,"ty":0,"nm":"Pre-comp 1","refId":"comp_1","sr":1,"ks":{"o":{"a":0,"k":100,"ix":11},"r":{"a":0,"k":0,"ix":10},"p":{"a":0,"k":[2160,1642.5,0],"ix":2},"a":{"a":0,"k":[2160,1642.5,0],"ix":1},"s":{"a":0,"k":[100,100,100],"ix":6}},"ao":0,"w":4320,"h":3285,"ip":0,"op":300,"st":0,"bm":0,"completed":true,"layers":[{"ddd":0,"ind":1,"ty":4,"nm":"Vector","sr":1,"ks":{"o":{"a":0,"k":100,"ix":11},"r":{"a":1,"k":[{"i":{"x":[0.24],"y":[1]},"o":{"x":[0.76],"y":[0]},"t":10,"s":[0]},{"i":{"x":[0.24],"y":[1]},"o":{"x":[0.76],"y":[0]},"t":45,"s":[180]},{"i":{"x":[0.24],"y":[1]},"o":{"x":[0.76],"y":[0]},"t":75,"s":[180]},{"t":109,"s":[360]}],"ix":10},"p":{"s":true,"x":{"a":1,"k":[{"i":{"x":[0],"y":[1]},"o":{"x":[0.9],"y":[0]},"t":13,"s":[1889.561]},{"t":33,"s":[1889.561]}],"ix":3},"y":{"a":1,"k":[{"i":{"x":[0],"y":[1.681]},"o":{"x":[0.9],"y":[0]},"t":13,"s":[2564.988]},{"t":33,"s":[1972.988]}],"ix":4}},"a":{"a":0,"k":[0,0,0],"ix":1},"s":{"a":0,"k":[100,100,100],"ix":6}},"ao":0,"shapes":[{"ty":"gr","it":[{"ind":0,"ty":"sh","ix":1,"ks":{"a":0,"k":{"i":[[13.093,-17.389000000000003],[-4.196999999999999,-26.292],[-17.352999999999998,-13.125],[-26.290999999999997,4.18],[-13.093,17.389000000000003],[4.196999999999999,26.292],[17.395,13.125],[26.290999999999997,-4.18]],"o":[[4.196999999999999,-26.292],[-13.093,-17.389000000000003],[-26.290999999999997,-4.2219999999999995],[-17.352999999999998,13.125],[-4.196999999999999,26.292],[13.135,17.389000000000003],[26.290999999999997,4.2219999999999995],[17.352999999999998,-13.125]],"v":[[9.376,-21.109],[-9.376,-21.109],[-21.112,-9.405],[-21.112,9.363],[-9.376,21.109],[9.376,21.109],[21.112,9.405],[21.112,-9.363]],"c":true},"ix":2},"nm":"Path 1","mn":"ADBE Vector Shape - Group","hd":false,"_render":true},{"ind":1,"ty":"sh","ix":2,"ks":{"a":0,"k":{"i":[[10.88,6.019],[6.035,-10.868],[-10.838,-5.977],[-5.993,10.868]],"o":[[10.88,-5.977],[-5.993,-10.868],[-10.838,5.977],[5.993,10.868]],"v":[[10.88,0],[0.021,-10.868],[-10.838,0],[0.021,10.868]],"c":true},"ix":2},"nm":"Path 2","mn":"ADBE Vector Shape - Group","hd":false,"_render":true},{"ty":"mm","mm":1,"nm":"Merge Paths 1","mn":"ADBE Vector Filter - Merge","hd":false,"_render":true},{"ty":"fl","c":{"a":0,"k":[0.884,0.316,0.884,1],"ix":4},"o":{"a":0,"k":100,"ix":5},"r":1,"bm":0,"nm":"Fill 1","mn":"ADBE Vector Graphic - Fill","hd":false,"_render":true},{"ty":"tr","p":{"a":0,"k":[0,0],"ix":2},"a":{"a":0,"k":[0,0],"ix":1},"s":{"a":0,"k":[300,300],"ix":3},"r":{"a":0,"k":0,"ix":6},"o":{"a":0,"k":100,"ix":7},"sk":{"a":0,"k":0,"ix":4},"sa":{"a":0,"k":0,"ix":5},"nm":"Transform","_render":true}],"nm":"Vector","np":4,"cix":2,"bm":0,"ix":1,"mn":"ADBE Vector Group","hd":false,"_render":true}],"ip":0,"op":300,"st":0,"bm":1,"completed":true},{"ddd":0,"ind":2,"ty":4,"nm":"Ellipse 16","sr":1,"ks":{"o":{"a":0,"k":15,"ix":11},"r":{"a":0,"k":0,"ix":10},"p":{"s":true,"x":{"a":1,"k":[{"i":{"x":[0],"y":[1]},"o":{"x":[0.9],"y":[0]},"t":13,"s":[2435.926]},{"t":38,"s":[2435.926]}],"ix":3},"y":{"a":1,"k":[{"i":{"x":[0],"y":[1.637]},"o":{"x":[0.9],"y":[0]},"t":13,"s":[2258.47]},{"t":38,"s":[1858.47]}],"ix":4}},"a":{"a":0,"k":[0,0,0],"ix":1},"s":{"a":0,"k":[100,100,100],"ix":6}},"ao":0,"shapes":[{"ty":"gr","it":[{"d":1,"ty":"el","s":{"a":0,"k":[37.713,37.713],"ix":2},"p":{"a":0,"k":[0,0],"ix":3},"nm":"Ellipse Path 1","mn":"ADBE Vector Shape - Ellipse","hd":false,"_render":true},{"ty":"st","c":{"a":0,"k":[0.9882,0.8235,0.9882,1],"ix":3},"o":{"a":0,"k":100,"ix":4},"w":{"a":0,"k":12,"ix":5},"lc":1,"lj":1,"ml":4,"bm":0,"nm":"Stroke 1","mn":"ADBE Vector Graphic - Stroke","hd":false,"_render":true},{"ty":"tr","p":{"a":0,"k":[0,0],"ix":2},"a":{"a":0,"k":[0,0],"ix":1},"s":{"a":0,"k":[300,300],"ix":3},"r":{"a":0,"k":0,"ix":6},"o":{"a":0,"k":100,"ix":7},"sk":{"a":0,"k":0,"ix":4},"sa":{"a":0,"k":0,"ix":5},"nm":"Transform","_render":true}],"nm":"Ellipse 16","np":2,"cix":2,"bm":0,"ix":1,"mn":"ADBE Vector Group","hd":false,"_render":true}],"ip":0,"op":300,"st":0,"bm":0,"completed":true},{"ddd":0,"ind":3,"ty":4,"nm":"Ellipse 15","sr":1,"ks":{"o":{"a":0,"k":29,"ix":11},"r":{"a":0,"k":0,"ix":10},"p":{"s":true,"x":{"a":1,"k":[{"i":{"x":[0],"y":[1]},"o":{"x":[0.9],"y":[0]},"t":13,"s":[1796.943]},{"t":32,"s":[1796.943]}],"ix":3},"y":{"a":1,"k":[{"i":{"x":[0],"y":[1.5]},"o":{"x":[0.9],"y":[0]},"t":13,"s":[2442.836]},{"t":32,"s":[1850.836]}],"ix":4}},"a":{"a":0,"k":[0,0,0],"ix":1},"s":{"a":1,"k":[{"i":{"x":[0.5,0.5,0.5],"y":[1.312,1.312,1]},"o":{"x":[0.5,0.5,0.5],"y":[-0.312,-0.312,0]},"t":24,"s":[100,100,100]},{"i":{"x":[0.5,0.5,0.5],"y":[1.286,1.286,1]},"o":{"x":[0.5,0.5,0.5],"y":[-0.286,-0.286,0]},"t":39,"s":[55,55,100]},{"i":{"x":[0.5,0.5,0.5],"y":[1,1,1]},"o":{"x":[0.167,0.167,0.167],"y":[0,0,0]},"t":53,"s":[100,100,100]},{"i":{"x":[0.5,0.5,0.5],"y":[1,1,1]},"o":{"x":[0.167,0.167,0.167],"y":[0,0,0]},"t":112,"s":[100,100,100]},{"i":{"x":[0.5,0.5,0.5],"y":[1,1,1]},"o":{"x":[0.5,0.5,0.5],"y":[0,0,0]},"t":128,"s":[55,55,100]},{"t":145,"s":[100,100,100]}],"ix":6}},"ao":0,"shapes":[{"ty":"gr","it":[{"d":1,"ty":"el","s":{"a":0,"k":[19.295,19.295],"ix":2},"p":{"a":0,"k":[0,0],"ix":3},"nm":"Ellipse Path 1","mn":"ADBE Vector Shape - Ellipse","hd":false,"_render":true},{"ty":"st","c":{"a":0,"k":[0.9882,0.8235,0.9882,1],"ix":3},"o":{"a":0,"k":100,"ix":4},"w":{"a":0,"k":7,"ix":5},"lc":1,"lj":1,"ml":4,"bm":0,"nm":"Stroke 1","mn":"ADBE Vector Graphic - Stroke","hd":false,"_render":true},{"ty":"tr","p":{"a":0,"k":[0,0],"ix":2},"a":{"a":0,"k":[0,0],"ix":1},"s":{"a":0,"k":[300,300],"ix":3},"r":{"a":0,"k":0,"ix":6},"o":{"a":0,"k":100,"ix":7},"sk":{"a":0,"k":0,"ix":4},"sa":{"a":0,"k":0,"ix":5},"nm":"Transform","_render":true}],"nm":"Ellipse 15","np":2,"cix":2,"bm":0,"ix":1,"mn":"ADBE Vector Group","hd":false,"_render":true}],"ip":0,"op":300,"st":0,"bm":0,"completed":true},{"ddd":0,"ind":4,"ty":4,"nm":"Vector","sr":1,"ks":{"o":{"a":0,"k":100,"ix":11},"r":{"a":0,"k":0,"ix":10},"p":{"s":true,"x":{"a":1,"k":[{"i":{"x":[0],"y":[1]},"o":{"x":[0.9],"y":[0]},"t":13,"s":[2092.288]},{"t":50,"s":[2092.288]}],"ix":3},"y":{"a":1,"k":[{"i":{"x":[0],"y":[1.579]},"o":{"x":[0.9],"y":[0]},"t":13,"s":[2372.207]},{"t":50,"s":[1780.207]}],"ix":4}},"a":{"a":0,"k":[0,0,0],"ix":1},"s":{"a":0,"k":[100,100,100],"ix":6}},"ao":0,"shapes":[{"ty":"gr","it":[{"ind":0,"ty":"sh","ix":1,"ks":{"a":0,"k":{"i":[[-5.929,10.736],[10.736,5.929],[5.929,-10.736],[-10.736,-5.929]],"o":[[5.929,10.736],[10.736,-5.929],[-5.929,-10.736],[-10.736,5.929]],"v":[[0,10.736],[10.736,0],[0,-10.736],[-10.736,0]],"c":true},"ix":2},"nm":"Path 1","mn":"ADBE Vector Shape - Group","hd":false,"_render":true},{"ty":"fl","c":{"a":0,"k":[0.9961,0.9529,0.8667,1],"ix":4},"o":{"a":0,"k":100,"ix":5},"r":1,"bm":0,"nm":"Fill 1","mn":"ADBE Vector Graphic - Fill","hd":false,"_render":true},{"ty":"tr","p":{"a":0,"k":[0,0],"ix":2},"a":{"a":0,"k":[0,0],"ix":1},"s":{"a":0,"k":[300,300],"ix":3},"r":{"a":0,"k":0,"ix":6},"o":{"a":0,"k":100,"ix":7},"sk":{"a":0,"k":0,"ix":4},"sa":{"a":0,"k":0,"ix":5},"nm":"Transform","_render":true}],"nm":"Vector","np":2,"cix":2,"bm":0,"ix":1,"mn":"ADBE Vector Group","hd":false,"_render":true}],"ip":0,"op":300,"st":0,"bm":0,"completed":true},{"ddd":0,"ind":5,"ty":4,"nm":"Vector","sr":1,"ks":{"o":{"a":0,"k":100,"ix":11},"r":{"a":0,"k":0,"ix":10},"p":{"s":true,"x":{"a":1,"k":[{"i":{"x":[0],"y":[1]},"o":{"x":[0.9],"y":[0]},"t":13,"s":[2092.417]},{"t":50,"s":[2092.417]}],"ix":3},"y":{"a":1,"k":[{"i":{"x":[0],"y":[1.579]},"o":{"x":[0.9],"y":[0]},"t":13,"s":[2448.281]},{"t":50,"s":[1856.281]}],"ix":4}},"a":{"a":0,"k":[0,0,0],"ix":1},"s":{"a":0,"k":[100,100,100],"ix":6}},"ao":0,"shapes":[{"ty":"gr","it":[{"ind":0,"ty":"sh","ix":1,"ks":{"a":0,"k":{"i":[[-20.615,-2.1609999999999996],[-20.613999999999997,10.64],[20.531,11.388],[20.615,9.975],[11.388,-11.388]],"o":[[-20.615,9.975],[-20.531,11.388],[20.613999999999997,10.722999999999999],[20.615,-2.1609999999999996],[-11.388,-11.388]],"v":[[-20.615,9.227],[-20.531,11.388],[20.531,11.388],[20.615,9.227],[0,-11.388]],"c":true},"ix":2},"nm":"Path 1","mn":"ADBE Vector Shape - Group","hd":false,"_render":true},{"ty":"fl","c":{"a":0,"k":[0.9961,0.9529,0.8667,1],"ix":4},"o":{"a":0,"k":100,"ix":5},"r":1,"bm":0,"nm":"Fill 1","mn":"ADBE Vector Graphic - Fill","hd":false,"_render":true},{"ty":"tr","p":{"a":0,"k":[0,0],"ix":2},"a":{"a":0,"k":[0,0],"ix":1},"s":{"a":0,"k":[300,300],"ix":3},"r":{"a":0,"k":0,"ix":6},"o":{"a":0,"k":100,"ix":7},"sk":{"a":0,"k":0,"ix":4},"sa":{"a":0,"k":0,"ix":5},"nm":"Transform","_render":true}],"nm":"Vector","np":2,"cix":2,"bm":0,"ix":1,"mn":"ADBE Vector Group","hd":false,"_render":true}],"ip":0,"op":300,"st":0,"bm":0,"completed":true},{"ddd":0,"ind":6,"ty":4,"nm":"Vector","sr":1,"ks":{"o":{"a":0,"k":100,"ix":11},"r":{"a":0,"k":0,"ix":10},"p":{"s":true,"x":{"a":1,"k":[{"i":{"x":[0],"y":[1]},"o":{"x":[0.9],"y":[0]},"t":13,"s":[1851.529]},{"t":47,"s":[1851.529]}],"ix":3},"y":{"a":1,"k":[{"i":{"x":[0],"y":[1.559]},"o":{"x":[0.9],"y":[0]},"t":13,"s":[2217.331]},{"t":47,"s":[1625.331]}],"ix":4}},"a":{"a":0,"k":[0,0,0],"ix":1},"s":{"a":0,"k":[100,100,100],"ix":6}},"ao":0,"shapes":[{"ty":"gr","it":[{"ind":0,"ty":"sh","ix":1,"ks":{"a":0,"k":{"i":[[-19.319,-2.1079999999999988],[-19.319,10.379999999999999],[19.241,11.11],[19.319,9.732000000000001],[10.672,-11.11]],"o":[[-19.319,9.732000000000001],[-19.241,11.11],[19.319,10.460999999999999],[19.319,-2.1079999999999988],[-10.672,-11.11]],"v":[[-19.319,9.002],[-19.241,11.11],[19.241,11.11],[19.319,9.002],[0,-11.11]],"c":true},"ix":2},"nm":"Path 1","mn":"ADBE Vector Shape - Group","hd":false,"_render":true},{"ty":"fl","c":{"a":0,"k":[0.1804,0.0118,0.898,1],"ix":4},"o":{"a":0,"k":100,"ix":5},"r":1,"bm":0,"nm":"Fill 1","mn":"ADBE Vector Graphic - Fill","hd":false,"_render":true},{"ty":"tr","p":{"a":0,"k":[0,0],"ix":2},"a":{"a":0,"k":[0,0],"ix":1},"s":{"a":0,"k":[300,300],"ix":3},"r":{"a":0,"k":0,"ix":6},"o":{"a":0,"k":100,"ix":7},"sk":{"a":0,"k":0,"ix":4},"sa":{"a":0,"k":0,"ix":5},"nm":"Transform","_render":true}],"nm":"Vector","np":2,"cix":2,"bm":0,"ix":1,"mn":"ADBE Vector Group","hd":false,"_render":true}],"ip":0,"op":300,"st":0,"bm":0,"completed":true},{"ddd":0,"ind":7,"ty":4,"nm":"Vector","sr":1,"ks":{"o":{"a":0,"k":100,"ix":11},"r":{"a":0,"k":0,"ix":10},"p":{"s":true,"x":{"a":1,"k":[{"i":{"x":[0],"y":[1]},"o":{"x":[0.9],"y":[0]},"t":13,"s":[1895.672]},{"t":47,"s":[1895.672]}],"ix":3},"y":{"a":1,"k":[{"i":{"x":[0],"y":[1.559]},"o":{"x":[0.9],"y":[0]},"t":13,"s":[2216.889]},{"t":47,"s":[1624.889]}],"ix":4}},"a":{"a":0,"k":[0,0,0],"ix":1},"s":{"a":0,"k":[100,100,100],"ix":6}},"ao":0,"shapes":[{"ty":"gr","it":[{"ind":0,"ty":"sh","ix":1,"ks":{"a":0,"k":{"i":[[14.033,-10.963],[-14.033,-10.963],[-14.033,10.963],[14.033,10.963]],"o":[[14.033,-10.963],[-14.033,-10.963],[-14.033,10.963],[14.033,10.963]],"v":[[14.033,-10.963],[-14.033,-10.963],[-14.033,10.963],[14.033,10.963]],"c":true},"ix":2},"nm":"Path 1","mn":"ADBE Vector Shape - Group","hd":false,"_render":true},{"ty":"fl","c":{"a":0,"k":[1,0.5569,0.9255,1],"ix":4},"o":{"a":0,"k":100,"ix":5},"r":1,"bm":0,"nm":"Fill 1","mn":"ADBE Vector Graphic - Fill","hd":false,"_render":true},{"ty":"tr","p":{"a":0,"k":[0,0],"ix":2},"a":{"a":0,"k":[0,0],"ix":1},"s":{"a":0,"k":[300,300],"ix":3},"r":{"a":0,"k":0,"ix":6},"o":{"a":0,"k":100,"ix":7},"sk":{"a":0,"k":0,"ix":4},"sa":{"a":0,"k":0,"ix":5},"nm":"Transform","_render":true}],"nm":"Vector","np":2,"cix":2,"bm":0,"ix":1,"mn":"ADBE Vector Group","hd":false,"_render":true}],"ip":0,"op":300,"st":0,"bm":0,"completed":true},{"ddd":0,"ind":8,"ty":4,"nm":"Vector","sr":1,"ks":{"o":{"a":0,"k":100,"ix":11},"r":{"a":0,"k":0,"ix":10},"p":{"s":true,"x":{"a":1,"k":[{"i":{"x":[0],"y":[1]},"o":{"x":[0.9],"y":[0]},"t":13,"s":[2092.073]},{"t":47,"s":[2092.073]}],"ix":3},"y":{"a":1,"k":[{"i":{"x":[0],"y":[1.559]},"o":{"x":[0.9],"y":[0]},"t":13,"s":[2410.499]},{"t":47,"s":[1818.499]}],"ix":4}},"a":{"a":0,"k":[0,0,0],"ix":1},"s":{"a":0,"k":[100,100,100],"ix":6}},"ao":0,"shapes":[{"ty":"gr","it":[{"ind":0,"ty":"sh","ix":1,"ks":{"a":0,"k":{"i":[[-13.178999999999998,-75.5],[60.5,-60.361000000000004],[60.5,28.725],[57.886,65.019],[42.428,75.5],[-14.957999999999998,75.5],[-48.656,73.17099999999999],[-60.5,59.456],[-60.5,-75.5]],"o":[[43.373,-75.5],[60.5,-12.551000000000002],[60.5,59.456],[48.656,73.236],[14.957999999999998,75.5],[-42.372,75.5],[-57.886,65.019],[-60.5,53.698],[-60.5,-75.5]],"v":[[22.298,-75.5],[60.5,-41.664],[60.5,53.698],[53.271,69.095],[35.866,75.5],[-35.866,75.5],[-53.271,69.095],[-60.5,53.698],[-60.5,-75.5]],"c":true},"ix":2},"nm":"Path 1","mn":"ADBE Vector Shape - Group","hd":false,"_render":true},{"ty":"fl","c":{"a":0,"k":[1,0.5569,0.9255,1],"ix":4},"o":{"a":0,"k":100,"ix":5},"r":1,"bm":0,"nm":"Fill 1","mn":"ADBE Vector Graphic - Fill","hd":false,"_render":true},{"ty":"tr","p":{"a":0,"k":[0,0],"ix":2},"a":{"a":0,"k":[0,0],"ix":1},"s":{"a":0,"k":[300,300],"ix":3},"r":{"a":0,"k":0,"ix":6},"o":{"a":0,"k":100,"ix":7},"sk":{"a":0,"k":0,"ix":4},"sa":{"a":0,"k":0,"ix":5},"nm":"Transform","_render":true}],"nm":"Vector","np":2,"cix":2,"bm":0,"ix":1,"mn":"ADBE Vector Group","hd":false,"_render":true}],"ip":0,"op":300,"st":0,"bm":0,"completed":true}]},{"ddd":0,"ind":4,"ty":4,"nm":"Ellipse 14","sr":1,"ks":{"o":{"a":0,"k":38,"ix":11},"r":{"a":0,"k":0,"ix":10},"p":{"a":0,"k":[2275,1629.5,0],"ix":2},"a":{"a":0,"k":[0,0,0],"ix":1},"s":{"a":1,"k":[{"i":{"x":[0.34,0.34,0.34],"y":[1,1,1]},"o":{"x":[0.66,0.66,0.66],"y":[0,0,0]},"t":41,"s":[0,0,100]},{"i":{"x":[0.34,0.34,0.34],"y":[1,1,1]},"o":{"x":[0.66,0.66,0.66],"y":[0,0,0]},"t":61,"s":[109,109,100]},{"i":{"x":[0.34,0.34,0.34],"y":[1,1,1]},"o":{"x":[0.66,0.66,0.66],"y":[0,0,0]},"t":81,"s":[100,100,100]},{"i":{"x":[0.5,0.5,0.5],"y":[4.422,4.422,1]},"o":{"x":[0.5,0.5,0.5],"y":[-3.422,-3.422,0]},"t":92,"s":[73,73,100]},{"t":114,"s":[100,100,100]}],"ix":6}},"ao":0,"shapes":[{"ty":"gr","it":[{"d":1,"ty":"el","s":{"a":0,"k":[94,95],"ix":2},"p":{"a":0,"k":[0,0],"ix":3},"nm":"Ellipse Path 1","mn":"ADBE Vector Shape - Ellipse","hd":false},{"ty":"st","c":{"a":0,"k":[0.9286,0.3914,0.9286,1],"ix":3},"o":{"a":0,"k":100,"ix":4},"w":{"a":0,"k":4,"ix":5},"lc":1,"lj":1,"ml":4,"bm":0,"nm":"Stroke 1","mn":"ADBE Vector Graphic - Stroke","hd":false},{"ty":"fl","c":{"a":0,"k":[1,0.66,1,1],"ix":4},"o":{"a":0,"k":100,"ix":5},"r":1,"bm":0,"nm":"Fill 1","mn":"ADBE Vector Graphic - Fill","hd":false},{"ty":"tr","p":{"a":0,"k":[0,0],"ix":2},"a":{"a":0,"k":[0,0],"ix":1},"s":{"a":0,"k":[300,300],"ix":3},"r":{"a":0,"k":0,"ix":6},"o":{"a":0,"k":100,"ix":7},"sk":{"a":0,"k":0,"ix":4},"sa":{"a":0,"k":0,"ix":5},"nm":"Transform"}],"nm":"Ellipse 14","np":3,"cix":2,"bm":0,"ix":1,"mn":"ADBE Vector Group","hd":false}],"ip":31,"op":331,"st":31,"bm":1,"completed":true}]},{"id":"comp_1","layers":[{"ddd":0,"ind":1,"ty":4,"nm":"Vector","sr":1,"ks":{"o":{"a":0,"k":100,"ix":11},"r":{"a":1,"k":[{"i":{"x":[0.24],"y":[1]},"o":{"x":[0.76],"y":[0]},"t":10,"s":[0]},{"i":{"x":[0.24],"y":[1]},"o":{"x":[0.76],"y":[0]},"t":45,"s":[180]},{"i":{"x":[0.24],"y":[1]},"o":{"x":[0.76],"y":[0]},"t":75,"s":[180]},{"t":109,"s":[360]}],"ix":10},"p":{"s":true,"x":{"a":1,"k":[{"i":{"x":[0],"y":[1]},"o":{"x":[0.9],"y":[0]},"t":13,"s":[1889.561]},{"t":33,"s":[1889.561]}],"ix":3},"y":{"a":1,"k":[{"i":{"x":[0],"y":[1.681]},"o":{"x":[0.9],"y":[0]},"t":13,"s":[2564.988]},{"t":33,"s":[1972.988]}],"ix":4}},"a":{"a":0,"k":[0,0,0],"ix":1},"s":{"a":0,"k":[100,100,100],"ix":6}},"ao":0,"shapes":[{"ty":"gr","it":[{"ind":0,"ty":"sh","ix":1,"ks":{"a":0,"k":{"i":[[13.093,-17.389000000000003],[-4.196999999999999,-26.292],[-17.352999999999998,-13.125],[-26.290999999999997,4.18],[-13.093,17.389000000000003],[4.196999999999999,26.292],[17.395,13.125],[26.290999999999997,-4.18]],"o":[[4.196999999999999,-26.292],[-13.093,-17.389000000000003],[-26.290999999999997,-4.2219999999999995],[-17.352999999999998,13.125],[-4.196999999999999,26.292],[13.135,17.389000000000003],[26.290999999999997,4.2219999999999995],[17.352999999999998,-13.125]],"v":[[9.376,-21.109],[-9.376,-21.109],[-21.112,-9.405],[-21.112,9.363],[-9.376,21.109],[9.376,21.109],[21.112,9.405],[21.112,-9.363]],"c":true},"ix":2},"nm":"Path 1","mn":"ADBE Vector Shape - Group","hd":false,"_render":true},{"ind":1,"ty":"sh","ix":2,"ks":{"a":0,"k":{"i":[[10.88,6.019],[6.035,-10.868],[-10.838,-5.977],[-5.993,10.868]],"o":[[10.88,-5.977],[-5.993,-10.868],[-10.838,5.977],[5.993,10.868]],"v":[[10.88,0],[0.021,-10.868],[-10.838,0],[0.021,10.868]],"c":true},"ix":2},"nm":"Path 2","mn":"ADBE Vector Shape - Group","hd":false,"_render":true},{"ty":"mm","mm":1,"nm":"Merge Paths 1","mn":"ADBE Vector Filter - Merge","hd":false,"_render":true},{"ty":"fl","c":{"a":0,"k":[0.884,0.316,0.884,1],"ix":4},"o":{"a":0,"k":100,"ix":5},"r":1,"bm":0,"nm":"Fill 1","mn":"ADBE Vector Graphic - Fill","hd":false,"_render":true},{"ty":"tr","p":{"a":0,"k":[0,0],"ix":2},"a":{"a":0,"k":[0,0],"ix":1},"s":{"a":0,"k":[300,300],"ix":3},"r":{"a":0,"k":0,"ix":6},"o":{"a":0,"k":100,"ix":7},"sk":{"a":0,"k":0,"ix":4},"sa":{"a":0,"k":0,"ix":5},"nm":"Transform","_render":true}],"nm":"Vector","np":4,"cix":2,"bm":0,"ix":1,"mn":"ADBE Vector Group","hd":false,"_render":true}],"ip":0,"op":300,"st":0,"bm":1,"completed":true},{"ddd":0,"ind":2,"ty":4,"nm":"Ellipse 16","sr":1,"ks":{"o":{"a":0,"k":15,"ix":11},"r":{"a":0,"k":0,"ix":10},"p":{"s":true,"x":{"a":1,"k":[{"i":{"x":[0],"y":[1]},"o":{"x":[0.9],"y":[0]},"t":13,"s":[2435.926]},{"t":38,"s":[2435.926]}],"ix":3},"y":{"a":1,"k":[{"i":{"x":[0],"y":[1.637]},"o":{"x":[0.9],"y":[0]},"t":13,"s":[2258.47]},{"t":38,"s":[1858.47]}],"ix":4}},"a":{"a":0,"k":[0,0,0],"ix":1},"s":{"a":0,"k":[100,100,100],"ix":6}},"ao":0,"shapes":[{"ty":"gr","it":[{"d":1,"ty":"el","s":{"a":0,"k":[37.713,37.713],"ix":2},"p":{"a":0,"k":[0,0],"ix":3},"nm":"Ellipse Path 1","mn":"ADBE Vector Shape - Ellipse","hd":false,"_render":true},{"ty":"st","c":{"a":0,"k":[0.9882,0.8235,0.9882,1],"ix":3},"o":{"a":0,"k":100,"ix":4},"w":{"a":0,"k":12,"ix":5},"lc":1,"lj":1,"ml":4,"bm":0,"nm":"Stroke 1","mn":"ADBE Vector Graphic - Stroke","hd":false,"_render":true},{"ty":"tr","p":{"a":0,"k":[0,0],"ix":2},"a":{"a":0,"k":[0,0],"ix":1},"s":{"a":0,"k":[300,300],"ix":3},"r":{"a":0,"k":0,"ix":6},"o":{"a":0,"k":100,"ix":7},"sk":{"a":0,"k":0,"ix":4},"sa":{"a":0,"k":0,"ix":5},"nm":"Transform","_render":true}],"nm":"Ellipse 16","np":2,"cix":2,"bm":0,"ix":1,"mn":"ADBE Vector Group","hd":false,"_render":true}],"ip":0,"op":300,"st":0,"bm":0,"completed":true},{"ddd":0,"ind":3,"ty":4,"nm":"Ellipse 15","sr":1,"ks":{"o":{"a":0,"k":29,"ix":11},"r":{"a":0,"k":0,"ix":10},"p":{"s":true,"x":{"a":1,"k":[{"i":{"x":[0],"y":[1]},"o":{"x":[0.9],"y":[0]},"t":13,"s":[1796.943]},{"t":32,"s":[1796.943]}],"ix":3},"y":{"a":1,"k":[{"i":{"x":[0],"y":[1.5]},"o":{"x":[0.9],"y":[0]},"t":13,"s":[2442.836]},{"t":32,"s":[1850.836]}],"ix":4}},"a":{"a":0,"k":[0,0,0],"ix":1},"s":{"a":1,"k":[{"i":{"x":[0.5,0.5,0.5],"y":[1.312,1.312,1]},"o":{"x":[0.5,0.5,0.5],"y":[-0.312,-0.312,0]},"t":24,"s":[100,100,100]},{"i":{"x":[0.5,0.5,0.5],"y":[1.286,1.286,1]},"o":{"x":[0.5,0.5,0.5],"y":[-0.286,-0.286,0]},"t":39,"s":[55,55,100]},{"i":{"x":[0.5,0.5,0.5],"y":[1,1,1]},"o":{"x":[0.167,0.167,0.167],"y":[0,0,0]},"t":53,"s":[100,100,100]},{"i":{"x":[0.5,0.5,0.5],"y":[1,1,1]},"o":{"x":[0.167,0.167,0.167],"y":[0,0,0]},"t":112,"s":[100,100,100]},{"i":{"x":[0.5,0.5,0.5],"y":[1,1,1]},"o":{"x":[0.5,0.5,0.5],"y":[0,0,0]},"t":128,"s":[55,55,100]},{"t":145,"s":[100,100,100]}],"ix":6}},"ao":0,"shapes":[{"ty":"gr","it":[{"d":1,"ty":"el","s":{"a":0,"k":[19.295,19.295],"ix":2},"p":{"a":0,"k":[0,0],"ix":3},"nm":"Ellipse Path 1","mn":"ADBE Vector Shape - Ellipse","hd":false,"_render":true},{"ty":"st","c":{"a":0,"k":[0.9882,0.8235,0.9882,1],"ix":3},"o":{"a":0,"k":100,"ix":4},"w":{"a":0,"k":7,"ix":5},"lc":1,"lj":1,"ml":4,"bm":0,"nm":"Stroke 1","mn":"ADBE Vector Graphic - Stroke","hd":false,"_render":true},{"ty":"tr","p":{"a":0,"k":[0,0],"ix":2},"a":{"a":0,"k":[0,0],"ix":1},"s":{"a":0,"k":[300,300],"ix":3},"r":{"a":0,"k":0,"ix":6},"o":{"a":0,"k":100,"ix":7},"sk":{"a":0,"k":0,"ix":4},"sa":{"a":0,"k":0,"ix":5},"nm":"Transform","_render":true}],"nm":"Ellipse 15","np":2,"cix":2,"bm":0,"ix":1,"mn":"ADBE Vector Group","hd":false,"_render":true}],"ip":0,"op":300,"st":0,"bm":0,"completed":true},{"ddd":0,"ind":4,"ty":4,"nm":"Vector","sr":1,"ks":{"o":{"a":0,"k":100,"ix":11},"r":{"a":0,"k":0,"ix":10},"p":{"s":true,"x":{"a":1,"k":[{"i":{"x":[0],"y":[1]},"o":{"x":[0.9],"y":[0]},"t":13,"s":[2092.288]},{"t":50,"s":[2092.288]}],"ix":3},"y":{"a":1,"k":[{"i":{"x":[0],"y":[1.579]},"o":{"x":[0.9],"y":[0]},"t":13,"s":[2372.207]},{"t":50,"s":[1780.207]}],"ix":4}},"a":{"a":0,"k":[0,0,0],"ix":1},"s":{"a":0,"k":[100,100,100],"ix":6}},"ao":0,"shapes":[{"ty":"gr","it":[{"ind":0,"ty":"sh","ix":1,"ks":{"a":0,"k":{"i":[[-5.929,10.736],[10.736,5.929],[5.929,-10.736],[-10.736,-5.929]],"o":[[5.929,10.736],[10.736,-5.929],[-5.929,-10.736],[-10.736,5.929]],"v":[[0,10.736],[10.736,0],[0,-10.736],[-10.736,0]],"c":true},"ix":2},"nm":"Path 1","mn":"ADBE Vector Shape - Group","hd":false,"_render":true},{"ty":"fl","c":{"a":0,"k":[0.9961,0.9529,0.8667,1],"ix":4},"o":{"a":0,"k":100,"ix":5},"r":1,"bm":0,"nm":"Fill 1","mn":"ADBE Vector Graphic - Fill","hd":false,"_render":true},{"ty":"tr","p":{"a":0,"k":[0,0],"ix":2},"a":{"a":0,"k":[0,0],"ix":1},"s":{"a":0,"k":[300,300],"ix":3},"r":{"a":0,"k":0,"ix":6},"o":{"a":0,"k":100,"ix":7},"sk":{"a":0,"k":0,"ix":4},"sa":{"a":0,"k":0,"ix":5},"nm":"Transform","_render":true}],"nm":"Vector","np":2,"cix":2,"bm":0,"ix":1,"mn":"ADBE Vector Group","hd":false,"_render":true}],"ip":0,"op":300,"st":0,"bm":0,"completed":true},{"ddd":0,"ind":5,"ty":4,"nm":"Vector","sr":1,"ks":{"o":{"a":0,"k":100,"ix":11},"r":{"a":0,"k":0,"ix":10},"p":{"s":true,"x":{"a":1,"k":[{"i":{"x":[0],"y":[1]},"o":{"x":[0.9],"y":[0]},"t":13,"s":[2092.417]},{"t":50,"s":[2092.417]}],"ix":3},"y":{"a":1,"k":[{"i":{"x":[0],"y":[1.579]},"o":{"x":[0.9],"y":[0]},"t":13,"s":[2448.281]},{"t":50,"s":[1856.281]}],"ix":4}},"a":{"a":0,"k":[0,0,0],"ix":1},"s":{"a":0,"k":[100,100,100],"ix":6}},"ao":0,"shapes":[{"ty":"gr","it":[{"ind":0,"ty":"sh","ix":1,"ks":{"a":0,"k":{"i":[[-20.615,-2.1609999999999996],[-20.613999999999997,10.64],[20.531,11.388],[20.615,9.975],[11.388,-11.388]],"o":[[-20.615,9.975],[-20.531,11.388],[20.613999999999997,10.722999999999999],[20.615,-2.1609999999999996],[-11.388,-11.388]],"v":[[-20.615,9.227],[-20.531,11.388],[20.531,11.388],[20.615,9.227],[0,-11.388]],"c":true},"ix":2},"nm":"Path 1","mn":"ADBE Vector Shape - Group","hd":false,"_render":true},{"ty":"fl","c":{"a":0,"k":[0.9961,0.9529,0.8667,1],"ix":4},"o":{"a":0,"k":100,"ix":5},"r":1,"bm":0,"nm":"Fill 1","mn":"ADBE Vector Graphic - Fill","hd":false,"_render":true},{"ty":"tr","p":{"a":0,"k":[0,0],"ix":2},"a":{"a":0,"k":[0,0],"ix":1},"s":{"a":0,"k":[300,300],"ix":3},"r":{"a":0,"k":0,"ix":6},"o":{"a":0,"k":100,"ix":7},"sk":{"a":0,"k":0,"ix":4},"sa":{"a":0,"k":0,"ix":5},"nm":"Transform","_render":true}],"nm":"Vector","np":2,"cix":2,"bm":0,"ix":1,"mn":"ADBE Vector Group","hd":false,"_render":true}],"ip":0,"op":300,"st":0,"bm":0,"completed":true},{"ddd":0,"ind":6,"ty":4,"nm":"Vector","sr":1,"ks":{"o":{"a":0,"k":100,"ix":11},"r":{"a":0,"k":0,"ix":10},"p":{"s":true,"x":{"a":1,"k":[{"i":{"x":[0],"y":[1]},"o":{"x":[0.9],"y":[0]},"t":13,"s":[1851.529]},{"t":47,"s":[1851.529]}],"ix":3},"y":{"a":1,"k":[{"i":{"x":[0],"y":[1.559]},"o":{"x":[0.9],"y":[0]},"t":13,"s":[2217.331]},{"t":47,"s":[1625.331]}],"ix":4}},"a":{"a":0,"k":[0,0,0],"ix":1},"s":{"a":0,"k":[100,100,100],"ix":6}},"ao":0,"shapes":[{"ty":"gr","it":[{"ind":0,"ty":"sh","ix":1,"ks":{"a":0,"k":{"i":[[-19.319,-2.1079999999999988],[-19.319,10.379999999999999],[19.241,11.11],[19.319,9.732000000000001],[10.672,-11.11]],"o":[[-19.319,9.732000000000001],[-19.241,11.11],[19.319,10.460999999999999],[19.319,-2.1079999999999988],[-10.672,-11.11]],"v":[[-19.319,9.002],[-19.241,11.11],[19.241,11.11],[19.319,9.002],[0,-11.11]],"c":true},"ix":2},"nm":"Path 1","mn":"ADBE Vector Shape - Group","hd":false,"_render":true},{"ty":"fl","c":{"a":0,"k":[0.1804,0.0118,0.898,1],"ix":4},"o":{"a":0,"k":100,"ix":5},"r":1,"bm":0,"nm":"Fill 1","mn":"ADBE Vector Graphic - Fill","hd":false,"_render":true},{"ty":"tr","p":{"a":0,"k":[0,0],"ix":2},"a":{"a":0,"k":[0,0],"ix":1},"s":{"a":0,"k":[300,300],"ix":3},"r":{"a":0,"k":0,"ix":6},"o":{"a":0,"k":100,"ix":7},"sk":{"a":0,"k":0,"ix":4},"sa":{"a":0,"k":0,"ix":5},"nm":"Transform","_render":true}],"nm":"Vector","np":2,"cix":2,"bm":0,"ix":1,"mn":"ADBE Vector Group","hd":false,"_render":true}],"ip":0,"op":300,"st":0,"bm":0,"completed":true},{"ddd":0,"ind":7,"ty":4,"nm":"Vector","sr":1,"ks":{"o":{"a":0,"k":100,"ix":11},"r":{"a":0,"k":0,"ix":10},"p":{"s":true,"x":{"a":1,"k":[{"i":{"x":[0],"y":[1]},"o":{"x":[0.9],"y":[0]},"t":13,"s":[1895.672]},{"t":47,"s":[1895.672]}],"ix":3},"y":{"a":1,"k":[{"i":{"x":[0],"y":[1.559]},"o":{"x":[0.9],"y":[0]},"t":13,"s":[2216.889]},{"t":47,"s":[1624.889]}],"ix":4}},"a":{"a":0,"k":[0,0,0],"ix":1},"s":{"a":0,"k":[100,100,100],"ix":6}},"ao":0,"shapes":[{"ty":"gr","it":[{"ind":0,"ty":"sh","ix":1,"ks":{"a":0,"k":{"i":[[14.033,-10.963],[-14.033,-10.963],[-14.033,10.963],[14.033,10.963]],"o":[[14.033,-10.963],[-14.033,-10.963],[-14.033,10.963],[14.033,10.963]],"v":[[14.033,-10.963],[-14.033,-10.963],[-14.033,10.963],[14.033,10.963]],"c":true},"ix":2},"nm":"Path 1","mn":"ADBE Vector Shape - Group","hd":false,"_render":true},{"ty":"fl","c":{"a":0,"k":[1,0.5569,0.9255,1],"ix":4},"o":{"a":0,"k":100,"ix":5},"r":1,"bm":0,"nm":"Fill 1","mn":"ADBE Vector Graphic - Fill","hd":false,"_render":true},{"ty":"tr","p":{"a":0,"k":[0,0],"ix":2},"a":{"a":0,"k":[0,0],"ix":1},"s":{"a":0,"k":[300,300],"ix":3},"r":{"a":0,"k":0,"ix":6},"o":{"a":0,"k":100,"ix":7},"sk":{"a":0,"k":0,"ix":4},"sa":{"a":0,"k":0,"ix":5},"nm":"Transform","_render":true}],"nm":"Vector","np":2,"cix":2,"bm":0,"ix":1,"mn":"ADBE Vector Group","hd":false,"_render":true}],"ip":0,"op":300,"st":0,"bm":0,"completed":true},{"ddd":0,"ind":8,"ty":4,"nm":"Vector","sr":1,"ks":{"o":{"a":0,"k":100,"ix":11},"r":{"a":0,"k":0,"ix":10},"p":{"s":true,"x":{"a":1,"k":[{"i":{"x":[0],"y":[1]},"o":{"x":[0.9],"y":[0]},"t":13,"s":[2092.073]},{"t":47,"s":[2092.073]}],"ix":3},"y":{"a":1,"k":[{"i":{"x":[0],"y":[1.559]},"o":{"x":[0.9],"y":[0]},"t":13,"s":[2410.499]},{"t":47,"s":[1818.499]}],"ix":4}},"a":{"a":0,"k":[0,0,0],"ix":1},"s":{"a":0,"k":[100,100,100],"ix":6}},"ao":0,"shapes":[{"ty":"gr","it":[{"ind":0,"ty":"sh","ix":1,"ks":{"a":0,"k":{"i":[[-13.178999999999998,-75.5],[60.5,-60.361000000000004],[60.5,28.725],[57.886,65.019],[42.428,75.5],[-14.957999999999998,75.5],[-48.656,73.17099999999999],[-60.5,59.456],[-60.5,-75.5]],"o":[[43.373,-75.5],[60.5,-12.551000000000002],[60.5,59.456],[48.656,73.236],[14.957999999999998,75.5],[-42.372,75.5],[-57.886,65.019],[-60.5,53.698],[-60.5,-75.5]],"v":[[22.298,-75.5],[60.5,-41.664],[60.5,53.698],[53.271,69.095],[35.866,75.5],[-35.866,75.5],[-53.271,69.095],[-60.5,53.698],[-60.5,-75.5]],"c":true},"ix":2},"nm":"Path 1","mn":"ADBE Vector Shape - Group","hd":false,"_render":true},{"ty":"fl","c":{"a":0,"k":[1,0.5569,0.9255,1],"ix":4},"o":{"a":0,"k":100,"ix":5},"r":1,"bm":0,"nm":"Fill 1","mn":"ADBE Vector Graphic - Fill","hd":false,"_render":true},{"ty":"tr","p":{"a":0,"k":[0,0],"ix":2},"a":{"a":0,"k":[0,0],"ix":1},"s":{"a":0,"k":[300,300],"ix":3},"r":{"a":0,"k":0,"ix":6},"o":{"a":0,"k":100,"ix":7},"sk":{"a":0,"k":0,"ix":4},"sa":{"a":0,"k":0,"ix":5},"nm":"Transform","_render":true}],"nm":"Vector","np":2,"cix":2,"bm":0,"ix":1,"mn":"ADBE Vector Group","hd":false,"_render":true}],"ip":0,"op":300,"st":0,"bm":0,"completed":true}]}],"layers":[{"ddd":0,"ind":1,"ty":0,"nm":"Beneficiary Addition Success Message","refId":"comp_0","sr":1,"ks":{"o":{"a":0,"k":100,"ix":11},"r":{"a":0,"k":0,"ix":10},"p":{"a":0,"k":[332,145,0],"ix":2},"a":{"a":0,"k":[2160,1642.5,0],"ix":1},"s":{"a":0,"k":[67,67,100],"ix":6}},"ao":0,"w":4320,"h":3285,"ip":0,"op":300,"st":0,"bm":0,"completed":true,"layers":[{"ddd":0,"ind":1,"ty":4,"nm":"Shape Layer 1","sr":1,"ks":{"o":{"a":0,"k":100,"ix":11},"r":{"a":0,"k":0,"ix":10},"p":{"a":0,"k":[2161,1643,0],"ix":2},"a":{"a":0,"k":[0,0,0],"ix":1},"s":{"a":0,"k":[100,100,100],"ix":6}},"ao":0,"shapes":[{"ty":"gr","it":[{"ind":0,"ty":"sh","ix":1,"ks":{"a":0,"k":{"i":[[84.5,-13.5],[104.5,12],[149.5,-42]],"o":[[84.5,-13.5],[104.5,12],[149.5,-42]],"v":[[84.5,-13.5],[104.5,12],[149.5,-42]],"c":false},"ix":2},"nm":"Path 1","mn":"ADBE Vector Shape - Group","hd":false},{"ty":"tm","s":{"a":0,"k":0,"ix":1},"e":{"a":1,"k":[{"i":{"x":[0.34],"y":[1]},"o":{"x":[0.66],"y":[0]},"t":82,"s":[0]},{"t":92,"s":[100]}],"ix":2},"o":{"a":0,"k":0,"ix":3},"m":1,"ix":2,"nm":"Trim Paths 1","mn":"ADBE Vector Filter - Trim","hd":false},{"ty":"st","c":{"a":0,"k":[0.9961,0.9529,0.8667,1],"ix":3},"o":{"a":0,"k":100,"ix":4},"w":{"a":0,"k":20,"ix":5},"lc":2,"lj":1,"ml":4,"bm":0,"nm":"Stroke 1","mn":"ADBE Vector Graphic - Stroke","hd":false},{"ty":"tr","p":{"a":0,"k":[0,0],"ix":2},"a":{"a":0,"k":[0,0],"ix":1},"s":{"a":0,"k":[100,100],"ix":3},"r":{"a":0,"k":0,"ix":6},"o":{"a":0,"k":100,"ix":7},"sk":{"a":0,"k":0,"ix":4},"sa":{"a":0,"k":0,"ix":5},"nm":"Transform"}],"nm":"Shape 1","np":3,"cix":2,"bm":3,"ix":1,"mn":"ADBE Vector Group","hd":false}],"ip":31,"op":331,"st":31,"bm":0,"completed":true},{"ddd":0,"ind":2,"ty":4,"nm":"Ellipse 13","sr":1,"ks":{"o":{"a":0,"k":100,"ix":11},"r":{"a":0,"k":0,"ix":10},"p":{"a":0,"k":[2274.287,1629.819,0],"ix":2},"a":{"a":0,"k":[0,0,0],"ix":1},"s":{"a":1,"k":[{"i":{"x":[0.34,0.34,0.34],"y":[1,1,1]},"o":{"x":[0.66,0.66,0.66],"y":[0,0,0]},"t":46,"s":[0,0,100]},{"i":{"x":[0.34,0.34,0.34],"y":[1,1,1]},"o":{"x":[0.66,0.66,0.66],"y":[0,0,0]},"t":66,"s":[100,100,100]},{"i":{"x":[0.34,0.34,0.34],"y":[1,1,1]},"o":{"x":[0.66,0.66,0.66],"y":[0,0,0]},"t":77,"s":[100,100,100]},{"i":{"x":[0,0,0],"y":[1.881,1.881,1]},"o":{"x":[0.5,0.5,0.5],"y":[-3.8,-3.8,0]},"t":88,"s":[79,79,100]},{"t":107,"s":[100,100,100]}],"ix":6}},"ao":0,"shapes":[{"ty":"gr","it":[{"d":1,"ty":"el","s":{"a":0,"k":[66.656,66.656],"ix":2},"p":{"a":0,"k":[0,0],"ix":3},"nm":"Ellipse Path 1","mn":"ADBE Vector Shape - Ellipse","hd":false},{"ty":"st","c":{"a":0,"k":[0.9961,0.9529,0.8667,1],"ix":3},"o":{"a":0,"k":100,"ix":4},"w":{"a":0,"k":4,"ix":5},"lc":1,"lj":1,"ml":4,"bm":0,"nm":"Stroke 1","mn":"ADBE Vector Graphic - Stroke","hd":false},{"ty":"fl","c":{"a":0,"k":[0.9523,0.9241,0.8677,1],"ix":4},"o":{"a":0,"k":100,"ix":5},"r":1,"bm":0,"nm":"Fill 1","mn":"ADBE Vector Graphic - Fill","hd":false},{"ty":"tr","p":{"a":0,"k":[0,0],"ix":2},"a":{"a":0,"k":[0,0],"ix":1},"s":{"a":0,"k":[300,300],"ix":3},"r":{"a":0,"k":0,"ix":6},"o":{"a":0,"k":100,"ix":7},"sk":{"a":0,"k":0,"ix":4},"sa":{"a":0,"k":0,"ix":5},"nm":"Transform"}],"nm":"Ellipse 13","np":3,"cix":2,"bm":0,"ix":1,"mn":"ADBE Vector Group","hd":false}],"ip":31,"op":331,"st":31,"bm":1,"completed":true},{"ddd":0,"ind":3,"ty":0,"nm":"Pre-comp 1","refId":"comp_1","sr":1,"ks":{"o":{"a":0,"k":100,"ix":11},"r":{"a":0,"k":0,"ix":10},"p":{"a":0,"k":[2160,1642.5,0],"ix":2},"a":{"a":0,"k":[2160,1642.5,0],"ix":1},"s":{"a":0,"k":[100,100,100],"ix":6}},"ao":0,"w":4320,"h":3285,"ip":0,"op":300,"st":0,"bm":0,"completed":true,"layers":[{"ddd":0,"ind":1,"ty":4,"nm":"Vector","sr":1,"ks":{"o":{"a":0,"k":100,"ix":11},"r":{"a":1,"k":[{"i":{"x":[0.24],"y":[1]},"o":{"x":[0.76],"y":[0]},"t":10,"s":[0]},{"i":{"x":[0.24],"y":[1]},"o":{"x":[0.76],"y":[0]},"t":45,"s":[180]},{"i":{"x":[0.24],"y":[1]},"o":{"x":[0.76],"y":[0]},"t":75,"s":[180]},{"t":109,"s":[360]}],"ix":10},"p":{"s":true,"x":{"a":1,"k":[{"i":{"x":[0],"y":[1]},"o":{"x":[0.9],"y":[0]},"t":13,"s":[1889.561]},{"t":33,"s":[1889.561]}],"ix":3},"y":{"a":1,"k":[{"i":{"x":[0],"y":[1.681]},"o":{"x":[0.9],"y":[0]},"t":13,"s":[2564.988]},{"t":33,"s":[1972.988]}],"ix":4}},"a":{"a":0,"k":[0,0,0],"ix":1},"s":{"a":0,"k":[100,100,100],"ix":6}},"ao":0,"shapes":[{"ty":"gr","it":[{"ind":0,"ty":"sh","ix":1,"ks":{"a":0,"k":{"i":[[13.093,-17.389000000000003],[-4.196999999999999,-26.292],[-17.352999999999998,-13.125],[-26.290999999999997,4.18],[-13.093,17.389000000000003],[4.196999999999999,26.292],[17.395,13.125],[26.290999999999997,-4.18]],"o":[[4.196999999999999,-26.292],[-13.093,-17.389000000000003],[-26.290999999999997,-4.2219999999999995],[-17.352999999999998,13.125],[-4.196999999999999,26.292],[13.135,17.389000000000003],[26.290999999999997,4.2219999999999995],[17.352999999999998,-13.125]],"v":[[9.376,-21.109],[-9.376,-21.109],[-21.112,-9.405],[-21.112,9.363],[-9.376,21.109],[9.376,21.109],[21.112,9.405],[21.112,-9.363]],"c":true},"ix":2},"nm":"Path 1","mn":"ADBE Vector Shape - Group","hd":false,"_render":true},{"ind":1,"ty":"sh","ix":2,"ks":{"a":0,"k":{"i":[[10.88,6.019],[6.035,-10.868],[-10.838,-5.977],[-5.993,10.868]],"o":[[10.88,-5.977],[-5.993,-10.868],[-10.838,5.977],[5.993,10.868]],"v":[[10.88,0],[0.021,-10.868],[-10.838,0],[0.021,10.868]],"c":true},"ix":2},"nm":"Path 2","mn":"ADBE Vector Shape - Group","hd":false,"_render":true},{"ty":"mm","mm":1,"nm":"Merge Paths 1","mn":"ADBE Vector Filter - Merge","hd":false,"_render":true},{"ty":"fl","c":{"a":0,"k":[0.884,0.316,0.884,1],"ix":4},"o":{"a":0,"k":100,"ix":5},"r":1,"bm":0,"nm":"Fill 1","mn":"ADBE Vector Graphic - Fill","hd":false,"_render":true},{"ty":"tr","p":{"a":0,"k":[0,0],"ix":2},"a":{"a":0,"k":[0,0],"ix":1},"s":{"a":0,"k":[300,300],"ix":3},"r":{"a":0,"k":0,"ix":6},"o":{"a":0,"k":100,"ix":7},"sk":{"a":0,"k":0,"ix":4},"sa":{"a":0,"k":0,"ix":5},"nm":"Transform","_render":true}],"nm":"Vector","np":4,"cix":2,"bm":0,"ix":1,"mn":"ADBE Vector Group","hd":false,"_render":true}],"ip":0,"op":300,"st":0,"bm":1,"completed":true},{"ddd":0,"ind":2,"ty":4,"nm":"Ellipse 16","sr":1,"ks":{"o":{"a":0,"k":15,"ix":11},"r":{"a":0,"k":0,"ix":10},"p":{"s":true,"x":{"a":1,"k":[{"i":{"x":[0],"y":[1]},"o":{"x":[0.9],"y":[0]},"t":13,"s":[2435.926]},{"t":38,"s":[2435.926]}],"ix":3},"y":{"a":1,"k":[{"i":{"x":[0],"y":[1.637]},"o":{"x":[0.9],"y":[0]},"t":13,"s":[2258.47]},{"t":38,"s":[1858.47]}],"ix":4}},"a":{"a":0,"k":[0,0,0],"ix":1},"s":{"a":0,"k":[100,100,100],"ix":6}},"ao":0,"shapes":[{"ty":"gr","it":[{"d":1,"ty":"el","s":{"a":0,"k":[37.713,37.713],"ix":2},"p":{"a":0,"k":[0,0],"ix":3},"nm":"Ellipse Path 1","mn":"ADBE Vector Shape - Ellipse","hd":false,"_render":true},{"ty":"st","c":{"a":0,"k":[0.9882,0.8235,0.9882,1],"ix":3},"o":{"a":0,"k":100,"ix":4},"w":{"a":0,"k":12,"ix":5},"lc":1,"lj":1,"ml":4,"bm":0,"nm":"Stroke 1","mn":"ADBE Vector Graphic - Stroke","hd":false,"_render":true},{"ty":"tr","p":{"a":0,"k":[0,0],"ix":2},"a":{"a":0,"k":[0,0],"ix":1},"s":{"a":0,"k":[300,300],"ix":3},"r":{"a":0,"k":0,"ix":6},"o":{"a":0,"k":100,"ix":7},"sk":{"a":0,"k":0,"ix":4},"sa":{"a":0,"k":0,"ix":5},"nm":"Transform","_render":true}],"nm":"Ellipse 16","np":2,"cix":2,"bm":0,"ix":1,"mn":"ADBE Vector Group","hd":false,"_render":true}],"ip":0,"op":300,"st":0,"bm":0,"completed":true},{"ddd":0,"ind":3,"ty":4,"nm":"Ellipse 15","sr":1,"ks":{"o":{"a":0,"k":29,"ix":11},"r":{"a":0,"k":0,"ix":10},"p":{"s":true,"x":{"a":1,"k":[{"i":{"x":[0],"y":[1]},"o":{"x":[0.9],"y":[0]},"t":13,"s":[1796.943]},{"t":32,"s":[1796.943]}],"ix":3},"y":{"a":1,"k":[{"i":{"x":[0],"y":[1.5]},"o":{"x":[0.9],"y":[0]},"t":13,"s":[2442.836]},{"t":32,"s":[1850.836]}],"ix":4}},"a":{"a":0,"k":[0,0,0],"ix":1},"s":{"a":1,"k":[{"i":{"x":[0.5,0.5,0.5],"y":[1.312,1.312,1]},"o":{"x":[0.5,0.5,0.5],"y":[-0.312,-0.312,0]},"t":24,"s":[100,100,100]},{"i":{"x":[0.5,0.5,0.5],"y":[1.286,1.286,1]},"o":{"x":[0.5,0.5,0.5],"y":[-0.286,-0.286,0]},"t":39,"s":[55,55,100]},{"i":{"x":[0.5,0.5,0.5],"y":[1,1,1]},"o":{"x":[0.167,0.167,0.167],"y":[0,0,0]},"t":53,"s":[100,100,100]},{"i":{"x":[0.5,0.5,0.5],"y":[1,1,1]},"o":{"x":[0.167,0.167,0.167],"y":[0,0,0]},"t":112,"s":[100,100,100]},{"i":{"x":[0.5,0.5,0.5],"y":[1,1,1]},"o":{"x":[0.5,0.5,0.5],"y":[0,0,0]},"t":128,"s":[55,55,100]},{"t":145,"s":[100,100,100]}],"ix":6}},"ao":0,"shapes":[{"ty":"gr","it":[{"d":1,"ty":"el","s":{"a":0,"k":[19.295,19.295],"ix":2},"p":{"a":0,"k":[0,0],"ix":3},"nm":"Ellipse Path 1","mn":"ADBE Vector Shape - Ellipse","hd":false,"_render":true},{"ty":"st","c":{"a":0,"k":[0.9882,0.8235,0.9882,1],"ix":3},"o":{"a":0,"k":100,"ix":4},"w":{"a":0,"k":7,"ix":5},"lc":1,"lj":1,"ml":4,"bm":0,"nm":"Stroke 1","mn":"ADBE Vector Graphic - Stroke","hd":false,"_render":true},{"ty":"tr","p":{"a":0,"k":[0,0],"ix":2},"a":{"a":0,"k":[0,0],"ix":1},"s":{"a":0,"k":[300,300],"ix":3},"r":{"a":0,"k":0,"ix":6},"o":{"a":0,"k":100,"ix":7},"sk":{"a":0,"k":0,"ix":4},"sa":{"a":0,"k":0,"ix":5},"nm":"Transform","_render":true}],"nm":"Ellipse 15","np":2,"cix":2,"bm":0,"ix":1,"mn":"ADBE Vector Group","hd":false,"_render":true}],"ip":0,"op":300,"st":0,"bm":0,"completed":true},{"ddd":0,"ind":4,"ty":4,"nm":"Vector","sr":1,"ks":{"o":{"a":0,"k":100,"ix":11},"r":{"a":0,"k":0,"ix":10},"p":{"s":true,"x":{"a":1,"k":[{"i":{"x":[0],"y":[1]},"o":{"x":[0.9],"y":[0]},"t":13,"s":[2092.288]},{"t":50,"s":[2092.288]}],"ix":3},"y":{"a":1,"k":[{"i":{"x":[0],"y":[1.579]},"o":{"x":[0.9],"y":[0]},"t":13,"s":[2372.207]},{"t":50,"s":[1780.207]}],"ix":4}},"a":{"a":0,"k":[0,0,0],"ix":1},"s":{"a":0,"k":[100,100,100],"ix":6}},"ao":0,"shapes":[{"ty":"gr","it":[{"ind":0,"ty":"sh","ix":1,"ks":{"a":0,"k":{"i":[[-5.929,10.736],[10.736,5.929],[5.929,-10.736],[-10.736,-5.929]],"o":[[5.929,10.736],[10.736,-5.929],[-5.929,-10.736],[-10.736,5.929]],"v":[[0,10.736],[10.736,0],[0,-10.736],[-10.736,0]],"c":true},"ix":2},"nm":"Path 1","mn":"ADBE Vector Shape - Group","hd":false,"_render":true},{"ty":"fl","c":{"a":0,"k":[0.9961,0.9529,0.8667,1],"ix":4},"o":{"a":0,"k":100,"ix":5},"r":1,"bm":0,"nm":"Fill 1","mn":"ADBE Vector Graphic - Fill","hd":false,"_render":true},{"ty":"tr","p":{"a":0,"k":[0,0],"ix":2},"a":{"a":0,"k":[0,0],"ix":1},"s":{"a":0,"k":[300,300],"ix":3},"r":{"a":0,"k":0,"ix":6},"o":{"a":0,"k":100,"ix":7},"sk":{"a":0,"k":0,"ix":4},"sa":{"a":0,"k":0,"ix":5},"nm":"Transform","_render":true}],"nm":"Vector","np":2,"cix":2,"bm":0,"ix":1,"mn":"ADBE Vector Group","hd":false,"_render":true}],"ip":0,"op":300,"st":0,"bm":0,"completed":true},{"ddd":0,"ind":5,"ty":4,"nm":"Vector","sr":1,"ks":{"o":{"a":0,"k":100,"ix":11},"r":{"a":0,"k":0,"ix":10},"p":{"s":true,"x":{"a":1,"k":[{"i":{"x":[0],"y":[1]},"o":{"x":[0.9],"y":[0]},"t":13,"s":[2092.417]},{"t":50,"s":[2092.417]}],"ix":3},"y":{"a":1,"k":[{"i":{"x":[0],"y":[1.579]},"o":{"x":[0.9],"y":[0]},"t":13,"s":[2448.281]},{"t":50,"s":[1856.281]}],"ix":4}},"a":{"a":0,"k":[0,0,0],"ix":1},"s":{"a":0,"k":[100,100,100],"ix":6}},"ao":0,"shapes":[{"ty":"gr","it":[{"ind":0,"ty":"sh","ix":1,"ks":{"a":0,"k":{"i":[[-20.615,-2.1609999999999996],[-20.613999999999997,10.64],[20.531,11.388],[20.615,9.975],[11.388,-11.388]],"o":[[-20.615,9.975],[-20.531,11.388],[20.613999999999997,10.722999999999999],[20.615,-2.1609999999999996],[-11.388,-11.388]],"v":[[-20.615,9.227],[-20.531,11.388],[20.531,11.388],[20.615,9.227],[0,-11.388]],"c":true},"ix":2},"nm":"Path 1","mn":"ADBE Vector Shape - Group","hd":false,"_render":true},{"ty":"fl","c":{"a":0,"k":[0.9961,0.9529,0.8667,1],"ix":4},"o":{"a":0,"k":100,"ix":5},"r":1,"bm":0,"nm":"Fill 1","mn":"ADBE Vector Graphic - Fill","hd":false,"_render":true},{"ty":"tr","p":{"a":0,"k":[0,0],"ix":2},"a":{"a":0,"k":[0,0],"ix":1},"s":{"a":0,"k":[300,300],"ix":3},"r":{"a":0,"k":0,"ix":6},"o":{"a":0,"k":100,"ix":7},"sk":{"a":0,"k":0,"ix":4},"sa":{"a":0,"k":0,"ix":5},"nm":"Transform","_render":true}],"nm":"Vector","np":2,"cix":2,"bm":0,"ix":1,"mn":"ADBE Vector Group","hd":false,"_render":true}],"ip":0,"op":300,"st":0,"bm":0,"completed":true},{"ddd":0,"ind":6,"ty":4,"nm":"Vector","sr":1,"ks":{"o":{"a":0,"k":100,"ix":11},"r":{"a":0,"k":0,"ix":10},"p":{"s":true,"x":{"a":1,"k":[{"i":{"x":[0],"y":[1]},"o":{"x":[0.9],"y":[0]},"t":13,"s":[1851.529]},{"t":47,"s":[1851.529]}],"ix":3},"y":{"a":1,"k":[{"i":{"x":[0],"y":[1.559]},"o":{"x":[0.9],"y":[0]},"t":13,"s":[2217.331]},{"t":47,"s":[1625.331]}],"ix":4}},"a":{"a":0,"k":[0,0,0],"ix":1},"s":{"a":0,"k":[100,100,100],"ix":6}},"ao":0,"shapes":[{"ty":"gr","it":[{"ind":0,"ty":"sh","ix":1,"ks":{"a":0,"k":{"i":[[-19.319,-2.1079999999999988],[-19.319,10.379999999999999],[19.241,11.11],[19.319,9.732000000000001],[10.672,-11.11]],"o":[[-19.319,9.732000000000001],[-19.241,11.11],[19.319,10.460999999999999],[19.319,-2.1079999999999988],[-10.672,-11.11]],"v":[[-19.319,9.002],[-19.241,11.11],[19.241,11.11],[19.319,9.002],[0,-11.11]],"c":true},"ix":2},"nm":"Path 1","mn":"ADBE Vector Shape - Group","hd":false,"_render":true},{"ty":"fl","c":{"a":0,"k":[0.1804,0.0118,0.898,1],"ix":4},"o":{"a":0,"k":100,"ix":5},"r":1,"bm":0,"nm":"Fill 1","mn":"ADBE Vector Graphic - Fill","hd":false,"_render":true},{"ty":"tr","p":{"a":0,"k":[0,0],"ix":2},"a":{"a":0,"k":[0,0],"ix":1},"s":{"a":0,"k":[300,300],"ix":3},"r":{"a":0,"k":0,"ix":6},"o":{"a":0,"k":100,"ix":7},"sk":{"a":0,"k":0,"ix":4},"sa":{"a":0,"k":0,"ix":5},"nm":"Transform","_render":true}],"nm":"Vector","np":2,"cix":2,"bm":0,"ix":1,"mn":"ADBE Vector Group","hd":false,"_render":true}],"ip":0,"op":300,"st":0,"bm":0,"completed":true},{"ddd":0,"ind":7,"ty":4,"nm":"Vector","sr":1,"ks":{"o":{"a":0,"k":100,"ix":11},"r":{"a":0,"k":0,"ix":10},"p":{"s":true,"x":{"a":1,"k":[{"i":{"x":[0],"y":[1]},"o":{"x":[0.9],"y":[0]},"t":13,"s":[1895.672]},{"t":47,"s":[1895.672]}],"ix":3},"y":{"a":1,"k":[{"i":{"x":[0],"y":[1.559]},"o":{"x":[0.9],"y":[0]},"t":13,"s":[2216.889]},{"t":47,"s":[1624.889]}],"ix":4}},"a":{"a":0,"k":[0,0,0],"ix":1},"s":{"a":0,"k":[100,100,100],"ix":6}},"ao":0,"shapes":[{"ty":"gr","it":[{"ind":0,"ty":"sh","ix":1,"ks":{"a":0,"k":{"i":[[14.033,-10.963],[-14.033,-10.963],[-14.033,10.963],[14.033,10.963]],"o":[[14.033,-10.963],[-14.033,-10.963],[-14.033,10.963],[14.033,10.963]],"v":[[14.033,-10.963],[-14.033,-10.963],[-14.033,10.963],[14.033,10.963]],"c":true},"ix":2},"nm":"Path 1","mn":"ADBE Vector Shape - Group","hd":false,"_render":true},{"ty":"fl","c":{"a":0,"k":[1,0.5569,0.9255,1],"ix":4},"o":{"a":0,"k":100,"ix":5},"r":1,"bm":0,"nm":"Fill 1","mn":"ADBE Vector Graphic - Fill","hd":false,"_render":true},{"ty":"tr","p":{"a":0,"k":[0,0],"ix":2},"a":{"a":0,"k":[0,0],"ix":1},"s":{"a":0,"k":[300,300],"ix":3},"r":{"a":0,"k":0,"ix":6},"o":{"a":0,"k":100,"ix":7},"sk":{"a":0,"k":0,"ix":4},"sa":{"a":0,"k":0,"ix":5},"nm":"Transform","_render":true}],"nm":"Vector","np":2,"cix":2,"bm":0,"ix":1,"mn":"ADBE Vector Group","hd":false,"_render":true}],"ip":0,"op":300,"st":0,"bm":0,"completed":true},{"ddd":0,"ind":8,"ty":4,"nm":"Vector","sr":1,"ks":{"o":{"a":0,"k":100,"ix":11},"r":{"a":0,"k":0,"ix":10},"p":{"s":true,"x":{"a":1,"k":[{"i":{"x":[0],"y":[1]},"o":{"x":[0.9],"y":[0]},"t":13,"s":[2092.073]},{"t":47,"s":[2092.073]}],"ix":3},"y":{"a":1,"k":[{"i":{"x":[0],"y":[1.559]},"o":{"x":[0.9],"y":[0]},"t":13,"s":[2410.499]},{"t":47,"s":[1818.499]}],"ix":4}},"a":{"a":0,"k":[0,0,0],"ix":1},"s":{"a":0,"k":[100,100,100],"ix":6}},"ao":0,"shapes":[{"ty":"gr","it":[{"ind":0,"ty":"sh","ix":1,"ks":{"a":0,"k":{"i":[[-13.178999999999998,-75.5],[60.5,-60.361000000000004],[60.5,28.725],[57.886,65.019],[42.428,75.5],[-14.957999999999998,75.5],[-48.656,73.17099999999999],[-60.5,59.456],[-60.5,-75.5]],"o":[[43.373,-75.5],[60.5,-12.551000000000002],[60.5,59.456],[48.656,73.236],[14.957999999999998,75.5],[-42.372,75.5],[-57.886,65.019],[-60.5,53.698],[-60.5,-75.5]],"v":[[22.298,-75.5],[60.5,-41.664],[60.5,53.698],[53.271,69.095],[35.866,75.5],[-35.866,75.5],[-53.271,69.095],[-60.5,53.698],[-60.5,-75.5]],"c":true},"ix":2},"nm":"Path 1","mn":"ADBE Vector Shape - Group","hd":false,"_render":true},{"ty":"fl","c":{"a":0,"k":[1,0.5569,0.9255,1],"ix":4},"o":{"a":0,"k":100,"ix":5},"r":1,"bm":0,"nm":"Fill 1","mn":"ADBE Vector Graphic - Fill","hd":false,"_render":true},{"ty":"tr","p":{"a":0,"k":[0,0],"ix":2},"a":{"a":0,"k":[0,0],"ix":1},"s":{"a":0,"k":[300,300],"ix":3},"r":{"a":0,"k":0,"ix":6},"o":{"a":0,"k":100,"ix":7},"sk":{"a":0,"k":0,"ix":4},"sa":{"a":0,"k":0,"ix":5},"nm":"Transform","_render":true}],"nm":"Vector","np":2,"cix":2,"bm":0,"ix":1,"mn":"ADBE Vector Group","hd":false,"_render":true}],"ip":0,"op":300,"st":0,"bm":0,"completed":true}]},{"ddd":0,"ind":4,"ty":4,"nm":"Ellipse 14","sr":1,"ks":{"o":{"a":0,"k":38,"ix":11},"r":{"a":0,"k":0,"ix":10},"p":{"a":0,"k":[2275,1629.5,0],"ix":2},"a":{"a":0,"k":[0,0,0],"ix":1},"s":{"a":1,"k":[{"i":{"x":[0.34,0.34,0.34],"y":[1,1,1]},"o":{"x":[0.66,0.66,0.66],"y":[0,0,0]},"t":41,"s":[0,0,100]},{"i":{"x":[0.34,0.34,0.34],"y":[1,1,1]},"o":{"x":[0.66,0.66,0.66],"y":[0,0,0]},"t":61,"s":[109,109,100]},{"i":{"x":[0.34,0.34,0.34],"y":[1,1,1]},"o":{"x":[0.66,0.66,0.66],"y":[0,0,0]},"t":81,"s":[100,100,100]},{"i":{"x":[0.5,0.5,0.5],"y":[4.422,4.422,1]},"o":{"x":[0.5,0.5,0.5],"y":[-3.422,-3.422,0]},"t":92,"s":[73,73,100]},{"t":114,"s":[100,100,100]}],"ix":6}},"ao":0,"shapes":[{"ty":"gr","it":[{"d":1,"ty":"el","s":{"a":0,"k":[94,95],"ix":2},"p":{"a":0,"k":[0,0],"ix":3},"nm":"Ellipse Path 1","mn":"ADBE Vector Shape - Ellipse","hd":false},{"ty":"st","c":{"a":0,"k":[0.9286,0.3914,0.9286,1],"ix":3},"o":{"a":0,"k":100,"ix":4},"w":{"a":0,"k":4,"ix":5},"lc":1,"lj":1,"ml":4,"bm":0,"nm":"Stroke 1","mn":"ADBE Vector Graphic - Stroke","hd":false},{"ty":"fl","c":{"a":0,"k":[1,0.66,1,1],"ix":4},"o":{"a":0,"k":100,"ix":5},"r":1,"bm":0,"nm":"Fill 1","mn":"ADBE Vector Graphic - Fill","hd":false},{"ty":"tr","p":{"a":0,"k":[0,0],"ix":2},"a":{"a":0,"k":[0,0],"ix":1},"s":{"a":0,"k":[300,300],"ix":3},"r":{"a":0,"k":0,"ix":6},"o":{"a":0,"k":100,"ix":7},"sk":{"a":0,"k":0,"ix":4},"sa":{"a":0,"k":0,"ix":5},"nm":"Transform"}],"nm":"Ellipse 14","np":3,"cix":2,"bm":0,"ix":1,"mn":"ADBE Vector Group","hd":false}],"ip":31,"op":331,"st":31,"bm":1,"completed":true}]}],"markers":[],"__complete":true}');

/***/ })

},
/******/ function(__webpack_require__) { // webpackRuntimeModules
/******/ var __webpack_exec__ = function(moduleId) { return __webpack_require__(__webpack_require__.s = moduleId); }
/******/ __webpack_require__.O(0, ["main-app"], function() { return __webpack_exec__("(app-pages-browser)/./node_modules/next/dist/build/webpack/loaders/next-flight-client-entry-loader.js?modules=%2FUsers%2Frisalestari%2FDocuments%2Fgaruda%2Fsrc%2Fapp%2Fsign-in%2F%5B%5B...sign-in%5D%5D%2Fpage.tsx&server=false!"); });
/******/ var __webpack_exports__ = __webpack_require__.O();
/******/ _N_E = __webpack_exports__;
/******/ }
]);